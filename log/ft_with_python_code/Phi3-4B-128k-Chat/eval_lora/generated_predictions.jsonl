{"prompt": "Create a function to calculate the sum of a sequence of integers.\n[1, 2, 3, 4, 5] \n", "label": "# Python code\ndef sum_sequence(sequence):\n  sum = 0\n  for num in sequence:\n    sum += num\n  return sum", "predict": "def sum_sequence(sequence):\n    sum = 0\n    for i in sequence:\n        sum += i\n    return sum\n\nsequence = [1, 2, 3, 4, 5]\nprint(sum_sequence(sequence)) # 15"}
{"prompt": "Generate a Python code for crawling a website for a specific type of data.\nwebsite: www.example.com \ndata to crawl: phone numbers \n", "label": "import requests\nimport re\n\ndef crawl_website_for_phone_numbers(website):\n    response = requests.get(website)\n    phone_numbers = re.findall('\\d{3}-\\d{3}-\\d{4}', response.text)\n    return phone_numbers\n    \nif __name__ == '__main__':\n    print(crawl_website_for_phone_numbers('www.example.com'))", "predict": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.example.com'\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\n\nphone_numbers = []\nfor element in soup.find_all('div', {'class': 'phone'}):\n phone_numbers.append(element.text)\n\nprint(phone_numbers)"}
{"prompt": "Create a Python list comprehension to get the squared values of a list [1, 2, 3, 5, 8, 13]. \n", "label": "[x*x for x in [1, 2, 3, 5, 8, 13]]", "predict": "[x**2 for x in [1, 2, 3, 5, 8, 13]]"}
{"prompt": "Generate a python script to perform this action.\nGiven a string, remove all the consecutive duplicates from the string.\n\nInput: \"AAABBCCCD\" \n", "label": "def remove_duplicates(string): \n    result = \"\" \n    prev = '' \n\n    for char in string:\n        if char != prev: \n            result += char\n            prev = char\n    return result\n\nresult = remove_duplicates(\"AAABBCCCD\")\nprint(result)", "predict": "def remove_duplicates(s):\n    res = []\n    prev = None\n    for c in s:\n        if c!= prev:\n            res.append(c)\n            prev = c\n    return ''.join(res)"}
{"prompt": "Write a python script to generates random numbers between 0 and 9 that are divisible by 3. \n", "label": "def generate_random_divisible_number():\n    import random\n    while True:\n        # Generate a random number\n        process = random.randint(0, 9)\n        # Check if the number is divisible by 3\n        if process % 3 == 0:\n            # If it is divisible, return it\n            return process", "predict": "import random\n\ndef generate_random_numbers():\n    numbers = []\n    for _ in range(10):\n        num = random.randint(0, 9)\n        if num % 3 == 0:\n            numbers.append(num)\n    return numbers\n\nrandom_numbers = generate_random_numbers()\nprint(random_numbers)"}
{"prompt": "Write a Python code to get the third largest element in a given row.\n[12, 13, 13, 45, 22, 99] \n", "label": "def third_largest(lst):\n    if len(lst) < 3:\n        return\n    distinct = []\n    for i in lst:\n        if i not in distinct:\n            distinct.append(i)\n    distinct.sort(reverse=True)\n    return distinct[2]", "predict": "def third_largest(arr):\n    largest = second_largest = float('-inf')\n    for num in arr:\n        if num > largest:\n            second_largest = largest\n            largest = num\n        elif num > second_largest and num!= largest:\n            second_largest = num\n    return second_largest\n\narr = [12, 13, 13, 45, 22, 99]\nthird_largest = third_largest(arr)\nprint(third_largest) # 45"}
{"prompt": "Generate a REST API with Python and Flask that allows users to create, read, update, and delete records from a database.\nNot applicable \n", "label": "from flask import Flask, request\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(name)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'\ndb = SQLAlchemy(app)\n\nclass Record(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n name = db.Column(db.String(120), unique=True)\n\ndb.create_all()\n\n@app.route('/records', methods=['GET'])\ndef get_records():\n records = Record.query.all()\n return {'records':[record.name for record in records]}\n\n@app.route('/records', methods=['POST'])\ndef create_record():\n record = Record(name=request.json['name'])\n db.session.add(record)\n db.session.commit()\n return {'id': record.id}\n\n@app.route('/records/int:id', methods=['PUT'])\ndef update_record(id):\n record = Record.query.get(id)\n record.name = request.json['name']\n db.session.commit()\n return {'message': 'Record updated'}\n\n@app.route('/records/int:id', methods=['DELETE'])\ndef delete_record(id):\n Record.query.filter_by(id=id).delete()\n db.session.commit()\n return {'message': 'Record deleted'}\n\nif name == 'main':\n app.run(debug=True)", "predict": "from flask import Flask, request\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] ='sqlite:////tmp/test.db'\ndb = SQLAlchemy(app)\n\nclass User(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n username = db.Column(db.String(80), unique=True, nullable=False)\n email = db.Column(db.String(120), unique=True, nullable=False)\n\n# Create a new user\n@app.route('/user', methods=['POST'])\ndef create_user():\n user = User(username=request.json['username'], email=request.json['email'])\n db.session.add(user)\n db.session.commit()\n return user.id\n\n# Get a user\n@app.route('/user/<int:user_id>', methods=['GET'])\ndef get_user(user_id):\n user = User.query.get(user_id)\n return {'username': user.username, 'email': user.email}\n\n# Update a user\n@app.route('/user/<int:user_id>', methods=['PUT'])\ndef update_user(user_id):\n user = User.query.get(user_id)\n user.username = request.json['username']\n user.email = request.json['email']\n db.session.commit()\n return {'username': user.username, 'email': user.email}\n\n# Delete a user\n@app.route('/user/<int:user_id>', methods=['DELETE'])\ndef delete_user(user_id):\n user = User.query.get(user_id)\n db.session.delete(user)\n db.session.commit()\n return {'message': 'User deleted'}"}
{"prompt": "Create a Python function that takes in a string and a list of words and returns true if the string contains all the words in the list.\n'This is a test', ['test', 'this', 'is'] \n", "label": "def contains_words(input_string, words):\n for word in words:\n if word not in input_string:\n return False\n return True\n\nprint(contains_words('This is a test', ['test', 'this', 'is'])) # True", "predict": "def contains_all(string, words):\n for word in words:\n if word not in string:\n return False\n return True\n\nprint(contains_all('This is a test', ['test', 'this', 'is']))"}
{"prompt": "What should this Python program do?\ndef is_palindrome(s):\n    '''Write your code here.''' \n", "label": "def is_palindrome(s):\n    '''This function returns True if the string s is a palindrome and False if it isn't.''' \n    return s == s[::-1]  # Checks if s is the same as its reverse.", "predict": "def is_palindrome(s):\n    '''Check if the string is a palindrome.'''\n    s = s.lower()\n    s = s.replace(\" \", \"\")\n    return s == s[::-1]"}
{"prompt": "Create a Python program to sort and print out the elements of an array of integers.\n[17, 41, 5, 22, 54, 6, 29, 3, 13] \n", "label": "arr = [17, 41, 5, 22, 54, 6, 29, 3, 13]\n\narr.sort()\n\nprint(arr)\n\n# Output: [3, 5, 6, 13, 17, 22, 29, 41, 54]", "predict": "def sort_array(arr):\n    for i in range(len(arr)):\n        min_idx = i\n        for j in range(i+1, len(arr)):\n            if arr[min_idx] > arr[j]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n    return arr\n\narr = [17, 41, 5, 22, 54, 6, 29, 3, 13]\nsorted_arr = sort_array(arr)\nprint(sorted_arr)"}
{"prompt": "Generate a Python program that adds two then doubles the result. \n", "label": "def double_add(num1, num2): \n    return (num1 + num2) * 2", "predict": "def add_and_double(a, b):\n    return (a + b) * 2"}
{"prompt": "Write a python program to extract the non-vowel words in a sentence.\nThis machine learning project is challenging. \n", "label": "def extract_words(sentence):\n    non_vowel_words = []\n    words = sentence.split()\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    for word in words:\n        if not any(char in vowels for char in word):\n            non_vowel_words.append(word) \n    return non_vowel_words", "predict": "def extract_non_vowel_words(sentence):\n    vowels = \"aeiouAEIOU\"\n    words = sentence.split()\n    non_vowel_words = []\n    for word in words:\n        is_vowel = False\n        for letter in word:\n            if letter in vowels:\n                is_vowel = True\n                break\n        if not is_vowel:\n            non_vowel_words.append(word)\n    return non_vowel_words\n\nsentence = \"This machine learning project is challenging.\"\nprint(extract_non_vowel_words(sentence))"}
{"prompt": "Write a Python program to calculate the average of a list of positive integers and output the result.\nList of positive integers: [1, 5, 6, 7, 8] \n", "label": "list_of_positive_integers = [1, 5, 6, 7, 8]\ntotal = sum(list_of_positive_integers)\n\navg = total/len(list_of_positive_integers)\n\nprint(\"The average of the list of positive integers is {}\".format(avg))", "predict": "def calculate_average(list_of_integers):\n    sum = 0\n    for i in list_of_integers:\n        sum += i\n    return sum/len(list_of_integers)\n\nlist_of_integers = [1, 5, 6, 7, 8]\naverage = calculate_average(list_of_integers)\nprint(average)"}
{"prompt": "Develop a function in Python that prints out the Pascal's triangle for a given number of rows. \n", "label": "def pascal_triangle(n): \n    trow = [1] \n    y = [0] \n    for x in range(max(n, 0)): \n        print(trow) \n        trow=[l+r for l,r in zip(trow + y, y + trow)] \n    return n>=1\n\npascal_triangle(5)", "predict": "def pascal_triangle(rows):\n    triangle = [[1]]\n    for i in range(1, rows):\n        row = [1]\n        for j in range(1, i):\n            row.append(triangle[i-1][j-1] + triangle[i-1][j])\n        row.append(1)\n        triangle.append(row)\n    return triangle"}
{"prompt": "Implement a decision-making algorithm for a rock-paper-scissors game using Python. \n", "label": "# Rock, paper, scissors game!\n\ndef play_game(player1, player2):\n    #  Define the winning rules\n    rules = {'rock': 'scissors', 'scissors': 'paper', 'paper': 'rock'}\n    if player1 == player2:\n        return 'It is a draw!'\n    elif rules[player1] == player2:\n        return 'Player 1 wins!'\n    elif rules[player2] == player1:\n        return 'Player 2 wins!'\n\n# Get user input\nplayer1 = input('Player 1, make a choice: rock, paper, or scissors? ').lower()\nplayer2 = input('Player 2, make a choice: rock, paper, or scissors? ').lower()\n\n# Start the game and get the result\nresult = play_game(player1, player2)\nprint(result)", "predict": "def decision_maker(player1, player2):\n    if player1 == 'rock' and player2 =='scissors':\n        return 'Player 1 wins'\n    elif player1 == 'paper' and player2 == 'rock':\n        return 'Player 1 wins'\n    elif player1 =='scissors' and player2 == 'paper':\n        return 'Player 1 wins'\n    elif player2 == 'rock' and player1 =='scissors':\n        return 'Player 2 wins'\n    elif player2 == 'paper' and player1 == 'rock':\n        return 'Player 2 wins'\n    elif player2 =='scissors' and player1 == 'paper':\n        return 'Player 2 wins'\n    else:\n        return 'Draw'"}
{"prompt": "Collate a machine learning model in Python that distinguishes between cats and dogs.\nA dataset of 800 images of cats and dogs \n", "label": "import numpy as np\nimport keras\nfrom keras.layers import Dense, Conv2D, MaxPooling2D, Dropout, Flatten\nfrom keras.models import Sequential\nfrom keras.preprocessing.image import ImageDataGenerator\n\n# Create the neural network model\nmodel = Sequential()\n\n# Input layer\nmodel.add(Conv2D(32, (3, 3), input_shape = (64, 64, 3), activation = 'relu'))\n\n# Hidden layers\nmodel.add(MaxPooling2D(pool_size = (2, 2)))\nmodel.add(Dropout(0.3))\nmodel.add(Conv2D(64, (3, 3), activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size = (2, 2)))\nmodel.add(Dropout(0.3))\nmodel.add(Conv2D(64, (3, 3), activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size = (2, 2)))\nmodel.add(Dropout(0.3))\n\n# Output layer\nmodel.add(Flatten())\nmodel.add(Dense(units = 128, activation = 'relu'))\nmodel.add(Dense(units = 1, activation = 'sigmoid'))\n\n# Compile the model\nmodel.compile(loss = 'binary_crossentropy', optimizer = 'adam', metrics = ['accuracy'])\n\n# Create data generator\ndatagen = ImageDataGenerator(rescale = 1./255, shear_range = 0.2, zoom_range = 0.2, horizontal_flip = True)\n\n# Fit the model\ntrain_generator = datagen.flow_from_directory(directory = '/path/to/dataset', target_size = (64, 64), color_mode = 'rgb', class_mode = 'binary', batch_size = 32)\nmodel.fit_generator(generator = train_generator, steps_per_epoch = 800, epochs = 5, validation_data = test_generator, validation_steps = 200)", "predict": "import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Read the dataset\ndata = pd.read_csv('data.csv')\n\n# Split the dataset into training and testing\nX_train, X_test, y_train, y_test = train_test_split(data['image'], data['label'], test_size=0.2, random_state=42)\n\n# Encode the labels\nle = LabelEncoder()\ny_train = le.fit_transform(y_train)\ny_test = le.transform(y_test)\n\n# Train the model\nmodel = RandomForestClassifier(n_estimators=100, random_state=42)\nmodel.fit(X_train, y_train)\n\n# Evaluate the model\nscore = model.score(X_test, y_test)\nprint(f'Accuracy: {score}')"}
{"prompt": "Write a Python program to find all the numbers divisible by a certain number within a certain range.\nint m=36, int n=74, int divisor=6 \n", "label": "def find_numbers_divisible_by(m, n, divisor):\n    divisible_numbers = []\n    for i in range(m, n+1):\n        if i % divisor == 0:\n            divisible_numbers.append(i)\n    return divisible_numbers", "predict": "# Function to find numbers divisible by a certain number within a certain range\ndef find_divisible_numbers(m, n, divisor):\n    # List to store the numbers divisible by divisor\n    divisible_numbers = []\n    # Iterate over the range\n    for i in range(m, n+1):\n        # Check if the number is divisible by divisor\n        if i % divisor == 0:\n            divisible_numbers.append(i)\n    # Return the list of numbers\n    return divisible_numbers\n\n# Main program\nm = 36\nn = 74\ndivisor = 6\n\ndivisible_numbers = find_divisible_numbers(m, n, divisor)\nprint(divisible_numbers)"}
{"prompt": "Implement a Python function that will take two strings and return true if the first string contains the second.\nquery = \"catering\"\nword = \"cat\" \n", "label": "def check_contains(query, word): \n    if query.find(word) != -1:\n        return True\n    return False\n\nresult = check_contains(query, word)", "predict": "def contains_string(query, word):\n    return word in query\n\ncontains_string(query, word) # returns True"}
{"prompt": "Write an algorithm in Python 3 that calculates the factorial of a number.\nNot applicable \n", "label": "def factorial(n):\n if n == 0:\n  return 1\n else:\n  return n * factorial(n-1)", "predict": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)"}
{"prompt": "Develop a Python function to predict the class labels of a given set of data.\nThe dataset contains 4 features: Length, Width, Height and Weight. \n", "label": "# Load the dataset\nimport pandas as pd\ncsv_url = 'http://test.test/test.csv'\ndf = pd.read_csv(csv_url)\n\n# Split the dataset into features and label\nX = df.iloc[:, 0:4].values\ny = df.iloc[:, 4].values\n\n# Import the ML model\nfrom sklearn.tree import DecisionTreeClassifier\n\n# Create and fit the model\nmodel = DecisionTreeClassifier()\nmodel.fit(X, y)\n\n# Predict the label\ndef predict(data):\n    predicted_label = model.predict([data])\n    return predicted_label", "predict": "def predict_labels(data):\n    # Create a model\n    model = LogisticRegression()\n\n    # Train the model\n    model.fit(data, labels)\n\n    # Make predictions\n    predictions = model.predict(data)\n\n    return predictions"}
{"prompt": "Develop a Python program to generate random passwords that consist of 8 characters.\nNot applicable \n", "label": "import string\nimport random\n\ndef generate_password():\n    chars = string.ascii_letters + string.digits\n    return ''.join(random.choice(chars) for _ in range(8))\n\npassword = generate_password()\nprint(password)", "predict": "import random\nimport string\n\ndef generate_password():\n password = ''\n for i in range(8):\n password += random.choice(string.ascii_letters + string.digits)\n return password\n\nprint(generate_password())"}
{"prompt": "Generate a list using a while loop in Python and appends the current number to the list. \n", "label": "my_list = []\n\nnum = 0\n\nwhile num < 10:\n    my_list.append(num)\n    num += 1\n\nprint(my_list)", "predict": "numbers = []\nnum = 0\nwhile num < 10:\n    numbers.append(num)\n    num += 1\nprint(numbers)"}
{"prompt": "Write a Python program to query Twitter to get the most recent tweets from a user.\nusername: @elonmusk \n", "label": "import tweepy\n\n# Authenticate to Twitter\nauth = tweepy.OAuthHandler(\"CONSUMER_KEY\", \"CONSUMER_SECRET\")\nauth.set_access_token(\"ACCESS_TOKEN\", \"ACCESS_TOKEN_SECRET\")\n# Create API object\napi = tweepy.API(auth)\n\n# Get the most recent tweets from the given user\ntweets = api.user_timeline(screen_name=\"@elonmusk\")\n\nfor tweet in tweets:\n print(tweet.text)", "predict": "import tweepy\n\n# Enter your own Twitter API credentials here\nconsumer_key = 'your_consumer_key'\nconsumer_secret = 'your_consumer_secret'\naccess_token = 'your_access_token'\naccess_token_secret = 'your_access_token_secret'\n\n# Create the authentication object\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\n\n# Create the API object\napi = tweepy.API(auth)\n\n# Get the most recent tweets from the user\ntweets = api.user_timeline(screen_name='@elonmusk', count=200)\n\n# Print out the most recent tweets\nfor tweet in tweets:\n print(tweet.text)"}
{"prompt": "Create a Python neural network model that takes in a given trajectory of stock prices and predicts the stock price for the next day.\n[10, 10.4, 10.5, 10.6, 10.7, 10.9, 11] \n", "label": "import numpy as np\nimport tensorflow as tf\n\ndef create_model():\n    model = tf.keras.Sequential([\n        tf.keras.layers.Dense(64, activation='relu', input_shape=(7, )),\n        tf.keras.layers.Dense(1)\n    ])\n\n    model.compile(loss='mean_squared_error', \n                  optimizer='adam',\n                  metrics=['accuracy'])\n\n    return model\n    \nif __name__ == \"__main__\":\n    model = create_model()\n\n    input_data = np.array([[10, 10.4, 10.5, 10.6, 10.7, 10.9, 11]])\n    predictions = model.predict(input_data)\n\n    print(f\"Predicted stock price for the next day is: {predictions[0][0]}\")", "predict": "import numpy as np\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n# create the model\nmodel = Sequential()\nmodel.add(Dense(12, input_dim=1, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='linear'))\n\n# compile the model\nmodel.compile(loss='mse', optimizer='adam', metrics=['mse'])\n\n# fit the model\nX = np.array([[10, 10.4, 10.5, 10.6, 10.7, 10.9, 11]])\ny = np.array([[11.1]])\nmodel.fit(X, y, epochs=100, batch_size=1, verbose=2)\n\n# predict the next day's stock price\npredictions = model.predict(X)\nprint(predictions)"}
{"prompt": "Create a way to encrypt a message using a key in Python.\nmessage = \"Hello world!\"\nkey = \"secret\" \n", "label": "import hashlib\n\ndef encrypt(message, key):\n    encrypted_msg = \"\"\n    for char in message:\n        encrypted_msg += chr(ord(char) + ord(key[0]))\n    return encrypted_msg\n\nencrypted_msg = encrypt(message, key)\nprint(encrypted_msg)", "predict": "def encrypt(message, key):\n    encrypted_message = \"\"\n    for i in range(len(message)):\n        char = message[i]\n        key_c = key[i % len(key)]\n        encrypted_message += chr((ord(char) + ord(key_c)) % 256)\n    return encrypted_message\n\nmessage = \"Hello world!\"\nkey = \"secret\"\n\nencrypted_message = encrypt(message, key)\nprint(encrypted_message)"}
{"prompt": "Create a function in Python that takes two parameters and prints out the larger of them.\nparameter_1 = 7\nparameter_2 = 9 \n", "label": "def printMax(parameter_1, parameter_2):\n    if parameter_1 > parameter_2:\n        print(parameter_1)\n    else:\n      print(parameter_2)", "predict": "def larger_of_two(parameter_1, parameter_2):\n    if parameter_1 > parameter_2:\n        print(parameter_1)\n    else:\n        print(parameter_2)\n\nlarger_of_two(parameter_1, parameter_2)"}
{"prompt": "Rewrite the following Python code by introducing list comprehensions.\neven_numbers = []\nfor i in range(1,21):\n    if i % 2 == 0:\n        even_numbers.append(i) \n", "label": "even_numbers = [i for i in range(1, 21) if i % 2 == 0]", "predict": "even_numbers = [i for i in range(1,21) if i % 2 == 0]"}
{"prompt": "Develop an algorithm in Python to print Fibonacci series up to a given number. \n", "label": "def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \n      \nn = int(input(\"Enter a number: \"))\nprint(fibonacci(n))", "predict": "def fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\ndef printFibonacci(n):\n    for i in range(n):\n        print(fibonacci(i))\n\nprintFibonacci(10)"}
{"prompt": "Make the following code snippet into a function in Python3 capable of solving Any Sudoku puzzle\nboard = [\n    [7,8,0,4,0,0,1,2,0],\n    [6,0,0,0,7,5,0,0,9],\n    [0,0,0,6,0,1,0,7,8],\n    [0,0,7,0,4,0,2,6,0],\n    [0,0,1,0,5,0,9,3,0],\n    [9,0,4,0,6,0,0,0,5],\n    [0,7,0,3,0,0,0,1,2],\n    [1,2,0,0,0,7,4,0,0],\n    [0,4,9,2,0,6,0,0,7]\n] \n", "label": "def solve_sudoku(board): \n  \n    # Utility function to find vacant cells \n    # Returns a boolean     \n    def find_vacant_cell(board, l): \n        for row in range(9): \n            for col in range(9): \n                if board[row][col] == 0: \n                    l[0] = row \n                    l[1] = col \n                    return True\n        return False\n  \n    # Utility function to check if a number  \n    # is not currently placed in a particular  \n    # row, column and block \n    def is_safe(board, row, col, num): \n  \n        # Check if 'num' is not already placed  \n        # in current row, current column  \n        # and current 3x3 box \n        for i in range(9): \n  \n            # Check the rows\n            if(board[row][i] == num): \n                return False\n  \n            # Check the columns \n            if(board[i][col] == num): \n                return False\n  \n            # Check the 3x3 boxes \n            if(board[(row//3)*3 + i//3][(col//3)*3 + i%3] == num): \n                return False\n  \n        return True\n  \n    # Solve the sudoku \n    def solve(board): \n        # 'l' is a list variable that keeps \n        # the record of row and col in \n        # find_vacant_cell function \n        l = [0, 0] \n  \n        # If there is no unassigned location, \n        # we are done \n        if (not find_vacant_cell(board, l)): \n            return True\n  \n        # Assigning the list values\n        row = l[0] \n        col = l[1] \n  \n        # consider digits 1 to 9 \n        for num in range(1, 10): \n  \n            # if it is a safe position\n            if (is_safe(board, row, col, num)): \n  \n                # make tentative assignment \n                board[row][col] = num \n  \n                # return if succcess\n                if (solve(board)): \n                    return True\n  \n                # failure, unmake and try again \n                board[row][col] = 0\n  \n        # trigger backtracking \n        return False\n  \n    #Driver Program \n    if (solve(board)): \n        for row in board: \n            print(row) \n    else: \n        print(\"No solution\")", "predict": "def solve_sudoku(board):\n    \"\"\"\n    Solves any Sudoku puzzle\n    \"\"\"\n    def is_valid(board, row, col, num):\n        # Check row\n        for i in range(9):\n            if board[row][i] == num:\n                return False\n        # Check column\n        for i in range(9):\n            if board[i][col] == num:\n                return False\n        # Check box\n        box_row = (row // 3) * 3\n        box_col = (col // 3) * 3\n        for i in range(3):\n            for j in range(3):\n                if board[box_row + i][box_col + j] == num:\n                    return False\n        return True\n\n    def solve_puzzle(board):\n        # Find empty cell\n        for i in range(9):\n            for j in range(9):\n                if board[i][j] == 0:\n                    # Try all numbers\n                    for num in range(1, 10):\n                        if is_valid(board, i, j, num):\n                            board[i][j] = num\n                            # Recursively solve the puzzle\n                            if solve_puzzle(board):\n                                return True\n                            board[i][j] = 0\n                    return False\n        return True\n\n    # Solve the puzzle\n    solve_puzzle(board)\n    return board"}
{"prompt": "Write a function in Python to calculate the sum of the digits in a given number. \n", "label": "def sum_digits(num):\n    total = 0\n    while num > 0:\n        digit = num % 10\n        total += digit\n        num = num // 10\n    return total", "predict": "def sum_of_digits(n):\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"}
{"prompt": "Take the list of people below and create a Python dictionary with the names as keys and the ages as values.\nJohn (20), Jane (40), Alex (18), Peter (45) \n", "label": "people_dict = {'John': 20, 'Jane': 40, 'Alex': 18, 'Peter': 45}", "predict": "people = {\n    \"John\": 20,\n    \"Jane\": 40,\n    \"Alex\": 18,\n    \"Peter\": 45\n}"}
{"prompt": "Develop a Python program to clearly understand the concept of recursion. \n", "label": "# This program is to understand recursion in Python.\n\n# Define a recursive function to calculate the factorial of a number\ndef factorial(n):\n   if n == 1:\n      return 1\n   else:\n      return n * factorial(n - 1)\n\n# Calculate factorial of number 5\nresult = factorial(5)\nprint(\"Factorial of 5 is \", result) \n\n# Output: Factorial of 5 is 120", "predict": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)"}
{"prompt": "Generate a random 6-digits number in Python. \n", "label": "import random\n\nnumber = random.randint(100000, 999999)\nprint(number)", "predict": "import random\n\nrandom_number = random.randint(100000, 999999)\nprint(random_number)"}
{"prompt": "Create a sorting algorithm in Python to sort strings by their length.\n[\"cat\", \"dog\", \"apple\", \"banana\"] \n", "label": "def sort_by_length(strings):\n    for i in range(len(strings) - 1):\n        for j in range(i + 1, len(strings)):\n            if len(strings[i]) > len(strings[j]):\n                strings[i], strings[j] = strings[j], strings[i]\n    return strings\n\nunsorted_list = [\"cat\", \"dog\", \"apple\", \"banana\"]\n\nsorted_list = sort_by_length(unsorted_list)\n\nprint(sorted_list)", "predict": "def sort_by_length(strings):\n    strings.sort(key=len)\n    return strings\n\nresult = sort_by_length([\"cat\", \"dog\", \"apple\", \"banana\"])\nprint(result)"}
{"prompt": "Write a Python function to get the maximum and minimum values in a given list.\nNot applicable \n", "label": "def get_max_min(lst):\n min_value = lst[0]\n max_value = lst[0]\n \n for i in range(1, len(lst)):\n  if lst[i] > max_value:\n   max_value = lst[i]\n  if lst[i] < min_value:\n   min_value = lst[i]\n \n return (min_value, max_value)", "predict": "def get_max_min(list):\n max_value = max(list)\n min_value = min(list)\n return max_value, min_value"}
{"prompt": "Create a for loop in Python to iterate over a list of numbers and print only the even numbers.\nmy_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \n", "label": "for num in my_list:\n    if num % 2 == 0:\n        print(num)", "predict": "for num in my_list:\n if num % 2 == 0:\n  print(num)"}
{"prompt": "Can you suggest a pure python alternative to declaring a Float32 array with numbers from 0 to 10? \n", "label": "myArray = [float(i) for i in range(0,11)]", "predict": "import numpy as np\n\narr = np.arange(0, 10, dtype=np.float32)"}
{"prompt": "Construct a neural network model in Python to classify the MNIST data set correctly. \n", "label": "import keras\n\n# Input layer\ninput_layer = keras.layers.Input(shape=(784,))\n\n# Hidden layer\nhidden_layer = keras.layers.Dense(128, \n                activation='relu')(input_layer)\n\n# Output layer\noutput_layer = keras.layers.Dense(10, \n                activation='softmax')(hidden_layer)\n\n# Model\nmodel = keras.Model(inputs=input_layer, outputs=output_layer)\n\n# Compile model\nmodel.compile(optimizer='adam', \n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])", "predict": "import tensorflow as tf\nfrom tensorflow.keras import datasets, layers, models\n\n# Load the data\n(train_images, train_labels), (test_images, test_labels) = datasets.mnist.load_data()\n\n# Preprocess the data\ntrain_images = train_images.reshape((60000, 28, 28, 1))\ntest_images = test_images.reshape((10000, 28, 28, 1))\ntrain_images, test_images = train_images / 255.0, test_images / 255.0\n\n# Create the model\nmodel = models.Sequential()\nmodel.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(64, (3, 3), activation='relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(64, (3, 3), activation='relu'))\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(64, activation='relu'))\nmodel.add(layers.Dense(10, activation='softmax'))\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\n# Train the model\nmodel.fit(train_images, train_labels, epochs=5)\n\n# Evaluate the model\ntest_loss, test_acc = model.evaluate(test_images, test_labels)\nprint('Test accuracy:', test_acc)"}
{"prompt": "Create a machine learning classifier in Python for categorizing user input. \n", "label": "from sklearn.naive_bayes import MultinomialNB \n\n# Assuming an input string is passed to the function as a parameter\n\ndef classify_string(input_string):\n\n  # Feature extraction and transformation from string to numeric\n  features = . . .\n\n  # Create an instance of the classifier \n  model = MultinomialNB()\n\n  # Train the classifier on the data\n  model.fit(data, target)\n\n  # Make a prediction based on the input\n  prediction = model.predict([features])\n\n  # Return the prediction\n  return prediction", "predict": "import numpy as np\nfrom sklearn.naive_bayes import GaussianNB\n\n# Define the classifier\nclassifier = GaussianNB()\n\n# Fit the classifier to the training data\nclassifier.fit(X_train, y_train)\n\n# Predict the labels of the test data\ny_pred = classifier.predict(X_test)"}
{"prompt": "Implement a algorithm in Python for sorting two large lists A and B. The algorithm should take the first element of list A and compare it with the first element of list B. If it is greater, then it should add the element to the result list and move the pointer of B to the next element. If the element of A is smaller, the pointer should move to the next element of A, and so on.\nA = [3, 6, 8, 10, 11]\nB = [2, 5, 7, 12] \n", "label": "def merge_sort(A, B):\n result = [] \n i, j = 0, 0\n\n# Compare elements and add lower one to result\nwhile i < len(A) and j < len(B):\n if A[i] < B[j]:\n result.append(A[i])\n i += 1\n else:\n result.append(B[j])\n j += 1\n\n# Add remaining elements\nresult += A[i:]\nresult += B[j:]\n\nreturn result\n\n#Test the algorithm\nA = [3, 6, 8, 10, 11]\nB = [2, 5, 7, 12]\n\nprint(merge_sort(A, B))\n# Output: [2, 3, 5, 6, 7, 8, 10, 11, 12]", "predict": "def sort_two_lists(A, B):\n    result = []\n    a_index = 0\n    b_index = 0\n    while a_index < len(A) and b_index < len(B):\n        if A[a_index] < B[b_index]:\n            result.append(A[a_index])\n            a_index += 1\n        else:\n            result.append(B[b_index])\n            b_index += 1\n    result.extend(A[a_index:])\n    result.extend(B[b_index:])\n    return result\n\nA = [3, 6, 8, 10, 11]\nB = [2, 5, 7, 12]\n\nprint(sort_two_lists(A, B))"}
{"prompt": "Develop a program in Python for finding the longest common subsequence between two strings.\n\"ABCDF\", \"ABECD\" \n", "label": "def longest_common_subsequence(string1, string2):\n    table = [[0]*(len(string2)+1) for _ in range(len(string1)+1)]\n\n    for i, x in enumerate(string1):\n        for j, y in enumerate(string2):\n            if x == y:\n                table[i+1][j+1] = table[i][j]+1\n            else:\n                table[i+1][j+1] = max(table[i+1][j], table[i][j+1])\n\n    result = \"\"\n    x, y = len(string1), len(string2)\n    while x != 0 and y != 0:\n        if table[x][y] == table[x-1][y]:\n            x -= 1\n        elif table[x][y] == table[x][y-1]:\n            y -= 1\n        else:\n            result = string1[x-1] + result\n            x -= 1\n            y -= 1\n    return result\n\nresult = longest_common_subsequence(\"ABCDF\", \"ABECD\")\nprint(result)", "predict": "def longest_common_subsequence(s1, s2):\n    n1 = len(s1)\n    n2 = len(s2)\n    dp = [[0] * (n2 + 1) for _ in range(n1 + 1)]\n\n    for i in range(1, n1 + 1):\n        for j in range(1, n2 + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    lcs = \"\"\n    i = n1\n    j = n2\n    while i > 0 and j > 0:\n        if s1[i - 1] == s2[j - 1]:\n            lcs = s1[i - 1] + lcs\n            i -= 1\n            j -= 1\n        elif dp[i - 1][j] > dp[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n    return lcs\n\ns1 = \"ABCDF\"\ns2 = \"ABECD\"\nprint(longest_common_subsequence(s1, s2))"}
{"prompt": "Convert a given Python program to a C# program.\ndef power(x, y):\n    if y == 0:\n        return 1\n    else:\n        return x * power(x, y - 1) \n", "label": "public int Power(int x, int y)\n{\n    if (y == 0)\n    {\n        return 1;\n    }\n    else\n    {\n        return x * Power(x, y - 1);\n    }\n}", "predict": "public int Power(int x, int y)\n{\n    if (y == 0)\n    {\n        return 1;\n    }\n    else\n    {\n        return x * Power(x, y - 1);\n    }\n}"}
{"prompt": "Rewrite the following code in a different programming language.\n// JavaScript code\nlet arr = [1, 2, 3, 4, 5];\n\narr.forEach(item => {\n console.log(item * 2);\n}); \n", "label": "# Python code\narr = [1, 2, 3, 4, 5]\n\nfor item in arr:\n print(item * 2)", "predict": "// Python code\narr = [1, 2, 3, 4, 5]\n\nfor item in arr:\n print(item * 2)"}
{"prompt": "Create a TicTacToe game in Python. \n", "label": "class TicTacToe:\n\ndef __init__(self):\n    self.board = [['_' for _ in range(3)] \n                   for _ in range(3)]\n    self.turn = 'x'\n    \ndef display(self):\n    for row in self.board:\n        print(' '.join(row))\n\ndef check_win(self):\n    board = self.board\n\n    # check if the player with the current turn has a row of three\n    for row in self.board:\n        if row.count(self.turn) == 3:\n            return True\n        \n    # check if the player with the current turn has a column of three\n    for col in range(3):\n        if board[0][col] == board[1][col] and board[1][col] == board[2][col] and board[2][col] == self.turn:\n            return True\n        \n    # check for the two diagonals\n    if board[0][0] == board[1][1] and board[1][1] == board[2][2] and board[2][2] == self.turn:\n        return True\n    if board[0][2] == board[1][1] and board[1][1] == board[2][0] and board[2][0] == self.turn:\n        return True\n    return False", "predict": "def tictactoe():\n    board = [['_' for _ in range(3)] for _ in range(3)]\n    turn = 0\n    winner = False\n\n    while not winner:\n        print('Player 1\\'s turn')\n        row = int(input('Enter row: '))\n        col = int(input('Enter column: '))\n\n        if board[row][col] == '_':\n            board[row][col] = 'X'\n            turn += 1\n        else:\n            print('This spot is already taken')\n\n        if check_winner(board):\n            winner = True\n            print('Player 1 wins!')\n        else:\n            print('Player 2\\'s turn')\n            row = int(input('Enter row: '))\n            col = int(input('Enter column: '))\n\n            if board[row][col] == '_':\n                board[row][col] = 'O'\n                turn += 1\n            else:\n                print('This spot is already taken')\n\n            if check_winner(board):\n                winner = True\n                print('Player 2 wins!')\n\n    if turn == 9:\n        print('It\\'s a draw!')\n\ndef check_winner(board):\n    for i in range(3):\n        if board[i][0] == board[i][1] == board[i][2]!= '_':\n            return True\n\n        if board[0][i] == board[1][i] == board[2][i]!= '_':\n            return True\n\n    if board[0][0] == board[1][1] == board[2][2]!= '_':\n        return True\n\n    if board[0][2] == board[1][1] == board[2][0]!= '_':\n        return True\n\n    return False"}
{"prompt": "Create a Python program to store the strings \"Hello\" and \"World\" and print them in the same line. \n", "label": "string1 = \"Hello\"\nstring2 = \"World\"\n\nprint(string1 + \" \" + string2)", "predict": "a = \"Hello\"\nb = \"World\"\n\nprint(a +'' + b)"}
{"prompt": "Use the inputs provided, write Python code to check if two integers are equal.\nFirst Integer: 10\nSecond Integer: 10 \n", "label": "if int(10) == int(10):\n    print(\"The two integers are equal\")\nelse:\n    print(\"The two integers are not equal\")", "predict": "if (10 == 10):\n    print(\"The two integers are equal\")"}
{"prompt": "Create a Python program for analyzing the sentiment of given text. The program should categorize the text into positive, negative, and neutral sentiments.\nNot applicable \n", "label": "import nltk\nfrom nltk.tokenize import sent_tokenize\nfrom nltk.classify import NaiveBayesClassifier\n\ndef analyze_sentiment(text):\n    sents = sent_tokenize(text)\n    neg = 0\n    pos = 0\n    for sentence in sents:\n        sentiment_analysis = NaiveBayesClassifier.classify(sentence)\n        if sentiment_analysis == 'neg':\n            neg += 1\n        if sentiment_analysis == 'pos':\n            pos += 1\n    \n    if neg > pos:\n        sentiment = 'negative'\n    elif pos > neg:\n        sentiment = 'positive'\n    else:\n        sentiment = 'neutral'\n    \n    return sentiment\n\n# End analyze sentiment definition", "predict": "import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ndef analyze_sentiment(text):\n    sid = SentimentIntensityAnalyzer()\n    sentiment_scores = sid.polarity_scores(text)\n    if sentiment_scores['compound'] > 0.05:\n        return 'positive'\n    elif sentiment_scores['compound'] < -0.05:\n        return 'negative'\n    else:\n        return 'neutral'"}
{"prompt": "Create a Python program to calculate the average of five numbers entered by a user. \n", "label": "nums = []\nfor i in range(5):\n    nums.append(int(input(\"Please enter number: \")))\n\n#Calculate average\naverage = sum(nums) / len(nums)\n\n#Print average\nprint(\"The average is \", average)", "predict": "def calculate_average():\n    numbers = []\n    while True:\n        number = input(\"Enter a number (or 'done' to finish): \")\n        if number == 'done':\n            break\n        else:\n            numbers.append(float(number))\n    return sum(numbers)/len(numbers)\n\nprint(calculate_average())"}
{"prompt": "Write a Python program to generate a Markov chain given a text input.\nAlice was beginning to get very tired of sitting by her sister on the bank, and of having nothing to do: once or twice she had peeped into the book her sister was reading, but it had no pictures or conversations in it, `and what is the use of a book,' thought Alice `without pictures or conversation?' \n", "label": "import random\n\ndef generateMarkov(text):\n  words = text.split(' ')\n  markovChain = {}\n\n  for i in range(len(words) - 2):\n    current = words[i]\n    next = words[i + 1]\n    if current in markovChain:\n      if next in markovChain[current]:\n        markovChain[current][next] += 1\n      else:\n        markovChain[current][next] = 1\n    else:\n      markovChain[current] = {next: 1}\n\n  generatedText = \"\"\n  current = random.choice(list(markovChain))\n  generatedText += current\n\n  for i in range(100):\n    choices = markovChain[current]\n    choices = [\n      key for key, value in choices.items()\n      for i in range(value)\n    ]\n    try:\n      current = random.choice(choices)\n      generatedText += \" \" + current\n    except:\n      break\n\n  return generatedText\n\ntext = 'Alice was beginning to get very tired of sitting by her sister on the bank, and of having nothing to do: once or twice she had peeped into the book her sister was reading, but it had no pictures or conversations in it, `and what is the use of a book,' thought Alice `without pictures or conversation?'\n\nprint(generateMarkov(text))", "predict": "import re\n\ndef generate_markov_chain(text):\n    words = re.findall(r'\\w+', text)\n    chain = {}\n    for i in range(len(words)-1):\n        if words[i] not in chain:\n            chain[words[i]] = [words[i+1]]\n        else:\n            chain[words[i]].append(words[i+1])\n    return chain\n\ntext = 'Alice was beginning to get very tired of sitting by her sister on the bank, and of having nothing to do: once or twice she had peeped into the book her sister was reading, but it had no pictures or conversations in it, `and what is the use of a book,' thought Alice `without pictures or conversation?'\n\nmarkov_chain = generate_markov_chain(text)\nprint(markov_chain)"}
{"prompt": "Write a Python program to determine if a number provided by the user is prime or not.\n17 \n", "label": "# Ask the user for a number\nnum = int(input('Enter a number: '))\n\n# Set initial values\nis_prime = True\n\n# Check for prime\nfor i in range(2, num):\n if num % i == 0:\n is_prime = False\n break\n\n# Output result\nif is_prime:\n print(f'{num} is a prime number.')\nelse:\n print(f'{num} is not a prime number.')", "predict": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\nn = int(input('Enter a number: '))\nif is_prime(n):\n    print(n, 'is a prime number')\nelse:\n    print(n, 'is not a prime number')"}
{"prompt": "Write a Python program to calculate the difference between the lowest and highest value for an array of integers.\n[12, 24, 3, 8, -1] \n", "label": "def diffHighestLowest(arr):\n    lowest = min(arr)\n    highest = max(arr)\n    return highest - lowest\n\narr = [12, 24, 3, 8, -1]\ndifference = diffHighestLowest(arr)\nprint(difference)  # 25", "predict": "def difference(arr):\n    return max(arr) - min(arr)\n\narr = [12, 24, 3, 8, -1]\nprint(difference(arr)) # 25"}
{"prompt": "Rewrite the following code snippet to find prime numbers using Python.\nNot applicable \n", "label": "def is_prime(num):\n    # Iterate from 2 to the square root of the number\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n# Iterate from 2 to n\nfor n in range(2, n+1):\n    # Check if the number is prime\n    if is_prime(n):\n        print(n)", "predict": "def is_prime(num):\n  for i in range(2, num):\n    if num % i == 0:\n      return False\n  return True\n\nfor num in range(2, 100):\n  if is_prime(num):\n    print(num)"}
{"prompt": "Write a Python program to create a dictionary where the keys are numbers between 1 and 15 (both included) and the values are square of keys. \n", "label": "d = {}\n\nfor i in range(1, 16):\n    d[i] = i**2\n\nprint(d)", "predict": "def create_dict():\n    my_dict = {}\n    for i in range(1, 16):\n        my_dict[i] = i*i\n    return my_dict\n\nprint(create_dict())"}
{"prompt": "Write a Python program to calculate the sum of all even numbers less than or equal to n. \n", "label": "def sum_of_even_numbers(n):\n result = 0\n for i in range(2, n+1, 2):\n result += i\n return result", "predict": "def sum_even_numbers(n):\n    total = 0\n    for i in range(2, n+1, 2):\n        total += i\n    return total"}
{"prompt": "Create a Python script to calculate the Fibonacci numbers up to a given number. \n", "label": "def Fibonacci(n): \n\tif n==0: \n\t\treturn 0\n\tif n==1: \n\t\treturn 1\n\telse: \n\t\treturn Fibonacci(n-1)+Fibonacci(n-2)", "predict": "def fibonacci(n):\n    a = 0\n    b = 1\n    if n < 0:\n        print(\"Incorrect input\")\n    elif n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        for i in range(2,n):\n            c = a + b\n            a = b\n            b = c\n        return b\n\nn = int(input(\"Enter the number: \"))\nprint(fibonacci(n))"}
{"prompt": "Write a Python program to calculate the total cost of a shopping cart. The program should consider the item prices, quantity, shipping cost, and any applicable taxes.\n[ \n {\"name\": \"widget\", \"price\": 10, \"quantity\": 5 },\n {\"name\": \"thingy\", \"price\": 7, \"quantity\": 3 },\n {\"name\": \"doodad\", \"price\": 5, \"quantity\": 2 },\n]\nShipping cost: 7.50\nTax rate: 9.5% \n", "label": "items = [\n {\"name\": \"widget\", \"price\": 10, \"quantity\": 5 },\n {\"name\": \"thingy\", \"price\": 7, \"quantity\": 3 },\n {\"name\": \"doodad\", \"price\": 5, \"quantity\": 2 },\n]\n\ntaxRate = 0.095\nshippingCost = 7.50\n\ntotalCost = 0\n\nfor item in items:\n totalCost += item['price'] * item['quantity']\n\ntotalCost += totalCost * taxRate\ntotalCost += shippingCost\n\nprint('Total cost:', totalCost)", "predict": "def calculate_total_cost(items, shipping_cost, tax_rate):\n    total_cost = 0\n    for item in items:\n        total_cost += item['price'] * item['quantity']\n    total_cost += shipping_cost\n    total_cost += (total_cost * tax_rate) / 100\n    return total_cost\n\nitems = [\n {\"name\": \"widget\", \"price\": 10, \"quantity\": 5 },\n {\"name\": \"thingy\", \"price\": 7, \"quantity\": 3 },\n {\"name\": \"doodad\", \"price\": 5, \"quantity\": 2 },\n]\n\nshipping_cost = 7.50\ntax_rate = 9.5\n\ntotal_cost = calculate_total_cost(items, shipping_cost, tax_rate)\nprint(f'Total cost: {total_cost}')"}
{"prompt": "In Python, create a function to find the maximum value within a nested dictionary.\nsample_dict = {\n    \"key1\": {\n        \"value1\": 10,\n        \"value2\": 20\n    },\n    \"key2\": {\n        \"value3\": 40\n    },\n} \n", "label": "def findMaxValue(dict):\n    max_val = None\n    for key, value in dict.items():\n        if isinstance(value, dict):\n            max_val = max(findMaxValue(value), max_val)\n        else:\n            max_val = max(value, max_val)\n    return max_val\n\nprint(findMaxValue(sample_dict))", "predict": "def max_value_nested_dict(d):\n    max_value = float('-inf')\n    for key, value in d.items():\n        if isinstance(value, dict):\n            max_value = max(max_value, max_value_nested_dict(value))\n        else:\n            max_value = max(max_value, value)\n    return max_value\n\nsample_dict = {\n    \"key1\": {\n        \"value1\": 10,\n        \"value2\": 20\n    },\n    \"key2\": {\n        \"value3\": 40\n    },\n}\n\nmax_value = max_value_nested_dict(sample_dict)\nprint(max_value)"}
{"prompt": "Write a function in Python that returns an object of the following time and date: Sunday March 7 5:30 PM. \n", "label": "from datetime import datetime\n\ndef get_date_time():\n    dt = datetime(year=2021, month=3, day=7, hour=17, minute=30)\n    return dt\n\ndate_time = get_date_time()\nprint(date_time) # will output 2021-03-07 17:30:00", "predict": "import datetime\n\ndef get_date_object():\n    return datetime.datetime(2020, 3, 7, 17, 30)"}
{"prompt": "Generate a Python program to perform matrix multiplication on two given matrices. \n", "label": "def matrix_multiplication(A, B):  \n    rows_A = len(A)  \n    cols_A = len(A[0])  \n    rows_B = len(B)  \n    cols_B = len(B[0])  \n    result = [[0 for i in range(cols_B)] for j in range(rows_A)]  \n    for i in range(rows_A): \n        for j in range(cols_B): \n            for k in range(cols_A): \n                result[i][j] += A[i][k] * B[k][j] \n    return result", "predict": "def matrix_multiplication(matrix1, matrix2):\n    result = [[0 for row in range(len(matrix1))] for col in range(len(matrix2[0]))]\n    for i in range(len(matrix1)):\n        for j in range(len(matrix2[0])):\n            for k in range(len(matrix2)):\n                result[i][j] += matrix1[i][k] * matrix2[k][j]\n    return result"}
{"prompt": "Write a Python script to read an array from the user and then determine the mean and median of the array.\narr = [10, 15, 20, 25, 30, 35] \n", "label": "def mean_median(arr): \n      arr_sum = 0 \n      for i in range(len(arr)): \n            arr_sum += arr[i] \n      \n      mean = arr_sum/len(arr) \n    \n      arr = sorted(arr) \n      if len(arr) % 2 != 0: \n            median = arr[floor(len(arr)/2)] \n      else: \n            median = (arr[len(arr)//2] + arr[len(arr)//2 - 1]) / 2\n      \n      return mean, median\n\nmean, median = mean_median(arr) \nprint(\"Mean =\", mean) \nprint(\"Median =\", median)", "predict": "arr = [10, 15, 20, 25, 30, 35]\n\n# calculate the mean\nmean = sum(arr) / len(arr)\n\n# calculate the median\narr.sort()\nif len(arr) % 2 == 0:\n    median = (arr[int(len(arr)/2)] + arr[int(len(arr)/2 - 1)]) / 2\nelse:\n    median = arr[int(len(arr)/2)]\n\nprint('Mean:', mean)\nprint('Median:', median)"}
{"prompt": "Create an algorithm in Python to check whether an array has even or odd number of elements.\n[1, 2, 3, 4] \n", "label": "def is_array_even(arr): \n  if len(arr)%2 == 0:\n    return True\n  else:\n    return False", "predict": "def is_even(arr):\n    if len(arr) % 2 == 0:\n        return True\n    else:\n        return False\n\narr = [1, 2, 3, 4]\n\nif is_even(arr):\n    print(\"Array has even number of elements\")\nelse:\n    print(\"Array has odd number of elements\")"}
{"prompt": "Implement a Python function to calculate the Gini coefficient of a given dataset.\n[2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,21] \n", "label": "def gini(x):\n    \"\"\"Calculate Gini Coefficient of a given dataset.\"\"\"\n    # calculate the frequency of each item in x\n    x_value_counts = x.value_counts().sort_index() \n\n    # calculate the cumulative sum of x_value_counts\n    x_cum_sum = x_value_counts.cumsum()\n\n    # calculate the Lorenz values\n    n = len(x)\n    lorenz = x_cum_sum / n\n    lorenz = np.insert(lorenz, 0, 0) # add 0 to the beginning of array\n\n    # calculate the Gini Coefficient\n    width = lorenz[:-1] - lorenz[1:]\n    gini_coef = (1 / n) * sum(width * (lorenz[1:] + lorenz[:-1]))\n\n    return gini_coef\n\nif __name__ == '__main__':\n    x = np.array([2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,21])\n    gini_coef = gini(x)\n    print(gini_coef) # should print 0.605", "predict": "def gini_coefficient(dataset):\n    sorted_data = sorted(dataset)\n    n = len(sorted_data)\n    cum_sum = 0\n    for i in range(n):\n        cum_sum += sorted_data[i]\n    numerator = 0\n    denominator = 0\n    for i in range(n):\n        numerator += (i+1) * sorted_data[i]\n        denominator += (i+1)\n    gini = 1 - (2 * numerator / (denominator * cum_sum))\n    return gini"}
{"prompt": "Generate a neural network model with TensorFlow and Python for classifying hand-written digits from the MNIST dataset.\nNot applicable \n", "label": "import tensorflow as tf\n\n# Import MNIST data\nfrom tensorflow.examples.tutorials.mnist import input_data\nmnist = input_data.read_data_sets(\"/tmp/data\", one_hot=True)\n\n# Parameters\nlearning_rate = 0.001\ntraining_epochs = 15\nbatch_size = 100\ndisplay_step = 1\n\n# Network Parameters\nn_hidden_1 = 256 # 1st layer number of neurons\nn_hidden_2 = 256 # 2nd layer number of neurons\nn_input = 784 # MNIST data input (img shape: 28*28)\nn_classes = 10 # MNIST total classes (0-9 digits)\n\n# tf Graph input\nX = tf.placeholder(\"float\", [None, n_input])\nY = tf.placeholder(\"float\", [None, n_classes])\n\n# Store layers weight & bias\nweights = {\n    'h1': tf.Variable(tf.random_normal([n_input, n_hidden_1])),\n    'h2': tf.Variable(tf.random_normal([n_hidden_1, n_hidden_2])),\n    'out': tf.Variable(tf.random_normal([n_hidden_2, n_classes]))\n}\nbiases = {\n    'b1': tf.Variable(tf.random_normal([n_hidden_1])),\n    'b2': tf.Variable(tf.random_normal([n_hidden_2])),\n    'out': tf.Variable(tf.random_normal([n_classes]))\n}\n\n\n# Create model\ndef multilayer_perceptron(x):\n    # Hidden fully connected layer with 256 neurons\n    layer_1 = tf.add(tf.matmul(x, weights['h1']), biases['b1'])\n    # Hidden fully connected layer with 256 neurons\n    layer_2 = tf.add(tf.matmul(layer_1, weights['h2']), biases['b2'])\n    # Output fully connected layer with a neuron for each class\n    out_layer = tf.matmul(layer_2, weights['out']) + biases['out']\n    return out_layer\n\n# Construct model\nlogits = multilayer_perceptron(X)\n\n# Define loss and optimizer\nloss_op = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(\n    logits=logits, labels=Y))\noptimizer = tf.train.AdamOptimizer(learning_rate=learning_rate)\ntrain_op = optimizer.minimize(loss_op)\n\n# Initializing the variables\ninit = tf.global_variables_initializer()\n\n# Train model\nmodel = tf.Session()\nmodel.run(init)\n\n# Training cycle\nfor epoch in range(training_epochs):\n    avg_cost = 0.\n    total_batch = int(mnist.train.num_examples/batch_size)\n    # Loop over all batches\n    for i in range(total_batch):\n        batch_x, batch_y = mnist.train.next_batch(batch_size)\n        # Run optimization op (backprop) and cost op (to get loss value)\n        _, c = model.run([train_op, loss_op], feed_dict={X: batch_x,\n                                                        Y: batch_y})\n        # Compute average loss\n        avg_cost += c / total_batch\n    # Display logs per epoch step\n    if epoch % display_step == 0:\n        print(\"Epoch:\", '%04d' % (epoch+1), \"cost=\", \\\n            \"{:.9f}\".format(avg_cost))\nprint(\"Optimization Finished!\")\n\n# Test model\npred = tf.nn.softmax(logits)  # Apply softmax to logits\ncorrect_prediction = tf.equal(tf.argmax(pred, 1), tf.argmax(Y, 1))\n# Calculate", "predict": "import tensorflow as tf\n\n# Create the model\nmodel = tf.keras.models.Sequential([\n tf.keras.layers.Flatten(input_shape=(28, 28)),\n tf.keras.layers.Dense(128, activation='relu'),\n tf.keras.layers.Dense(10, activation='softmax')\n])\n\n# Compile the model\nmodel.compile(optimizer='adam',\n loss='sparse_categorical_crossentropy',\n metrics=['accuracy'])\n\n# Train the model\nmodel.fit(x_train, y_train, epochs=10)\n\n# Evaluate the model\ntest_loss, test_acc = model.evaluate(x_test, y_test)\nprint('Test accuracy:', test_acc)"}
{"prompt": "Write a function to generate a prime number sequence using Python. \n", "label": "def generate_prime_numbers(n): \n        primes = [True for i in range(n+ 1)] \n        p = 2\n        while (p * p <= n): \n            if (primes[p] == True): \n                for i in range(p * p, n + 1, p): \n                    primes[i] = False\n            p += 1\n        primes[0] = False\n        primes[1] = False\n        for p in range(n + 1): \n            if primes[p]: \n                print(p)", "predict": "def prime_number_sequence(n):\n    prime_numbers = []\n    for num in range(2, n+1):\n        prime = True\n        for i in range(2, num):\n            if (num % i) == 0:\n                prime = False\n                break\n        if prime:\n            prime_numbers.append(num)\n    return prime_numbers"}
{"prompt": "Write a Python program that removes duplicates from a list.\nInput List: [1, 2, 3, 4, 3, 2, 1] \n", "label": "def remove_duplicates(my_list):\n return list(dict.fromkeys(my_list))\n\nmy_list = [1, 2, 3, 4, 3, 2, 1]\n\nprint(remove_duplicates(my_list)) # output [1, 2, 3, 4]", "predict": "def remove_duplicates(lst):\n    return list(dict.fromkeys(lst))"}
{"prompt": "Generate a Python script to sort the given list of words.\n['bubble', 'selection', 'quicksort', 'insertion'] \n", "label": "# function to sort the given list of words\ndef sort_words(words):\n    # sort the list of words in alphabetical order\n    words.sort()\n\n    # print the sorted list of words\n    print(words)\n\n# driver code\nwords = ['bubble', 'selection', 'quicksort', 'insertion']\nsort_words(words)\n\n# output\n['bubble', 'insertion', 'quicksort', 'selection']", "predict": "def sort_words(words):\n    return sorted(words)\n\nwords = ['bubble','selection', 'quicksort', 'insertion']\n\nsorted_words = sort_words(words)\n\nprint(sorted_words)"}
{"prompt": "Generate a function for calculating the average of a list of numbers in Python.\nNot applicable \n", "label": "def avg_list(lst):\n sum = 0\n count = 0\n for i in lst:\n  sum += i\n  count += 1\n avg = sum / count\n return avg", "predict": "def average(numbers):\n total = 0\n for num in numbers:\n total += num\n return total / len(numbers)"}
{"prompt": "Generate a Python program that compares two binary trees to check if they are similar. \n", "label": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef are_similar(root1, root2):\n    if root1 is None and root2 is None:\n        return True\n    if (root1 and root2) is None or (root1 or root2) is None:\n        return False\n    if root1.val != root2.val:\n        return False\n    else:\n        return are_similar(root1.left, root2.left) and are_similar(root1.right, root2.right)", "predict": "def is_similar(root1, root2):\n    if not root1 and not root2:\n        return True\n    if not root1 or not root2:\n        return False\n    if root1.data!= root2.data:\n        return False\n    return is_similar(root1.left, root2.left) and is_similar(root1.right, root2.right)"}
{"prompt": "Create a program for solving a quadratic equation in Python.\nEquation: x2 + 3x - 4 = 0 \n", "label": "import math\n  \ndef solveQuadratic(a, b, c): \n    discriminant = (b**2) - (4*a*c);\n    \n    # If discriminant is negative there are no real roots.\n    if (discriminant < 0): \n        return {\n            \"status\": false,\n            \"roots\": []\n        }\n    # If discriminant is zero, there is only one real roots.\n    elif (discriminant == 0):\n        x = -b/(2*a)\n        return {\n            \"status\": true,\n            \"roots\": [x]\n        }\n    # Otherwise there are 2 real roots \n    else:\n        x1 = (-b + math.sqrt(discriminant)) / (2*a); \n        x2 = (-b - math.sqrt(discriminant)) / (2*a); \n        return {\n            \"status\": true,\n            \"roots\": [x1, x2]\n        }\n\na = 1\nb = 3\nc = -4\n\nprint(solveQuadratic(a, b, c)) #{'status': True, 'roots': [-4.0, 1.0]}", "predict": "import math\n\ndef solve_quadratic(a, b, c):\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n\n    # Calculate the two roots\n    root1 = (-b + math.sqrt(discriminant)) / (2*a)\n    root2 = (-b - math.sqrt(discriminant)) / (2*a)\n\n    # Return the two roots\n    return root1, root2\n\n# Solve the quadratic equation\nroot1, root2 = solve_quadratic(1, 3, -4)\nprint(\"The roots of the quadratic equation are\", root1, \"and\", root2)"}
{"prompt": "Construct a Python code for adding two matrices. \n", "label": "def add_matrix(matrix1, matrix2):\n    if len(matrix1) != len(matrix2):\n        return 'Matrices not compatible'\n    if len(matrix1[0]) != len(matrix2[0]):\n        return 'Matrices not compatible'\n    \n    rows = len(matrix1)\n    cols = len(matrix1[0])\n    result = [[sum(row) for row in zip(*size)] for size in zip(matrix1, matrix2)]\n    \n    return result", "predict": "def add_matrices(matrix1, matrix2):\n    \"\"\"\n    This function adds two matrices and returns the result\n    \"\"\"\n    result = [[0 for x in range(len(matrix1[0]))] for y in range(len(matrix1))]\n    for i in range(len(matrix1)):\n        for j in range(len(matrix1[0])):\n            result[i][j] = matrix1[i][j] + matrix2[i][j]\n    return result"}
{"prompt": "Generate a Python program which takes a string as input and prints all of its substrings in order from longest to shortest length. \n", "label": "def substring_in_order(string): \n    result = [] \n    n = len(string) \n    for l in range(n, 0, -1): \n        for i in range(n-l + 1): \n            result.append(string[i:i+l]) \n    return result \n\nstring = input(\"Enter the string: \") \nprint (\"All substrings in order from longest to shortest:\") \nprint (substring_in_order(string))", "predict": "def print_substrings(string):\n    length = len(string)\n    for i in range(length, 0, -1):\n        for j in range(length - i + 1):\n            print(string[j:j + i])"}
{"prompt": "Generate a Python function which takes an array and a value and returns the index at which this value is present in the array.\narr = [2, 5, 9, 15], x = 5 \n", "label": "def find_index(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1\n\nprint(find_index(arr, x))", "predict": "def find_index(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1\n\nindex = find_index([2, 5, 9, 15], 5)\nprint(index)"}
{"prompt": "Develop a Python program to find the common elements in two lists.\nList 1: [3, 9, 15, 21, 27]\nList 2: [21, 7, 13, 29, 31] \n", "label": "common_elements = [] \n  \n# using loop \nfor i in [3, 9, 15, 21, 27]:  \n    for j in [21, 7, 13, 29, 31]:  \n        if i == j: \n            common_elements.append(i) \n  \n# printing common elements \nprint(common_elements) \n# Output: [21]", "predict": "def find_common_elements(list1, list2):\n    common_elements = []\n    for element in list1:\n        if element in list2:\n            common_elements.append(element)\n    return common_elements\n\nlist1 = [3, 9, 15, 21, 27]\nlist2 = [21, 7, 13, 29, 31]\n\nprint(find_common_elements(list1, list2))\n\n# Output: [21]"}
{"prompt": "Create a Python program that takes in two strings and returns an integer indicating the number of common substrings between the two strings.\ns1 = \"abcd\", s2 = \"bae\" \n", "label": "def num_common_substrings(s1, s2):\n    count = 0\n    for i in range(len(s1)):\n        for j in range(len(s2)):\n            if s1[i] == s2[j]:\n                count += 1\n    return count\n\nresult = num_common_substrings(\"abcd\", \"bae\")\nprint(result)", "predict": "def common_substrings(s1, s2):\n    count = 0\n    for i in range(len(s1)):\n        for j in range(len(s2)):\n            if s1[i] == s2[j]:\n                count += 1\n    return count"}
{"prompt": "Generate a Python program to convert a string to its lowercase version. \n", "label": "def str_to_lower(string):\n    new_string = \"\"\n\n    for char in string:\n        new_string += char.lower()\n\n    return new_string", "predict": "def to_lower(s):\n    return s.lower()"}
{"prompt": "Can you generate a function in Python that shuffles a given list? \n", "label": "import random\n\ndef shuffle_list(list): \n    # Initialize the random number generator\n    random.seed()\n\n    # Shuffle the list\n    random.shuffle(list) \n\n    # Return the list\n    return list", "predict": "import random\n\ndef shuffle_list(lst):\n    random.shuffle(lst)\n    return lst"}
{"prompt": "Write a Python function to validate an a list of emails. The function should return a boolean indicating whether a given email address is valid.\nmail_list = [\"example.user@gmail.com\", \"bad@example\"] \n", "label": "def validate_mail_list(mail_list):\n    for mail in mail_list:\n        if not re.match(\"[^@]+@[^@]+\\.[^@]+\", mail):\n            return False\n    return True", "predict": "def validate_email_list(mail_list):\n    valid_emails = []\n    for email in mail_list:\n        if re.match(r\"[^@]+@[^@]+\\.[^@]+\", email):\n            valid_emails.append(email)\n    return valid_emails"}
{"prompt": "Create a Python script that will perform several simple math operations. The script should accept two integers as inputs and output the results of the following operations: addition, subtraction, multiplication, division, and modulo.\nint1 = 10\nint2 = 5 \n", "label": "int1 = 10\nint2 = 5\n\naddition = int1 + int2\nprint('Addition:', addition)\n\nsubtraction = int1 - int2\nprint('Subtraction:', subtraction)\n\nmultiplication = int1 * int2\nprint('Multiplication:', multiplication)\n\ndivision = int1 / int2\nprint('Division:', division)\n\nmodulo = int1 % int2\nprint('Modulo:', modulo)", "predict": "int1 = 10\nint2 = 5\n\n# Addition\nprint(\"Addition:\", int1 + int2)\n\n# Subtraction\nprint(\"Subtraction:\", int1 - int2)\n\n# Multiplication\nprint(\"Multiplication:\", int1 * int2)\n\n# Division\nprint(\"Division:\", int1 / int2)\n\n# Modulo\nprint(\"Modulo:\", int1 % int2)"}
{"prompt": "Create a Python program to perform sentiment analysis on product reviews. The program should use natural language processing techniques like tokenization and n-grams to generate features for sentiment analysis and use a classification model to assign sentiments to the reviews.\nNot applicable \n", "label": "import numpy as np\nimport pandas as pd\nimport nltk\nfrom nltk.tokenize import word_tokenize\nimport matplotlib.pyplot as plt\nfrom nltk.corpus import stopwords\nfrom nltk.stem import WordNetLemmatizer \nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import classification_report\n\n# Read in the data\ndata = pd.read_csv('reviews.csv')\n\n# Tokenise the texts\ndata['tokenised'] = data['review'].apply(word_tokenize)\n\n# Remove stopwords\nstop_words = set(stopwords.words('english'))\ndata['filtered'] = data['tokenised'].apply(lambda x: [val for val in x if val not in stop_words])\n\n# Normalize words\nwordnet_lemmatizer = WordNetLemmatizer()\ndata['normalised'] = data['filtered'].apply(lambda x: [wordnet_lemmatizer.lemmatize(val) for val in x])\n\n# Generate features using CountVectorizer\ncv = CountVectorizer()\ndata['features'] = cv.fit_transform(data['normalised'].astype('str')).toarray()\n\n# Split into training and test sets\nX = data['features']\ny = data['sentiment']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train model\nmodel = MultinomialNB(alpha=0.1)\nmodel.fit(X_train, y_train)\n\n# Predict using the test set\npredictions = model.predict(X_test)\n\n# Generate a classification report\nreport = classification_report(y_test, predictions)\nprint(report)", "predict": "import nltk\nfrom nltk.tokenize import word_tokenize\nfrom nltk.util import ngrams\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Preprocess the reviews\ndef preprocess(reviews):\n    tokens = [word_tokenize(review) for review in reviews]\n    tokens = [token for tokens in tokens for token in tokens]\n    ngrams = list(ngrams(tokens, 3))\n    return ngrams\n\n# Train the model\ndef train_model(ngrams, labels):\n    vectorizer = CountVectorizer()\n    X = vectorizer.fit_transform(ngrams)\n    clf = MultinomialNB()\n    clf.fit(X, labels)\n    return clf, vectorizer\n\n# Make predictions\ndef predict(review, clf, vectorizer):\n    review = word_tokenize(review)\n    review = vectorizer.transform(review)\n    prediction = clf.predict(review)\n    return prediction\n\n# Main program\nif __name__ == '__main__':\n    reviews = [\"This product is amazing\", \"I hated this product\"]\n    labels = [1, 0]\n    ngrams = preprocess(reviews)\n    clf, vectorizer = train_model(ngrams, labels)\n    predictions = predict(\"This product is terrible\", clf, vectorizer)\n    print(predictions)"}
{"prompt": "Write a python program to clean up a list of emails and put them into a new list.\nThe original list of emails:\n['bob@example.com', 'alice+bob@cafe.com', 'bob@gmail.com.uk', 'bob+alice@example'] \n", "label": "original_list = ['bob@example.com', 'alice+bob@cafe.com', 'bob@gmail.com.uk', 'bob+alice@example']\n\nclean_list = []\n\nfor email in original_list:\n email_without_plus = email.split('+')[0]\n email_without_dot_uk = email_without_plus.split('.uk')[0]\n clean_list.append(email_without_dot_uk)\n\nprint(clean_list) # prints ['bob@example.com', 'alice@cafe.com', 'bob@gmail.com', 'bob@example']", "predict": "emails = ['bob@example.com', 'alice+bob@cafe.com', 'bob@gmail.com.uk', 'bob+alice@example']\nclean_emails = []\n\nfor email in emails:\n    if '+' in email:\n        clean_emails.append(email.split('+')[0])\n    else:\n        clean_emails.append(email)\n\nprint(clean_emails)"}
{"prompt": "Generate sample data for a web application using Python's faker library. The output should contain three columns of data: name, email, and age.\nNot applicable \n", "label": "from faker import Faker\n\nfake = Faker()\nfor _ in range(10):\n print(fake.name(), fake.email(), fake.random_int(min=18, max=60))", "predict": "from faker import Faker\nimport pandas as pd\n\nfake = Faker()\n\n# Generate 1000 rows of sample data\ndata = {'name': [fake.name() for _ in range(1000)],\n        'email': [fake.email() for _ in range(1000)],\n        'age': [fake.random_int(min=18, max=90) for _ in range(1000)]}\n\ndf = pd.DataFrame(data)\nprint(df)"}
{"prompt": "Create a Python algorithm to classify positive and negative sentiment in tweets. \n", "label": "def sentiment_analysis(tweets):\n    # Initialize a list to store the result \n    results = [] \n\n    # Iterate through each tweet\n    for tweet in tweets:\n        # Clean the tweet \n        tweet = preprocessing(tweet)\n\n        # Vectorize the tweet and obtain the prediction \n        tweet_vector = vectorize(tweet)\n        prediction = predict_sentiment(tweet_vector)\n\n        # Append the prediction to the result list\n        if prediction == 1:\n            results.append(\"Positive\")\n        elif preduction == 0:\n            results.append(\"Negative\")\n\n    return results", "predict": "import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\n# create sentiment analyzer object\nsid = SentimentIntensityAnalyzer()\n\n# define positive and negative words\npositive_words = ['happy', 'excited', 'amazing']\nnegative_words = ['sad', 'angry', 'terrible']\n\n# classify tweets\ndef classify_tweet(tweet):\n    scores = sid.polarity_scores(tweet)\n    if scores['compound'] > 0:\n        if any(word in tweet for word in positive_words):\n            return 'positive'\n        else:\n            return 'neutral'\n    elif scores['compound'] < 0:\n        if any(word in tweet for word in negative_words):\n            return 'negative'\n        else:\n            return 'neutral'\n    else:\n        return 'neutral'"}
{"prompt": "Parse the given URL and print out the protocol, domain name, and path using Python.\nhttps://www.example.com/path/to/file \n", "label": "import urllib.parse\n\nurl = 'https://www.example.com/path/to/file'\nparsed_url = urllib.parse.urlparse(url)\n\n# Get the protocol\nprotocol = parsed_url.scheme\n\n# Get the domain name\ndomain_name = parsed_url.netloc\n\n# Get the path\npath = parsed_url.path\n\n# Print the results\nprint('Protocol:', protocol)\nprint('Domain name:', domain_name)\nprint('Path:', path)\n\n# Output:\n# Protocol: https\n# Domain name: www.example.com\n# Path: /path/to/file", "predict": "import urllib.parse\n\nurl = \"https://www.example.com/path/to/file\"\n\nparsed_url = urllib.parse.urlparse(url)\n\nprint(\"Protocol:\", parsed_url.scheme)\nprint(\"Domain name:\", parsed_url.netloc)\nprint(\"Path:\", parsed_url.path)"}
{"prompt": "Write a recursive Python function to generate Fibonacci numbers. \n", "label": "def fibonacci(n):\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n \nprint(fibonacci(10))", "predict": "def fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)"}
{"prompt": "Create a Kubernetes pod setup that publishes a tweet every 5 minutes.\nNot applicable \n", "label": "apiVersion: v1\nkind: Pod\nmetadata:\n  name: tweet-publisher\nspec:\n  containers:\n    - name: tweet-publisher\n      image: <INSERT_PUBLIC_PULLABLE_IMAGE_PATH_HERE>\n      command:\n        - sh\n        - -c\n        - 'crontab -lcrontab && while true; do python publish-tweet.py && crontab -l | { cat; echo \"*/5 * * * * python publish-tweet.py\"; } | crontab -; sleep 31622400; done'\n      volumeMounts:\n        - mountPath: /crontab/crontab\n          subPath: crontab\n          name: cronmount\n  volumes:\n    - name: cronmount\n      configMap:\n        name: tweet-cron\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: tweet-cron\ndata:\n  crontab: \"* * * * * python publish-tweet.py\"", "predict": "apiVersion: v1\nkind: Pod\nmetadata:\n  name: tweet-pod\nspec:\n  containers:\n  - name: tweet-container\n    image: twitters-app\n    command:\n    - python\n    - -u\n    - \"tweet.py\"\n    env:\n    - name: TWITTER_CONSUMER_KEY\n      value: \"your-consumer-key\"\n    - name: TWITTER_CONSUMER_SECRET\n      value: \"your-consumer-secret\"\n    - name: TWITTER_ACCESS_TOKEN\n      value: \"your-access-token\"\n    - name: TWITTER_ACCESS_TOKEN_SECRET\n      value: \"your-access-token-secret\"\n    volumeMounts:\n    - name: config-volume\n      mountPath: /etc/twitter-app\n    - name: data-volume\n      mountPath: /data\n  volumes:\n  - name: config-volume\n    configMap:\n      name: config-map\n  - name: data-volume\n    emptyDir: {}"}
{"prompt": "Write a code to generate a two-dimensional array with zeros shapes in Python\nRow = 3, Column = 3 \n", "label": "\"\"\"\nWrite a code to generate a two-dimensional array with zeros shapes in Python\n\"\"\"\n\ndef generate_zeros_array(row,col):\n    return [[0] * col for _ in range(row)]\n\n# Example\nrow = 3\ncol = 3\n\narray = generate_zeros_array(row, col)\nprint(array)\n# Output: [[0, 0, 0], [0, 0, 0], [0, 0, 0]]", "predict": "array = [[0 for x in range(3)] for y in range(3)]"}
{"prompt": "Write a Python code to create a dictionary which contains a data structrue in the form of [x:x^2] where x is the key and x^2 is the value.\nnumbers = [1, 2, 3, 4, 5] \n", "label": "numbers = [1, 2, 3, 4, 5] \n\ndict_numbers = {num: num**2 for num in numbers}\nprint(dict_numbers)", "predict": "dictionary = {}\n\nfor num in numbers:\n    dictionary[num] = num**2\n\nprint(dictionary)"}
{"prompt": "Create a Python script to print the numbers from 1 to 50, but for multiples of 3 print \"Fizz\" instead of the number, for multiples of 5 print \"Buzz\" instead of the number and for multiples of both 3 and 5 print \"FizzBuzz\".\nNot applicable \n", "label": "for i in range(1, 51):\n    if i % 3 == 0 and i % 5 == 0:\n        print(\"FizzBuzz\")\n    elif i % 3 == 0:\n        print(\"Fizz\")\n    elif i % 5 == 0:\n        print(\"Buzz\")\n    else:\n        print(i)", "predict": "for i in range(1, 51):\n if i % 3 == 0 and i % 5 == 0:\n  print(\"FizzBuzz\")\n elif i % 3 == 0:\n  print(\"Fizz\")\n elif i % 5 == 0:\n  print(\"Buzz\")\n else:\n  print(i)"}
{"prompt": "Create a Python program to calculate the square root of a user-defined positive number.\nn = 100 \n", "label": "import math\n\nn = 100\n\n#Calculate the square root of a number\nsquare_root = math.sqrt(n)\n\nprint(f'Square root of {n} is {square_root}')", "predict": "import math\n\ndef sqrt(n):\n    return math.sqrt(n)\n\nn = 100\nresult = sqrt(n)\nprint(result)"}
{"prompt": "Create a Python class called Rectangle to represent a two-dimensional rectangle with a length and width. \n", "label": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n\n    def area(self):\n        return self.length * self.width", "predict": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n\n    def area(self):\n        return self.length * self.width\n\n    def perimeter(self):\n        return 2 * (self.length + self.width)"}
{"prompt": "Create a data visualization dashboard in Python using Matplotlib. \n", "label": "import matplotlib\nimport matplotlib.pyplot as plt\n\n# Generate the data for the dashboard\nx = [1,2,3,4,5]\ny = [10,25,30,50,80]\n\n# Create the figure and set the size\nfig = plt.figure(figsize=(10,6))\n\n# Configure the plot\nplt.plot(x, y, color='green', marker='o', linestyle='dashed', linewidth=2, markersize=12)\nplt.title(\"My Data Visualization Dashboard\")\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\n\n# Show the plot\nplt.show()", "predict": "import matplotlib.pyplot as plt\n\n# Data to be plotted\nx = [1, 2, 3, 4, 5]\ny = [10, 15, 20, 25, 30]\n\n# Plotting the data\nplt.plot(x, y)\n\n# Adding title and labels\nplt.title(\"Data Visualization Dashboard\")\nplt.xlabel(\"X-axis\")\nplt.ylabel(\"Y-axis\")\n\n# Showing the plot\nplt.show()"}
{"prompt": "Edit the following python code to prompt the user to enter the value of radius to calculate the area of a circle. \n", "label": "# Calculate area of a circle\n\nPi = 3.14\n\n# Get radius from user\nradius = float(input(\"Please enter the radius of the circle: \"))\n\n# Calculate the circle area\narea = Pi*radius**2\n\n# Print the area\nprint(\"The area of the circle is:\", area)", "predict": "# Prompt user to enter the value of radius\nradius = float(input(\"Enter the radius of the circle: \"))\n\n# Calculate the area of the circle\narea = 3.14 * radius * radius\n\n# Print the result\nprint(\"The area of the circle is\", area)"}
{"prompt": "Create a Python algorithm to identify the longest word in a sentence.\n“The rain in Spain stays mainly in the plain.” \n", "label": "def find_longest_word(sentence):\n    words = sentence.split()\n    # initialise longest_word variable with 0\n    longest_word = 0\n    for word in words:\n        if len(word) > longest_word:\n            longest_word = len(word)\n            longest_word_str = word\n    return longest_word_str", "predict": "def find_longest_word(sentence):\n    words = sentence.split(' ')\n    longest_word = ''\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word\n\nlongest_word = find_longest_word(\"The rain in Spain stays mainly in the plain.\")\nprint(longest_word)"}
{"prompt": "Write a Python script that can convert degrees Fahrenheit to degrees Celsius. \n", "label": "def FahrenheitToCelsius(temp_fahrenheit):\n    temp_celsius = (temp_fahrenheit - 32) * 5/9\n    return temp_celsius", "predict": "def fahrenheit_to_celsius(fahrenheit):\n    celsius = (fahrenheit - 32) * 5/9\n    return celsius"}
{"prompt": "Generate a Python function that checks if a given number is an Armstrong number. \n", "label": "def is_armstrong_number(num):   \n    n = len(str(num)) \n    # initialize sum  \n    temp = num  \n    sum_of_digits = 0\n  \n    # find sum of nth power of individual digits  \n    while temp > 0:  \n        digit = temp % 10  \n        sum_of_digits += digit ** n  \n        temp //= 10  \n  \n    # if num is equal to sum_of_digits then the number is an Armstrong number  \n    if num == sum_of_digits:  \n        return True \n  \n    else: \n        return False", "predict": "def is_armstrong_number(num):\n    n = len(str(num))\n    sum = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** n\n        temp //= 10\n    return num == sum"}
{"prompt": "Write a code in Python to print the following pattern: \n", "label": "for i in range(5):\n    for j in range(i+1):\n        print(\"*\", end=\"\")\n    print(\"\")\n\nfor i in range(5, 0, -1):\n    for j in range(i):\n        print(\"*\", end=\"\")\n    print(\"\")", "predict": "for i in range(1, 6):\n    for j in range(1, i + 1):\n        print(\"*\", end=\"\")\n    print()"}
{"prompt": "Program a web scraper in Python to extract the latest stock prices from specific websites.\n[\"AAPL stocks\", \"MSFT stocks\", \"FB stocks\", \"GOOG stocks\"] \n", "label": "import requests\nfrom bs4 import BeautifulSoup\n\n# input\nstocks = [\"AAPL stocks\", \"MSFT stocks\", \"FB stocks\", \"GOOG stocks\"]\n\n# process\ndef get_stock_price(stock):\n    url = f\"https://finance.yahoo.com/quote/{stock}\"\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    price = soup.find('div', {'class': 'My(6px) Pos(r) smartphone_Mt(6px)'}).find('span').text\n    return price\n\n# output\nfor stock in stocks:\n    price = get_stock_price(stock)\n    print(f'The price of {stock} is {price}.')", "predict": "import requests\nfrom bs4 import BeautifulSoup\n\ndef get_stock_price(url):\n    r = requests.get(url)\n    soup = BeautifulSoup(r.text, 'html.parser')\n    price = soup.find('span', class_='price').text\n    return price\n\nurls = [\"https://finance.yahoo.com/quote/AAPL\", \"https://finance.yahoo.com/quote/MSFT\", \"https://finance.yahoo.com/quote/FB\", \"https://finance.yahoo.com/quote/GOOG\"]\n\nfor url in urls:\n    print(get_stock_price(url))"}
{"prompt": "The code provides Python wrappers around TensorFlow ops for decoding LibSVM input to tensors. To use it, call the `decode_libsvm` function with the following arguments: `input` (a `Tensor` of type `string`), `num_features` (an `int` that is `>= 1`), `dtype` (an optional `tf.DType` from: `tf.float32, tf.float64", "label": "\"\"\"Python wrappers around TensorFlow ops.\n\nThis file is MACHINE GENERATED! Do not edit.\nOriginal C++ source file: libsvm_ops.cc\n\"\"\"\n\nimport collections as _collections\nimport six as _six\n\nfrom tensorflow.python import pywrap_tensorflow as _pywrap_tensorflow\nfrom tensorflow.python.eager import context as _context\nfrom tensorflow.python.eager import core as _core\nfrom tensorflow.python.eager import execute as _execute\nfrom tensorflow.python.framework import dtypes as _dtypes\nfrom tensorflow.python.framework import errors as _errors\nfrom tensorflow.python.framework import tensor_shape as _tensor_shape\n\nfrom tensorflow.core.framework import op_def_pb2 as _op_def_pb2\n# Needed to trigger the call to _set_call_cpp_shape_fn.\nfrom tensorflow.python.framework import common_shapes as _common_shapes\nfrom tensorflow.python.framework import op_def_registry as _op_def_registry\nfrom tensorflow.python.framework import ops as _ops\nfrom tensorflow.python.framework import op_def_library as _op_def_library\nfrom tensorflow.python.util.tf_export import tf_export\n\n\n_decode_libsvm_outputs = [\"label\", \"feature_indices\", \"feature_values\",\n                         \"feature_shape\"]\n_DecodeLibsvmOutput = _collections.namedtuple(\n    \"DecodeLibsvm\", _decode_libsvm_outputs)\n\n\n@tf_export('decode_libsvm')\ndef decode_libsvm(input, num_features, dtype=_dtypes.float32, label_dtype=_dtypes.int64, name=None):\n  r\"\"\"Convert LibSVM input to tensors. The output consists of\n\n  a label and a feature tensor. The shape of the label tensor\n  is the same as input and the shape of the feature tensor is\n  `[input_shape, num_features]`.\n\n  Args:\n    input: A `Tensor` of type `string`. Each string is a record in the LibSVM.\n    num_features: An `int` that is `>= 1`. The number of features.\n    dtype: An optional `tf.DType` from: `tf.float32, tf.float64, tf.int32, tf.int64`. Defaults to `tf.float32`.\n    label_dtype: An optional `tf.DType` from: `tf.float32, tf.float64, tf.int32, tf.int64`. Defaults to `tf.int64`.\n    name: A name for the operation (optional).\n\n  Returns:\n    A tuple of `Tensor` objects (label, feature_indices, feature_values, feature_shape).\n\n    label: A `Tensor` of type `label_dtype`. A tensor of the same shape as input.\n    feature_indices: A `Tensor` of type `int64`. A 2-D int64 tensor of dense_shape [N, ndims].\n    feature_values: A `Tensor` of type `dtype`. A 1-D tensor of any type and dense_shape [N].\n    feature_shape: A `Tensor` of type `int64`. A 1-D int64 tensor of dense_shape [ndims].\n  \"\"\"\n  _ctx = _context._context\n  if _ctx is None or not _ctx._eager_context.is_eager:\n    num_features = _execute.make_int(num_features, \"num_features\")\n    if dtype is None:\n      dtype = _dtypes.float32\n    dtype = _execute.make_type(dtype, \"dtype\")\n    if label_dtype is None:\n      label_dtype = _dtypes.int64\n   ", "predict": ", tf.int64, tf.int32, tf.string`).\n\nThe output of the `decode_libsvm` function is a `Tensor` of type `tf.float32` with the shape `[num_samples, num_features]`.\n\nThe `decode_libsvm` function is defined in the `tf.contrib.layers.python.ops.libsvm_ops` module. It is used by the `tf.contrib.learn.libsvm_classifier` class and the `tf.contrib.learn.libsvm_regressor` class.\n\nExample usage:\n\n```python\n# Input is a string of LIBSVM format\ninput = tf.constant('1:1.0 2:2.0 3:3.0')\n\n# Output is a float32 tensor of shape [3, 1]\noutput = decode_libsvm(input, 1, tf.float32)\n\nprint(output)\n```\n\n\"\"\"\n\n\n# pylint: disable=missing-docstring\n\n\nimport tensorflow as tf\n\n\ndef decode_libsvm(input, num_features, dtype=tf.float32):\n  \"\"\"Decode LibSVM input to a tensor.\n\n  Args:\n    input: A `Tensor` of type `string` that contains LibSVM format.\n    num_features: An `int` that is `>= 1`.\n    dtype: An optional `tf.DType` from: `tf.float32, tf.float64, tf.int64, tf.int32, tf.string`.\n\n  Returns:\n    A `Tensor` of type `tf.float32` with the shape `[num_samples, num_features]`.\n  \"\"\"\n  features, labels = tf.decode_libsvm(input, num_features, dtype)\n  return features, labels\n\n\n# pylint: enable=missing-docstring\n\n from __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport numpy as np\nimport tensorflow as tf\n\nimport gzip\nimport pickle\n\n\nclass DataLoader(object):\n    def"}
{"prompt": "Write a Python program to compute the sum of the values of a given dictionary\ndictionary = {'A':5, 'B':6, 'C':10} \n", "label": "def dict_sum(dict):\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum", "predict": "def compute_sum(dictionary):\n    sum = 0\n    for key, value in dictionary.items():\n        sum += value\n    return sum"}
{"prompt": "Create a REST API in Python that can be used to delete an item from a list.\nNot applicable \n", "label": "from flask import Flask, request\nimport json\n\napp = Flask(__name__)\nitems = [\"Apple\", \"Banana\", \"Orange\"]\n\n@app.route('/items', methods=[\"GET\"])\ndef get_items():\n return json.dumps(items)\n\n@app.route('/items/<item>', methods=[\"DELETE\"])\ndef delete_item(item):\n if item in items:\n  items.remove(item)\n  message = \"Item successfully deleted.\"\n else:\n  message = \"Item not found.\"\n return json.dumps({\"message\": message})", "predict": "import flask\nfrom flask import request\n\napp = flask.Flask(__name__)\n\nitems = []\n\n@app.route('/items', methods=['POST'])\ndef add_item():\n item = request.json\n items.append(item)\n return flask.jsonify(item)\n\n@app.route('/items', methods=['DELETE'])\ndef delete_item():\n item_id = request.args.get('id')\n item = [item for item in items if item['id'] == item_id]\n if item:\n items.remove(item[0])\n return flask.jsonify({'message': 'Item deleted successfully'})\n else:\n return flask.jsonify({'message': 'Item not found'})\n\nif __name__ == '__main__':\n app.run(debug=True)"}
{"prompt": "Read a given list of strings and create a new list of all strings that are longer than 5 characters long.\n['Python', 'is', 'Fun'] \n", "label": "def filter_long_strings(string_list):\n long_strings = []\n for string in string_list:\n if len(string) > 5:\n long_strings.append(string)\n return long_strings\n\nstring_list = ['Python', 'is', 'Fun']\n\nlong_strings = filter_long_strings(string_list)\nprint(long_strings)", "predict": "def longer_than_five(words):\n    result = []\n    for word in words:\n        if len(word) > 5:\n            result.append(word)\n    return result\n\nprint(longer_than_five(['Python', 'is', 'Fun'])) # ['Python', 'Fun']"}
{"prompt": "Craft an algorithm in Python to move all zeroes in a list to the end of the list.\n[3, 0, 1, 0, 5, 0, 2] \n", "label": "def move_zeroes(lst):\n    # Count the number of non-zero elements\n    num_non_zeroes = 0\n    for num in lst:\n        if num != 0:\n            num_non_zeroes += 1\n  \n    # Initialize the new list\n    new_lst = []\n  \n    # Move all non-zeroes to the beginning of the new list\n    for i in range(num_non_zeroes):\n        new_lst.append(lst[i])\n  \n    # Append 0's to the end\n    for _ in range(len(lst)-num_non_zeroes):\n        new_lst.append(0)\n  \n    # Return the new list\n    return new_lst\n\nlst = [3, 0, 1, 0, 5, 0, 2]\nresult = move_zeroes(lst)\nprint(result)", "predict": "def move_zeroes(arr):\n    count = 0\n    for i in range(len(arr)):\n        if arr[i]!= 0:\n            arr[count] = arr[i]\n            count += 1\n    while count < len(arr):\n        arr[count] = 0\n        count += 1\n    return arr\n\narr = [3, 0, 1, 0, 5, 0, 2]\nprint(move_zeroes(arr))"}
{"prompt": "Create a Python program to implement the Fibonacci sequence. \n", "label": "def fibonacci_seq(n): \n    if n==0: \n        return 0\n    elif n==1: \n        return 1\n    else: \n        return fibonacci_seq(n-1)+fibonacci_seq(n-2)", "predict": "def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==1: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)"}
{"prompt": "Write a function in Python to print out an array backwards. \n", "label": "def print_reverse_array(arr):\n for i in range(len(arr)-1, -1, -1): \n  print(arr[i])", "predict": "def print_backwards(arr):\n    for i in range(len(arr)-1, -1, -1):\n        print(arr[i])"}
{"prompt": "Create a Python program to find the possible prime numbers from one to one hundred by using the Sieve of Eratosthenes algorithm. \n", "label": "def sieve_eratosthenes(n): \n    prime_list = [True] * (n+1) \n    prime_list[0] = False\n    prime_list[1] = False\n    primes = [] \n      \n    for i in range(2, n+1): \n        if prime_list[i] == True: \n            primes.append(i) \n            for j in range(i*i, n+1, i): \n                prime_list[j] = False\n    return primes \n  \nn = 100\nprint(\"The Prime numbers from 1 to 100 are:\")\nprint(sieve_eratosthenes(n))", "predict": "def sieve_of_eratosthenes(n):\n    # Create a boolean array \"prime[0..n]\" and initialize\n    # all entries it as true. A value in prime[i] will\n    # finally be false if i is Not a prime, else true.\n    prime = [True for i in range(n+1)]\n    p = 2\n    while (p * p <= n):\n        # If prime[p] is not changed, then it is a prime\n        if (prime[p] == True):\n            # Update all multiples of p\n            for i in range(p * 2, n+1, p):\n                prime[i] = False\n        p += 1\n    # Print all prime numbers\n    for p in range(2, n):\n        if prime[p]:\n            print(p)"}
{"prompt": "Create a Python function named \"Transpile\" that takes in four arguments: \"src_dir\", \"dst_dir\", \"model_filename\", and \"params_filename\". Inside the function, create a CPUPlace object and an Executor object using Paddle Fluid. Then, create a Scope object using fluid.core.Scope(). Load the inference program, feed target names, and fetch targets using fluid.io.load_inference_model() with the \"src_dir\", \"exe\", \"model_filename\", and \"params_filename\" arguments. Clone the inference program and apply the inference transpiler using fluid.InferenceTranspiler() and t.transpile(). Save the optimized inference program to \"dst_dir\" using fluid.io.save_persistables() and the \"inference_transpiler_program\" and \"params_filename\" arguments. If \"dst_dir\" does not exist, create it using os.makedirs(). Finally, create a main function that takes in arguments using argparse.ArgumentParser() and calls the \"Transpile\" function with the parsed arguments. \n", "label": "import os\nimport sys\nimport argparse\nimport paddle.fluid as fluid\n\n\ndef Transpile(src_dir, dst_dir, model_filename, params_filename):\n    place = fluid.CPUPlace()\n    exe = fluid.Executor(place)\n\n    inference_scope = fluid.core.Scope()\n    with fluid.scope_guard(inference_scope):\n        print \"Loading inference_program from \", src_dir\n        [inference_program, feed_target_names,\n         fetch_targets] = fluid.io.load_inference_model(src_dir, exe, model_filename, params_filename)\n\n        inference_transpiler_program = inference_program.clone()\n        # NOTE: Applying the inference transpiler will change the inference_transpiler_program.\n        t = fluid.InferenceTranspiler()\n        # Under the with statement, inference_scope is the global scope.\n        t.transpile(inference_transpiler_program, place)\n\n        #print inference_transpiler_program\n\n        print \"Saving the optimized inference_program to \", dst_dir\n        # There is a bug in fluid.io.save_inference_model, so we can use the following code instead.\n        if not os.path.isdir(dst_dir):\n            os.makedirs(dst_dir)\n        model_path = os.path.join(dst_dir, model_filename)\n        with open(model_path, \"wb\") as f:\n            f.write(inference_transpiler_program.desc.serialize_to_string())\n        fluid.io.save_persistables(exe, dst_dir, inference_transpiler_program, params_filename)\n\n\ndef main():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--src_dir', help='Source directory of inference model')\n    parser.add_argument('--dst_dir', help='Dstination directory of inference model')\n    parser.add_argument('--model_filename', default=None, help='The name of model file')\n    parser.add_argument('--params_filename', default=None, help='The name of params file')\n    args = parser.parse_args()\n    Transpile(args.src_dir, args.dst_dir, args.model_filename, args.params_filename)\n\n\nif __name__ == '__main__':\n    main()\n", "predict": "import os\nimport argparse\nimport numpy as np\nimport paddle.fluid as fluid\nfrom paddle.fluid.core import CPUPlace\nfrom paddle.fluid.executor import Executor\nfrom paddle.fluid.core import Scope\nfrom paddle.fluid.io import load_inference_model, save_persistables\nfrom paddle.fluid.transpiler import InferenceTranspiler\n\ndef Transpile(src_dir, dst_dir, model_filename, params_filename):\n    \"\"\"Transpile inference program.\n\n    Args:\n        src_dir (str): The source directory.\n        dst_dir (str): The destination directory.\n        model_filename (str): The filename of the inference model.\n        params_filename (str): The filename of the inference parameters.\n\n    Returns:\n        None\n    \"\"\"\n    # Create a CPU place object\n    exe = fluid.Executor(CPUPlace())\n\n    # Create a scope object\n    scope = Scope()\n\n    # Load the inference model and parameters\n    load_inference_model(\n        exe,\n        scope,\n        src_dir,\n        model_filename,\n        params_filename,\n        fetch_list=['predict'],\n        feed_names=['image'])\n\n    # Create an inference transpiler\n    transpiler = InferenceTranspiler()\n\n    # Transpile the inference model\n    inference_transpiler_program = transpiler.transpile(\n        exe, scope, 'predict', 'image','model')\n\n    # Save the optimized inference program\n    save_persistables(exe, inference_transpiler_program,\n                      'inference_transpiler_program', params_filename)\n\n    # If the destination directory does not exist, create it\n    if not os.path.exists(dst_dir):\n        os.makedirs(dst_dir)\n\n\nif __name__ == '__main__':\n    # Parse the arguments\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--src_dir', type=str, required=True)\n    parser.add_argument('--dst_dir"}
{"prompt": "Create a Python function called add_marks which takes two parameters: marks(a list) and mark(an integer). The function should add the mark to each value in the marks list.\nmarks = [87, 56, 99, 54]\nmark = 4 \n", "label": "def add_marks(marks, mark):\n return [m + mark for m in marks]", "predict": "def add_marks(marks, mark):\n    for i in range(len(marks)):\n        marks[i] += mark\n    return marks"}
{"prompt": "Design a positive feedback loop for the following python program.\nfor i in range(10):\n    print(\"hello\") \n", "label": "for i in range(10):\n    print(\"hello\")\n    i += 1\n    if i == 10:\n        print(\"You've got it!\")", "predict": "for i in range(10):\n    print(\"hello\")\n    print(\"world\")"}
{"prompt": "Implement a function that prints out the numbers from 1 to 50 in python \n", "label": "def print_numbers():\n    for i in range(1, 51):\n        print(i)\n\nprint_numbers()", "predict": "def print_numbers():\n    for i in range(1, 51):\n        print(i)"}
{"prompt": "Write a Python program to send an automated email. The program should take a list of emails as input, iterate over the list, and send an email to each address.\nrecipient_emails = [\"email1@example.com\",\"email2@example.com\"] \n", "label": "import smtplib\n\nsender_email = 'example@gmail.com'\npassword = 'example_password'\n\nfor email in recipient_emails:\n    with smtplib.SMTP('smtp.gmail.com', 587) as server:\n        server.ehlo()\n        server.starttls()\n        server.login(sender_email, password)\n\n        subject = 'Automated Email from Program'\n        message = 'Message body'\n \n        server.sendmail(sender_email, email, 'Subject: ' + subject + '\\n\\n' + message)\n        server.quit()\n        print('Email sent successfully.')", "predict": "import smtplib\n\n# Set up the SMTP server\nsmtp_server = \"smtp.example.com\"\nsmtp_port = 587\n\n# Set up the sender and recipient email addresses\nsender_email = \"sender@example.com\"\nrecipient_emails = [\"email1@example.com\",\"email2@example.com\"]\n\n# Set up the message to be sent\nmessage = \"\"\"Subject: Automated Email\n\nThis is an automated email sent to you.\"\"\"\n\n# Send the email\nfor recipient_email in recipient_emails:\n server = smtplib.SMTP(smtp_server, smtp_port)\n server.starttls()\n server.login(sender_email, 'password')\n server.sendmail(sender_email, recipient_email, message)\n server.quit()"}
{"prompt": "Create a Python class which represents a 3D Vector \n", "label": "class Vector3D:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n    \n    def __str__(self):\n        return \"(\" + str(self.x) + \", \" + str(self.y) + \", \" + str(self.z) + \")\"", "predict": "class Vector3D:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n    \n    def magnitude(self):\n        return (self.x**2 + self.y**2 + self.z**2)**0.5\n    \n    def dot(self, other):\n        return self.x*other.x + self.y*other.y + self.z*other.z"}
{"prompt": "Given two strings, write a Python program to find the total number of common characters present in both strings \n", "label": "def num_common_chars(str1, str2):\n    common = 0\n    for c in str1:\n        if c in str2:\n            common += 1\n    return common", "predict": "def common_characters(str1, str2):\n    common_chars = 0\n    for char in str1:\n        if char in str2:\n            common_chars += 1\n    return common_chars"}
{"prompt": "Modify the following Python code to handle errors.\ndef read_data_from_json(filename):\n    with open(filename, 'r') as f:\n        data = json.load(f)\n    return data \n", "label": "def read_data_from_json(filename):\n    try:\n        with open(filename, 'r') as f:\n            data = json.load(f)\n        return data\n    except FileNotFoundError:\n        print(\"The file specified does not exist.\")\n    except json.decoder.JSONDecodeError:\n        print(\"The file specified is not in a valid JSON format.\")", "predict": "def read_data_from_json(filename):\n    try:\n        with open(filename, 'r') as f:\n            data = json.load(f)\n    except FileNotFoundError:\n        print(\"File not found.\")\n        return None\n    except json.JSONDecodeError:\n        print(\"Error decoding JSON.\")\n        return None\n    return data"}
{"prompt": "Analyze a given Python code and write a function that checks if a given number is prime.\ndef primeCheck(num): \n", "label": "def primeCheck(num):\n if num > 1:\n for i in range(2, num):\n  if (num % i) == 0:\n   return False\n else:\n  return False\n return True", "predict": "def primeCheck(num):\n    # Check if num is less than 2\n    if num < 2:\n        return False\n    \n    # Iterate through numbers from 2 to num - 1\n    for i in range(2, num):\n        # If num is divisible by any number in the range, it is not prime\n        if num % i == 0:\n            return False\n    \n    # If num is not divisible by any number in the range, it is prime\n    return True"}
{"prompt": "Create a python program to filter out all the even numbers from a given list.\n[3, 4, 5, 6, 7] \n", "label": "def filter_even_numbers(numbers):\n    even_numbers = []\n    for i in numbers:\n        if i % 2 == 0:\n            even_numbers.append(i)\n    return even_numbers\n    \n    \nfiltered = filter_even_numbers([3, 4, 5, 6, 7])\nprint(filtered)", "predict": "def filter_even(numbers):\n    return [num for num in numbers if num % 2!= 0]\n\nnumbers = [3, 4, 5, 6, 7]\nfiltered_numbers = filter_even(numbers)\nprint(filtered_numbers)"}
{"prompt": "Implement a function in Python that takes a Huffman tree and drop all its leaf nodes.\n(1)\n      /      \\\n    (2)      (3)\n    / \\      / \\\n  (4) (5)  (6) (7) \n", "label": "def dropLeafNodes(head): \n    \n    # If node is not None and doesn't have any children \n    if head and not head.left and not head.right: \n        return None\n  \n    # Don't change anything if head is None \n    if not head: \n        return None\n  \n    # Recursively call dropLeafNodes on left and right subtrees\n    head.left = dropLeafNodes(head.left) \n    head.right = dropLeafNodes(head.right) \n  \n    # Return head of the modified tree\n    return head", "predict": "def drop_leaf_nodes(tree):\n    if tree.left is None and tree.right is None:\n        return None\n    tree.left = drop_leaf_nodes(tree.left)\n    tree.right = drop_leaf_nodes(tree.right)\n    return tree\n\ntree = TreeNode(1)\ntree.left = TreeNode(2)\ntree.right = TreeNode(3)\ntree.left.left = TreeNode(4)\ntree.left.right = TreeNode(5)\ntree.right.left = TreeNode(6)\ntree.right.right = TreeNode(7)\n\ntree = drop_leaf_nodes(tree)\n\nprint(tree.left.data) # 2\nprint(tree.right.data) # 3"}
{"prompt": "Create a web crawler in Python that starts from a website and looks for other links in the page then scrapes the page content.\nNot applicable \n", "label": "import requests\nfrom bs4 import BeautifulSoup\nimport re\n\ndef crawl(url):\n visited = set()\n queue = [url] \n \n while queue:\n curr = queue.pop(0)\n visited.add(curr) \n response = requests.get(curr)\n \n if response.ok:\n soup = BeautifulSoup(response.text, 'html.parser')\n\n# scrape the page here \n\n# find all the links\n links = soup.find_all('a', href=re.compile('^http')) \n \n for link in links:\n if link['href'] not in visited:\n queue.append(link['href'])", "predict": "import requests\nfrom bs4 import BeautifulSoup\n\n# Start from the given website\nurl = 'https://example.com'\n\n# Get the response from the website\nresponse = requests.get(url)\n\n# Parse the response\nsoup = BeautifulSoup(response.text, 'html.parser')\n\n# Get all links from the page\nlinks = soup.find_all('a')\n\n# Iterate through all links\nfor link in links:\n    # Get the href attribute\n    href = link.get('href')\n    # Check if the href attribute is not empty\n    if href is not None:\n        # Get the response from the link\n        response = requests.get(href)\n        # Parse the response\n        soup = BeautifulSoup(response.text, 'html.parser')\n        # Get the page content\n        content = soup.find_all('p')\n        # Do something with the content"}
{"prompt": "Write a Python program to calculate the maximum, minimum and mean number of elements in a given string. \n", "label": "def get_stats_for_string(string):\n    num_elements = len(string)\n    max_element = max(string)\n    min_element = min(string)\n    mean_element = sum(string) / num_elements\n    return (max_element, min_element, mean_element)\n\nstring = \"abcdef\"\nstats_for_string = get_stats_for_string(string)\nprint(\"Max: {0}, Min: {1}, Mean: {2}\".format(*stats_for_string))", "predict": "def max_min_mean(string):\n    max_num = 0\n    min_num = float('inf')\n    sum_num = 0\n    for num in string:\n        num = int(num)\n        if num > max_num:\n            max_num = num\n        if num < min_num:\n            min_num = num\n        sum_num += num\n    mean_num = sum_num / len(string)\n    return max_num, min_num, mean_num"}
{"prompt": "Write a Python program to calculate the compound interest.\ninvestment_amount = 1000, time = 5, rate_of_interest = 5 \n", "label": "def compoundInterest(investment_amount, rate_of_interest, time):\n    compound_interest = investment_amount * (pow((1 + rate_of_interest / 100), time))\n    return compound_interest\n\nci = compoundInterest(1000, 5, 5)\nprint(ci)", "predict": "def compound_interest(investment_amount, time, rate_of_interest):\n    amount = investment_amount * (1 + rate_of_interest/100)**time\n    return amount\n\ninvestment_amount = 1000\ntime = 5\nrate_of_interest = 5\n\nprint(\"The compound interest is:\", compound_interest(investment_amount, time, rate_of_interest))"}
{"prompt": "Create a command-line application in Python that stores customer data and allows customer to query by customer name \n", "label": "import sys \n  \ndef print_customer_data(name): \n    # Code for searching customer data by customer name and \n    # printing results \n    ...\n\n# Main function for the customer search application\nif __name__==\"__main__\": \n    # Get command line arguments \n    args = sys.argv \n    \n    if len(args) == 2: \n        name = args[1]\n        print_customer_data(name) \n    else: \n        print(\"Invalid arguments, please specify a customer name.\")", "predict": "import argparse\n\n# create the parser\nparser = argparse.ArgumentParser()\n\n# add the arguments\nparser.add_argument(\"-c\", \"--customer\", help=\"The customer name to query\")\n\n# parse the arguments\nargs = parser.parse_args()\n\n# define the customer data\ncustomers = {\n    \"John\": {\"age\": 25, \"gender\": \"male\"},\n    \"Jane\": {\"age\": 30, \"gender\": \"female\"},\n    \"Bob\": {\"age\": 40, \"gender\": \"male\"}\n}\n\n# query the customer data\nif args.customer:\n    customer = customers.get(args.customer)\n    if customer:\n        print(customer)\n    else:\n        print(\"Customer not found\")"}
{"prompt": "Develop a program in Python to calculate the Fibonacci sequence. \n", "label": "def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \n\n# Driver Code \nprint(fibonacci(9))", "predict": "def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)"}
{"prompt": "Generate a python program that takes two sets of integers as input and outputs the intersection of those sets.\nset1 = {1, 2, 3, 4}\nset2 = {3, 4, 5, 6} \n", "label": "def intersection(set1, set2): \n   return set1 & set2\n\nresult = intersection(set1, set2) \nprint(result)", "predict": "def intersection(set1, set2):\n    return set1.intersection(set2)\n\nset1 = {1, 2, 3, 4}\nset2 = {3, 4, 5, 6}\n\nprint(intersection(set1, set2))"}
{"prompt": "Design an algorithm in Python to find the smallest number in a given list.\n[4, 5, 6, 7, 8] \n", "label": "def smallestNumber(nums):\n    smallest = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] < smallest:\n            smallest = nums[i]\n    return smallest\n\nnums = [4, 5, 6, 7, 8]\nsmallestNum = smallestNumber(nums)\nprint('The smallest number is', smallestNum)", "predict": "def find_smallest(nums):\n    smallest = nums[0]\n    for num in nums:\n        if num < smallest:\n            smallest = num\n    return smallest\n\nprint(find_smallest([4, 5, 6, 7, 8]))"}
{"prompt": "Generate a python program for printing a Pascal triangle.\nNumber of rows= 5 \n", "label": "def PascalTriangle(n) : \n      \n    # An auxiliary array to store \n    # generated pscal triangle values \n    arr = [0 for i in range(n)] \n      \n    # Iterate through every line and \n    # print integer(s) in it \n    for line in range(0, n) : \n          \n        # Every line has number of  \n        # integers equal to line  \n        # number \n        for i in range (0, line + 1) : \n              \n            # First and last values  \n            # in every row are 1 \n            if (i == 0 or i == line) : \n                arr[i] = 1\n                  \n            # Other values are sum of  \n            # values just above and  \n            # left of above \n            else : \n                arr[i] = arr[i] + arr[i - 1]  \n              \n        # Printing array in \n        # mantainence of order          \n        for i in range (0, line + 1) : \n            print(arr[i], end =\" \")  \n        print()   \n  \n# Driver Code \nn = 5\nPascalTriangle(n)", "predict": "def pascal_triangle(rows):\n    pascal_triangle = [[1]]\n    for i in range(1, rows):\n        previous_row = pascal_triangle[i-1]\n        current_row = [1]\n        for j in range(1, i):\n            current_row.append(previous_row[j-1] + previous_row[j])\n        current_row.append(1)\n        pascal_triangle.append(current_row)\n    return pascal_triangle\n\npascal_triangle(5)\n\n# Output: [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]"}
{"prompt": "Create a python script that filters out all negative numbers from the given matrix\n[[-1, 2, -3], [-4, 5, 6], [-7, 8, 9]] \n", "label": "import numpy as np\n\ndef filter_out_negative(matrix):\n  # Convert matrix to numpy array\n  matrix = np.array(matrix)\n  # Find all negative numbers and set them to 0\n  matrix[matrix < 0] = 0\n  return matrix\n\nresult = filter_out_negative([[-1, 2, -3], [-4, 5, 6], [-7, 8, 9]])\nprint(result)", "predict": "def filter_negatives(matrix):\n    result = []\n    for row in matrix:\n        result.append([x for x in row if x >= 0])\n    return result\n\nmatrix = [[-1, 2, -3], [-4, 5, 6], [-7, 8, 9]]\nprint(filter_negatives(matrix))"}
{"prompt": "Create a basic REST API using Python and Flask to list all the countries in the world.\nNot applicable \n", "label": "import flask\nfrom flask import Flask, request, jsonify\nimport json\n\napp = Flask(name)\n\n@app.route('/countries', methods=['GET'])\ndef get_countries():\nwith open('data.json', 'r') as f:\n countries = json.load(f)\n return jsonify(countries)\n\nif name == 'main':\n app.run()", "predict": "from flask import Flask, jsonify\n\napp = Flask(__name__)\n\ncountries = [\n    {\n        \"name\": \"United States\",\n        \"code\": \"US\"\n    },\n    {\n        \"name\": \"Canada\",\n        \"code\": \"CA\"\n    },\n    {\n        \"name\": \"Mexico\",\n        \"code\": \"MX\"\n    },\n    {\n        \"name\": \"United Kingdom\",\n        \"code\": \"GB\"\n    },\n    {\n        \"name\": \"France\",\n        \"code\": \"FR\"\n    },\n    {\n        \"name\": \"Germany\",\n        \"code\": \"DE\"\n    },\n    {\n        \"name\": \"Italy\",\n        \"code\": \"IT\"\n    },\n    {\n        \"name\": \"Spain\",\n        \"code\": \"ES\"\n    },\n    {\n        \"name\": \"China\",\n        \"code\": \"CN\"\n    },\n    {\n        \"name\": \"India\",\n        \"code\": \"IN\"\n    },\n    {\n        \"name\": \"Japan\",\n        \"code\": \"JP\"\n    },\n    {\n        \"name\": \"South Korea\",\n        \"code\": \"KR\"\n    },\n    {\n        \"name\": \"Australia\",\n        \"code\": \"AU\"\n    }\n]\n\n@app.route('/countries', methods=['GET'])\ndef get_countries():\n    return jsonify(countries)\n\nif __name__ == '__main__':\n    app.run(debug=True)"}
{"prompt": "Create a web scraper in Python that can extract hotel reviews from TripAdvisor.\nNot applicable \n", "label": "import requests\nfrom bs4 import BeautifulSoup\n\n# Define the URL and the headers\nurl = '<url>'\nheaders = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36'}\n\n# Make a request and get HTML in response\nresponse = requests.get(url, headers=headers)\n\n# Parse HTML\nsoup = BeautifulSoup(response.text, 'html.parser')\n\n# Find all reviews\nreviews = soup.find_all('div', {'class': 'review-container'})\n\n# Go through every review and extract the data\nfor review in reviews:\n    # Get the title\n    title = review.find('span', {'class': 'noQuotes'}).text\n\n    # Get the text\n    text = review.find('p', {'class': 'partial_entry'}).text\n\n    # Print for demo\n    print(title)\n    print(text)\n    print('-' * 50)", "predict": "import requests\nfrom bs4 import BeautifulSoup\n\n# Set the URL\nurl = \"https://www.tripadvisor.com/Hotels-g6049102-New_York_City_New_York_New_York.html\"\n\n# Make the request\nresponse = requests.get(url)\n\n# Parse the HTML\nsoup = BeautifulSoup(response.text, \"html.parser\")\n\n# Extract the reviews\nreviews = soup.find_all(\"div\", class_=\"ui_review\")\n\n# Print the reviews\nfor review in reviews:\n print(review.text)"}
{"prompt": "Develop a machine learning model in Python to identify the author of a given article. \n", "label": "from sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import train_test_split\n\n# load data\nsamples = [\n  \"sample 1 from AuthorA\",\n  \"sample 2 from AuthorA\",\n  \"sample 1 from AuthorB\",\n  \"sample 2 from AuthorB\"\n]\nlabels = [\n  \"AuthorA\",\n  \"AuthorA\",\n  \"AuthorB\",\n  \"AuthorB\"\n]\n\n# build the model\nmodel = Pipeline([\n  ('tfidf', TfidfVectorizer()),\n  ('clf', GaussianNB())\n])\n\n# train the model\nX_train, X_test, y_train, y_test = train_test_split(samples, labels, test_size=0.3)\nmodel.fit(X_train, y_train)\n\n# evalulate the model\nscore = model.score(X_test, y_test)\nprint(f'model score: {score}')", "predict": "import pandas as pd\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Load data\ndata = pd.read_csv('data.csv')\n\n# Split data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(data['text'], data['author'], test_size=0.2, random_state=42)\n\n# Create a vectorizer\nvectorizer = TfidfVectorizer()\n\n# Fit the vectorizer to the training data\nX_train_vec = vectorizer.fit_transform(X_train)\n\n# Train the model\nmodel = MultinomialNB()\nmodel.fit(X_train_vec, y_train)\n\n# Evaluate the model\nX_test_vec = vectorizer.transform(X_test)\naccuracy = model.score(X_test_vec, y_test)\nprint('Model accuracy:', accuracy)"}
{"prompt": "Write a Python program to divide a given list of numbers into two equal parts such that the difference between the sum of the two parts is minimum.\n[2, 3, 4, 5, 6, 7] \n", "label": "def divide_in_two_equal_parts(lst):\n    target = sum(lst) // 2\n    part1 = []\n    part2 = []\n    left_sum = 0\n    right_sum = 0\n    \n    for num in lst:\n        if left_sum <= right_sum:\n            left_sum += num\n            part1.append(num)\n        else:\n            right_sum += num\n            part2.append(num)\n         \n    return part1, part2\n\npart1, part2 = divide_in_two_equal_parts([2, 3, 4, 5, 6, 7])\n\nprint(\"Part 1:\", part1)\nprint(\"Part 2:\", part2)", "predict": "def divide_list(lst):\n    # sort the list\n    lst.sort()\n\n    # initialize variables\n    left = []\n    right = []\n    left_sum = 0\n    right_sum = 0\n    min_diff = float('inf')\n\n    # divide the list into two parts\n    for i in range(len(lst)):\n        if left_sum <= right_sum:\n            left.append(lst[i])\n            left_sum += lst[i]\n        else:\n            right.append(lst[i])\n            right_sum += lst[i]\n\n        # calculate the difference between the two parts\n        diff = abs(left_sum - right_sum)\n        if diff < min_diff:\n            min_diff = diff\n\n    return left, right, min_diff"}
{"prompt": "Develop an algorithm to detect and fix Python syntax errors in a given code snippet.\ndef test ():\n    x = 5\n    y = 3 \n    z \n", "label": "def test():\n    x = 5\n    y = 3\n    try:\n        z\n    except NameError:\n        print(\"NameError: Name 'z' is not defined\")", "predict": "def test():\n    x = 5\n    y = 3\n    z = x + y\n    return z"}
{"prompt": "Design a data structure in Python to store integer values. \n", "label": "class IntList:\n    def __init__(self):\n        self.values = []\n   \n    def add_value(self, value):\n        self.values.append(value)\n    \n    def find_min(self):\n        return min(self.values)", "predict": "class IntegerStorage:\n    def __init__(self):\n        self.storage = []\n\n    def add(self, value):\n        self.storage.append(value)\n\n    def get(self, index):\n        return self.storage[index]"}
{"prompt": "Create an algorithm in Python for a linear search. The algorithm should take in an array and a value to search for, and return the index of the value if it is found, or -1 if it is not.\nArray: [5, 3, 7, 2]\nSearch value: 7 \n", "label": "def linearSearch(arr, value):\n  for i in range(len(arr)):\n    if arr[i] == value:\n      return i  # value found, return index\n  return -1  # value not found\n\narr = [5, 3, 7, 2]\nsearchValue = 7\n\nresult = linearSearch(arr, searchValue)\n\nif result == -1:\n  print(\"Element not found\")\nelse:\n  print(\"Element present at index\", result)", "predict": "def linear_search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1"}
{"prompt": "Given a list of strings, write a Python function to remove all the whitespaces from each string.\n['Hello  World  ', 'Hi  there', 'Good  Morning'] \n", "label": "def remove_whitespace(word_list):\n    return [word.strip() for word in word_list]\n\nstripped_list = remove_whitespace(['Hello  World  ', 'Hi  there', 'Good  Morning'])\nprint(stripped_list)", "predict": "def remove_whitespace(strings):\n    result = []\n    for string in strings:\n        result.append(string.replace(' ', ''))\n    return result\n\nresult = remove_whitespace(['Hello  World  ', 'Hi  there', 'Good  Morning'])\nprint(result) # ['HelloWorld', 'Hithere', 'GoodMorning']"}
{"prompt": "Design a Python program to randomize a list of given integers using an optimized Fisher-Yates algorithm. \n", "label": "def randomized_list(num_list):\n    for i in range(len(num_list)-1,0,-1):\n        j = random.randint(0,i)\n        num_list[i],num_list[j] = num_list[j],num_list[i]\n    return num_list", "predict": "import random\n\ndef randomize_list(arr):\n    n = len(arr)\n    for i in range(n - 1):\n        j = random.randint(i, n - 1)\n        arr[i], arr[j] = arr[j], arr[i]\n    return arr\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5]\n    print(randomize_list(arr))"}
{"prompt": "Create a system in Python for generating natural language responses.\nA sample utterance \"What time is it?\" \n", "label": "from tensorflow.keras.layers import Input, Dense, Embedding, GRU\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.utils import plot_model\n\n# Create inputs\ninputs1 = Input(shape=(20,))\nx1 = Embedding(1000, 64)(inputs1)\nx1 = GRU(128)(x1)\n\n# Create outputs\ny1 = Dense(1000, activation='softmax')(x1)\n\n# Create model\nmodel = Model(inputs=[inputs1], outputs=[y1])\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])\n\n# Train the model\nmodel.fit([inputs], [outputs],  epochs=10, batch_size=32)\n\n# Generate the response to the sample utterance\nquery = \"What time is it?\"\nprediction = model.predict(query)\n\nprint(prediction)", "predict": "import nltk\n\n# Load the data\ndata = nltk.corpus.udhr.words('english')\n\n# Create a function to generate a response\ndef generate_response(utterance):\n    # Tokenize the utterance\n    tokens = nltk.word_tokenize(utterance)\n\n    # Create a dictionary of possible responses\n    responses = {\n        'What time is it?': 'It is currently [time]',\n        'How are you?': 'I am doing well, thank you for asking!',\n        'What is your name?': 'My name is [name]'\n    }\n\n    # Check if the utterance is in the dictionary\n    if utterance in responses:\n        # Return the response\n        return responses[utterance]\n    else:\n        # Generate a response using the tokens\n        response =''.join(tokens)\n        return response\n\n# Generate a response for the sample utterance\nresponse = generate_response(\"What time is it?\")\nprint(response)"}
{"prompt": "Create a web scraper using Python that collects the title and content from the homepage of a given website.\nhttps://www.example.com as the target website. \n", "label": "import requests\nimport bs4\n\nurl = 'https://www.example.com'\nr = requests.get(url)\nhtml = bs4.BeautifulSoup(r.text,\"html.parser\")\n\n# Find title\ntitle = html.find('title')\nprint(title.text)\n\n# Find content\ncontent = html.find('div', {'class': 'content'})\nprint(content.text)", "predict": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.example.com'\n\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\n\ntitle = soup.find('title').text\ncontent = soup.find('p').text\n\nprint(title)\nprint(content)"}
{"prompt": "Generate a Python script that finds the total surface area of a cuboid, given its three dimensions.\n2, 3, 4 \n", "label": "def find_total_surfacearea(length, breadth, height):\n   return (2*(length*breadth + breadth*height + height*length))\n\nprint(find_total_surfacearea(2, 3, 4))\n\nOutput: 52", "predict": "def cuboid_surface_area(length, width, height):\n    return 2 * (length * width + width * height + height * length)\n\nlength = 2\nwidth = 3\nheight = 4\n\ntotal_surface_area = cuboid_surface_area(length, width, height)\nprint(total_surface_area)"}
{"prompt": "Generate a Python program to clean a string of HTML tags.\nExample Input: \"<p>This is a <b>test</b> string</p>\". \n", "label": "import re\n\n# Clean a string of HTML tags \ndef clean_html_tags(str):\n    clean_str = re.sub(\"<.*?>\", \"\", str)\n    return clean_str\n\nhtml_string = \"<p>This is a <b>test</b> string</p>\"\n\nclean_str = clean_html_tags(html_string)\n\nprint(clean_str) #This is a test string", "predict": "import re\n\ndef clean_html(html_string):\n    clean_string = re.sub('<[^>]*>', '', html_string)\n    return clean_string"}
{"prompt": "Generate a Python function that takes an integer array as input and returns the number of unique elements in the array.\n[1, 2, 3, 2, 1, 4, 7, 8, 9, 8] \n", "label": "def num_unique_elements(arr):\n    unique_arr = set(arr)\n    return len(unique_arr)\n\nprint(num_unique_elements([1, 2, 3, 2, 1, 4, 7, 8, 9, 8]))", "predict": "def count_unique_elements(arr):\n    return len(set(arr))\n\narr = [1, 2, 3, 2, 1, 4, 7, 8, 9, 8]\nprint(count_unique_elements(arr)) # Output: 6"}
{"prompt": "Create a Python program to scrape an online news website to get the headlines. \n", "label": "import requests\nfrom bs4 import BeautifulSoup \n\n# url of the website you want to scrape \nurl = \"https://www.news.com/\" \n\n# get the response in the form of html\nr = requests.get(url) \n\n# create a beautifulsoup object to parse contents \nsoup = BeautifulSoup(r.content, 'html5lib') \n\n# find headlines from the parsed page  \nheadlines = soup.find_all('h2') \n\n# Print the headlines \nfor headline in headlines: \n    print(headline.text)", "predict": "import requests\nfrom bs4 import BeautifulSoup\n\n# make a request to the website\nr = requests.get(\"https://example.com\")\n\n# parse the html content\nsoup = BeautifulSoup(r.text, 'html.parser')\n\n# find the headlines\nheadlines = soup.find_all('h1')\n\n# print the headlines\nfor headline in headlines:\n    print(headline.text)"}
{"prompt": "Edit the given Python program to print 'Happy Holidays' 10 times.\nfor i in range(10):\n    print('Hello World') \n", "label": "for i in range(10):\n    print('Happy Holidays')", "predict": "for i in range(10):\n    print('Happy Holidays')"}
{"prompt": "Combine 2 strings and reverse the result in Python.\nwords = \"Hello \"\nwords2 = \"world!\" \n", "label": "words = \"Hello \"\nwords2 = \"world!\"\n\ncombined = words + words2\nresult = combined[::-1]\n\nprint(result)", "predict": "words = \"Hello \"\nwords2 = \"world!\"\n\ncombined_words = words + words2\nreverse_words = combined_words[::-1]\n\nprint(reverse_words) #!dlrow olleH"}
{"prompt": "Create a class to represent a bank account in Python. \n", "label": "class BankAccount:\n    \n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n        \n    def deposit(self, amount):\n        self.balance += amount\n    \n    def withdraw(self, amount):\n        if self.balance >= amount:\n            self.balance -= amount\n            return True\n        else:\n            return False\n        \n    def get_balance(self):\n        return self.balance", "predict": "class BankAccount:\n    def __init__(self, account_number, balance):\n        self.account_number = account_number\n        self.balance = balance\n    \n    def deposit(self, amount):\n        self.balance += amount\n    \n    def withdraw(self, amount):\n        if amount > self.balance:\n            print(\"Insufficient funds\")\n        else:\n            self.balance -= amount\n    \n    def get_balance(self):\n        return self.balance"}
{"prompt": "Optimize the following Python code to sort a set of numbers (set = [2, 6, 3, 8, 4]) in O(n) time complexity.\nunsorted_list = [2, 6, 3, 8, 4] \n", "label": "def sort_list(unsorted_list):\n    sorted_list = []\n    while unsorted_list:\n        min_elem = min(unsorted_list)\n        unsorted_list.remove(min_elem)\n        sorted_list.append(min_elem)\n    return sorted_list", "predict": "def sort_list(unsorted_list):\n    n = len(unsorted_list)\n    for i in range(n):\n        min_index = i\n        for j in range(i+1, n):\n            if unsorted_list[min_index] > unsorted_list[j]:\n                min_index = j\n        unsorted_list[i], unsorted_list[min_index] = unsorted_list[min_index], unsorted_list[i]\n    return unsorted_list\n\nunsorted_list = [2, 6, 3, 8, 4]\nprint(sort_list(unsorted_list))"}
{"prompt": "Design a Python program to perform linear regression for predicting the numbers in a given dataset.\nX = [1,2,3,4,5]\nY = [3,5,7,9,13] \n", "label": "import numpy as np\nfrom sklearn.linear_model import LinearRegression\n\nX = np.array([1,2,3,4,5]).reshape(-1,1)\nY = np.array([3,5,7,9,13])\n\nmodel = LinearRegression()\nmodel.fit(X, Y)\n\n# Predicts the value of y\nprint(model.predict([[7]]))", "predict": "import numpy as np\n\n# Define the independent and dependent variables\nX = np.array([1,2,3,4,5])\nY = np.array([3,5,7,9,13])\n\n# Calculate the coefficients\ncoefficients = np.polyfit(X, Y, 1)\n\n# Print the coefficients\nprint(\"Coefficients:\", coefficients)\n\n# Print the predicted values\nprint(\"Predicted values:\", np.polyval(coefficients, X))"}
{"prompt": "Create a Python object that contains two attributes, \"Name\" and \"Age\". \n", "label": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\nperson = Person(\"John\", 25)", "predict": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\nperson = Person(\"John\", 25)"}
{"prompt": "Write a function in Python that takes a list of objects and returns a list of those objects sorted by one of their attributes.\n[{\"name\": \"Alice\", \"age\": 20}, {\"name\": \"Bob\", \"age\": 21}] \n", "label": "def sort_by_attr(objects, attr):\n return sorted(objects, key=lambda item: item[attr])\n \nsort_by_attr([{\"name\": \"Alice\", \"age\": 20}, {\"name\": \"Bob\", \"age\": 21}], \"age\")", "predict": "def sort_by_attribute(list_of_objects, attribute):\n    return sorted(list_of_objects, key=lambda obj: obj[attribute])\n\nlist_of_objects = [{\"name\": \"Alice\", \"age\": 20}, {\"name\": \"Bob\", \"age\": 21}]\n\nsorted_list = sort_by_attribute(list_of_objects, \"age\")\n\nprint(sorted_list) # Output: [{\"name\": \"Alice\", \"age\": 20}, {\"name\": \"Bob\", \"age\": 21}]"}
{"prompt": "Write a Python program to generate an HTML table displaying information about the top 10 bestselling books in a specific genre.\nTable name: Books\nTable columns: id (int), title (string), author (string), genre (string), sales (int) \n", "label": "import sqlite3\n\n# connect to the database\nconn = sqlite3.connect('books.db')\nc = conn.cursor()\n\n# retrieve the data\nc.execute('''SELECT title, author, genre, sales\nFROM Books\nWHERE genre='Fantasy'\nORDER BY sales DESC\nLIMIT 10''')\n\n# save the results\nresults = c.fetchall()\n\n# generate the HTML code\nhtml = '<table>'\nhtml += '<tr><th>Title</th><th>Author</th><th>Genre</th><th>Sales</th></tr>'\n\nfor result in results:\n title = result[0]\n author = result[1]\n genre = result[2]\n sales = result[3]\n\n html += f'<tr><td>{title}</td><td>{author}</td><td>{genre}</td><td>{sales}</td></tr>'\n\nhtml += '</table>'\n\n# display the results\nprint(html)", "predict": "import sqlite3\n\n# Connect to the database\nconn = sqlite3.connect('books.db')\nc = conn.cursor()\n\n# Execute the query\nc.execute('''SELECT id, title, author, genre, sales\n            FROM Books\n            ORDER BY sales DESC\n            LIMIT 10''')\n\n# Fetch the results\nrows = c.fetchall()\n\n# Print the table header\nprint(\"<table>\")\nprint(\"<tr><th>ID</th><th>Title</th><th>Author</th><th>Genre</th><th>Sales</th></tr>\")\n\n# Print the rows\nfor row in rows:\n    print(\"<tr><td>{}</td><td>{}</td><td>{}</td><td>{}</td><td>{}</td></tr>\".format(row[0], row[1], row[2], row[3], row[4]))\n\n# Close the table\nprint(\"</table>\")"}
{"prompt": "Create a Python script to filter out all the vowels from a string. \n", "label": "def filter_vowels(string):\n     vowels = ('a', 'e', 'i', 'o', 'u')\n     return ''.join(c for c in string if c not in vowels)", "predict": "def filter_vowels(s):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in s:\n        if char not in vowels:\n            result += char\n    return result"}
{"prompt": "In Python, write a script to sort the list items in descending order.\nlist_items = [3, 7, 5, 8, 10] \n", "label": "list_items = [3, 7, 5, 8, 10]\n\nlist_items.sort(reverse=True)\n\nprint(list_items) # Output: [10, 8, 7, 5, 3]", "predict": "list_items.sort(reverse=True)"}
{"prompt": "Create a Python function that takes in a text string and returns a dictionary of words and the number of times each word appears in the text string.\nA quick brown fox jumps over the lazy dog \n", "label": "def words_count(text):\n words_dict = {}\n for word in text.split(' '):\n if word in words_dict:\n words_dict[word] += 1\n else:\n words_dict[word] = 1\n return words_dict\n\nwords_dict = words_count(\"A quick brown fox jumps over the lazy dog\")\nprint(words_dict)", "predict": "def word_count(text):\n    words = text.split()\n    word_dict = {}\n    for word in words:\n        if word in word_dict:\n            word_dict[word] += 1\n        else:\n            word_dict[word] = 1\n    return word_dict\n\nresult = word_count(\"A quick brown fox jumps over the lazy dog\")\nprint(result)"}
{"prompt": "Create an object-oriented structure to solve a maze by using python. \n", "label": "import collections\n\nclass Maze:\n    def __init__(self, n, m):\n        self._n, self._m = n, m\n        self._grid = [[None] * m for _ in range(n)]\n\n    def solve_maze(self):\n        result, found = [], False\n        start, end = (0, 0), (self._n-1, self._m-1)\n\n        for i in range(self._n):\n            for j in range(self._m):\n                if self._grid[i][j] == 1:\n                    value = 0\n                    self._find_omega(i, j, value, result, start, end,\n                                     found)\n                    return result\n\n    def _find_omega(self, i, j, value,\n                    result, start, end, found):\n        rowNbr, colNbr = [-1, 0, 0, 1], [0, -1, 1, 0]\n\n        if (i, j) == end:\n            found = True\n            result.append(value)\n            return\n\n        if found == True:\n            return\n\n        self._grid[i][j] = 0\n        for k in range(4):\n            if self._on_board(i + rowNbr[k], j + colNbr[k]):\n                self._find_omega(i + rowNbr[k], j + colNbr[k],\n                                 value + 1, result,\n                                 start, end, found)\n\n    def _on_board(self, i, j):\n        return 0 <= i < self._n and 0 <= j < self._m and self._grid[i][j] == 1", "predict": "class MazeSolver:\n    def __init__(self, maze):\n        self.maze = maze\n\n    def solve(self):\n        # Implement a solution here\n        pass"}
{"prompt": "Compose a piece of code to print the length of a given string.\n\"Python\" \n", "label": "string = \"Python\"\nprint(\"Length of the given string is:\", len(string))", "predict": "def length_of_string(string):\n    return len(string)\n\nprint(length_of_string(\"Python\"))"}
{"prompt": "Compose a Python program to calculate the maximum possible revenue from the items with given weights and values.\nweights = [2, 1, 3], values = [4, 2, 3] \n", "label": "\"\"\"\nCalculate the maximum possible revenue from the items with given weights and values\n\"\"\"\n\n# given  weights and values \nweights = [2, 1, 3] \nvalues = [4, 2, 3] \n\n# number of items \nn = len(weights) \n  \n# function to calculate the maximum revenue \ndef knapsack(weights, values, n): \n  \n    # total capacity of knapsack \n    W = 5\n  \n    # matrix to store solution matrix \n    K = [[0 for x in range(W+1)] for x in range(n+1)] \n  \n    # build the solution matrix in bottom up manner \n    for i in range(n+1): \n        for w in range(W+1): \n            if i==0 or w==0: \n                K[i][w] = 0\n            elif weights[i-1] <= w: \n                K[i][w] = max(values[i-1] + K[i-1][w-weights[i-1]],  K[i-1][w]) \n            else: \n                K[i][w] = K[i-1][w] \n  \n    return K[n][W] \n  \nprint (knapsack(weights, values, n))", "predict": "def knapsack(weights, values, W):\n    n = len(weights)\n    # Initialize table\n    table = [[0 for _ in range(W+1)] for _ in range(n+1)]\n    # Populate table\n    for i in range(1, n+1):\n        for j in range(1, W+1):\n            if weights[i-1] <= j:\n                table[i][j] = max(values[i-1] + table[i-1][j-weights[i-1]], table[i-1][j])\n            else:\n                table[i][j] = table[i-1][j]\n    return table[n][W]\n\nweights = [2, 1, 3]\nvalues = [4, 2, 3]\nW = 5\n\nprint(knapsack(weights, values, W))"}
{"prompt": "Write a Python program to read in a tweet and remove all punctuation, special characters and stopwords.\n\"I'm so excited to be going to the #MuseumTour! #BigDay #travel\" \n", "label": "import re\nimport string\nfrom nltk.corpus import stopwords\n\ntweet = \"I'm so excited to be going to the #MuseumTour! #BigDay #travel\"\ntweet_clean = re.sub(r'[^\\w\\s]','',tweet) #remove punctuation\ntokens = tweet_clean.split() #split string into individual words \nstop_words = set(stopwords.words(\"english\")) #get list of stopwords\nfiltered_tokens = [w for w in tokens if not w in stop_words] #remove stopwords\nprint(filtered_tokens)", "predict": "import re\n\ndef remove_punctuation_and_stopwords(tweet):\n    # Remove punctuation\n    tweet = re.sub(r'[^\\w\\s]','',tweet)\n    # Remove stopwords\n    stopwords = ['the', 'a', 'an', 'is', 'to', 'be', 'are', 'in', 'on', 'of']\n    tweet =''.join([word for word in tweet.split() if word not in stopwords])\n    return tweet\n\ntweet = \"I'm so excited to be going to the #MuseumTour! #BigDay #travel\"\nprint(remove_punctuation_and_stopwords(tweet))\n# Output: \"I'm so excited going MuseumTour BigDay travel\""}
{"prompt": "Implement a web scraper in Python to extract the top ten trending YouTube videos. \n", "label": "import requests\nfrom bs4 import BeautifulSoup\n\n# make a request to get the page content\npage = requests.get(\"https://www.youtube.com/feed/trending\")\n\n# parse the page content\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# extract the list of trending videos\ntrending_videos = soup.find_all(class_='expanded-shelf-content-item-wrapper')\n\n# print the top ten trending videos\nfor video in trending_videos[:10]:\n    print(video.find(class_='yt-uix-tile-link').get('title'))", "predict": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.youtube.com/feed/trending'\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\n\nvideos = soup.find_all('ytd-video-renderer', limit=10)\n\nfor video in videos:\n    title = video.find('h3', class_='title-and-badge').text\n    description = video.find('p', class_='description').text\n    print(f'{title} - {description}')"}
{"prompt": "Make a code in Python to find the mode of the given set of values.\n1, 2, 3, 2, 4, 2 \n", "label": "def find_mode(list):\n  max_count = 0\n  mode = list[0]\n  count = {}\n  for item in list:\n    if (item in count):\n      count[item] += 1\n    else:\n      count[item] = 1\n    if (count[item] > max_count):\n      max_count = count[item]\n      mode = item\n  return mode", "predict": "def find_mode(arr):\n    freq_dict = {}\n    for i in arr:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n\n    max_freq = max(freq_dict.values())\n    modes = []\n    for key, value in freq_dict.items():\n        if value == max_freq:\n            modes.append(key)\n    return modes\n\narr = [1, 2, 3, 2, 4, 2]\nmodes = find_mode(arr)\nprint(modes)"}
{"prompt": "Create a web API with Python and Flask to give the current date and time.\nNot applicable \n", "label": "from flask import Flask\nimport datetime\n\napp = Flask(__name__)\n\n@app.route('/datetime')\ndef get_datetime():\n    return datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n\nif __name__ == '__main__':\n    app.run()", "predict": "from flask import Flask\nfrom datetime import datetime\n\napp = Flask(__name__)\n\n@app.route('/')\ndef get_current_time():\n    current_time = datetime.now()\n    return str(current_time)\n\nif __name__ == '__main__':\n    app.run()"}
{"prompt": "Create a Python function that takes a list containing fruit names and returns the most common fruit name.\n['Apple', 'Orange', 'Apple', 'Pineapple', 'Grape', 'Apple'] \n", "label": "def most_common_fruit(fruit_list):\n \n    # Dictionary to get count of each fruit\n    freq_dict = {}\n \n    # Count frequency of each fruit\n    for fruit in fruit_list:\n        if fruit in freq_dict:\n            freq_dict[fruit] += 1\n        else:\n            freq_dict[fruit] = 1\n \n    # Get maximum frequency \n    max_freq = 0\n    for freq in freq_dict.values():\n        if freq > max_freq:\n            max_freq = freq\n \n    # Get the most common fruit\n    most_common_fruit = None\n    for fruit, freq in freq_dict.items():\n        if freq == max_freq:\n            most_common_fruit = fruit\n            break\n \n    return most_common_fruit", "predict": "def most_common_fruit(fruit_list):\n    fruit_count = {}\n    for fruit in fruit_list:\n        if fruit in fruit_count:\n            fruit_count[fruit] += 1\n        else:\n            fruit_count[fruit] = 1\n    max_fruit = max(fruit_count, key=fruit_count.get)\n    return max_fruit\n\nfruit_list = ['Apple', 'Orange', 'Apple', 'Pineapple', 'Grape', 'Apple']\nprint(most_common_fruit(fruit_list)) # Output: Apple"}
{"prompt": "Write a Python program to take in a list of phrases and generate a string with the each phrase followed by its length.\nphrases = [\"A bird in the hand\", \"is worth two in the bush\"] \n", "label": "result = \"A bird in the hand (17)is worth two in the bush (25)\"\n \ncode:\ninput_phrases = [\"A bird in the hand\", \"is worth two in the bush\"]\n \nresult = \"\"\nfor phrase in input_phrases:\n result += phrase + ' (' + str(len(phrase)) + ')'\n \nprint(result)", "predict": "phrases = [\"A bird in the hand\", \"is worth two in the bush\"]\n\noutput = \"\"\nfor phrase in phrases:\n output += phrase + \" \" + str(len(phrase)) + \" \"\n\nprint(output)\n# Output: A bird in the hand 14 is worth two in the bush 21"}
{"prompt": "Write a simple Python function that takes a list of integers and returns the sum of all elements divisible by 3.\nli = [4, 6, 17, 24, 5, 9] \n", "label": "def divisibleBy3(li):\n total = 0\n for num in li:\n  if num % 3 == 0:\n   total += num\n return total\n# Output: 24", "predict": "def sum_divisible_by_3(li):\n    total = 0\n    for num in li:\n        if num % 3 == 0:\n            total += num\n    return total\n\nsum_divisible_by_3(li)"}
{"prompt": "Create a program in Python that takes a number from the user and prints all the divisors of the number. \n", "label": "divisors = []\n\nnum = int(input('Enter a number: '))\n \nfor i in range(1, num + 1):\n    if num % i == 0:\n        divisors.append(i)\n\nprint('The divisors of',num ,'are:')\nprint(*divisors, sep=', ')", "predict": "def find_divisors(num):\n    divisors = []\n    for i in range(1, num+1):\n        if num % i == 0:\n            divisors.append(i)\n    return divisors\n\nnum = int(input(\"Enter a number: \"))\ndivisors = find_divisors(num)\nprint(\"Divisors of\", num, \"are:\", divisors)"}
{"prompt": "Write a Python program to generate an HTML page containing a table with some employee data.\nEmployee Data:\nName: John Doe\nJob Title: Senior Developer\nDepartment: IT\nSalary: $120,000\n\nName: Jane Doe\nJob Title: Manager\nDepartment: Finance\nSalary: $95,000\n\nName: Tim Smith\nJob Title: Junior Developer\nDepartment: IT\nSalary: $55,000 \n", "label": "<html>\n  <head>\n    <title>Employee Data</title>\n  </head>\n  <body>\n    <table>\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Job Title</th>\n          <th>Department</th>\n          <th>Salary</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>John Doe</td>\n          <td>Senior Developer</td>\n          <td>IT</td>\n          <td>$120,000</td>\n        </tr>\n        <tr>\n          <td>Jane Doe</td>\n          <td>Manager</td>\n          <td>Finance</td>\n          <td>$95,000</td>\n        </tr>\n        <tr>\n          <td>Tim Smith</td>\n          <td>Junior Developer</td>\n          <td>IT</td>\n          <td>$55,000</td>\n        </tr>\n      </tbody>\n    </table>\n  </body>\n</html>", "predict": "# import the necessary modules\nimport html\n\n# create the table\ntable = html.table(border=\"1\")\n\n# add the table headers\nthead = table.thead()\ntr = thead.tr()\ntd = tr.td(\"Name\")\ntd = tr.td(\"Job Title\")\ntd = tr.td(\"Department\")\ntd = tr.td(\"Salary\")\nthead.append(tr)\n\n# add the employee data\ntbody = table.tbody()\ntr = tbody.tr()\ntd = tr.td(\"John Doe\")\ntd = tr.td(\"Senior Developer\")\ntd = tr.td(\"IT\")\ntd = tr.td(\"$120,000\")\ntr = tbody.tr()\ntd = tr.td(\"Jane Doe\")\ntd = tr.td(\"Manager\")\ntd = tr.td(\"Finance\")\ntd = tr.td(\"$95,000\")\ntr = tbody.tr()\ntd = tr.td(\"Tim Smith\")\ntd = tr.td(\"Junior Developer\")\ntd = tr.td(\"IT\")\ntd = tr.td(\"$55,000\")\ntbody.append(tr)\n\n# print the table\nprint(table)"}
{"prompt": "Create a Python function to select all rows from a table where the 'status' is 'approved' \n", "label": "def select_approved_rows():\n   sql = \"SELECT * FROM table WHERE status = 'approved'\"\n   cur.execute(sql)\n   return cur.fetchall()", "predict": "def select_approved_rows(table):\n    # Select all rows from the table where the'status' is 'approved'\n    query = \"SELECT * FROM {} WHERE status = 'approved'\".format(table)\n    return query"}
{"prompt": "Create a Python program to generate random passwords of length 8 characters, containing at least one lowercase letter, one uppercase letter and one number. \n", "label": "from random import choice\nimport string\n\ndef generate_password():\n    chars = string.ascii_uppercase + string.ascii_lowercase + string.digits\n    password = ''.join(choice(chars) for i in range(8))\n    if any(c.islower() for c in password) and any(c.isupper() for c in password) and any(c.isdigit() for c in password):\n        return password\n    else: \n        return generate_password()\n\nif __name__ == '__main__':\n    print(generate_password())", "predict": "import string\nimport random\n\ndef generate_password():\n    length = 8\n    password_characters = string.ascii_letters + string.digits\n    password = ''.join(random.choice(password_characters) for i in range(length))\n    return password\n\nprint(generate_password())"}
{"prompt": "Generate a solution to translate a text from English to French using Python. \n", "label": "# install the module \n# in command prompt\npip install googletrans\n\n# import module\nfrom googletrans import Translator\n\n# create an object\ntranslator = Translator()\n\n# define text\ntext = \"Hello, this is a sample text to translate.\"\n\n# call the function and pass the text\ntranslation = translator.translate(text, dest='fr') \n\n# print the translation \nprint(translation.text)", "predict": "def translate_text(text):\n    # Use an API to translate the text to French\n    translated_text = translate_api.translate(text, target_language='fr')\n    return translated_text"}
{"prompt": "Create a function to generate a unique 6 digit number. \n", "label": "# Python program to generate \n# a unique 6 digit number \nimport random \ndef generate_number(): \n      \n    # Choose a random number \n    # between 10000 and 99999 \n    random_number = random.randint(10000, 99999) \n  \n    # Return the random number \n    return random_number \n  \n# Driver Code \nif __name__ == \"__main__\": \n    print(generate_number())", "predict": "import random\n\ndef generate_unique_number():\n    num = random.randint(100000, 999999)\n    while not is_unique(num):\n        num = random.randint(100000, 999999)\n    return num\n\ndef is_unique(num):\n    return not any(num == x for x in existing_numbers)"}
{"prompt": "Write a Python program to generate 10 random numbers and put them in a list. \n", "label": "import random\n\nrandom_list = []\nfor i in range(10):\n number = random.randint(1, 100)\n random_list.append(number)", "predict": "import random\n\nrandom_list = []\nfor i in range(10):\n    random_list.append(random.randint(1, 100))\n\nprint(random_list)"}
{"prompt": "Write a Python program to replace all occurrences of a given string with an alternate string.\n\"Hello World!\", \"World\", \"Python\" \n", "label": "def replace_string(input_string, target_string, replacement_string):\n    return input_string.replace(target_string, replacement_string)\n\nprint(replace_string(\"Hello World!\", \"World\", \"Python\"))", "predict": "def replace_string(string, old_str, new_str):\n    return string.replace(old_str, new_str)\n\nprint(replace_string(\"Hello World!\", \"World\", \"Python\"))"}
{"prompt": "Generate a Python class for an online store item that includes fields for ID, name, price, and description.\nNot applicable \n", "label": "class StoreItem:\n    def __init__(self, item_id, name, price, description):\n        self.item_id = item_id\n        self.name = name\n        self.price = price\n        self.description = description\n\n    def __str__(self):\n        return f'{self.name}, ${self.price}'\n\n    def to_dict(self):\n        return {\n            'item_id': self.item_id,\n            'name': self.name,\n            'price': self.price,\n            'description': self.description\n        }", "predict": "class StoreItem:\n def __init__(self, item_id, name, price, description):\n self.item_id = item_id\n self.name = name\n self.price = price\n self.description = description\n\n def get_info(self):\n return f\"ID: {self.item_id}, Name: {self.name}, Price: {self.price}, Description: {self.description}\""}
{"prompt": "Create a virtual assistant using Python and Dialogflow to answer a basic set of questions.\nNot applicable \n", "label": "import dialogflow_v2 as dialogflow\nimport requests\n\nproject_id = 'project-id'\nsession_client = dialogflow.SessionsClient()\nsession = session_client.session_path(project_id, 'session-id')\n\nwhile True:\n text = input('User: ')\n text_input = dialogflow.types.TextInput(text=text, language_code='en-US')\n query_input = dialogflow.types.QueryInput(text=text_input)\n response = session_client.detect_intent(session=session, query_input=query_input)\n\n print('Assistant:', response.query_result.fulfillment_text)", "predict": "import dialogflow_v2 as dialogflow\n\n# Set up the session client\nsession_client = dialogflow.SessionsClient()\n\n# Create a session\nsession_name = session_client.session_path('PROJECT_ID', 'SESSION_ID')\nsession = session_client.session_modify(\n    request={\n       'session': session_name,\n        'properties': {\n            'tokenLimit': 1000,\n        }\n    }\n)\n\n# Define the request\ndef handle_request(query):\n    text_input = dialogflow.types.TextInput(text=query, language_code='en-US')\n    query_input = dialogflow.types.QueryInput(text=text_input)\n    response = session_client.detect_intent(session=session, query_input=query_input)\n    return response.query_result.fulfillment_text\n\n# Make a request\nresponse = handle_request('What is the capital of France?')\n\n# Print the response\nprint(response.fulfillment_text)"}
{"prompt": "Create an algorithm in Python to solve \"Tower of Hanoi\" game of a 4 disk problem. \n", "label": "def solveTowerOfHanoi(num_disks, start_rod = 'A', end_rod = 'C', aux_rod = 'B'): \n    if num_disks == 1: \n        print(\"Move disk 1 from rod\", start_rod, \"to rod\", end_rod) \n        return\n    solveTowerOfHanoi(num_disks - 1, start_rod, aux_rod, end_rod) \n    print(\"Move disk\", num_disks, \"from rod\", start_rod, \"to rod\", end_rod) \n    solveTowerOfHanoi(num_disks - 1, aux_rod, end_rod, start_rod) \n  \n  \n# Driver code \nnum_disks = 4\nsolveTowerOfHanoi(num_disks)", "predict": "def hanoi(n, source, destination, auxiliary):\n    if n > 0:\n        hanoi(n - 1, source, auxiliary, destination)\n        destination.append(source.pop())\n        hanoi(n - 1, auxiliary, destination, source)\n\nn = 4\nsource = [i for i in range(n)]\ndestination = []\nauxiliary = []\n\nhanoi(n, source, destination, auxiliary)\nprint(destination)"}
{"prompt": "Generate an api response in Python for the provided data.\nData = {\n\"name\" : \"John\",\n\"age\" : 28\n} \n", "label": "response = {\n  \"status\": 200,\n  \"data\": {\"name\": \"John\",\"age\":28},\n  \"message\": \"Success\"\n}", "predict": "import json\n\ndef generate_api_response(data):\n    response = json.dumps({\n        'name': data['name'],\n        'age': data['age']\n    })\n    return response"}
{"prompt": "Create a webscraper using Python’s Selenium that retrieves data from an online store.\nNot applicable \n", "label": "from selenium import webdriver\n\n# create a new Firefox session\ndriver = webdriver.Firefox()\ndriver.implicitly_wait(30)\ndriver.maximize_window()\n\n# navigate to the application home page\ndriver.get(\"https://www.example.com/\")\n\n# get the search textbox\nsearch_field = driver.find_element_by_name(\"q\")\nsearch_field.clear()\n\n# enter search keyword and submit\nsearch_field.send_keys(\"shoes\")\nsearch_field.submit()\n\n# get the list of elements which are displayed after the search\n# currently on result page using find_elements_by_class_name\nproduct_list = driver.find_elements_by_class_name(\"product\")\n\n# iterate through each element and print the text that is\n# name of the product\nfor product in product_list:\n    print(product.text)\n\n# close the browser window\ndriver.quit()", "predict": "from selenium import webdriver\n\n# Set up the driver\ndriver = webdriver.Chrome()\n\n# Navigate to the page\ndriver.get('https://example.com/')\n\n# Find the data you want to scrape\ndata = driver.find_elements_by_xpath('//div[@class=\"product\"]')\n\n# Extract the data\nfor d in data:\n    title = d.find_element_by_xpath('.//h2').text\n    price = d.find_element_by_xpath('.//span[@class=\"price\"]').text\n    print(title, price)\n\n# Close the driver\ndriver.close()"}
{"prompt": "Develop a web scraper with Python BeautifulSoup to scrape data from an online web store.\nNot applicable \n", "label": "import requests\nfrom bs4 import BeautifulSoup\n \n# Make a GET request to fetch the raw HTML content\nhtml_content = requests.get('http://web-store.com').text\n \n# Parse the html content\nsoup = BeautifulSoup(html_content, \"lxml\")\n \n# Get the product data\nproducts = soup.find_all('div', attrs={\"itemprop\": \"product\"})\nfor product in products:\n    name = product.find(\"span\", attrs={\"itemprop\": \"name\"}).text\n    price = product.find(\"span\", attrs={\"itemprop\": \"price\"}).text\n    description = product.find(\"span\", attrs={\"itemprop\": \"description\"}).text\n    print(name, price, description)", "predict": "import requests\nfrom bs4 import BeautifulSoup\n\n# make a request\nurl = 'https://www.example.com'\nr = requests.get(url)\n\n# parse the HTML\nsoup = BeautifulSoup(r.text, 'html.parser')\n\n# extract data\nfor item in soup.find_all('div', class_='item'):\n title = item.find('h2').text\n price = item.find('span', class_='price').text\n \n # print the data\n print('Title:', title)\n print('Price:', price)"}
{"prompt": "Implement a basic algorithm in Python to calculate the nth Fibonacci number.\n6 \n", "label": "def fibonacci(n):\n if n == 0:\n return 0\n elif n == 1:\n return 1\n else:\n return fibonacci(n - 1) + fibonacci(n - 2)\n \nprint(fibonacci(6)) // 8", "predict": "def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==1: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \n  \n# Driver Program \nprint(Fibonacci(6))"}
{"prompt": "Create a Python class that receives two strings and has methods for comparing the strings and returning whether they are equal, different, or similar up to a provided threshold.\nNot applicable \n", "label": "class StringComparator:\n\ndef __init__(self, string1, string2):\n self.string1 = string1\n self.string2 = string2\n\ndef is_equal(self):\n return self.string1 == self.string2\n\ndef is_different(self):\n return self.string1 != self.string2\n\ndef is_similar(self, threshold=0.5):\n distance = edit_distance(self.string1, self.string2)\n max_length = max(len(self.string1), len(self.string2))\n\n return distance / max_length < threshold", "predict": "class StringComparer:\n    def __init__(self, str1, str2):\n        self.str1 = str1\n        self.str2 = str2\n    \n    def is_equal(self):\n        if self.str1 == self.str2:\n            return True\n        else:\n            return False\n    \n    def is_different(self):\n        if self.str1!= self.str2:\n            return True\n        else:\n            return False\n    \n    def is_similar(self, threshold):\n        count = 0\n        for i in range(min(len(self.str1), len(self.str2))):\n            if self.str1[i] == self.str2[i]:\n                count += 1\n        if count/min(len(self.str1), len(self.str2)) >= threshold:\n            return True\n        else:\n            return False"}
{"prompt": "Generate a program in Python to evaluate the accuracy of a machine-learning model.\nfrom sklearn.svm import SVC\nclf = SVC(kernel='poly', degree=2, gamma=0.05) \n", "label": "import numpy as np\nfrom sklearn.metrics import accuracy_score\n\nclf.fit(X_train, y_train)\ny_pred = clf.predict(X_test)\n\n# Calculating the accuracy\naccuracy = accuracy_score(y_test, y_pred)\n\nprint(\"Accuracy: \" + str(accuracy))", "predict": "# Train the model\nclf.fit(X_train, y_train)\n\n# Make predictions\ny_pred = clf.predict(X_test)\n\n# Calculate accuracy\naccuracy = accuracy_score(y_test, y_pred)\nprint('Accuracy:', accuracy)"}
{"prompt": "Write a Python program to replace all occurrences of a character in a string with the provided replacement character.\nstr = \"Hello World!\"\n\nreplacement = ‘X' \n", "label": "def replace_all_occurrences(str, char, replacement):\n  return str.replace(char, replacement)\n\nprint(replace_all_occurrences(\"Hello World!\", 'l', 'X'))", "predict": "def replace_char(str, replacement):\n    new_str = ''\n    for char in str:\n        if char == 'o':\n            new_str += replacement\n        else:\n            new_str += char\n    return new_str\n\nprint(replace_char('Hello World!', 'X'))"}
{"prompt": "Create a python program to find the largest prime factor of a number.\nNumber: 331 \n", "label": "import math\n\ndef largest_prime_factor(n):\n\n# Separate the list of larger factors of the number into prime and composite numbers \n    factors = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(int(n/i))\n# Find the largest prime factor in the list\n    prime_factors = []\n    for potential_factor in factors:\n        is_prime = True\n        for j in range(2,int(math.sqrt(potential_factor))+1):\n            if potential_factor % j == 0 and potential_factor != j: \n                is_prime = False\n        if is_prime:\n            prime_factors.append(potential_factor)\n\n# Return the largest prime factor\n    return max(prime_factors)\n\nprint(largest_prime_factor(331))", "predict": "def largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n //= i\n        else:\n            i += 1\n    return n\n\nnum = 331\nprint(largest_prime_factor(num)) # 17"}
{"prompt": "Write a Python program to check if an element exists within a given list of integers. \n", "label": "def element_exists(elem, list_int):\n  return elem in list_int", "predict": "def is_element_present(list, element):\n    if element in list:\n        return True\n    else:\n        return False"}
{"prompt": "Create a Python program that takes a sentence and converts it to Morse code.\nNot applicable \n", "label": "MORSE_CODE = {\n 'A': '.-', 'B': '-...',\n 'C': '-.-.', 'D': '-..',\n 'E': '.', 'F': '..-.',\n 'G': '--.', 'H': '....',\n 'I': '..', 'J': '.---',\n 'K': '-.-', 'L': '.-..',\n 'M': '--', 'N': '-.',\n 'O': '---', 'P': '.--.',\n 'Q': '--.-', 'R': '.-.',\n 'S': '...', 'T': '-',\n 'U': '..-', 'V': '...-',\n 'W': '.--', 'X': '-..-',\n 'Y': '-.--', 'Z': '--..',\n '0': '-----', '1': '.----',\n '2': '..---', '3': '...--',\n '4': '....-', '5': '.....',\n '6': '-....', '7': '--...',\n '8': '---..', '9': '----.',\n ' ': ' ', '.': '.-.-.-',\n ',': '--..--', '?': '..--..',\n '/': '-..-.', '-': '-....-',\n '(': '-.--.-', ')': '-.--.-'\n}\n\ndef encode(message):\n code = ''\n for letter in message:\n  code += MORSE_CODE[letter.upper()] + ' '\n \n return code\n\nprint(encode(\"Hello world\"))\n# Output: .... . .-.. .-.. ---  .-- --- .-. .-.. -..", "predict": "def sentence_to_morse(sentence):\n morse_code = {\n 'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.',\n 'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..',\n 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.',\n 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-',\n 'Y': '-.--', 'Z': '--..', '1': '.----', '2': '..---', '3': '...--',\n '4': '....-', '5': '.....', '6': '-....', '7': '--...', '8': '---..',\n '9': '----.', '0': '-----', ', ': '--..--', '.': '.-.-.-', '?': '..--..',\n '/': '-..-.', '-': '-....-', '(': '-.--.', ')': '-.--.-'\n }\n morse_sentence = \"\"\n for char in sentence.upper():\n if char in morse_code:\n morse_sentence += morse_code[char] + \" \"\n return morse_sentence\n\nprint(sentence_to_morse(\"Hello World\"))\n# Output:......-...-.. --- /.-- ---.-..-.. -.."}
{"prompt": "Generate a python program to sort a list of numbers\narray = [4, 2, 6, 7, 1] \n", "label": "def sort_list(array): \n    n = len(array) \n  \n    for i in range(n): \n  \n        min_idx = i \n        for j in range(i+1, n): \n            if array[min_idx] > array[j]: \n                min_idx = j \n        array[i], array[min_idx] = array[min_idx], array[i]\n\nif __name__ == \"__main__\":\n    array = [4, 2, 6, 7, 1]\n    sort_list(array)\n    print(array)", "predict": "def sort_list(array):\n    for i in range(len(array)):\n        min_index = i\n        for j in range(i+1, len(array)):\n            if array[min_index] > array[j]:\n                min_index = j\n        array[i], array[min_index] = array[min_index], array[i]\n    return array\n\nprint(sort_list(array))"}
{"prompt": "Create a program in Python to remove all the occurrences of an item from a list.\nList: [1, 2, 3, 4, 2, 5, 2]\nItem to Remove: 2 \n", "label": "def removeItem(list, item):\n    # loop through the list\n    for i in list:\n        # check if the element is the item to remove\n        if i == item:\n            # remove the item\n            list.remove(i)\n    # return the list\n    return list\n\n#example\nlist = [1, 2, 3, 4, 2, 5, 2]\nresult = removeItem(list, 2)\n\nprint(result)\n# Output: [1, 3, 4, 5]", "predict": "def remove_item(list, item):\n    new_list = []\n    for i in list:\n        if i!= item:\n            new_list.append(i)\n    return new_list\n\nlist = [1, 2, 3, 4, 2, 5, 2]\nitem = 2\n\nprint(remove_item(list, item))"}
{"prompt": "Could you build a web scraper in Python that collects all the links from a website? \n", "label": "# Python program to scrape a webpage\nimport requests as req \nfrom bs4 import BeautifulSoup \n  \nURL = \"http://www.example.com/\"\n  \n# GET request \nr = req.get(URL) \n  \n# parse the downloaded homepage and grab all text\nsoup = BeautifulSoup(r.text, \"html.parser\") \n  \n# find and print all links \nlinks = soup.find_all('a') \nfor link in links: \n    print(link.get('href'))", "predict": "import requests\nfrom bs4 import BeautifulSoup\n\ndef scrape_links(url):\n    page = requests.get(url)\n    soup = BeautifulSoup(page.content, 'html.parser')\n    links = []\n    for link in soup.find_all('a'):\n        links.append(link.get('href'))\n    return links"}
{"prompt": "Generate a Python program to delete a given key from a dictionary.\ndictionary = {'foo': 1, 'bar': 2, 'baz': 3}\nkey = 'baz' \n", "label": "dictionary = {'foo': 1, 'bar': 2, 'baz': 3}\nkey = 'baz'\n\ndef delete_key(dic, k):\n  if k in dic:\n    del dic[k]\n\ndelete_key(dictionary, key)\n\nprint(dictionary)", "predict": "def delete_key(dictionary, key):\n    del dictionary[key]\n    return dictionary"}
{"prompt": "Analyze the following Python function to detect any potential errors.\ndef expand_list(list):\n    for item in list:\n        list *= 2 \n", "label": "The function is attempting to modify the list while iterating over it. This can lead to unexpected behavior and should be avoided. To fix the code, the list should be copied before the iteration takes place: \n\ndef expand_list(list):\n    list_copy = list[:]   # make a copy of the list\n    for item in list_copy:\n        list *= 2", "predict": "The function has an error in line 3, where it attempts to multiply the list by 2. This operation is not valid for lists, as it will raise a TypeError. Instead, the function should use a loop to iterate over each element in the list and add it to a new list."}
{"prompt": "Generate a Python program to reverse the order of words in a sentence but keep the order of the characters in each word the same. \n", "label": "def reverse_words(string):\n  words = string.split(\" \")\n  reversed_words = []\n  for word in words:\n    reversed_words.insert(0, word)\n  return ' '.join(reversed_words)\n\nstring = 'This is a sentence.'\nreverse_words = reverse_words(string)\nprint(reverse_words)", "predict": "def reverse_words(sentence):\n    words = sentence.split(' ')\n    reversed_words = [word[::-1] for word in words]\n    reversed_sentence =''.join(reversed_words)\n    return reversed_sentence"}
{"prompt": "Port a Java code snippet to Python 3.\npublic class Foo {\n  public int foo( int a, int b ) {\n    return a + b;\n  }\n} \n", "label": "def foo(a, b):\n return a + b", "predict": "class Foo:\n    def foo(self, a, b):\n        return a + b"}
{"prompt": "Generate a Python program that takes a list of strings as input and prints the strings in alphabetical order.\n['cat', 'dog', 'apple', 'banana'] \n", "label": "strings = ['cat', 'dog', 'apple', 'banana']\n\nstrings.sort()\n\nfor string in strings:\n    print(string)", "predict": "def sort_strings(strings):\n    strings.sort()\n    for string in strings:\n        print(string)\n\nsort_strings(['cat', 'dog', 'apple', 'banana'])"}
{"prompt": "Build a Python program that extracts all email addresses from a given string.\n\"This is an example with two emails: john@example.com, and jane@example.com\" \n", "label": "import re\n\ndef find_emails(text):\n    regex = r\"([a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+)\"\n    emails = re.findall(regex, text)\n    return emails\n\nemails = find_emails(\"This is an example with two emails: john@example.com, and jane@example.com\")\nprint(emails)", "predict": "import re\n\ndef extract_emails(text):\n    regex = r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b'\n    return re.findall(regex, text)\n\ntext = \"This is an example with two emails: john@example.com, and jane@example.com\"\nemails = extract_emails(text)\nprint(emails)"}
{"prompt": "Create a Python code to generate a random string of length 8 made of uppercase letters and numbers. \n", "label": "import string\nimport random\n\nlength = 8\nchars = string.ascii_uppercase + string.digits\npassword = ''.join(random.choice(chars) for i in range(length))\n\nprint (password)", "predict": "import string\nimport random\n\ndef generate_random_string(length):\n    letters_and_numbers = string.ascii_uppercase + string.digits\n    return ''.join(random.choice(letters_and_numbers) for i in range(length))\n\nprint(generate_random_string(8))"}
{"prompt": "This code calculates the percent of transcripts mapping to rRNA. To use it, you need to supply two inputs: an HTseq_counts file and an original reference transcriptome aligned to. To produce tables with rRNA and MT counts for each sample, run the command \"./rRNA_MT_count.py --gtf /path/to/GTF/file --htseq /path/to/HT", "label": "#!/usr/bin/python\n\n# Malwina Prater, mn367@cam.ac.uk,  2017, Copyright\n# Centre for Trophoblast Research, University of Cambridge\n#\n# Script version: v01.\n#\n# Script to calculate the percent of transcripts mapping to rRNA\n#\n#  INPUTS :\n# 1. HTseq_counts file\n# 2. Original reference transcriptome alignned to\n#\n#  USAGE :    \n#  For producing table(s) with rRNA and MT counts for each sample use commands like that:\n#\n#    ./rRNA_MT_count.py --gtf /Users/malwina/Documents/CTR-Data/genomes/Mus_musculus/mm10/Mus_musculus.GRCm38.84.gtf --htseq C17_3_S20_Aligned.out.srt.bam_htseq_combined_counts.txt\n#\n\n\n# import modules: \nimport os,sys\nfrom optparse import OptionParser\nimport re\n\n# parse in the user options:\n\nparser = OptionParser(usage=\"%prog [-x Excel [-i imagefile] [-s squares]\",\n                      version=\"%prog 0.1\")\n\nparser.add_option(\"--htseq\", dest=\"FileName\", type=\"string\", action=\"store\")\nparser.add_option(\"--gtf\", dest=\"GTF\", type=\"string\", action=\"store\")\n\n(options, args) = parser.parse_args()\n\n\n#files = sys.argv[]\nHTSEQ_COUNTS = options.FileName\nGTF = options.GTF\n\n\n# check if files supplied exist:\ntry:\n    handle = open(GTF, \"rU\")\n    handle.close()\nexcept:\n    print \"\\nError->\\tGTF File: %s does not exist\\n\" % GTF\n    sys.exit()\n\ntry:\n    handle = open(HTSEQ_COUNTS, \"rU\")\n    handle.close()\nexcept:\n    print \"\\nError->\\tFile: %s does not exist\\n\" % HTSEQ_COUNTS\n    sys.exit()\n\n\n#\n# First job is to extract all the identifiers of genes/transcripts mapping to the rRNA and MT genes and store in 2 arrays\n#\n\nrRNA_identifiers = {}\nMT_identifiers = {}\n\n\nwith open(GTF, \"rU\") as handle:\n    #line = handle.readline()\n    for line in handle:\n    \tline.rstrip('\\n')\n    \tif 'gene_biotype \"rRNA\"' in line:\n            identifier = line\n            identifier = re.sub('.*gene_id \"', '', identifier)\n            identifier = re.sub('\"; gene_version.*\\n', '', identifier)\n            rRNA_identifiers[identifier] = 1\n        if 'MT' in line:\n            identifier = line\n            identifier = re.sub('.*gene_id \"', '', identifier)\n            identifier = re.sub('\"; gene_version.*\\n', '', identifier)\n            MT_identifiers[identifier] = 1    \nhandle.close()    \n\n#print(\"rRNA:\")\n#print(rRNA_identifiers.keys())\n#print(\"MT:\")\n#print(MT_identifiers.keys())\n\n\n#\n# Second job is to go through the HTSEQ-couts and count reads matching the rRNA identifiers\n#\nCummulative_rRNA_Count = 0\nrRNA_genes = 0\nReadCount = 0\nline_number = 0\nMT_genes = 0;\nCummulative_MT_Count = 0;\n\nwith open(HTSEQ_COUNTS, \"rU\") as", "predict": "Seq_counts/file --output /path/to/output/file\".\n\n#!/usr/bin/env python\n\nimport argparse\nimport os\nimport sys\n\nfrom HTSeq import GFF_Reader\nfrom HTSeq import GTF_Reader\nfrom HTSeq import GenomicArrayOfSets\n\ndef get_rRNA_genes(gtf_file):\n    rRNA_genes = []\n    for line in GTF_Reader(gtf_file):\n        if line.type == \"gene\":\n            if line.attr[\"gene_type\"] == \"rRNA\":\n                rRNA_genes.append(line.name)\n    return rRNA_genes\n\ndef get_mt_genes(gtf_file):\n    mt_genes = []\n    for line in GTF_Reader(gtf_file):\n        if line.type == \"gene\":\n            if line.attr[\"gene_type\"] == \"mt\":\n                mt_genes.append(line.name)\n    return mt_genes\n\ndef get_rRNA_counts(htseq_counts_file):\n    rRNA_counts = {}\n    for line in GFF_Reader(htseq_counts_file):\n        if line.type == \"interval\":\n            if line.iv.gene_id in rRNA_genes:\n                rRNA_counts[line.iv.gene_id] = rRNA_counts.get(line.iv.gene_id, 0) + line.iv.iv_string.count(\"+\")\n    return rRNA_counts\n\ndef get_mt_counts(htseq_counts_file):\n    mt_counts = {}\n    for line in GFF_Reader(htseq_counts_file):\n        if line.type == \"interval\":\n            if line.iv.gene_id in mt_genes:\n                mt_counts[line.iv.gene_id] = mt_counts.get(line.iv.gene_id, 0) + line.iv.iv_string.count(\""}
{"prompt": "Modify the following Python code to raise an exception if the input value is not an integer\ndef square_root(x):\n    return x**0.5 \n", "label": "def square_root(x):\n    if not isinstance(x, int):\n        raise TypeError('Input must be an integer')\n    return x**0.5", "predict": "def square_root(x):\n    if not isinstance(x, int):\n        raise Exception('Input value must be an integer')\n    return x**0.5"}
{"prompt": "Create a program in Python that extracts titles of all YouTube videos from a URL.\nhttps://www.youtube.com/user/Thexvid/videos \n", "label": "import requests\nimport re\n\nurl = \"https://www.youtube.com/user/Thexvid/videos\"\n\nr = requests.get(url)\ntitles = re.findall('<a href=\"/watch\\?v=([^\"]+)\">(.+?)<\\/a>',r.content.decode('utf-8'))\n\nfor title in titles:\n print(title[1])", "predict": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.youtube.com/user/Thexvid/videos'\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\n\ntitles = []\n\nfor vid in soup.find_all('a', {'class': 'yt-uix-tile-link'}):\n    titles.append(vid.get('title'))\n\nprint(titles)"}
{"prompt": "Write Python code to list the contents of a directory. \n", "label": "# get the list of contents\nimport os\ndirectory_contents = os.listdir()\n\n# print the contents\nfor content in directory_contents:\n    print(content)", "predict": "import os\n\ndef list_dir_contents(path):\n    for item in os.listdir(path):\n        print(item)"}
{"prompt": "Create an AI-powered Python script to optimize any given code.\nExample code:\nfunction getResult(a, b, c) {\n return a + b + c;\n} \n", "label": "# Import the required libraries\nfrom dataclasses import dataclass\n\n@dataclass\nclass Params:\n a: int\n b: int\n c: int\n\ndef get_result(params: Params) -> int:\n \"\"\"Returns the sum of the three given numbers\"\"\"\n return params.a + params.b + params.c\n\n# Optimize the code\ndef optimize(fn, params):\n best_score = 0\n best_params = None\n for a in range(params.a - 10, params.a + 10):\n for b in range(params.b - 10, params.b + 10):\n for c in range(params.c - 10, params.c + 10):\n score = fn(Params(a, b , c))\n if score > best_score:\n best_score = score\n best_params = {\n 'a': a,\n 'b': b,\n 'c': c\n }\n return best_params\n\nif __name__ == '__main__':\n # Initialize the parameters\n params = Params(a=1, b=2, c=3)\n # Get the optimized params\n best_params = optimize(get_result, params)\n # Print the optimized result\n print(\"Optimized result: %d\" % get_result(Params(best_params['a'], best_params['b'], best_params['c'])))", "predict": "def optimize_code(code):\n # Parse code\n ast = ast.parse(code)\n\n # Find all the function calls\n calls = []\n for node in ast.body:\n if isinstance(node, ast.Call):\n calls.append(node)\n\n # Find the optimal solution\n optimal_solution = []\n for call in calls:\n args = call.args\n for arg in args:\n if isinstance(arg, ast.Name):\n optimal_solution.append(arg.id)\n\n # Return the optimized code\n optimized_code = \"return \" + \" + \".join(optimal_solution)\n return optimized_code\n\n# Example code\ncode = \"\"\"\nfunction getResult(a, b, c) {\n return a + b + c;\n}\n\"\"\"\n\noptimized_code = optimize_code(code)\nprint(optimized_code)\n# Output:\n# return a + b + c"}
{"prompt": "Create a Python function that takes two strings and returns true if the first string is a subsequence of the second.\nString 1: abc\nString 2: qaxbcy \n", "label": "def is_subsequence(str1, str2):\n    i = 0\n    j = 0\n\n    while(i < len(str1) and j < len(str2)):\n        if str1[i] == str2[j]:\n            i += 1\n        j += 1\n\n    return i == len(str1)", "predict": "def is_subsequence(s1, s2):\n    i = 0\n    for c in s2:\n        if c == s1[i]:\n            i += 1\n        if i == len(s1):\n            return True\n    return False\n\nprint(is_subsequence('abc', 'qaxbcy'))"}
{"prompt": "Create a neural network class in Python to model a linear regression function. \n", "label": "import numpy as np\nclass LinearRegressionModel:\n    def __init__(self, input_dim, output_dim):\n        ''' Initialises the weights and bias of the linear regression model\n        Arguments:\n            input_dim {int} -- Number of input features\n            output_dim {int} -- Number of outputs\n        '''\n        self.weights = np.zeros((input_dim, output_dim))\n        self.bias = np.zeros((1, output_dim))\n\n    def forward(self, x):\n        ''' Calculates the forward pass of the linear regression model\n        Arguments:\n            x {numpy array} -- Input data of size (N, input_dim)\n        Returns:\n            out {numpy array} -- Output of the linear regression model of size (N, output_dim)\n        '''\n        out = np.dot(x, self.weights) + self.bias\n        return out", "predict": "import numpy as np\n\nclass LinearRegression:\n    def __init__(self):\n        self.weights = None\n        self.bias = None\n\n    def fit(self, X, y):\n        # Add a column of ones to X\n        X = np.hstack((np.ones((X.shape[0], 1)), X))\n        # Compute the weights\n        self.weights = np.linalg.inv(X.T.dot(X)).dot(X.T).dot(y)\n        # Compute the bias\n        self.bias = np.mean(y) - np.mean(X.dot(self.weights))\n\n    def predict(self, X):\n        # Add a column of ones to X\n        X = np.hstack((np.ones((X.shape[0], 1)), X))\n        # Compute the predictions\n        return X.dot(self.weights) + self.bias"}
{"prompt": "Develop a ML model in Python for predicting the winning team of football matches. Use data from the past 5 years of the Premier League.\nNot applicable \n", "label": "import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import GradientBoostingClassifier\n\n# Load data\ndata = pd.read_csv('data.csv')\n\n# Select features\nfeatures = data[['home_team_goals', 'away_team_goals', 'home_team_possession', 'away_team_possession',\n                 'home_team_shots', 'away_team_shots', 'home_team_yellow_cards', 'away_team_yellow_cards',\n                 'home_team_red_cards', 'away_team_red_cards']]\n\n# Select target\ntarget = data['winner']\n\n# Split data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)\n\n# Train the model\ngbm = GradientBoostingClassifier()\ngbm.fit(X_train, y_train)\n\n# Make predictions\ny_pred = gbm.predict(X_test)\n\n# Evaluate the model\nscore = gbm.score(X_test, y_test)\nprint(f'Model score: {score}')", "predict": "import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\n# Load data\ndata = pd.read_csv('data.csv')\n\n# Create feature and target variables\nX = data.drop('winning_team', axis=1)\ny = data['winning_team']\n\n# Split data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# Create model\nmodel = LogisticRegression()\n\n# Train model\nmodel.fit(X_train, y_train)\n\n# Evaluate model\nscore = model.score(X_test, y_test)\nprint(score)"}
{"prompt": "Create a program in Python that evaluates a postfix expression. The input to the program should be a string with the postfix expression. The output should be the evaluated value of the expression.\n\"2 3 + 4 5 * *\" \n", "label": "def evaluate(expression): \n  \n    # split expression into list  \n    expression = expression.split() \n  \n    # stack to store integer values. \n    stack = []  \n  \n    # do for every element of expression. \n    for element in expression: \n  \n        # If element is an operand push \n        # into stack it's a number only \n        if element.isdigit(): \n            stack.append(element) \n  \n        # if element is an operator, \n        # pop two elements from stack \n        # perform respective operations \n        else:  \n            val1 = stack.pop() \n            val2 = stack.pop() \n            stack.append(str(eval(val2 + element + val1))) \n  \n    # return the value  \n    return (int(stack[0])) \n  \n# Driver Code  \nexpression = \"2 3 + 4 5 * *\"\n  \nprint(evaluate(expression)) \n\nOutput: 46", "predict": "def evaluate_postfix(expr):\n    tokens = expr.split()\n    stack = []\n    for token in tokens:\n        if token.isdigit():\n            stack.append(int(token))\n        else:\n            b = stack.pop()\n            a = stack.pop()\n            if token == '+':\n                stack.append(a + b)\n            elif token == '-':\n                stack.append(a - b)\n            elif token == '*':\n                stack.append(a * b)\n            elif token == '/':\n                stack.append(a / b)\n    return stack.pop()\n\nprint(evaluate_postfix(\"2 3 + 4 5 * *\"))"}
{"prompt": "Write a Python script to identify the words that contain more than one vowel in a given sentence.\nSentence: The quick brown fox jumped over the lazy dog. \n", "label": "import re\n\nsentence = \"The quick brown fox jumped over the lazy dog.\"\npattern = r\"\\b(\\w*[aeiou]\\w*){2,}\\b\"\n\nmatch = re.findall(pattern, sentence)\nprint(match)\n\n# Output: ['quick', 'brown', 'jumped', 'over', 'lazy']", "predict": "def find_words_with_more_than_one_vowel(sentence):\n    words = sentence.split()\n    words_with_more_than_one_vowel = []\n    for word in words:\n        vowels = 0\n        for letter in word:\n            if letter in 'aeiouAEIOU':\n                vowels += 1\n        if vowels > 1:\n            words_with_more_than_one_vowel.append(word)\n    return words_with_more_than_one_vowel\n\nresult = find_words_with_more_than_one_vowel('The quick brown fox jumped over the lazy dog.')\nprint(result)\n\n# Output: ['quick', 'brown', 'jumped', 'over', 'lazy']"}
{"prompt": "This code provides a Python API for KB SRU. To use it, you can create an instance of the \"sru\" class and", "label": "#! /usr/bin/env python\n\"\"\"\nPython API for KB SRU\n\"\"\"\n\nimport sys\nimport urllib\nimport requests\nfrom lxml import etree\n\nSRU_BASEURL = 'http://jsru.kb.nl/sru/sru'\nSRU_BASEURL += '?version=1.2&maximumRecords=%i'\nSRU_BASEURL += '&operation=searchRetrieve'\nSRU_BASEURL += '&startRecord=%i'\nSRU_BASEURL += '&recordSchema=%s'\nSRU_BASEURL += '&x-collection=%s&query=%s'\n\nSETS = {'ANP': {'collection': 'ANP',\n                'description_en': 'Radio Bulletins ANP Press Agency',\n                'description_nl': 'ANP Radiobulletins Digitaal',\n                'metadataPrefix': 'didl',\n                'recordschema': 'dcx',\n                'setname': 'anp',\n                'time_period': [1937, 1989]},\n        'DPO': {'collection': 'DPO_boekdeel',\n                'description_en': 'Early Dutch Books Online',\n                'description_nl': 'Early Dutch Books Online',\n                'metadataPrefix': 'didl',\n                'recordschema': 'ddd',\n                'setname': 'DPO',\n                'time_period': [1781, 1800]},\n        'BYVANCK': {'description_en': 'Medieval Illuminated Manuscripts',\n                    'description_nl': 'Middeleeuwse Verluchte Handschriften',\n                    'metadataPrefix': 'dcx',\n                    'setname': 'BYVANCK',\n                    'time_period': [500, 1500]},\n        'SGD': {'description_en': 'States General Digital',\n                'description_nl': 'Staten-Generaal Digitaal',\n                'metadataPrefix': 'dcx',\n                'setname': 'sgd:register',\n                'time_period': [1962, 1994]},\n        'GGC': {'collection': 'GGC',\n                'description_en': 'General Catalogue KB',\n                'description_nl': 'Algemene Catalogus KB',\n                'metadataPrefix': 'dcx',\n                'recordschema': 'dcx',\n                'setname': 'ggc',\n                'time_period': [1937, 2021]}}  # No idea what to use here?\n\n# Name spaces in GGC records\n\nsrw_ns = 'http://www.loc.gov/zing/srw/'\ntel_ns = 'http://krait.kb.nl/coop/tel/handbook/telterms.html'\nxsi_ns = 'http://www.w3.org/2001/XMLSchema-instance'\ndc_ns = 'http://purl.org/dc/elements/1.1/'\ndcterms_ns = 'http://purl.org/dc/terms/'\ndcx_ns = 'http://krait.kb.nl/coop/tel/handbook/telterms.html'\n\nNSMAPGGC = {\"srw\": srw_ns,\n            \"tel\": tel_ns,\n            \"xsi\": xsi_ns,\n            \"dc\":  dc_ns,\n            \"dcterms\": dcterms_ns,\n            \"dcx\": dcx_ns}\n\n\nclass response():\n    def __init__(self, record_data, sru):\n        self.record_data = record_data\n        self.sru = sru\n\n    def getElementText(self, tagName, attributeName, attributeValue):\n        # Returns text content of all elements for which tag matches tagName,\n        # and attribute value equals attributeValue. Set attributeName to empty\n        # string to get all tagName matches.\n        textFields = []\n        for r in self.record_data.iter():\n            if r.tag == tagName:\n                if attributeName != '':\n                    try:\n                        if r", "predict": "then call its methods to search the SRU database.\n\nimport urllib2\nimport json\nimport xml.etree.ElementTree as ET\n\nclass sru:\n    def __init__(self, sru_base_url, sru_login_url, sru_password):\n        self.sru_base_url = sru_base_url\n        self.sru_login_url = sru_login_url\n        self.sru_password = sru_password\n        self.sru_session = urllib2.HTTPCookieProcessor()\n        self.sru_auth_handler = urllib2.HTTPBasicAuthHandler()\n        self.sru_auth_handler.add_password(realm='SRS-Auth', uri=sru_base_url, username=sru_login_url, password=sru_password)\n        self.opener = urllib2.build_opener(self.sru_auth_handler, self.sru_session)\n\n    def query(self, query_string, record_type):\n        url = self.sru_base_url + '/search/query'\n        data = {'q': query_string,'recordType': record_type}\n        response = self.opener.open(url, data)\n        response_string = response.read()\n        response_json = json.loads(response_string)\n        return response_json\n\n    def parse_sru_result(self, sru_result):\n        result = []\n        for record in sru_result['result']['records']:\n            item = {}\n            item['title'] = record['title']\n            item['description'] = record['description']\n            item['identifier'] = record['identifier']\n            item['author'] = record['author']\n            item['date'] = record['date']\n            item['language'] = record['language']\n            item['location'] = record['location']\n            item['relation'] = record['relation']\n            item['source'] = record['source']\n            item['source_type'] = record['source_type']\n            item['source_url'] = record['source_url']\n            item['relation_type'] = record['relation"}
{"prompt": "Using numpy, create a Python code which would return an array with the running total of numbers in a given list. \n", "label": "import numpy as np\n\ndef runningTotal(arr):\n    return np.cumsum(arr)", "predict": "import numpy as np\n\ndef running_total(nums):\n    return np.cumsum(nums)"}
{"prompt": "Construct a neural network in Python that can perform basic regression.\nNot applicable \n", "label": "import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n \n# Load the data\ndata = pd.read_csv('data.csv')\n \n# Split the data into features and labels\nX = data.drop(['label'], axis=1).values\ny = data['label'].values\n \n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n \n# Create the neural network\nmodel = Sequential()\nmodel.add(Dense(12, input_dim=X.shape[1], kernel_initializer='normal', activation='relu'))\nmodel.add(Dense(12, kernel_initializer='normal', activation='relu'))\nmodel.add(Dense(1, kernel_initializer='normal'))\n \n# Compile the model\nmodel.compile(loss='mean_squared_error', optimizer='adam')\n \n# Train the model\nmodel.fit(X_train, y_train, epochs=100, batch_size=20, verbose=0)\n \n# Evaluate the model\nscore = model.evaluate(X_test, y_test, verbose=0)\nprint('Test score:', score)", "predict": "import numpy as np\nimport tensorflow as tf\n\n# Create the model\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Dense(64, activation='relu', input_shape=(2,)),\n    tf.keras.layers.Dense(1)\n])\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='mean_squared_error',\n              metrics=['accuracy'])\n\n# Train the model\nmodel.fit(x_train, y_train, epochs=100)\n\n# Evaluate the model\nmodel.evaluate(x_test, y_test)"}
{"prompt": "Generate a program in Python to take in two strings as input, and output a list of all thewords in both strings.\nString 1: I want to make a difference\nString 2: The journey to success is long \n", "label": "def string_to_list(s1, s2):\n    s1_list = s1.split()\n    s2_list = s2.split()\n    output_list = s1_list + s2_list\n    return output_list\n\nwords = string_to_list(\"I want to make a difference\", \"The journey to success is long\")\nprint(words)", "predict": "def get_words(string1, string2):\n    words1 = string1.split()\n    words2 = string2.split()\n    words = words1 + words2\n    return words\n\nwords = get_words(\"I want to make a difference\", \"The journey to success is long\")\nprint(words)"}
{"prompt": "Create a web scraper using Python that retrieves the 10 most recent articles from a news website.\nNot applicable \n", "label": "import requests \nfrom bs4 import BeautifulSoup \n  \n# URL to scrap \nURL = 'http://example.com/news'\n  \n# get the source code \nhtml_content = requests.get(URL).text \n  \n# parse the html content \nsoup = BeautifulSoup(html_content, \"lxml\") \n  \n# get all the articles  \narticles = soup.find_all('article') \n  \n# print the first 10 articles \nfor article in articles[:10]: \n    print(article.text)", "predict": "import requests\nfrom bs4 import BeautifulSoup\n\n# Set the url of the website to scrape\nurl = 'https://www.example.com/news'\n\n# Send a request to the website\nresponse = requests.get(url)\n\n# Parse the response using BeautifulSoup\nsoup = BeautifulSoup(response.text, 'html.parser')\n\n# Find all the articles on the website\narticles = soup.find_all('article')\n\n# Extract the title and the content of each article\ntitles = []\ncontents = []\nfor article in articles:\n title = article.find('h2').text\n content = article.find('p').text\n titles.append(title)\n contents.append(content)\n\n# Print the 10 most recent articles\nprint('The 10 most recent articles are:')\nfor i in range(10):\n print(f'{i+1}. {titles[i]}\\n{contents[i]}')"}
{"prompt": "Create a Python program to convert HTML to plain text without using any libraries. \n", "label": "def html_to_text(html_string):\n    output = ''\n    in_tag = False\n    for char in html_string:\n        if char == '<':\n            in_tag = True\n        elif char == '>':\n            in_tag = False\n        elif in_tag == False:\n            output += char\n    return output", "predict": "def html_to_plain_text(html):\n    plain_text = ''\n    i = 0\n    while i < len(html):\n        if html[i] == '<':\n            while html[i]!= '>':\n                i += 1\n            continue\n        else:\n            plain_text += html[i]\n        i += 1\n    return plain_text"}
{"prompt": "Write a python program to convert the given temperature from Celsius to Fahrenheit.\n0°C \n", "label": "\"\"\"\nConvert the given temperature from Celsius to Fahrenheit\n\"\"\"\n\ndef celsius_to_fahrenheit(celsius):\n    fahrenheit = (celsius * 9/5) + 32\n    return fahrenheit\n\nif __name__ == '__main__':\n    celsius = 0\n    print(celsius_to_fahrenheit(celsius))", "predict": "def celsius_to_fahrenheit(celsius):\n    return (celsius * 9/5) + 32\n\ncelsius = 0\nfahrenheit = celsius_to_fahrenheit(celsius)\nprint(f\"{celsius}°C is {fahrenheit}°F\")"}
{"prompt": "Create a lambda expression in Python to filter a list of integer greater than 50.\n[45, 12, 52, 89, 33, 99] \n", "label": "list1 = [45, 12, 52, 89, 33, 99]\nfiltered_list = list(filter(lambda x: x > 50, list1))\n\nprint(filtered_list)", "predict": "list(filter(lambda x: x > 50, [45, 12, 52, 89, 33, 99])) # Output: [52, 89, 99]"}
{"prompt": "Create a Python program to evaluate and compare the performance of two different heuristics algorithms. \n", "label": "import time\nimport heuristics_algorithm1\nimport heuristics_algorithm2\n\n#input data for algorithms\ndata1 = ...\ndata2 = ...\n\n#Evaluate and compare the performance of two different heuristics algorithms\nstart = time.time()\nresult1 = heuristics_algorithm1.run(data1)\nend = time.time()\ntime1 = end - start\n\nstart = time.time()\nresult2 = heuristics_algorithm2.run(data2)\nend = time.time()\ntime2 = end - start\n\nif time1 < time2:\n    print(\"Algorithm 1 is faster than algorithm 2\")\nelif time2 < time1:\n    print(\"Algorithm 2 is faster than algorithm 1\")\nelse:\n    print(\"Both algorithms have the same performance time\")", "predict": "import time\n\ndef heuristic_algorithm_1():\n    # Algorithm 1 code\n    pass\n\ndef heuristic_algorithm_2():\n    # Algorithm 2 code\n    pass\n\n# Evaluate the performance of both algorithms\nstart_time = time.time()\nheuristic_algorithm_1()\nend_time = time.time()\ntime_1 = end_time - start_time\n\nstart_time = time.time()\nheuristic_algorithm_2()\nend_time = time.time()\ntime_2 = end_time - start_time\n\n# Compare the performance of both algorithms\nif time_1 < time_2:\n    print(\"Algorithm 1 is faster.\")\nelif time_2 < time_1:\n    print(\"Algorithm 2 is faster.\")\nelse:\n    print(\"Both algorithms have the same performance.\")"}
{"prompt": "Generate a function in Python that takes in a dictionary (string → integer) and returns the sum of all values in the dictionary.\nmy_dict = {\n   \"a\": 5,\n   \"b\": 10,\n   \"c\": 15\n} \n", "label": "def compute_dict_sum(input_dict):\n    result = 0\n    for val in input_dict.values():\n        result += val\n    return result\n\nprint(compute_dict_sum(my_dict))", "predict": "def sum_dict_values(my_dict):\n  total = 0\n  for key, value in my_dict.items():\n    total += value\n  return total\n\nresult = sum_dict_values(my_dict)\nprint(result) # Output: 30"}
{"prompt": "Write a Python script that filters a list of integers and returns only even numbers.\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \n", "label": "def filter_even_numbers(lst):\n    # Filter out even numbers from the given list \n    even_numbers = [num for num in lst if num % 2 == 0]\n    return even_numbers\n\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nresult = filter_even_numbers(list)\nprint(result)", "predict": "even_numbers = [x for x in list if x % 2 == 0]\nprint(even_numbers)"}
{"prompt": "Generate a Python program that takes a sentence as input and prints out only the verbs.\nThe cat jumped over the moon. \n", "label": "import nltk\n\ndef extract_verbs(sentence):\n    tokens = nltk.word_tokenize(sentence)\n    tags = nltk.pos_tag(tokens)\n    verbs = [word for word, pos in tags if pos.startswith('V')]\n    return verbs\n\nsentence = \"The cat jumped over the moon.\"\nverbs = extract_verbs(sentence)\nprint(verbs)", "predict": "import nltk\n\n# define the sentence\nsentence = 'The cat jumped over the moon.'\n\n# tokenize the sentence\ntokens = nltk.word_tokenize(sentence)\n\n# tag the tokens\ntagged = nltk.pos_tag(tokens)\n\n# print the verbs\nfor word, tag in tagged:\n    if tag.startswith('VB'):\n        print(word)\n\n# Output: jumped"}
{"prompt": "Create an AI-based system in Python for predicting stock market movements.\nNot applicable \n", "label": "#import libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n#import data\ndata = pd.read_csv('data.csv') \n\n#split data into train and test data\nX_train=data.iloc[:, 0] #Choosing the independent variable \ny_train=data.iloc[:, 1]  #Choosing the dependent variable\nX_test=data.iloc[:, 0] #Choosing the independent variable \ny_test=data.iloc[:, 1]  #Choosing the dependent variable\n\n#Build a deep learning model\n#import necessary libraries\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.models import Sequential\n\n#create a model and add layers\nmodel = Sequential()\nmodel.add(Dense(64, input_shape=(1,), activation='relu'))\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dense(1))\n\n#compile the model\nmodel.compile(optimizer='adam', loss='mse', metrics=['mse'])\n\n#train the model\nmodel.fit(X_train, y_train, batch_size=64, epochs=20, validation_data=(X_test, y_test))\n\n#Evaluate the model\nscore = model.evaluate(X_test, y_test, verbose=0)", "predict": "import numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\n# Read data from csv\ndata = pd.read_csv('stock_data.csv')\n\n# Split data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(data.drop('target', axis=1), data['target'], test_size=0.2, random_state=42)\n\n# Create a linear regression model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Make predictions\npredictions = model.predict(X_test)\n\n# Evaluate the model\nscore = model.score(X_test, y_test)\nprint('Model score: ', score)"}
{"prompt": "Develop an API in Python that fetches data from an SQL database and presents the data in the form of a JSON.\nNone \n", "label": "import json \nimport sqlite3\nfrom flask import Flask, request, jsonify \n\napp = Flask(__name__) \n  \ndef dict_factory(cursor, row):\n    d = {}\n    for idx, col in enumerate(cursor.description):\n        d[col[0]] = row[idx]\n    return d \n  \n@app.route('/', methods=['GET'])\ndef index(): \n    connection = sqlite3.connect('database.db')\n    connection.row_factory = dict_factory\n    cur = connection.cursor() \n    all_users = cur.execute('SELECT * FROM users;').fetchall() \n    return jsonify(all_users) \n  \nif __name__ == '__main__': \n    app.run(debug = True)", "predict": "import sqlite3\nimport json\n\n# Connect to the database\nconn = sqlite3.connect('example.db')\nc = conn.cursor()\n\n# Fetch data from the database\nc.execute(\"SELECT * FROM table\")\ndata = c.fetchall()\n\n# Convert data to JSON\njson_data = json.dumps(data)\n\n# Close the connection\nconn.close()\n\n# Return the JSON data\nreturn json_data"}
{"prompt": "Generate a Python dictionary that contains the count of the characters in a given string.\n\"Hello World\" \n", "label": "def count_chars(string):\n    count_dict = {}\n\n    for char in string:\n        if char in count_dict:\n            count_dict[char] += 1\n        else:\n            count_dict[char] = 1\n\n    return count_dict\n\nprint(count_chars(\"Hello World\"))\n\n# Output: {'H': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'W': 1, 'r': 1, 'd': 1}", "predict": "def count_chars(string):\n    counts = {}\n    for char in string:\n        if char in counts:\n            counts[char] += 1\n        else:\n            counts[char] = 1\n    return counts\n\nprint(count_chars(\"Hello World\"))"}
{"prompt": "Write a Python program to store and querying user data.\nuser_data = {\n    \"Name\": \"John\",\n    \"Age\": 25,\n    \"City\": \"New York\"\n    \n} \n", "label": "import json\n\nuser_data = {\"Name\": \"John\", \"Age\": 25, \"City\": \"New York\"}\n\ndef store_user_data(data):\n    with open('user_data.json', 'w') as f:\n        json.dump(data, f)\n\ndef get_user_data():\n    with open('user_data.json') as f:\n        return json.load(f)\n\n# store data in JSON file\nstore_user_data(user_data)\n\n# get data\ndata = get_user_data()\nprint(data)", "predict": "def store_user_data(user_data):\n    # Store user data\n    pass\n\ndef query_user_data(user_data):\n    # Query user data\n    pass"}
{"prompt": "You are required to write a Python program to optimize an equation.\nx + x + y + y + y \n", "label": "def optimize_equation(equation):\n    variables = []\n    for term in equation.split('+'):\n        var, count = term.strip().split(' ')\n        variables.append((var, int(count)))\n\n    new_equation = \"\"\n    for var, count in variables:\n        new_equation += (var + '^' + str(count)) + ' + '\n    return new_equation[:-3]\n\nequation = 'x + x + y + y + y'\n\nprint(optimize_equation(equation))", "predict": "def optimize_equation(x, y):\n    result = 2*x + 3*y\n    return result"}
{"prompt": "Generate Python code that takes a list of strings and generates a list of lists of words from the strings. The returned list should have the first word for each string followed by following words for each string.\n[\"Hello world\", \"This is a test\"] \n", "label": "def get_word_lists(strings):\n    word_lists = []\n    for string in strings:\n        words = string.split(\" \")\n        word_list = []\n        for i in range(len(words)):\n            word_list.append(words[i:])\n        word_lists.append(word_list)\n    return word_lists\n\nword_lists = get_word_lists([\"Hello world\", \"This is a test\"])\nprint(word_lists) # prints \"[[\"Hello\", \"world\"], [\"This\", \"is\", \"a\", \"test\"]]\"", "predict": "def split_strings(string_list):\n    words_list = []\n    for string in string_list:\n        words = string.split()\n        words_list.append(words)\n    return words_list\n\nstring_list = [\"Hello world\", \"This is a test\"]\nwords_list = split_strings(string_list)\nprint(words_list)"}
{"prompt": "Create a web scraper that extracts specific data from a given website. \n", "label": "The web scraper should utilize the Python package BeautifulSoup to parse webpages and extract the required data. BeautifulSoup will allow us to find HTML elements on the webpage using tags and attributes. Once the data is found, it can be converted into the desired format and stored.\n\nFor example, to extract the URL from a list of webpages, the following code snippet can be used:\n\nimport requests\nfrom bs4 import BeautifulSoup\n\n# Get the web page\nwebpage = requests.get(\"<url_of_webpage>\")\n\n# Parse the web page\nsoup = BeautifulSoup(webpage.content, 'html.parser')\n\n# Find all 'a' tags\nlinks = soup.find_all('a')\n\n# Extract the URLs in the 'href' attribute\nfor link in links:\n    print(link.get('href'))", "predict": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://example.com'\n\n# Send a request to the given URL\nr = requests.get(url)\n\n# Parse the response\nsoup = BeautifulSoup(r.content, 'html.parser')\n\n# Extract specific data from the response\ndata = soup.find_all('div', {'class': 'data'})\n\n# Store the extracted data\nfor d in data:\n    print(d.text)"}
{"prompt": "Construct a script in Bash that can install a given software.\nPython 3.8.5 \n", "label": "#!/bin/bash\n\n# Download latest version of Python\ncurl -O https://www.python.org/ftp/python/3.8.5/Python-3.8.5.tgz\n\n# Extract the tgz file\ntar -xzf Python-3.8.5.tgz\n\n# Move into the Python directory\ncd Python-3.8.5\n\n# Run the configure script\n./configure\n\n# Compile and install\nmake\nmake install", "predict": "#!/bin/bash\n\n# Check if Python is installed\nif! python3 -c \"import sys; print(sys.version)\" &> /dev/null\nthen\n echo \"Python is not installed. Please install Python first.\"\n exit 1\nfi\n\n# Install Python\nsudo apt-get update\nsudo apt-get install python3.8.5\n\n# Verify installation\npython3 --version\n\n# Done"}
{"prompt": "Write a function in Python that takes a list of integers and returns a new list containing only odd numbers.\n[3, 8, 6, 10, 17] \n", "label": "def odd_numbers_list(numbers):\n    return [num for num in numbers if num % 2 != 0]", "predict": "def odd_numbers(lst):\n    odd_list = []\n    for num in lst:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list\n\nodd_numbers([3, 8, 6, 10, 17])"}
{"prompt": "Create a Python script that adds two numbers together and prints the result. \n", "label": "def add(a, b):\n    sum = a + b\n    print(sum)\n\nadd(5,7)", "predict": "def add_numbers(a, b):\n    return a + b\n\nresult = add_numbers(3, 4)\nprint(result)"}
{"prompt": "Design an algorithm in Python to find the most common elements in an array of integers.\n[3, 4, 1, 2, 5, 3, 3] \n", "label": "def most_common(nums):\n    # Create a dictionary to store the counts\n    counts = {}\n\n    # Iterate over the elements\n    for num in nums:\n        # If the element is not present in the dictionary, add it\n        if num not in counts:\n            counts[num] = 0\n\n        # Update the count\n        counts[num] += 1\n\n    # Get the maximum count\n    max_count = max(counts.values())\n\n    # Return the elements that have maximum count\n    return [num for num, count in counts.items() if count == max_count]", "predict": "def most_common(arr):\n    counts = {}\n    for item in arr:\n        if item in counts:\n            counts[item] += 1\n        else:\n            counts[item] = 1\n    most_common = max(counts, key=counts.get)\n    return most_common"}
{"prompt": "Write a Python program to find the maximum element in the given array [1, 10, 50, 3, 8].\nNot applicable \n", "label": "array = [1, 10, 50, 3, 8]\n\n# Get the maximum element\nmax_element = max(array)\n\nprint(max_element) # Output: 50", "predict": "def find_max(arr):\n    max_val = arr[0]\n    for i in arr:\n        if i > max_val:\n            max_val = i\n    return max_val\n\narr = [1, 10, 50, 3, 8]\nprint(find_max(arr))"}
{"prompt": "Create a Python script to analyze the sentiment of a text. \n", "label": "import re\nfrom nltk.stem.snowball import SnowballStemmer\nfrom nltk.tokenize import word_tokenize\nfrom nltk.corpus import stopwords\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer \n\ndef sentiment_analyzer(text):\n    # Tokenize the text\n    tokens = word_tokenize(text)\n\n    # Create stemmer object\n    stemmer = SnowballStemmer('english')\n\n    # Stem each token\n    stemmed_words = [stemmer.stem(word) for word in tokens]\n\n    # Remove punctuation\n    clean_words = [word for word in stemmed_words if re.match('[a-zA-Z-]+$', word)]\n\n    # Remove stopwords\n    meaningful_words = [word for word in clean_words if not word in stopwords.words('english')]\n\n    # Create a SentimentIntensityAnalyzer object\n    sid = SentimentIntensityAnalyzer()\n\n    # Get the polarity score of the text\n    polarity_score = sid.polarity_scores(' '.join(meaningful_words))\n\n    return polarity_score", "predict": "import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ndef sentiment_analysis(text):\n    sid = SentimentIntensityAnalyzer()\n    scores = sid.polarity_scores(text)\n    if scores['compound'] >= 0.05:\n        return \"positive\"\n    elif scores['compound'] <= -0.05:\n        return \"negative\"\n    else:\n        return \"neutral\""}
{"prompt": "Create a Python script that takes a list of email addresses as input and prints a filtered list of email addresses that belong to a particular domain.\nlist = [\"john@gmail.com\", \"sarah@yahoo.com\", \"bob@microsoft.com\", \"sophie@gmail.com\"] \n", "label": "filtered_list = [email for email in list if email.endswith(\"@gmail.com\")]\n\nprint(filtered_list)\n# Output: [\"john@gmail.com\", \"sophie@gmail.com\"]", "predict": "def filter_by_domain(list, domain):\n filtered_list = []\n for email in list:\n if email.endswith(domain):\n filtered_list.append(email)\n return filtered_list\n\nlist = [\"john@gmail.com\", \"sarah@yahoo.com\", \"bob@microsoft.com\", \"sophie@gmail.com\"]\ndomain = \"gmail.com\"\n\nfiltered_list = filter_by_domain(list, domain)\nprint(filtered_list)"}
{"prompt": "Generate a Python function to execute a valid insertion sort on a given list of integers. \n", "label": "def insertion_sort(arr):\n for i in range(1, len(arr)):\n key = arr[i]\n j = i -1\n while j >= 0 and key < arr[j] :\n    arr[j + 1] = arr[j]\n    j = j - 1\n arr[j + 1] = key\n\nreturn arr", "predict": "def insertion_sort(nums):\n    for i in range(1, len(nums)):\n        key = nums[i]\n        j = i-1\n        while j >= 0 and key < nums[j]:\n            nums[j+1] = nums[j]\n            j -= 1\n        nums[j+1] = key"}
{"prompt": "Generate a program to sort a list of numbers using Insertion Sort algorithm in Python. \n", "label": "def insertionSort(arr):\n\tfor i in range(1, len(arr)):\n\t\tcurrent = arr[i]\n\t\tj =i-1\n\t\twhile j>=0 and arr[j]>current:\n\t\t\tarr[j+1] = arr[j]\n\t\t\tj-=1\n\t\tarr[j+1] = current\n\treturn arr\n\nif __name__ == '__main__':\n\tarr = [2, 4, 7, 3, 8, 6, 1]\n\tprint(insertionSort(arr))", "predict": "def insertion_sort(list):\n    for i in range(1, len(list)):\n        key = list[i]\n        j = i-1\n        while j >=0 and key < list[j] :\n                list[j+1] = list[j]\n                j -= 1\n        list[j+1] = key\n    return list"}
{"prompt": "Create an Python function that takes a string containing a numerical expression and returns the result. \n", "label": "def eval_expr(expr):\n   return eval(expr)", "predict": "def evaluate_expression(expr):\n    return eval(expr)"}
{"prompt": "Given a json-formatted string, create a python program to parse it into a dict.\ndata = '{\"name\": \"John\",\"age\": 30,\"address\": {\"city\": \"New York\",\"state\": \"NY\"}}' \n", "label": "import json\n\ndata = '{\"name\": \"John\",\"age\": 30,\"address\": {\"city\": \"New York\",\"state\": \"NY\"}}'\n\ndata_dict = json.loads(data)", "predict": "import json\n\ndata = '{\"name\": \"John\",\"age\": 30,\"address\": {\"city\": \"New York\",\"state\": \"NY\"}}'\n\nparsed_data = json.loads(data)\n\nprint(parsed_data)\n\n# Output:\n{'name': 'John', 'age': 30, 'address': {'city': 'New York','state': 'NY'}}"}
{"prompt": "Create a Python program to compress a given string by replacing all repeating characters with a single instance and its count.\nString: aabbbbbbcccc \n", "label": "def compress(s): \n    # Initialize results \n    output = \"\" \n  \n    # Initialize count \n    count = 1\n  \n    # Traverse the string \n    for i in range(len(s)): \n          \n        # If the current character is same \n        # as next one, increment its count \n        if (i+1 < len(s) and s[i] == s[i+1]): \n            count += 1\n          \n        else: \n            # Append the count and character \n            outputo + = str(count) + s[i] \n          \n            # Reset the  count  \n            count = 1\n          \n    # Append the last obtained characters \n    # and their count \n    output += str(count) + s[i] \n  \n    return output\n\ns = \"aabbbbbbcccc\"\nprint(compress(s))\n# Output: 2a6b4c", "predict": "def compress_string(string):\n    compressed_string = \"\"\n    count = 1\n    for i in range(1, len(string)):\n        if string[i] == string[i-1]:\n            count += 1\n        else:\n            compressed_string += string[i-1] + str(count)\n            count = 1\n    compressed_string += string[-1] + str(count)\n    return compressed_string\n\nstring = \"aabbbbbbcccc\"\ncompressed_string = compress_string(string)\nprint(compressed_string)"}
{"prompt": "Create a basic CRUD API for the BlogPost model with Python/Flask. The API should include endpoints for creating a post, getting all posts, getting a single post, editing a post, and deleting a post.\nNot applicable \n", "label": "from flask import Flask, jsonify, request\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] =  'sqlite:///test.db'\ndb = SQLAlchemy(app)\n\nclass BlogPost(db.Model):\n  id = db.Column(db.Integer, primary_key=True)\n  title = db.Column(db.String(200))\n  content = db.Column(db.Text)\n\n  def __repr__(self):\n    return '<BlogPost %r>' % self.title\n\n@app.route('/post', methods=['POST'])\ndef create_post():\n  data = request.get_json()\n  post = BlogPost(title=data['title'], content=data['content'])\n  db.session.add(post)\n  db.session.commit()\n  return jsonify(post.id)\n\n@app.route('/posts', methods=['GET'])\ndef get_posts():\n  posts = BlogPost.query.all()\n  return jsonify([post.serialize() for post in posts])\n\n@app.route('/post/<id>', methods=['GET'])\ndef get_post(id):\n  post = BlogPost.query.filter_by(id=id).first()\n  return jsonify(post.serialize())\n\n@app.route('/post/<id>', methods=['PUT'])\ndef edit_post(id):\n  data = request.get_json()\n  post = BlogPost.query.filter_by(id=id).first()\n  post.title = data['title']\n  post.content = data['content']\n  db.session.commit()\n  return jsonify(post.serialize())\n\n@app.route('/post/<id>', methods=['DELETE'])\ndef delete_post(id):\n  post = BlogPost.query.filter_by(id=id).first()\n  db.session.delete(post)\n  db.session.commit()\n  return jsonify({ 'message' : 'Post deleted' })\n\nif __name__ == '__main__':\n  app.run(debug=True)", "predict": "from flask import Flask, request, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] ='sqlite:////tmp/test.db'\ndb = SQLAlchemy(app)\n\nclass BlogPost(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n title = db.Column(db.String(100))\n content = db.Column(db.String(1000))\n\n@app.route('/posts', methods=['GET'])\ndef get_posts():\n posts = BlogPost.query.all()\n return jsonify([post.serialize() for post in posts])\n\n@app.route('/posts/<int:post_id>', methods=['GET'])\ndef get_post(post_id):\n post = BlogPost.query.get(post_id)\n return jsonify(post.serialize())\n\n@app.route('/posts', methods=['POST'])\ndef create_post():\n title = request.json['title']\n content = request.json['content']\n post = BlogPost(title=title, content=content)\n db.session.add(post)\n db.session.commit()\n return jsonify(post.serialize())\n\n@app.route('/posts/<int:post_id>', methods=['PUT'])\ndef update_post(post_id):\n post = BlogPost.query.get(post_id)\n post.title = request.json['title']\n post.content = request.json['content']\n db.session.commit()\n return jsonify(post.serialize())\n\n@app.route('/posts/<int:post_id>', methods=['DELETE'])\ndef delete_post(post_id):\n post = BlogPost.query.get(post_id)\n db.session.delete(post)\n db.session.commit()\n return jsonify({})\n\nif __name__ == '__main__':\n app.run(debug=True)"}
{"prompt": "Write a Python program that calculates the distance between two points on a two-dimensional plane.\nPoint1 (x1: 3, y1: 4); Point2 (x2: -9, y2: -2) \n", "label": "#include <iostream>\n#include <math.h>\n\nint main() \n{ \n    int x1 = 3; \n    int y1 = 4; \n\n    int x2 = -9; \n    int y2 = -2;\n\n    float distance = sqrt(pow(x2 - x1, 2) + pow(y2 - y1, 2)); \n\n    std::cout << \"Distance between the two points is: \" << distance << std::endl; \n\n    return 0; \n}", "predict": "def distance(x1, y1, x2, y2):\n    return ((x2 - x1)**2 + (y2 - y1)**2)**0.5\n\ndistance(3, 4, -9, -2)"}
{"prompt": "Create an AI-based chatbot in Python that can answer simple queries about a product or service.\nNot applicable \n", "label": "import random\n\n# The answers to the queries\nanswers = {\n    'What is XYZ?': 'XYZ is a company that provides XYZ services.',\n    'What does XYZ do?': 'XYZ helps customers find solutions to their problems.',\n    'Where is XYZ located?': 'XYZ is located in ABC city.',\n    'What are the benefits of using XYZ?': 'XYZ provides a quick and easy way to find solutions to your problems.'\n}\n\n# Generate a response\ndef generate_response(question):\n    if question in answers:\n        return answers[question]\n    else:\n        return random.choice(['I am not sure I understand.', 'Can you give me more information?', 'Can I help you with something else?'])\n\n# Start the conversation\nquestion = input('Welcome to XYZ. How can I help you? ')\nresponse = generate_response(question)\n\nwhile response != 'Goodbye':\n    print(response)\n    question = input('Is there anything else I can help you with? ')\n    response = generate_response(question)\n\nprint('Goodbye!')", "predict": "import nltk\nfrom nltk.chat.util import Chat, reflections\n\npairs = [\n    [\n        r\"my name is (.*)\",\n        [\"Hello %1, How are you?\",]\n    ],\n    [\n        r\"hi|hello|hey\",\n        [\"Hello\", \"Hey there\",]\n    ],\n    [\n        r\"what is your name?\",\n        [\"My name is Chatbot.\",]\n    ],\n    [\n        r\"how are you?\",\n        [\"I'm doing well, thank you.\",]\n    ],\n    [\n        r\"sorry (.*)\",\n        [\"I apologize.\",]\n    ],\n    [\n        r\"quit\",\n        [\"Bye, take care!\"]\n    ],\n]\n\nchatbot = Chat(pairs, reflections)\n\nprint(\"Hi, I'm Chatbot, please enter your question or statement.\")\nchatbot.converse()"}
{"prompt": "Generate a python program to read the contents from a given URL \n", "label": "import requests\n\ndef read_url(url):\n  r = requests.get(url)\n  if r.status_code == 200:\n    return r.text\n  else:\n    return None", "predict": "import requests\n\ndef read_url(url):\n    r = requests.get(url)\n    return r.text"}
{"prompt": "Code a function in Python that takes a list of integers (denoted by `lst`) and returns a list of booleans where each element of the output list is `True` if the corresponding element in the input list is a prime number, and `False` otherwise.\nlst = [7, 8, 12, 19, 22, 23] \n", "label": "def is_prime(n):\n # check if n is divisible by any of the numbers\n # between 2 and n-1\n for i in range(2, n):\n if n % i== 0:\n return False\n\n return True \n\ndef check_lst(lst):\n # generate a list of booleans \n # where each element corresponds to the corresponding\n # element of lst\n result_lst = []\n for i in range(len(lst)):\n if is_prime(lst[i]):\n result_lst.append(True)\n else:\n result_lst.append(False)\n\n return result_lst\n\nlst = [7, 8, 12, 19, 22, 23]\nprint(check_lst(lst))\n\n# Output: \n# [True, False, False, True, False, True]", "predict": "def is_prime(lst):\n    result = []\n    for num in lst:\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    result.append(False)\n                    break\n            else:\n                result.append(True)\n        else:\n            result.append(False)\n    return result\n\nprint(is_prime(lst))"}
{"prompt": "Generate a program in Python to output the top 3 numbers from an array of integers\n[7, 13, 5, 8, 50, 11, 64, 48] \n", "label": "def top_three(numbers):\n    sorted_numbers = sorted(numbers, reverse=True)\n    return sorted_numbers[:3]\n\nprint(top_three([7, 13, 5, 8, 50, 11, 64, 48]))", "predict": "def top_three_numbers(numbers):\n    numbers.sort(reverse=True)\n    return numbers[:3]\n\nprint(top_three_numbers([7, 13, 5, 8, 50, 11, 64, 48]))"}
{"prompt": "Using Python, build a dictionary containing the numbers from 1 to n as the key and the square of each number as the value.\nn = 10 \n", "label": "my_dict = {}\n\nfor i in range(1,n+1):\n my_dict[i] = i**2\n\nprint(my_dict)", "predict": "result = {x: x**2 for x in range(1, n+1)}\nprint(result)"}
{"prompt": "Edit the following Python program to make a correct API request and parse the response.\nimport requests\n\nurl = 'https://api.example.com/users'\n\nresponse = requests.get(url)\n\nprint(response.json()) \n", "label": "import requests\n\nurl = 'https://api.example.com/users'\n\nheaders = {\n 'Authorization': 'Bearer YOUR_API_TOKEN',\n 'Content-Type': 'application/json',\n}\n\nresponse = requests.get(url, headers=headers).json()\n\nfor user in response['data']:\n print(user)", "predict": "import requests\n\nurl = 'https://api.example.com/users'\n\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    data = response.json()\n    print(data)\nelse:\n    print('Failed to get data')"}
{"prompt": "Create a Python program that takes in text input from the user and searches a given list of strings to find any matches.\nstrings = [\"First\",\"Second\",\"Third\"] \n", "label": "import re \n  \n# input string \nstrings = [\"First\",\"Second\",\"Third\"]\n\n# Get the string \ninp_str = input(\"Please enter your string :\") \n\n# Initialize the flag \nfound = False\n  \n# Search the string \nfor i in strings: \n    if re.search(i, inp_str):\n        found = True\n\n# Print result \nif found == True: \n    print(\"String matches\") \nelse: \n    print(\"String doesn't matches\")", "predict": "def search_list(input_text, strings):\n    matches = []\n    for string in strings:\n        if string in input_text:\n            matches.append(string)\n    return matches\n\nif __name__ == \"__main__\":\n    input_text = input(\"Enter a string: \")\n    strings = [\"First\",\"Second\",\"Third\"]\n    matches = search_list(input_text, strings)\n    print(matches)"}
{"prompt": "Generate a program in Python to convert all characters of a string in lowercase.\nString = \"HELLO\" \n", "label": "def to_lower(string):\n    return string.lower()", "predict": "def convert_lowercase(string):\n    return string.lower()\n\nprint(convert_lowercase(\"HELLO\"))"}
{"prompt": "Edit the following Python program to use a dictionary instead of a list.\nitems = [1, 2, 3, 4]\n\nfor item in items:\n print(item) \n", "label": "items = {1: 'one', 2: 'two', 3: 'three', 4: 'four'}\n\nfor key, value in items.items():\n print(value)", "predict": "items = {1, 2, 3, 4}\n\nfor item in items:\n print(item)"}
{"prompt": "Construct a prime number sieve in Python which returns a list of all primes up to a given number.\nn = 10 \n", "label": "def primeSieve(n): \n    prime_list = [True for i in range(n+1)] \n    p = 2\n    while (p * p <= n): \n        if (prime_list[p] == True): \n            for i in range(p * 2, n+1, p): \n                prime_list[i] = False\n        p += 1\n    primes=[] \n    for p in range(2, n): \n        if prime_list[p]: \n            primes.append(p) \n    return primes\n\nprint(primeSieve(10))  # [2, 3, 5, 7]", "predict": "def sieve_of_eratosthenes(n):\n    # Initialize a boolean array \n    prime = [True for i in range(n+1)] \n    p = 2\n    while (p * p <= n): \n  \n        # If prime[p] is not changed, then it is a prime \n        if (prime[p] == True): \n  \n            # Update all multiples of p \n            for i in range(p * 2, n+1, p): \n                prime[i] = False\n        p += 1\n  \n    # Collecting all prime numbers \n    prime_nums = []\n    for p in range(2, n): \n        if prime[p]: \n            prime_nums.append(p)\n  \n    return prime_nums"}
{"prompt": "Write a python code to print all prime numbers between 1 and a given number n. \n", "label": "# Function to generate prime numbers between 1 and a given number n \ndef generate_prime_numbers(n): \n  \n    # Array for checking if a number is prime or not\n    prime_list = [True for i in range(n + 1)] \n    p = 2\n    while (p * p <= n): \n          \n        # If prime_list[p] is not changed, then it is a prime \n        if (prime_list[p] == True): \n              \n            # Update all multiples of p \n            for i in range(p * 2, n + 1, p): \n                prime_list[i] = False\n        p += 1\n  \n    # Collecting prime numbers \n    for p in range(2, n): \n        if prime_list[p]: \n            print(p)", "predict": "def print_primes(n):\n    for num in range(2, n+1):\n        prime = True\n        for i in range(2, num):\n            if (num % i == 0):\n                prime = False\n        if prime:\n            print(num)"}
{"prompt": "Find the optimal solution to solve a knapsack problem using dynamic programming.\nGiven Items (with values and weights): [(60, 10), (100, 20), (120, 30)] \nCapacity of Knapsack: 50 \n", "label": "// A Naive recursive Python \n// program for 0-1 Knapsack problem \n \n# Returns the maximum value  \n# that can be put in a knapsack of  \n# capacity W \ndef knapSack(W, wt, val, n): \n  \n    # Base Case \n    if n == 0 or W == 0 : \n        return 0\n  \n    # If weight of the nth item is more \n    # than Knapsack capacity W, then \n    # this item cannot be included in the optimal solution \n    if (wt[n-1] > W): \n        return knapSack(W, wt, val, n-1) \n  \n    # return the maximum of two cases: \n    # (1) nth item included \n    # (2) not included \n    else: \n        return max(val[n-1] + knapSack(W-wt[n-1], wt, val, n-1), \n                    knapSack(W, wt, val, n-1)) \n  \n# end of function knapSack", "predict": "# Python program to solve knapsack problem using dynamic programming\n\n# Number of items\nn = len(items)\n\n# Capacity of knapsack\ncapacity = 50\n\n# Create a table to store results of subproblems\ndp = [[0 for x in range(capacity + 1)] for x in range(n + 1)]\n\n# Fill dp[][] in bottom up manner\nfor i in range(n + 1):\n    for w in range(capacity + 1):\n        if i == 0 or w == 0:\n            dp[i][w] = 0\n        elif items[i-1][1] <= w:\n            dp[i][w] = max(items[i-1][0] + dp[i-1][w-items[i-1][1]], dp[i-1][w])\n        else:\n            dp[i][w] = dp[i-1][w]\n\n# Optimal solution is stored in dp[n][capacity]\nprint(\"The maximum value that can be obtained is:\", dp[n][capacity])"}
{"prompt": "Using Python, create a function that calculates the objective function of a linear equation.\nax + by = c\n\na = 3, b = 5, c = 7 \n", "label": "def linear_eq(a, b, c):\n    return a*x + b*y - c\n\n# For example:\nresult = linear_eq(3, 5, 7)\nprint(result)", "predict": "def objective_function(a, b, c):\n    return (a*x) + (b*y) - c"}
{"prompt": "Implement an insertion sort algorithm in Python. \n", "label": "def insertion_sort(list):\n    for i in range(1,len(list)):\n        key = list[i]\n        j = i - 1\n        while j>=0 and key < list[j]:\n            list[j+1] = list[j]\n            j-=1\n        list[j+1] = key\n    return list", "predict": "def insertion_sort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i-1\n        while j >= 0 and key < arr[j]:\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = key"}
{"prompt": "Write a python program to generate a random password given a set of letters, numbers, and characters.\nNo input \n", "label": "import random \n  \n  \n# All the possible characters \n# that could go into the password \nstring = \"abcdefghijklmnopqrstuvwxyz01234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()?\"\n  \n# Using the choice function of the \n# random module choose any \n# character randomly from the set of characters \npassword =  \"\".join(random.sample(string, 8)) \nprint(password)", "predict": "import random\n\ndef generate_password(length):\n    chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n    password = ''\n    for i in range(length):\n        password += random.choice(chars)\n    return password\n\nprint(generate_password(8))"}
{"prompt": "Develop a Python module to generate random numbers. \n", "label": "import random\n\ndef generate_random_numbers(length, min_value, max_value):\n    return [random.uniform(min_value, max_value) for _ in range(length)]", "predict": "import random\n\ndef generate_random_number():\n    return random.randint(0, 100)"}
{"prompt": "How do we use recursion to solve a given problem in Python? \n", "label": "Recursion is a powerful technique for solving problems. It involves defining a problem in terms of itself. A recursion problem is solved by breaking it down into smaller problems, until the problem is small enough to be solved directly. The result from a smaller problem can then be combined with the result from the larger problem, until the original problem is solved. In Python, a recursive function is one that calls itself.", "predict": "Recursion is a technique in programming where a function calls itself in order to solve a problem. It can be used to solve problems that can be broken down into smaller, simpler problems. In Python, we can use recursion to solve a given problem by defining a function that calls itself, and then using base cases to stop the recursion. For example, to find the factorial of a number, we can define a function that calls itself with a smaller number, and then multiply the result by the original number. We can also use recursion to solve problems that can be solved by breaking them down into smaller, simpler problems."}
{"prompt": "Create an application using Python and Flask to submit form data and store it in a database.\nForm elements: Name, Email, Phone \n", "label": "from flask import Flask, render_template, request, redirect\nimport sqlite3\n\napp = Flask(__name__)\n\n@app.route('/')\ndef home():\n return render_template('index.html')\n\n@app.route('/submit', methods=['POST'])\ndef submit():\n name = request.form.get('name')\n email = request.form.get('email')\n phone = request.form.get('phone')\n \n conn = sqlite3.connect('data.db')\n cur = conn.cursor()\n \n cur.execute(\"INSERT INTO data (name, email, phone) VALUES (?, ?, ?)\", (name, email, phone))\n conn.commit()\n \n return redirect('/')\n\t\nif __name__ == '__main__':\n app.run(debug=True)", "predict": "from flask import Flask, render_template, request\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] ='sqlite:///data.db'\ndb = SQLAlchemy(app)\n\nclass User(db.Model):\n name = db.Column(db.String(80), unique=True, nullable=False)\n email = db.Column(db.String(120), unique=True, nullable=False)\n phone = db.Column(db.String(120), unique=True, nullable=False)\n\n@app.route('/', methods=['GET', 'POST'])\ndef index():\n if request.method == 'POST':\n user = User(name=request.form['name'],\n email=request.form['email'],\n phone=request.form['phone'])\n db.session.add(user)\n db.session.commit()\n return 'User added!'\n return render_template('index.html')\n\nif __name__ == '__main__':\n app.run(debug=True)"}
{"prompt": "Optimize a Python program that processes a 2d array and stores the transpose output in a new array.\nNot applicable \n", "label": "def transpose(A):\n n = len(A)\n m = len(A[0])\n\n B = [[0 for x in range(n)] for x in range(m)]\n\n for i in range(n):\n for j in range(m):\n B[j][i] = A[i][j]\n\n return B", "predict": "def transpose(arr):\n    transposed_arr = []\n    for i in range(len(arr[0])):\n        row = []\n        for j in range(len(arr)):\n            row.append(arr[j][i])\n        transposed_arr.append(row)\n    return transposed_arr"}
{"prompt": "Generate a Python script that takes any number of integer arguments and returns their sum.\n3 5 7 \n", "label": "def sum_ints(*args):\n    total = 0\n    for num in args:\n        total += num\n    \n    return total\n\nprint(sum_ints(3, 5, 7))", "predict": "def sum_args(*args):\n    return sum(args)\n\nif __name__ == '__main__':\n    print(sum_args(3, 5, 7))"}
{"prompt": "Create a function in Python which takes a list as input and returns the sum of the items in the list. \n", "label": "def sum_list(input_list):\n  sum = 0\n  for i in input_list:\n    sum += i\n  return sum", "predict": "def sum_list(list):\n    sum = 0\n    for item in list:\n        sum += item\n    return sum"}
{"prompt": "Create a Selenium script in Python to automate the login process in a given website.\nTarget website: www.example.com \n", "label": "from selenium import webdriver\nfrom selenium.webdriver.common.keys import Keys\nimport time\n\n# Initialize web driver\ndriver = webdriver.Chrome()\n\n# Navigate to the target web page\ndriver.get('http://www.example.com')\n\n# Locate username field\nusername = driver.find_element_by_name('username')\n\n# Enter username\nusername.send_keys('username')\n\n# Locate password field\npassword = driver.find_element_by_name('password')\n\n# Enter password\npassword.send_keys('password')\n\n# Locate submit button\nsubmit_button = driver.find_element_by_name('submit')\n\n# Click submit button\nsubmit_button.click()\n\n# Wait for login process to complete\ntime.sleep(5)\n\n# Login successful\nprint('Login successful!')\n\ndriver.close()", "predict": "from selenium import webdriver\nfrom selenium.webdriver.common.keys import Keys\n\n# Set up the webdriver\ndriver = webdriver.Chrome()\n\n# Navigate to the target website\ndriver.get(\"http://www.example.com\")\n\n# Find the login form\nlogin_form = driver.find_element_by_css_selector(\"#login-form\")\n\n# Enter the login credentials\nusername_input = login_form.find_element_by_css_selector(\"#username\")\nusername_input.send_keys(\"your_username\")\n\npassword_input = login_form.find_element_by_css_selector(\"#password\")\npassword_input.send_keys(\"your_password\")\n\n# Click the login button\nlogin_button = login_form.find_element_by_css_selector(\"#login-button\")\nlogin_button.click()\n\n# Close the browser\ndriver.close()"}
{"prompt": "Create an AI model in Python to classify emails from the Enron Spam Dataset as either spam or non-spam.\nNot applicable \n", "label": "import pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import svm\nfrom sklearn.metrics import precision_score\n\n# Load the dataset\ndf = pd.read_csv(\"spam.csv\", encoding='iso-8859-1')\n# Load label and data\nX = df['EmailText']\ny = df['Label']\n\n# Split data into train-test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)\n\n# Create bag of words model\ncount_vectorizer = CountVectorizer()\nX_train_counts = count_vectorizer.fit_transform(X_train)\n\n# Train the model\nclf = svm.SVC(kernel='linear')\nclf.fit(X_train_counts, y_train)\n\n# Test the model\nX_test_counts = count_vectorizer.transform(X_test)\npredictions = clf.predict(X_test_counts)\nscore = precision_score(y_test, predictions, average='binary')\n\nprint('Precision score of the model:', score)", "predict": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Read in the dataset\ndf = pd.read_csv('enron_spam.csv')\n\n# Split the dataset into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(df['email'], df['label'], test_size=0.2)\n\n# Vectorize the email text\nvectorizer = CountVectorizer()\nX_train_vect = vectorizer.fit_transform(X_train)\nX_test_vect = vectorizer.transform(X_test)\n\n# Train the model\nmodel = MultinomialNB()\nmodel.fit(X_train_vect, y_train)\n\n# Evaluate the model\naccuracy = model.score(X_test_vect, y_test)\nprint('Model accuracy: ', accuracy)"}
{"prompt": "Re-write the following SQL query in Python.\nSELECT * FROM Movies WHERE category = 'horror'; \n", "label": "import sqlite3\n\nconn = sqlite3.connect('movies.db') \ncursor = conn.cursor()\n\ncursor.execute(\"SELECT * FROM Movies WHERE category = 'horror'\")\n\nresult = cursor.fetchall()\nfor row in result:\n    print(row)\n\nconn.close()", "predict": "import sqlite3\n\nconn = sqlite3.connect('movies.db')\ncursor = conn.cursor()\n\nquery = 'SELECT * FROM Movies WHERE category =?'\ncursor.execute(query, ('horror',))\n\nresults = cursor.fetchall()\n\nfor row in results:\n print(row)"}
{"prompt": "Take two matrices, A and B, and produce a matrix C where each element is the product of the corresponding elements of A and B.\nA = [[3, 4], \n     [1, 2]]\nB = [[7, 5],\n     [0, 1]] \n", "label": "# Python\ndef matrixMultiplication(A, B):\n    if len(A[0]) != len(B):\n        return \"Matrix multiplication not possible\"\n\n    C = [[0 for i in range(len(A[0]))] for j in range(len(B[0]))]\n\n    for i in range(len(A)):\n        for j in range(len(B[0])):\n            for k in range(len(B)):\n                C[i][j] += A[i][k] * B[k][j]\n\n    return C\n\nA = [[3, 4], \n     [1, 2]]\nB = [[7, 5],\n     [0, 1]]\nC = matrixMultiplication(A, B)\n\nprint(C) # Output = [[21, 17], [0, 2]]", "predict": "C = [[21, 20],\n      [0, 2]]"}
{"prompt": "Come up with a correct approach to optimize the following python program.\nnumbers = [1, 2, 3, 4, 5, 6]\n\nfor x in numbers:\n    print(x) \n", "label": "numbers = [1, 2, 3, 4, 5, 6]\n\nprint(*numbers, sep='\\n')", "predict": "numbers = [1, 2, 3, 4, 5, 6]\n\nfor x in numbers:\n    print(x, end=\" \")"}
{"prompt": "Design a program in Python to detect the vowel in a given string.\nHello World \n", "label": "def vowelCheck(inputString): \n    vowels = ['a','e','i','o','u','A','E','I','O','U'] \n    for x in inputString: \n        if x in vowels: \n            return x", "predict": "def detect_vowels(string):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    result = []\n    for char in string:\n        if char in vowels:\n            result.append(char)\n    return result\n\nprint(detect_vowels(\"Hello World\"))"}
{"prompt": "Convert a given SQL statement into a Python Pandas DataFrame.\nSELECT * FROM book; \n", "label": "import pandas as pd\n\ndf = pd.read_sql_query(\"SELECT * FROM book;\", conn)", "predict": "import pandas as pd\n\ndf = pd.read_sql_query('SELECT * FROM book', conn)"}
{"prompt": "Using the data provided, generate a histogram in Python.\ndata = [3, 5, 7, 2, 8, 10, 11, 65, 72, 81, 99, 100, 150] \n", "label": "import matplotlib.pyplot as plt\n\ndata = [3, 5, 7, 2, 8, 10, 11, 65, 72, 81, 99, 100, 150]\n\n# plotting the histogram \nplt.hist(data, bins = [0, 20, 40, 60, 80, 100, 120, 140, 160], edgecolor = 'black') \n  \n# x-axis label \nplt.xlabel('Range of values') \n# y-axis label \nplt.ylabel('Number of Occurrences') \n# plot title \nplt.title('Histogram of data') \n  \n# function to show the plot \nplt.show()", "predict": "import matplotlib.pyplot as plt\n\ndata = [3, 5, 7, 2, 8, 10, 11, 65, 72, 81, 99, 100, 150]\n\nplt.hist(data, bins=10)\nplt.xlabel('Values')\nplt.ylabel('Frequency')\nplt.title('Histogram of Data')\nplt.show()"}
{"prompt": "Create a Python script to populate an array with random numbers from 1-100. \n", "label": "import random\n\ndef populateArray(array_length):\n array = []\n for i in range(array_length):\n array.append(random.randint(1, 100))\n return array", "predict": "import random\n\ndef populate_array(n):\n    arr = []\n    for i in range(n):\n        arr.append(random.randint(1,100))\n    return arr\n\nprint(populate_array(10))"}
{"prompt": "Create an natural language processing application in Python that extracts the top 10 most frequent words from a given text.\nLorem ipsum dolor sit amet, consectetur adipiscing elit, \nsed do eiusmod tempor incididunt ut labore et dolore magna aliqua. \n", "label": "from collections import Counter\n\ntext = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\"\n\n# Split the text into individual words\nwords = text.split()\n\n# Create a counter object\ncounter = Counter(words)\n\n# Get the top 10 most frequent words\ntop_words = counter.most_common(10)\n\nprint(top_words)\n\n# Output: [('dolor', 1), ('Lorem', 1), ('ipsum', 1), ('amet', 1), ('consectetur', 1), ('adipiscing', 1), ('elit,', 1), ('sed', 1), ('do', 1), ('eiusmod', 1)]", "predict": "from collections import Counter\n\ndef top_words(text):\n    words = text.split()\n    word_counts = Counter(words)\n    return word_counts.most_common(10)\n\ntext = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.'\n\nprint(top_words(text))\n# Output: [('dolor', 1), ('amet,', 1), ('consectetur', 1), ('adipiscing', 1), ('elit,', 1), ('sed', 1), ('do', 1), ('eiusmod', 1), ('tempor', 1), ('incididunt', 1)]"}
{"prompt": "Given an array of strings, write a Python function to remove all duplicates and return the resulting array.\nExample array: ['a', 'b', 'a', 'c', 'c', 'd'] \n", "label": "def removeDuplicates(arr):\n result = [] \n  \n # traverse for all elements \n for i in arr: \n  \n  # check if exists in result \n  if i not in result: \n   result.append(i) \n  \n # return result \n return result", "predict": "def remove_duplicates(arr):\n    return list(dict.fromkeys(arr))"}
{"prompt": "Generate a Python script to find the longest common substring in two strings.\n\"Helwallomst\", \"Welcome\" \n", "label": "def longest_common_substring(str1, str2):\n    match = 0\n    substr = \"\"\n    for i in range(len(str1)):\n        for j in range(len(str2)):\n            l = 0\n            while (i + l < len(str1) and j + l < len(str2) and str1[i + l] == str2[j + l]):\n                l += 1\n            if l > match:\n                substr = str1[i:i + l]\n                match = l\n    return substr\n\nresult = longest_common_substring(\"Helwallomst\", \"Welcome\")\nprint(result)", "predict": "def longest_common_substring(str1, str2):\n    len1 = len(str1)\n    len2 = len(str2)\n    matrix = [[0] * (len2 + 1) for _ in range(len1 + 1)]\n    longest = 0\n    x_longest = 0\n    y_longest = 0\n    for i in range(len1):\n        for j in range(len2):\n            if str1[i] == str2[j]:\n                matrix[i+1][j+1] = matrix[i][j] + 1\n                if matrix[i+1][j+1] > longest:\n                    longest = matrix[i+1][j+1]\n                    x_longest = i + 1\n                    y_longest = j + 1\n    return str1[x_longest - longest: x_longest]"}
{"prompt": "Write a function in Python to search for a character in a given string.\nString: “Hello”\nCharacter: ‘l’ \n", "label": "def serach_char(input_str, char):\n  for char in input_str:\n    if char == input_char:\n      return True\n  return False", "predict": "def search_character(string, char):\n    if char in string:\n        return True\n    else:\n        return False\n\nresult = search_character(\"Hello\", 'l')\nprint(result)"}
{"prompt": "Write a python program to parse an XML document and return a list of tag objects.\n<xml>\n  <root>\n    <child1 id=\"1\">\n      <subchild1 value=\"a\">\n      </subchild1>\n      <subchild2 value=\"b\">\n      </subchild2>\n    </child1>\n    <child2 id=\"2\">\n      <subchild3 value=\"c\">\n      </subchild3>\n      <subchild4 value=\"d\">\n      </subchild4>\n    </child2>\n  </root>\n</xml> \n", "label": "def parse_xml(text):\n    tag_objects = []\n\n    root = ET.fromstring(text)\n    for child in root:\n        tag = Tag(child.attrib[\"id\"])\n        for subchild in child:\n            tag.add_value(subchild.attrib[\"value\"])\n        tag_objects.append(tag)\n\n    return tag_objects\n\nclass Tag:\n    def __init__(self, tag_id):\n        self.tag_id = tag_id\n        self.values = []\n    \n    def add_value(self, value):\n        self.values.append(value)", "predict": "import xml.etree.ElementTree as ET\n\ndef parse_xml(xml):\n    root = ET.fromstring(xml)\n    tag_list = []\n    for tag in root.iter():\n        tag_list.append({\n            'tag': tag.tag,\n            'id': tag.attrib.get('id'),\n            'value': tag.attrib.get('value')\n        })\n    return tag_list"}
{"prompt": "Based on a given input, create a function in Python to generate a random string of length 6. \n", "label": "import random\nimport string\n\ndef random_string(length):\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(length))\n\nrandom_string(6)", "predict": "import random\nimport string\n\ndef generate_random_string(length):\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(length))\n\nprint(generate_random_string(6))"}
{"prompt": "Create a Python program to average the elements of a 2-dimensional array.\na = [[3,2,6],\n     [8,5,9],\n     [4,7,1]] \n", "label": "def averageMatrix(matrix):\n sum = 0\n for row in matrix:\n  for e in row:\n   sum += e\n\n return sum / (len(matrix) * len(matrix[0]))\n\na = [[3,2,6],\n     [8,5,9],\n     [4,7,1]]\n\nprint(averageMatrix(a)) # 4.77", "predict": "def average_2d_array(a):\n    total = 0\n    for row in a:\n        for col in row:\n            total += col\n    return total/len(a)/len(a[0])\n\na = [[3,2,6],\n     [8,5,9],\n     [4,7,1]]\n\nprint(average_2d_array(a))"}
{"prompt": "Generate a code in Python to convert a number into binary format. \n", "label": "\"\"\"\nGenerate a code in Python to convert a number into binary format\n\"\"\"\ndef convert_to_binary(num):\n    # check if the number is 0, if so return 0\n    if num == 0:\n        return 0\n    \n    # initialize an empty binary string\n    binary = ''\n    \n    # loop through the number and get the remainder \n    # which is the bits of the binary\n    while num != 0:\n        remainder = num % 2\n        binary = str(remainder) + binary\n        num = num // 2\n    \n    return binary\n\n# test the function \nprint(convert_to_binary(10)) # 1010", "predict": "def convert_to_binary(num):\n    binary = bin(num).replace(\"0b\", \"\")\n    return binary"}
{"prompt": "Generate a python program that takes an integer and then prints out the factorial of it?\n7 \n", "label": "def factorial(num):\n    if num <= 1:\n        return 1\n    else:\n        return num * factorial(num - 1) \n\nn = int(input(\"Enter a number: \"))  \nprint(\"Factorial of\",n,\"is\",factorial(n))", "predict": "def factorial(n): \n    if n == 0: \n        return 1\n    else: \n        return n * factorial(n-1) \n\nnum = int(input(\"Enter a number: \"))\nprint(\"The factorial of\", num, \"is\", factorial(num))"}
{"prompt": "Write a Python program to convert a positive integer to negative or vice versa using bitwise NOT operator. \n", "label": "def convert_to_negative(x): \n    return ~x + 1 \n  \ndef convert_to_positive(x): \n    return ~(x-1)", "predict": "def convert_to_neg(n):\n    if n < 0:\n        return ~n + 1\n    else:\n        return ~n\n\nif __name__ == '__main__':\n    n = int(input(\"Enter a number: \"))\n    print(\"Negative of\", n, \"is\", convert_to_neg(n))"}
{"prompt": "Build a simple blockchain system in Python.\nNot applicable \n", "label": "import hashlib\nimport json\n\n# Define the Block class\nclass Block:\n def __init__(self, index, timestamp, data, previous_hash):\n self.index = index\n self.timestamp = timestamp\n self.data = data\n self.previous_hash = previous_hash\n self.hash = self.hash_block()\n\n # Create the hash of the block contents\n def hash_block(self):\n sha = hashlib.sha256()\n sha.update((str(self.index) + \n str(self.timestamp) + \n str(self.data) + \n str(self.previous_hash)).encode('utf-8'))\n return sha.hexdigest()\n\n# Create the blockchain\ndef create_blockchain():\n blockchain = [create_genesis_block()]\n previous_block = blockchain[0]\n\n # Add blocks for each item in the list of transactions\n for i in range(1, len(blockchain_transactions)):\n block_to_add = next_block(previous_block, blockchain_transactions[i])\n blockchain.append(block_to_add)\n previous_block = block_to_add\n\n# Print the blockchain\ndef print_blockchain():\n for block in blockchain:\n block_index = str(block.index)\n block_timestamp = str(block.timestamp)\n block_data = str(block.data)\n block_hash = block.hash", "predict": "import hashlib\n\nclass Block:\n    def __init__(self, data, previous_hash):\n        self.data = data\n        self.previous_hash = previous_hash\n        self.hash = self.calculate_hash()\n\n    def calculate_hash(self):\n        sha = hashlib.sha256()\n        sha.update((str(self.data) + str(self.previous_hash)).encode('utf-8'))\n        return sha.hexdigest()\n\nclass Blockchain:\n    def __init__(self):\n        self.chain = [Block(\"Genesis\", \"0\")]\n\n    def add_block(self, data):\n        previous_hash = self.chain[-1].hash\n        new_block = Block(data, previous_hash)\n        self.chain.append(new_block)\n\n    def get_chain(self):\n        return self.chain"}
{"prompt": "Write a Python script to find the GCD of two numbers.\n1000, 500 \n", "label": "def findGCD(a, b): \n   if (b == 0): \n       return a\n   return findGCD(b, a % b)\n    \na = 1000\nb = 500\nprint(\"GCD of number is: \", findGCD(a, b))", "predict": "def gcd(a, b):\n if b == 0:\n  return a\n else:\n  return gcd(b, a % b)\n\nnum1 = 1000\nnum2 = 500\n\nprint(gcd(num1, num2))"}
{"prompt": "Create a program in Python to find the number of occurrences of an element x in a list y.\n[3, 5, 2, 7, 4, 3, 2], x = 2 \n", "label": "def count_x(x, y):\n    count = 0\n    for i in y:\n        if i == x:\n            count += 1\n    return count", "predict": "def count_occurrences(list_y, x):\n    count = 0\n    for element in list_y:\n        if element == x:\n            count += 1\n    return count\n\nresult = count_occurrences([3, 5, 2, 7, 4, 3, 2], 2)\nprint(result)"}
{"prompt": "Write a Python program to convert ratings in a list of strings to a float.\n['4.5', '3.0', '2.5', '4.0'] \n", "label": "def str_to_float(ratings):\n    return [float(x) for x in ratings]", "predict": "def convert_ratings(ratings):\n    return [float(rating) for rating in ratings]\n\nratings = ['4.5', '3.0', '2.5', '4.0']\n\nconverted_ratings = convert_ratings(ratings)\nprint(converted_ratings) # [4.5, 3.0, 2.5, 4.0]"}
{"prompt": "Create a Python program that encrypts a message using a Caesar cipher. \n", "label": "def caesar_encrypt(message, shift):\n    encrypted_message = \"\"\n    for c in message:\n        encrypted_c = ord(c) + shift\n        if encrypted_c > 126:\n            encrypted_c -= 94\n        encrypted_message += chr(encrypted_c)\n    return encrypted_message", "predict": "def caesar_encrypt(message, key):\n    encrypted_message = \"\"\n    for char in message:\n        if char.isalpha():\n            encrypted_message += chr((ord(char) + key - 97) % 26 + 97)\n        else:\n            encrypted_message += char\n    return encrypted_message"}
{"prompt": "Write a Python program to find the largest three numbers in a list.\n1, 6, 3, 8, 7, 4 \n", "label": "my_list = [1, 6, 3, 8, 7, 4]\nlargest_three = sorted(my_list)[-3:]\nprint(largest_three)", "predict": "def largest_three(lst):\n    largest = [0, 0, 0]\n    for num in lst:\n        if num > largest[0]:\n            largest[2] = largest[1]\n            largest[1] = largest[0]\n            largest[0] = num\n        elif num > largest[1]:\n            largest[2] = largest[1]\n            largest[1] = num\n        elif num > largest[2]:\n            largest[2] = num\n    return largest\n\nlargest_three([1, 6, 3, 8, 7, 4])"}
{"prompt": "Given two binary trees, check if the first tree is subtree of the second tree. \n", "label": "# Python program to check if \n# a binary tree is subtree of another binary tree \n  \n# A binary tree node \nclass Node: \n      \n    # Constructor to create a new node \n    def __init__(self, data): \n        self.data = data \n        self.left = None\n        self.right = None\n  \ndef isSubTree(T, S): \n    \n    if S is None: \n        return True\n  \n    if T is None: \n        return False\n  \n    if areIdentical(T, S): \n        return True\n  \n    return isSubTree(T.left, S) or isSubTree(T.right, S) \n  \n  \ndef areIdentical(T, S): \n      \n    if T is None and S is None: \n        return True\n  \n    if T is None or S is None: \n        return False\n  \n    return (T.data == S.data and areIdentical(T.left, S.left)and\n        areIdentical(T.right, S.right))", "predict": "def is_subtree(tree1, tree2):\n    if tree1 is None:\n        return True\n    if tree2 is None:\n        return False\n    if is_same_tree(tree1, tree2):\n        return True\n    return is_subtree(tree1, tree2.left) or is_subtree(tree1, tree2.right)"}
{"prompt": "Write a Python program to swap the values of two variables. \n", "label": "x = 5\ny = 10\n\n# Swapping process \nx, y = y, x \n\nprint(\"x:\", x) \nprint(\"y:\", y)", "predict": "def swap(a, b): \n    temp = a \n    a = b \n    b = temp \n    return a, b"}
{"prompt": "Optimize the following Python code to use built-in functions.\ndef removeDuplicates(array): \n    for i in range (len(array)): \n        for j in range (i + 1, len(array)): \n            if array[i] == array[j]: \n                array.pop(j) \n", "label": "def removeDuplicates(array): \n    finalArray = []\n    for element in array: \n        if element not in finalArray: \n            finalArray.append(element)\n    return finalArray", "predict": "def removeDuplicates(array): \n    array = list(set(array))"}
{"prompt": "Create a program in Python that takes a list of words and an integer n and returns a list of words that appear at least n times in the given list.\nwords =['a', 'b', 'a', 'c', 'd', 'a', 'x', 'd', 'd']\nn = 3 \n", "label": "from collections import Counter\n\ndef frequent_words(words, n):\n    counts = Counter(words)\n    return [word for word, count in counts.items() if count >= n]\n\nresult = frequent_words(words, n)\n\nprint(result) # prints ['a', 'd']", "predict": "def get_words_with_n_occurrences(words, n):\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n\n    result = []\n    for word, count in word_count.items():\n        if count >= n:\n            result.append(word)\n\n    return result\n\nwords = ['a', 'b', 'a', 'c', 'd', 'a', 'x', 'd', 'd']\nn = 3\nprint(get_words_with_n_occurrences(words, n)) # ['a', 'd']"}
{"prompt": "Devise a Python program to determine whether a given number is even or odd. \n", "label": "def even_or_odd(num):\n    if num % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"", "predict": "def is_even(num):\n    if num % 2 == 0:\n        return True\n    else:\n        return False"}
{"prompt": "Compose a basic blockchain system in Python. \n", "label": "import hashlib\nimport json\n\n# We will use SHA256 as our hashing function\ndef sha256(data):\n    hash_function = hashlib.sha256()\n    hash_function.update(data.encode('utf-8'))\n    return hash_function.hexdigest()\n\n# Create a class for each block\nclass Block:\n    def __init__(self, index, timestamp, data, previous_hash):\n        self.index = index\n        self.timestamp = timestamp\n        self.data = data\n        self.previous_hash = previous_hash\n        self.hash = sha256(f'{self.index}{self.timestamp}{self.data}{self.previous_hash}')\n\n# Create a class for the blockchain\nclass Blockchain:\n    def __init__(self):\n        self.chain = []\n\n    def add_block(self, data):\n        previous_hash = self.chain[-1].hash if len(self.chain) > 0 else None\n        block = Block(len(self.chain), data['timestamp'], data['data'], previous_hash)\n        self.chain.append(block)\n\n    # This method will return the entire blockchain in JSON format\n    def get_chain(self):\n        return json.dumps([b.__dict__ for b in self.chain], indent=2)", "predict": "import hashlib\nimport json\n\nclass Block:\n    def __init__(self, index, transactions, timestamp, previous_hash):\n        self.index = index\n        self.transactions = transactions\n        self.timestamp = timestamp\n        self.previous_hash = previous_hash\n        self.hash = self.calculate_hash()\n\n    def calculate_hash(self):\n        block_string = json.dumps(self.__dict__, sort_keys=True)\n        return hashlib.sha256(block_string.encode()).hexdigest()\n\nclass Blockchain:\n    def __init__(self):\n        self.chain = [self.create_genesis_block()]\n\n    def create_genesis_block(self):\n        return Block(0, [], time.time(), \"0\")\n\n    def get_latest_block(self):\n        return self.chain[-1]\n\n    def add_block(self, new_block):\n        new_block.previous_hash = self.get_latest_block().hash\n        new_block.hash = new_block.calculate_hash()\n        self.chain.append(new_block)\n\n    def is_valid_chain(self):\n        for i in range(1, len(self.chain)):\n            current_block = self.chain[i]\n            previous_block = self.chain[i-1]\n\n            if current_block.hash!= current_block.calculate_hash():\n                return False\n\n            if current_block.previous_hash!= previous_block.hash:\n                return False\n\n        return True"}
{"prompt": "Provide a Python code that uses the exponential smoothing algorithm to predict the next day's forecast temperature given the past three day's forecast temperatures.\n[21, 22, 20] \n", "label": "\"\"\"\nThis code uses the exponential smoothing algorithm to predict the next day's forecasted temperature given the past three day's forecasted temperatures.\n\"\"\"\n\ndef predict_temperature(temperature_list):\n    alpha = 0.5 #Confidence value\n    predicted_temperature = temperature_list[-1] # Initializing prediction\n    for temperature in temperature_list[:-1]:\n        predicted_temperature = alpha*temperature + (1-alpha)*predicted_temperature\n    return predicted_temperature\n\nif __name__ == '__main__':\n    temperature_list = [21, 22, 20]\n    print(predict_temperature(temperature_list))", "predict": "import numpy as np\n\n# Define the exponential smoothing algorithm\ndef exponential_smoothing(data, alpha):\n    forecast = [data[0]]\n    for i in range(1, len(data)):\n        forecast.append(alpha * data[i] + (1 - alpha) * forecast[i-1])\n    return forecast\n\n# Define the past three day's forecast temperatures\ndata = [21, 22, 20]\n\n# Calculate the forecast temperature for the next day\nalpha = 0.5\nforecast = exponential_smoothing(data, alpha)\nprint(forecast[-1])"}
{"prompt": "Write a function in Python to sort a dictionary according to its values, in descending order.\ndictionary = {'apple': 2, 'banana': 3, 'mango': 1} \n", "label": "def sortDictionary(dictionary):\n  sorted_list = sorted(dictionary.items(), key=lambda x: x[1], reverse=True)\n  sorted_dictionary = dict(sorted_list)\n  return sorted_dictionary\n\nsorted_dictionary = sortDictionary({'apple': 2, 'banana': 3, 'mango': 1})\nprint(sorted_dictionary)", "predict": "def sort_dict(dictionary):\n    sorted_dict = sorted(dictionary.items(), key=lambda x: x[1], reverse=True)\n    return dict(sorted_dict)"}
{"prompt": "Create a function in Python to generate a multiplication table with numbers in a range given start and end parameters.\nstart = 5\nend = 10 \n", "label": "def multiplication_table(start, end):\n\tfor x in range(start, end + 1):\n\t\tfor y in range(start, end + 1):\n\t\t\tprint(x * y, end = \"  \")\n\t\tprint(\"\\n\")\n\t\t\nmultiplication_table(start, end)", "predict": "def generate_multiplication_table(start, end):\n  for i in range(start, end + 1):\n    for j in range(start, end + 1):\n      print(f'{i} * {j} = {i * j}')\n\ngenerate_multiplication_table(5, 10)"}
{"prompt": "Write a python program to identify if a string s has matching parentheses \n", "label": "def matching_paren(s):\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False \n            stack.pop()\n    \n    if len(stack) == 0:\n        return True\n    else:\n        return False", "predict": "def is_balanced(s):\n    open_paren = 0\n    for c in s:\n        if c == '(':\n            open_paren += 1\n        elif c == ')':\n            open_paren -= 1\n        if open_paren < 0:\n            return False\n    return open_paren == 0"}
{"prompt": "Develop a function in Python to take as input two array of integers and swap their elements.\narr1 = [3, 5, 6, 9]\narr2 = [2, 4, 7, 8] \n", "label": "def swap(arr1, arr2):\n    assert len(arr1) == len(arr2)\n    for i in range(len(arr1)):\n        temp = arr1[i]\n        arr1[i] = arr2[i]\n        arr2[i] = temp", "predict": "def swap(arr1, arr2):\n    arr1[:], arr2[:] = arr2[:], arr1[:]\n    return arr1, arr2"}
{"prompt": "Can you design a function in Python for reversing a list?\n[1,2,3,4,5] \n", "label": "def reverse_list(list): \n    return list[::-1]", "predict": "def reverse_list(lst):\n    return lst[::-1]\n\nlist_to_reverse = [1,2,3,4,5]\nreversed_list = reverse_list(list_to_reverse)\nprint(reversed_list)"}
{"prompt": "Create a Python script to build a dictionary from string to string of the given samples.\nSamples:\napple->red\nbanana->yellow\ncherry->red \n", "label": "def build_dictionary(samples):\n dictionary = {}\n for sample in samples:\n  key, value = sample.split(\"->\")\n  dictionary[key] = value\n return dictionary\n \nsamples = [\"apple->red\", \"banana->yellow\", \"cherry->red\"]\ndictionary = build_dictionary(samples)\n\nprint(dictionary)", "predict": "d = {\n    'apple':'red',\n    'banana': 'yellow',\n    'cherry':'red'\n}"}
{"prompt": "Write a Python script to find the average of numbers stored in an array.\n[10, 20, 30] \n", "label": "def calculate_mean(numbers):\n    total_sum = 0\n    for num in numbers:\n        total_sum += num\n    mean = total_sum / len(numbers)\n    return mean\n\nprint(calculate_mean([10, 20, 30]))", "predict": "def find_average(arr):\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum/len(arr)\n\narr = [10, 20, 30]\nprint(find_average(arr)) # 20.0"}
{"prompt": "Generate a Python program that takes two lists as input and returns a new list containing only the common elements.\n[1, 2, 3, 4, 8], [2, 6, 8, 10] \n", "label": "def common_elements(list1, list2): \n    common_list=[]\n    for element in list1: \n        if element in list2: \n            common_list.append(element) \n    return common_list\n  \nlist1 = [1, 2, 3, 4, 8] \nlist2 = [2, 6, 8, 10]\n\ncommon_list = common_elements(list1, list2) \n\nprint(common_list)", "predict": "def find_common_elements(list1, list2):\n    common_elements = []\n    for element in list1:\n        if element in list2:\n            common_elements.append(element)\n    return common_elements\n\nlist1 = [1, 2, 3, 4, 8]\nlist2 = [2, 6, 8, 10]\n\ncommon_elements = find_common_elements(list1, list2)\nprint(common_elements)"}
{"prompt": "Create a loop in Python to print out all the odd numbers from 1 to 10. \n", "label": "for i in range(1, 11):\n    if i % 2 != 0:\n        print(i)", "predict": "for i in range(1, 11):\n    if i % 2!= 0:\n        print(i)"}
{"prompt": "Create a machine learning model in Python that predecits customer lifetime value given a customer's past transactions.\nNot applicable \n", "label": "import pandas as pd\nimport numpy as np\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestRegressor\n\n# Preprocessing\ndf = pd.read_csv('transactions.csv')\nX = df.iloc[:,:-1].values\ny = df.iloc[:,-1].values\nscaler = StandardScaler()\nX = scaler.fit_transform(X)\n\n# Model Training\nmodel = RandomForestRegressor()\nmodel.fit(X, y)\n\n# Prediction\ncustomer_input = np.array([[10,100,5,...]]) # provide data related to past transactions\ntrans_scaled = scaler.transform(customer_input)\npredicted_LTV = model.predict(trans_scaled)[0]\nprint('Predicted customer lifetime value', predicted_LTV)", "predict": "import pandas as pd\nfrom sklearn.ensemble import RandomForestRegressor\n\n# Load data\ndata = pd.read_csv('customer_transactions.csv')\n\n# Define features and target\nX = data.drop('customer_lifetime_value', axis=1)\ny = data['customer_lifetime_value']\n\n# Train the model\nmodel = RandomForestRegressor()\nmodel.fit(X, y)\n\n# Make predictions\npredictions = model.predict(X)"}
{"prompt": "Given a list of numbers and a target number, write a Python program to find a pair of numbers from the given list that add up to the given target.\nInput List: [1, 2, 3, 4, 4, 5, 6]\nTarget: 8 \n", "label": "def find_pair(lst, target):\n    for i in range(len(lst)):\n        if (target - lst[i]) in lst[i+1:]:\n            return [lst[i], target-lst[i]]\n\nfind_pair([1,2,3,4,4,5,6], 8)", "predict": "def find_pair(numbers, target):\n  seen = set()\n  for num in numbers:\n    if target - num in seen:\n      return (target - num, num)\n    seen.add(num)\n  return None\n\npair = find_pair([1, 2, 3, 4, 4, 5, 6], 8)\nprint(pair)"}
{"prompt": "Develop a class in Python to perform various matrix operations like addition, subtraction, multiplication and transpose. \n", "label": "class Matrix: \n    def __init__(self, m, n, lst): \n        self.m = m             \n        self.n = n             \n        self.mat = [] \n  \n        c = 0\n        for i in range(self.m): \n            a =[] \n            for j in range(self.n): \n                    a.append(lst[c]) \n                    c += 1\n            self.mat.append(a) \n  \n    def __str__(self): \n        output = \"\"\n        for i in self.mat: \n            for j in i: \n                output += str(j) + \" \"\n            output += '\\n'\n        return output \n  \n    def add(self, mat2): \n        for i in range(self.m): \n            for j in range(self.n): \n                self.mat[i][j] += mat2.mat[i][j] \n  \n    def sub(self, mat2): \n        for i in range(self.m): \n            for j in range(self.n): \n                self.mat[i][j] -= mat2.mat[i][j]\n    \n    def mul(self, mat2): \n        result = [] \n        for i in range(self.m): \n            a =[] \n            for j in range(mat2.n): \n                s = 0\n                for k in range(self.n): \n                    s += self.mat[i][k] * mat2.mat[k][j] \n                a.append(s) \n            result.append(a) \n        self.mat = result \n        self.m = len(result) \n        self.n = len(result[0]) \n  \n    def transpose(self):\n        result = [[self.mat[j][i] for j in range(len(self.mat))] for i in range(len(self.mat[0]))]\n        self.mat = result \n        self.m = len(result) \n        self.n = len(result[0])", "predict": "class Matrix:\n    def __init__(self, matrix):\n        self.matrix = matrix\n\n    def add(self, other):\n        if len(self.matrix)!= len(other.matrix) or len(self.matrix[0])!= len(other.matrix[0]):\n            raise ValueError('Matrix dimensions must match')\n        result = []\n        for i in range(len(self.matrix)):\n            row = []\n            for j in range(len(self.matrix[0])):\n                row.append(self.matrix[i][j] + other.matrix[i][j])\n            result.append(row)\n        return Matrix(result)\n\n    def subtract(self, other):\n        if len(self.matrix)!= len(other.matrix) or len(self.matrix[0])!= len(other.matrix[0]):\n            raise ValueError('Matrix dimensions must match')\n        result = []\n        for i in range(len(self.matrix)):\n            row = []\n            for j in range(len(self.matrix[0])):\n                row.append(self.matrix[i][j] - other.matrix[i][j])\n            result.append(row)\n        return Matrix(result)\n\n    def multiply(self, other):\n        if len(self.matrix[0])!= len(other.matrix):\n            raise ValueError('Matrix dimensions must match')\n        result = []\n        for i in range(len(self.matrix)):\n            row = []\n            for j in range(len(other.matrix[0])):\n                sum = 0\n                for k in range(len(self.matrix[0])):\n                    sum += self.matrix[i][k] * other.matrix[k][j]\n                row.append(sum)\n            result.append(row)\n        return Matrix(result)\n\n    def transpose(self):\n        result = []\n        for i in range(len(self.matrix[0])):\n            row = []\n            for j in range(len(self.matrix)):\n                row.append(self.matrix[j][i])\n            result.append(row)\n        return Matrix(result)"}
{"prompt": "Write a Python script to generate a random number between 0 and 9. \n", "label": "import random\n\nrandom_num = random.randint(0,9)\nprint(random_num)", "predict": "import random\n\n# Generate a random number between 0 and 9\nrandom_number = random.randint(0, 9)\nprint(random_number)"}
{"prompt": "Create a Python Flask app that listens for POST requests on the '/webhook' route. When a request is received, extract the necessary parameters from the request and call the 'makeWebhookResult' function to generate a response. The response should be a JSON object containing a 'speech' field with the text to be spoken by the voice assistant. The app should be started on port", "label": "#!/usr/bin/env python\n# coding=utf-8\nimport requests\nimport urllib2\nimport json\nimport os\nfrom flask import Flask\nfrom flask import request\nfrom flask import make_response\nfrom bs4 import BeautifulSoup \n\n\n# Flask app should start in global layout\napp = Flask(__name__)\n\n\n@app.route('/webhook', methods=['POST'])\ndef webhook():\n\treq = request.get_json(silent=True, force=True)\n\tres = makeWebhookResult(req)\n    \tres = json.dumps(res, indent=4)\n    \tprint(res)\n    \tr = make_response(res)\n    \tr.headers['Content-Type'] = 'application/json'\n    \treturn r\n\ndef makeWebhookResult(req):\n\tresult = req.get(\"result\")\n\tparameters = result.get(\"parameters\")\n\t\n\tif req.get(\"result\").get(\"action\") == \"productos.sura\":\n        \tcliente = parameters.get(\"tipo_cliente\")\n       \t\tspeech = \"Buscando productos para \" + cliente\n\t\t\n\telif req.get(\"result\").get(\"action\") == \"producto.info\":\n        \tproducto = parameters.get(\"producto\")\n\t\tif (producto==\"hogar\"):\n\t\t\turl = \"https://www.sura.com/soluciones-personas/seguro-hogar.aspx\"\n\t\t\tr = urllib2.urlopen(url).read()\n\t\t\tsoup = BeautifulSoup(r, 'html.parser')\n\t\t\tprint soup\n\t\t\tcontenido = soup.find_all(\"div\",class_=\"textRightColumn\")\n\t\t\tif (len(contenido)==0):\n\t\t\t\tspeech = \"No encontrado\"\n\t\t\telse:\n\t\t\t\tspeech = contenido[0]\n\t\t\t\n\t\telse:\n       \t\t\tspeech = \"Buscando informacion del producto \" + producto\n        \n    \telif req.get(\"result\").get(\"action\") == \"planes.salud\":\n        \turl = \"https://api.segurossura.com.co/public/v1/directory/products\"\n        \tmyResponse = requests.get(url)\n\n        \tif(myResponse.ok):\n\t\t\tjData = json.loads(myResponse.text)\n\t\t\t\n\t\tspeech = \"Seguros Sura Colombia ofrece los siguientes planes de salud: \\n\"\n\t\t\n        \tfor plan in jData:\n\t       \t\tspeech = speech + \"\\n\" + plan[\"nombreField\"].title()\n\t\t\t\n\telif req.get(\"result\").get(\"action\") == \"info.especialistas\":\n\t\tproducto = parameters.get(\"plan-salud\")\n\t\tciudad = parameters.get(\"ciudad\")\n\t\tespecialidad = parameters.get(\"especialidad\")\n\t\t\n\t\turl = \"https://api.segurossura.com.co/public/v1/directory/search/\" + producto + \"/\" + ciudad + \"?speciality=\" + especialidad + \"&firstname=&secondname=&firstlastname=&secondlastname=\"\n\t\tmyResponse = requests.get(url)\n\n\t\tif(myResponse.ok):\n\t\t\tjData = json.loads(myResponse.text)\n\t\t\n\t\tspeech = \"Los profesionales que coinciden con tu busqueda son: \\n\"\n\n\t\tfor medico in jData:\n\t       \t\tspeech = speech + \"\\n\" + medico[\"nombreField\"] + \"\\n Direccion: \" + medico[\"direccionField\"].title() + \"\\n Telefono: \" + medico[\"telefonoField\"] + \"\\n\"\n\t\t\t\n\telif req.get(\"result\").get(\"action\") == \"coberturas.producto", "predict": "5000.\n\ndef makeWebhookResult(params):\n    # Generate the speech text\n    speech_text = \"The following parameters were received: \"\n    for param in params:\n        speech_text += f\"{param} - {params[param]}\\n\"\n\n    return {\n        \"speech\": speech_text\n    }\n\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/webhook', methods=['POST'])\ndef webhook():\n    params = request.get_json()\n    response = makeWebhookResult(params)\n    return response\n\nif __name__ == '__main__':\n    app.run(port=5000)"}
{"prompt": "Modify an existing Python function to eliminate any redundancies\ndef just_me(name):\n    print(\"Hi, my name is \"+name+\".\")\n    print(\"I am special and nothing else matters.\")\n    print(\"What about you?\") \n", "label": "def just_me(name):\n    print(\"Hi, my name is \"+name+\". I am special and nothing else matters.\")\n    print(\"What about you?\")", "predict": "def just_me(name):\n    print(\"Hi, my name is \"+name+\".\")\n    print(\"I am special and nothing else matters.\")\n    print(\"What about you?\")\n    print(\"It's great to meet you, \"+name+\".\")"}
{"prompt": "Create a simple chatbot using Python and state diagrams.\nNot applicable \n", "label": "# Create the states\nstate0 = {\n     'name': 'state0',\n     'message': 'Hello! How can I help you?',\n     'replies': {'I need some advice': 'state1', 'Can you answer my questions?': 'state2'}\n}\n\nstate1 = {\n     'name': 'state1',\n     'message': 'Sure, what kind of advice do you need?',\n     'replies': {'Career advice': 'state3','Health advice': 'state4'}\n}\n\nstate2 = {\n     'name': 'state2',\n     'message': 'Yes, I'll do my best! What do you want to know?',\n     'replies': {'Where can I find good tutorials': 'state5', 'Why is coding so hard': 'state6'}\n}\n\nstate3 = {\n     'name': 'state3',\n     'message': 'It is always a good idea to research the field you are interested in and creating a plan to learn the skills that are required. Make sure to contact professionals in the field to understand their experience.',\n     'replies': {}\n}\n\nstate4 = {\n     'name': 'state4',\n     'message': 'Focus on eating healthy and staying active. Make sure to consult a medical professional if you have any concerns.',\n     'replies': {}\n}\n\nstate5 = {\n     'name': 'state5',\n     'message': 'You can find tutorials online or join coding communities to get help from experienced coders. StackOverflow and Cod Academy are great resources.',\n     'replies': {}\n}\n\nstate6 = {\n     'name': 'state6',\n     'message': 'Coding can be challenging, especially at first. Just remember that with practice, patience and problem solving skills you can overcome the obstacles.',\n     'replies': {}\n}\n\n\n# Initialize the state\ncurrent_state = state0\n\n# Keep a record of conversation\nconversation = []\n\nwhile True:\n # Print the current state message\n print(current_state['message'])\n conversation.append(current_state['message'])\n\n # Get the user input\n user_input = input('>> ')\n conversation.append(user_input)\n\n # Update the state\n if user_input in current_state['replies']:\n  current_state = eval(current_state['replies'][user_input])\n else:\n  print(\"I don't understand what you mean. Please try again.\")\n\n# End the conversation when the state is terminal\n if not bool(current_state['replies']):\n  print('Goodbye!')\n  break\n\nprint(\"=========================\")\nprint(\"Conversation:\")\nfor message in conversation:\n print(message)", "predict": "import random\n\n# Define possible responses\nresponses = {\n    'greeting': [\n        'Hello!',\n        'Hi!',\n        'Hey!'\n    ],\n    'goodbye': [\n        'Goodbye!',\n        'Bye!',\n        'See you later!'\n    ],\n    'thanks': [\n        'You\\'re welcome!',\n        'No problem!',\n        'Anytime!'\n    ]\n}\n\n# Define state diagram\nstate_diagram = {\n    'greeting': [\n        ('thanks', 'thanks'),\n        ('goodbye', 'goodbye')\n    ],\n    'thanks': [\n        ('greeting', 'greeting'),\n        ('thanks', 'thanks'),\n        ('goodbye', 'goodbye')\n    ],\n    'goodbye': [\n        ('greeting', 'greeting'),\n        ('thanks', 'thanks'),\n        ('goodbye', 'goodbye')\n    ]\n}\n\n# Main function\ndef chatbot(message):\n    # Get the state\n    state = message.split()[0]\n\n    # Check if the state is in the state diagram\n    if state in state_diagram:\n        # Get the possible responses for the state\n        response = random.choice(responses[state])\n\n        # Return the response\n        return response\n    else:\n        # Return an error message\n        return 'I do not understand.'\n\n# Test the chatbot\nprint(chatbot('greeting'))\nprint(chatbot('thanks'))\nprint(chatbot('goodbye'))"}
{"prompt": "Create a Python 3 program that takes an integer input from the user and prints its cube. \n", "label": "number = int(input(\"Please enter a number: \"))\ncube = number**3\nprint(\"The cube of the number is: \" + str(cube))", "predict": "num = int(input(\"Enter an integer: \"))\ncube = num ** 3\nprint(\"The cube of\", num, \"is\", cube)"}
{"prompt": "Write a Python program to find the first non-repeating character in a given list.\nlst = [1, 2, 3, 4, 4, 3, 2, 1] \n", "label": "def first_non_repeating_char(lst):\n    dct = {}\n    \n    for l in lst:\n        if l in dct:\n            dct[l] += 1\n        else:\n            dct[l] = 1\n            \n    for l in lst:\n        if dct[l] == 1:\n            return l\n            \n    return None\n\nlst = [1, 2, 3, 4, 4, 3, 2, 1]\nprint(first_non_repeating_char(lst))", "predict": "def first_non_repeating_char(lst):\n    char_dict = {}\n    for char in lst:\n        if char not in char_dict:\n            char_dict[char] = 1\n        else:\n            char_dict[char] += 1\n    \n    for char in lst:\n        if char_dict[char] == 1:\n            return char\n    \n    return None\n\nprint(first_non_repeating_char(lst))"}
{"prompt": "Create a k-means clustering algorithm in Python. \n", "label": "import numpy as np \n\ndef kmeans(k, data): \n    \"\"\"\n    Perform k-means clustering on data\n    \"\"\"\n    # randomly set initial centroids\n    centroids = data[np.random.randint(low=0, high=len(data), size=k)]\n    prev_centroids = np.zeros(centroids.shape)\n\n    clusters = np.zeros(len(data))\n    distances = np.zeros((len(data), k))\n    \n    # find the closest centroid for each sample\n    while not np.allclose(centroids, prev_centroids):\n        # save old centroids\n        prev_centroids = centroids\n    \n        # get the distance between each point and each centroid\n        for idx, centroid in enumerate(centroids):\n            distances[:, idx] = np.linalg.norm(data - centroid, axis=1)\n    \n        # assign each sample to the closest centroids\n        clusters = np.argmin(distances, axis=1)\n    \n        # update centroids \n        for idx in range(k):\n            centroids[idx] = np.mean(data[clusters == idx], axis=0)\n    \n    return clusters, centroids", "predict": "import numpy as np\nfrom sklearn.cluster import KMeans\n\n# define data\nX = np.array([[1, 2], [1, 4], [1, 0], [4, 2], [4, 4], [4, 0]])\n\n# define number of clusters\nk = 2\n\n# create and fit the model\nkmeans = KMeans(n_clusters=k, random_state=0).fit(X)\n\n# get the cluster labels\nlabels = kmeans.labels_\n\n# print the cluster labels\nprint(labels)"}
{"prompt": "Write a Python code snippet that produces the following output: \n", "label": "for i in range(7):\n    for j in range(7):\n        if (i + j) % 2 == 0:\n            print('#', end='')\n        else:\n            print(' ', end='')\n    print()", "predict": "for i in range(10):\n    for j in range(10):\n        print(i*j, end=' ')\n    print()"}
{"prompt": "Construct a Python class that takes a given number and calculates the sum of the digits.\n6342 \n", "label": "class SumOfDigits:\n    \n    def __init__(self, num):\n        self.num = num\n    \n    def calculate_sum_of_digits(self):\n        total = 0\n        for ch in str(self.num):\n            total += int(ch)\n        return total\n\ndigit_sum = SumOfDigits(6342)\nresult = digit_sum.calculate_sum_of_digits()\nprint(result)", "predict": "class DigitSumCalculator:\n    def __init__(self, num):\n        self.num = num\n    \n    def calculate_sum(self):\n        sum = 0\n        for digit in str(self.num):\n            sum += int(digit)\n        return sum\n\n# Create an instance of the class\ndigit_sum_calculator = DigitSumCalculator(6342)\n\n# Calculate the sum of the digits\nsum = digit_sum_calculator.calculate_sum()\nprint(sum)"}
{"prompt": "Implement a sorting algorithm in Python that takes a list of integers as input and outputs the list sorted in ascending order. \n", "label": "def sort_ascending(nums):\n    for i in range(len(nums)):\n        min_idx = i\n        for j in range(i + 1, len(nums)):\n            if nums[min_idx] > nums[j]:\n                min_idx = j\n        nums[i], nums[min_idx] = nums[min_idx], nums[i] \n    return nums", "predict": "def sort_list(nums):\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n    return nums"}
{"prompt": "Create a feature extraction function in Python to extract data from a json string.\n{\"id\":111,\"title\":\"This is a sample title\",\"body\":\"This is a sample body text\"} \n", "label": "def feature_extraction(input_str):\n    import json\n    data = json.loads(input_str)\n\n    features = {\n        \"id\": data[\"id\"],\n        \"title\": data[\"title\"],\n        \"body_len\": len(data[\"body\"])\n    }\n\n    return features", "predict": "import json\n\ndef extract_features(json_string):\n    data = json.loads(json_string)\n    features = {\n        'id': data['id'],\n        'title': data['title'],\n        'body': data['body']\n    }\n    return features"}
{"prompt": "Construct a Python program to combine the elements of two lists into a list of tuples.\n[1, 2, 3], [4, 5, 6] \n", "label": "def combine_list(array1, array2):\n    return list(zip(array1, array2))", "predict": "list1 = [1, 2, 3]\nlist2 = [4, 5, 6]\n\nlist_of_tuples = list(zip(list1, list2))\nprint(list_of_tuples)"}
{"prompt": "Design and implement a neural network in Python to predict the price of a house given a set of features.\n[0.8, 0.4, 0.7] \n", "label": "import numpy as np\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\nfeatures = np.array([[0.8, 0.4, 0.7]])\n\nmodel = Sequential()\nmodel.add(Dense(64, input_dim=3, activation='relu'))\nmodel.add(Dense(32, activation='relu'))\nmodel.add(Dense(1, activation='linear'))\n\nmodel.compile(loss='mse', optimizer='adam', metrics=['mse'])\n\nmodel.fit(features, batch_size=3,epochs=200)", "predict": "import numpy as np\nimport tensorflow as tf\n\n# Define the input data\nX = np.array([[0.8, 0.4, 0.7]])\n\n# Define the model\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Dense(32, activation='relu'),\n    tf.keras.layers.Dense(1)\n])\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='mse',\n              metrics=['mae'])\n\n# Train the model\nmodel.fit(X, X, epochs=100)\n\n# Make a prediction\ny_pred = model.predict(X)\n\nprint(y_pred)"}
{"prompt": "Create a Python program that takes two arguments in the form of two lists and calculates the dot product of the two arguments.\n[1,2], [3,4] \n", "label": "def dot_product(list1, list2):\n  product = 0\n  for i in range(len(list1)):\n    product += (list1[i] * list2[i])\n  return product\n#Example\nlist1 = [1,2]\nlist2 = [3,4]\n\nresult = dot_product(list1, list2)\nprint(result)\n#Output\n11", "predict": "def dot_product(list1, list2):\n    sum = 0\n    for i in range(len(list1)):\n        sum += list1[i] * list2[i]\n    return sum\n\nlist1 = [1,2]\nlist2 = [3,4]\n\nprint(dot_product(list1, list2))"}
{"prompt": "Create a Python web application for a car insurance calculator. The application should have a page where the user can input the data (e.g age, gender, car model, etc) and should return a calculated insurance price.\nNot applicable \n", "label": "import flask\nfrom flask import request, jsonify\n\n# Creating the application app\napp = flask.Flask(__name__)\n\n\n@app.route('/calculate', methods=['POST'])\ndef calculate():\n    # Get the input data from the user\n    data = request.get_json()\n\n    age = data['age']\n    gender = data['gender']\n    car_model = data['car_model']\n\n    # Calculate the insurance price\n    # ...\n    insurance_price = 0.00\n\n    # Return the calculated insurance price in JSON format\n    return jsonify({'insurance_price': insurance_price})\n\t\napp.run(host='0.0.0.0', port=8006)", "predict": "from flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n return render_template('index.html')\n\n@app.route('/calculate', methods=['POST'])\ndef calculate():\n age = request.form['age']\n gender = request.form['gender']\n car_model = request.form['car_model']\n\n # Calculate insurance price based on user input\n insurance_price = 0\n\n return render_template('result.html', insurance_price=insurance_price)\n\nif __name__ == '__main__':\n app.run(debug=True)"}
{"prompt": "Create a Python script that generates a list of the prime numbers between two given numbers. The script should use the Sieve of Eratosthenes algorithm to generate the prime numbers\nStart=1, End=20 \n", "label": "def sieve_of_eratosthenes(start, end):\n    prime = [True] * (end + 1)\n    p = 2\n    while p * p <= end:\n        if prime[p]:\n            for i in range(p * p, end + 1, p):\n                prime[i] = False\n        p += 1\n    prime_numbers = []\n\n    for p in range (start, end):\n        if prime[p]:\n            prime_numbers.append(p)\n\n    return prime_numbers\n\nprint (sieve_of_eratosthenes(1, 20))", "predict": "def sieve_of_eratosthenes(start, end):\n    prime_list = [True] * (end + 1)\n    prime_list[0] = False\n    prime_list[1] = False\n\n    for i in range(2, int(end**0.5) + 1):\n        if prime_list[i]:\n            for j in range(i**2, end + 1, i):\n                prime_list[j] = False\n\n    prime_list[end] = True\n    prime_list = [i for i in range(start, end + 1) if prime_list[i]]\n\n    return prime_list\n\nstart = 1\nend = 20\nprime_list = sieve_of_eratosthenes(start, end)\nprint(prime_list)"}
{"prompt": "Construct a program in Python to compute the sum of square numbers in a given range, including the start and end numbers.\nRange: 10-20 \n", "label": "def sumOfRanges(start, end):\n sum = 0\n \n for i in range(start, end+1):\n sum += i*i\n \n return sum\n\nsumOfRanges(10,20) #673", "predict": "def sum_square_numbers(start, end):\n    sum = 0\n    for i in range(start, end + 1):\n        sum += i * i\n    return sum\n\nresult = sum_square_numbers(10, 20)\nprint(result)"}
{"prompt": "In Python, build a program that can remove all vowels from a given string. \n", "label": "def remove_vowels(string):\n    vowels = ['a','e','i','o','u']\n    new_string = ''\n    for char in string:\n        if char.lower() not in vowels:\n            new_string += char\n    return new_string", "predict": "def remove_vowels(string):\n    vowels = ('a', 'e', 'i', 'o', 'u')\n    result = ''\n    for char in string:\n        if char not in vowels:\n            result += char\n    return result"}
{"prompt": "Improve the following function by using Python built-in functions:\ndef sum_array(array):\n    '''A function that takes in an array of numbers and returns the sum of all the numbers'''\n    total = 0\n    for num in array:\n        total = total + num\n    return total \n", "label": "def sum_array(array):\n    '''A function that takes in an array of numbers and returns the sum of all the numbers'''\n    return sum(array)", "predict": "def sum_array(array):\n    '''A function that takes in an array of numbers and returns the sum of all the numbers'''\n    return sum(array)"}
{"prompt": "Write a python code for sorting n distinct integers using insertion sort. \n", "label": "def insertion_sort(arr):\n    for i in range(1, len(arr)): \n  \n        key = arr[i] \n  \n        # Move elements of arr[0..i-1], \n        # that are greater than key, \n        # to one position ahead of \n        # their current position \n        j = i-1\n        while j >= 0 and key < arr[j] : \n                arr[j + 1] = arr[j] \n                j -= 1\n        arr[j + 1] = key", "predict": "def insertion_sort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i-1\n        while j >= 0 and key < arr[j]:\n            arr[j+1] = arr[j]\n            j -= 1\n        arr[j+1] = key\n    return arr"}
{"prompt": "Create a Python script for a django-like ORM with standard CRUD functionality. The script should include methods for Create, Read, Update and Delete.\nModel. name - string \n", "label": "import sqlite3\n\nclass Model:\n\n  def __init__(self):\n    self.conn = sqlite3.connect(\":memory:\")\n    self.cursor = self.conn.cursor()\n\n  def create(self,name):\n    self.cursor.execute(\n\t\t\t\"CREATE TABLE IF NOT EXISTS Models (name TEXT)\"\n\t\t)\n    self.cursor.execute(\n\t\t\t\"INSERT INTO Models(name) VALUES (?)\",\n\t\t\t(name,),\n\t\t)\n    self.conn.commit()\n\n  def read(self):\n    self.cursor.execute(\"SELECT * FROM Models\")\n    return self.cursor.fetchall()\n\n  def update(self,name):\n    self.cursor.execute(\n\t\t\t\"UPDATE Models SET name = ? WHERE name = ?\", \n\t\t\t(name, name,),\n\t\t)\n    self.conn.commit()\n  \n  def delete(self, name):\n    self.cursor.execute(\n\t\t\t\"DELETE FROM Models WHERE name = ?\",\n\t\t\t(name,),\n\t\t)\n    self.conn.commit()", "predict": "class Model(models.Model):\n    name = models.CharField(max_length=100)\n\n    def __str__(self):\n        return self.name\n\n    def create(self, name):\n        self.name = name\n        self.save()\n\n    def read(self):\n        return self\n\n    def update(self, name):\n        self.name = name\n        self.save()\n\n    def delete(self):\n        self.delete()"}
{"prompt": "Can you write a Python script to sort a list of strings alphabetically?\n[\"Hello\", \"Yes\", \"No\", \"World\"] \n", "label": "strings = [\"Hello\", \"Yes\", \"No\", \"World\"]\n\nstrings.sort()\n\nprint(strings)", "predict": "list = [\"Hello\", \"Yes\", \"No\", \"World\"]\nlist.sort()\nprint(list)"}
{"prompt": "Write a class in Python that can find the median of an unsorted list of numbers. \n", "label": "class MedianFinder:\n def __init__(self):\n     self._data = []\n \n def add(self, num):\n     self._data.append(num)\n \n def find_median(self):\n     data = sorted(self._data)\n     n = len(data)\n     return (data[(n-1)//2] + data[n//2])/2", "predict": "class MedianFinder:\n    def __init__(self):\n        self.nums = []\n    \n    def addNum(self, num):\n        self.nums.append(num)\n        self.nums.sort()\n    \n    def findMedian(self):\n        n = len(self.nums)\n        if n % 2 == 0:\n            return (self.nums[n//2] + self.nums[n//2 - 1]) / 2\n        else:\n            return self.nums[n//2]"}
{"prompt": "Generate an array of random numbers in Python.\nsize: 10 \n", "label": "import numpy as np\n\nsize = 10\nrandom_array = np.random.randint(0, 100, size)\nprint(random_array)", "predict": "import random\n\n# Generate an array of random numbers\narray = [random.randint(1, 100) for _ in range(10)]\nprint(array)"}
{"prompt": "Compute the edit distance between two strings in Python.\nstring1 = “kitten”\nstring2 = “sitting” \n", "label": "def editDistance(string1, string2, m, n):\n    # Create an empty matrix\n    dp = [[0 for x in range(n+1)] for x in range(m+1)] \n  \n    # Filling the first column of the matrix\n    for i in range(m+1): \n        dp[i][0] = i \n  \n    # Filling the second column of the matrix \n    for j in range(n+1): \n        dp[0][j] = j \n  \n    # Populate the matrix\n    for i in range(1, m+1): \n        for j in range(1, n+1): \n  \n            if string1[i-1] == string2[j-1]: \n                dp[i][j] = dp[i-1][j-1] \n            else: \n                dp[i][j] = 1 + min(dp[i][j-1],        # Insert\n                                   dp[i-1][j],        # Remove \n                                   dp[i-1][j-1])      # Replace\n  \n    return dp[m][n] \n  \n  \n# Driver program \nstring1 = \"kitten\"\nstring2 = \"sitting\"\nm = len(string1) \nn = len(string2) \nprint(editDistance(string1, string2, m, n))", "predict": "def edit_distance(string1, string2):\n    m = len(string1)\n    n = len(string2)\n    dp = [[0 for x in range(n + 1)] for x in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            elif string1[i - 1] == string2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = 1 + min(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1])\n    return dp[m][n]"}
{"prompt": "Create a 3-layer artificial neural network using Python and print the outcome. \n", "label": "import numpy as np\n\n# define the 3 layers #\ninput_layer = np.array([2, 3])\nhidden_layer = np.array([[0.1, 0.4],\n                         [0.8, 0.6],\n                         [0.3, 0.9]])\noutput_layer = np.array([0.3, 0.7])\n\n# compute the output of the 3-layer network #\nhidden_layer_output = np.dot(input_layer, hidden_layer)\noutput = np.dot(hidden_layer_output, output_layer)\n\nprint(output)", "predict": "import numpy as np\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n# define the model\nmodel = Sequential()\nmodel.add(Dense(32, input_dim=10, activation='relu'))\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dense(10, activation='softmax'))\n\n# compile the model\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n# fit the model\nmodel.fit(X_train, y_train, epochs=10, batch_size=32)\n\n# evaluate the model\nscores = model.evaluate(X_test, y_test)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))"}
{"prompt": "Create a Python program to read in 15 integers and print the sum of them.\n[1, 5, 9, 0, 2, 4, 7, 8, 6, 10, 3, 11, 12, 13, 14] \n", "label": "def sum_nums(nums):\n    total = 0\n    for num in nums:\n        total += num\n    return total\n\nlst = [1, 5, 9, 0, 2, 4, 7, 8, 6, 10, 3, 11, 12, 13, 14]\ntotal = sum_nums(lst)\nprint(total)", "predict": "sum = 0\nfor num in [1, 5, 9, 0, 2, 4, 7, 8, 6, 10, 3, 11, 12, 13, 14]:\n    sum += num\n\nprint(sum)"}
{"prompt": "Implement a REST API in Python for creating and reading users. The API should have endpoints for creating a user, reading all users, and reading a single user.\nNot applicable \n", "label": "from flask import Flask, jsonify, request\nfrom flask_mysqldb import MySQL\n\napp = Flask(name)\n\n# Mysql configuration\napp.config['MYSQL_USER'] = 'root'\napp.config['MYSQL_PASSWORD'] = 'password'\napp.config['MYSQL_DB'] = 'users'\napp.config['MYSQL_CURSORCLASS'] = 'DictCursor'\n\nmysql = MySQL(app)\n\n@app.route('/users', methods=['POST'])\ndef create_user():\n name = request.json['name']\n email = request.json['email']\n\n cur = mysql.connection.cursor()\n cur.execute(\"INSERT INTO users (name, email) VALUES (%s, %s)\", (name, email))\n mysql.connection.commit()\n cur.close()\n\n return jsonify({'message': 'User created'})\n\n@app.route('/users', methods=['GET'])\ndef get_users():\n cur = mysql.connection.cursor()\n cur.execute(\"SELECT * FROM users\")\n users = cur.fetchall()\n cur.close()\n\n return jsonify(users)\n\n@app.route('/users/int:id', methods=['GET'])\ndef get_user(id):\n cur = mysql.connection.cursor()\n cur.execute(\"SELECT * FROM users WHERE id=%s\", (id))\n user = cur.fetchone()\n cur.close()\n\n return jsonify(user)\n\nif name == \"main\":\n app.run(debug=True)", "predict": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n# In-memory users store\nusers = []\n\n@app.route('/users', methods=['POST'])\ndef create_user():\n data = request.get_json()\n user = {\n 'name': data['name'],\n 'email': data['email'],\n 'password': data['password']\n }\n users.append(user)\n return jsonify(user), 201\n\n@app.route('/users', methods=['GET'])\ndef read_users():\n return jsonify(users), 200\n\n@app.route('/users/<int:user_id>', methods=['GET'])\ndef read_user(user_id):\n user = next((user for user in users if user['id'] == user_id), None)\n if user:\n return jsonify(user), 200\n else:\n return jsonify({'message': 'User not found'}), 404\n\nif __name__ == '__main__':\n app.run(debug=True)"}
{"prompt": "Explain the approach for solving a linear programming problem using the Simplex method in Python. \n", "label": "The Simplex Method is an algorithm for solving a linear programming problem, which involves finding the maximum or minimum value of a linear function. This method uses simultaneous equations to define a polytope that contains the solution to the linear programming problem. It then finds the optimal solution in this polytope by iteratively making moves from a vertex to another in the polytope that gives an increase in the message value. \n\nTo solve a linear programming problem using the Simplex Method in Python, first, define the problem in terms of the decision variables, objective function, and constraints. Next, convert the problem into standard form by introducing slack variables, if needed. Then, create a tableau containing the coefficients of the decision variables and the right-hand sides of the constraints, and set up the starting solution in the tableau. Now, iteratively use the Simplex algorithm to move from a vertex to the next until an optimum solution is reached. Determine the optimum solution by inspecting the values in the tableau.", "predict": "The Simplex method is a popular approach for solving linear programming problems in Python. The method works by iteratively moving from one vertex of the feasible region to another, always moving towards the direction that improves the objective function. This process is repeated until the optimal solution is found. The Simplex method can be implemented in Python using the scipy.optimize.linprog() function. This function takes in a matrix of coefficients and a vector of constraints, and returns the optimal solution to the linear programming problem."}
{"prompt": "Optimize a Python algorithm to find the greatest 2 numbers from a 10000 integers list.\nmyList = [1, 5, 3, 7, 4, 7, 8, 9, 2, 10, 6, 8] \n", "label": "def get_greatest_2(items):\n max1 = max2 = float('-inf')\n for item in items:\n if item > max1:\n max1, max2 = item, max1\n elif item > max2:\n max2 = item\n return max1, max2\n\nmyList = [1, 5, 3, 7, 4, 7, 8, 9, 2, 10, 6, 8]\nprint('The greatest 2 numbers from the array:', get_greatest_2(myList))\n\nOutput:\nThe greatest 2 numbers from the array: (9, 8)", "predict": "def findGreatest2Numbers(myList):\n    greatest1 = myList[0]\n    greatest2 = myList[1]\n\n    for i in range(2, len(myList)):\n        if myList[i] > greatest1:\n            greatest2 = greatest1\n            greatest1 = myList[i]\n        elif myList[i] > greatest2:\n            greatest2 = myList[i]\n\n    return greatest1, greatest2\n\ngreatest1, greatest2 = findGreatest2Numbers(myList)\nprint(\"The two greatest numbers are\", greatest1, \"and\", greatest2)"}
{"prompt": "Write a python code that takes in a list of integers and removes all the duplicate elements from it.\n[1, 2, 3, 2, 4, 5, 6, 3] \n", "label": "final_list = [] \nfor num in list_of_integers: \n    if num not in final_list: \n    \tfinal_list.append(num) \nprint(final_list)", "predict": "def remove_duplicates(nums):\n    new_list = []\n    for num in nums:\n        if num not in new_list:\n            new_list.append(num)\n    return new_list\n\nresult = remove_duplicates([1, 2, 3, 2, 4, 5, 6, 3])\nprint(result)"}
{"prompt": "Using the NumPy library, create a Python program to generate a 3X3 array of random integers ranging from 1 to 5.\nNot applicable \n", "label": "import numpy as np \n\na = np.random.randint(1, 6, size=(3,3)) \nprint(a)", "predict": "import numpy as np\n\n# Generate a 3x3 array of random integers ranging from 1 to 5\narray = np.random.randint(1, 6, size=(3, 3))\n\n# Print the array\nprint(array)"}
{"prompt": "Can you provide a code snippet in Python that takes a list of strings as input and sorts them based on their length?\n[\"Hello\",\"World!\",\"Good\",\"Morning\"] \n", "label": "words = [\"Hello\",\"World!\",\"Good\",\"Morning\"]\n\nwords.sort(key=len)\n\nprint(words)", "predict": "def sort_by_length(lst):\n    return sorted(lst, key=len)\n\nprint(sort_by_length([\"Hello\",\"World!\",\"Good\",\"Morning\"]))"}
{"prompt": "Create a Python program to classify the sentiment of movie reviews using Natural Language Processing.\nThe movie was terrible. It felt like it would never end! \n", "label": "import nltk\nfrom nltk.sentiment import vader\n\nsentence = 'The movie was terrible. It felt like it would never end!'\n\nsid = vader.SentimentIntensityAnalyzer()\nscores = sid.polarity_scores(sentence)\n\nif scores['neg'] > scores['pos']:\n  print('The sentiment of the sentence is negative!')\nelse:\n  print('The sentiment of the sentence is positive!')", "predict": "import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\nsentiment_analyzer = SentimentIntensityAnalyzer()\n\nreview = \"The movie was terrible. It felt like it would never end!\"\n\nsentiment_score = sentiment_analyzer.polarity_scores(review)\n\nif sentiment_score['compound'] > 0:\n print('Positive')\nelif sentiment_score['compound'] == 0:\n print('Neutral')\nelse:\n print('Negative')"}
{"prompt": "Create a python script that parses a CSV and generates a new CSV that adds the total number of rows, total number of columns, and total amount of the data for each attribute. \n", "label": "\"\"\"\nParses a CSV and generates a new CSV that adds the total number of rows, total \nnumber of columns, and total amount of data for each attribute.\n\"\"\"\n\nimport csv\n\ndef parse_csv(filename):\n    with open(filename) as csv_file:\n        reader = csv.DictReader(csv_file)\n        rows =0\n        cols = 0\n        data_totals = []\n        for row in reader:\n            rows += 1\n            cols = len(row)\n            for col in row:\n                if len(data_totals) < cols:\n                    data_totals.append([row[col],1])\n                else:\n                    existing_total = data_totals[cols - 1]\n                    new_total = [existing_total[0] + float(row[col]), existing_total[1] + 1]\n                    data_totals.append(new_total)\n        #write to new csv\n        with open('new_csv.csv', mode='w') as new_csv_file:\n            writer = csv.writer(new_csv_file, delimiter=',', quotechar='\"', quoting=csv.QUOTE_MINIMAL)\n            writer.writerow(['Rows', 'Columns', 'Data Totals'])\n            writer.writerow([rows, cols, data_totals])\n\nif __name__ == '__main__':\n    filename = 'test.csv'\n    parse_csv(filename)", "predict": "import csv\n\ndef parse_csv(input_csv, output_csv):\n    with open(input_csv, 'r') as csv_in, open(output_csv, 'w') as csv_out:\n        reader = csv.reader(csv_in)\n        writer = csv.writer(csv_out)\n        writer.writerow(['Attribute', 'Total Rows', 'Total Columns', 'Total Amount'])\n        for row in reader:\n            writer.writerow([row[0], len(row), len(reader.fieldnames), len(row)])\n\nparse_csv('input.csv', 'output.csv')"}
{"prompt": "Create a class in Python which matches the following criteria.\nA class Song with two instance variables, title and artist, and three methods, str(), eq(), and length(). \n", "label": "class Song:\n    def __init__(self, title, artist):\n        self.title = title\n        self.artist = artist\n  \n    def __str__(self):\n        return f'Title: {self.title}\\nArtist: {self.artist}'\n    \n    def __eq__(self, other):\n        return self.artist == other.artist and self.title == other.title\n\n    def length(self):\n        return len(self.title)", "predict": "class Song:\n    def __init__(self, title, artist):\n        self.title = title\n        self.artist = artist\n    \n    def __str__(self):\n        return f'{self.title} by {self.artist}'\n    \n    def __eq__(self, other):\n        return self.title == other.title and self.artist == other.artist\n    \n    def length(self):\n        return len(self.title) + len(self.artist)"}
{"prompt": "Create a Python script to scrape a given website. \n", "label": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = '<your website url>'\npage = requests.get(url)\nsoup = BeautifulSoup(page.text, 'html.parser')\n\n# Scraping code goes here....", "predict": "import requests\nfrom bs4 import BeautifulSoup\n\n# Get the HTML content of the website\nurl = \"https://www.example.com\"\nhtml = requests.get(url).content\n\n# Parse the HTML\nsoup = BeautifulSoup(html, 'html.parser')\n\n# Extract the data\ndata = soup.find_all('div', class_='data')\n\n# Print the data\nfor item in data:\n print(item.text)"}
{"prompt": "Create objects of type Student in Python containing relevant attributes. \n", "label": "class Student:\n    def __init__(self, name, age, gender):\n        self.name = name\n        self.age = age\n        self.gender = gender", "predict": "class Student:\n    def __init__(self, name, age, grade):\n        self.name = name\n        self.age = age\n        self.grade = grade"}
{"prompt": "Design and write a Python program to extract all public email addresses from a given string\n\"My email is john@example.com and yours is john@gmail.com.\" \n", "label": "import re\n\ndef extract_emails(text):\n  emails = re.findall(r\"[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+\", text)\n  return emails\n\nextracted_emails = extract_emails(\"My email is john@example.com and yours is john@gmail.com\")\nprint(extracted_emails)", "predict": "import re\n\ndef extract_emails(text):\n    return re.findall(r'[\\w\\.-]+@[\\w\\.-]+', text)\n\ntext = \"My email is john@example.com and yours is john@gmail.com.\"\nemails = extract_emails(text)\nprint(emails)"}
{"prompt": "Generate a basic REST API with authentication and endpoints in Python.\nNot applicable \n", "label": "from flask import Flask, request\nfrom flask_restful import Resource, Api\nfrom flask_jwt import JWT, jwt_required\n\napp = Flask(name)\napi = Api(app)\n\n# Setup JWT authentication\napp.secret_key = 'super-secret-key'\njwt = JWT(app, authenticate, identity)\n\nitems = []\n\nclass Item(Resource):\n @jwt_required()\n def get(self, name):\n for item in items:\n if item['name'] == name:\n return item\n return {'item': None}, 404\n\n def post(self, name):\n new_item = {'name': name, 'price': 12.00}\n items.append(new_item)\n return new_item, 201\n\n\nclass ItemList(Resource):\n def get(self):\n return {'items': items}\n\n\napi.add_resource(Item, '/item/<string:name>')\napi.add_resource(ItemList, '/items')\n\nif name == 'main':\n app.run(port=5000, debug=True)", "predict": "import flask\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n# Authentication\n@app.before_request\ndef before_request():\n if not request.is_json:\n return \"Request is not JSON\"\n\n# Endpoints\n@app.route('/api/v1/login', methods=['POST'])\ndef login():\n # Code to authenticate user\n return jsonify({\"message\": \"Logged in successfully\"})\n\n@app.route('/api/v1/data', methods=['GET'])\ndef data():\n # Code to get data\n return jsonify({\"data\": data})\n\nif __name__ == '__main__':\n app.run(debug=True)"}
{"prompt": "Generate a set of Python functions to take inputs values from a list of objects and output a result. The output for each object should include the object's ID and the calculated results from the given inputs.\n[{\"id\": 1, \"inputs\": [1,2,3]}, {\"id\": 2, \"inputs\": [2,3,4]}] \n", "label": "def calculate_result(obj_list):\n result_list = []\n\n for obj in obj_list:\n  result = {}\n  result['id'] = obj['id']\n  result['result'] = sum(obj['inputs'])\n\n result_list.append(result)\n\nreturn result_list\n\nobj_list = [{\"id\": 1, \"inputs\": [1,2,3]}, \n{\"id\": 2, \"inputs\": [2,3,4]}]\n\nprint(calculate_result(obj_list))\n\n# Output: [{'id': 1, 'result': 6}, {'id': 2, 'result': 9}]", "predict": "def calculate_result(obj):\n  # Calculate result based on the given inputs\n  result = obj['inputs'][0] + obj['inputs'][1] * obj['inputs'][2]\n  return result\n\ndef output_result(obj):\n  # Output the result for each object\n  print(f\"Object {obj['id']}: {calculate_result(obj)}\")"}
{"prompt": "Reverse an input string using Python.\nHello World! \n", "label": "def rev_string(s): \n   return s[::-1] \n  \ns = \"Hello World!\"\nprint(rev_string(s))", "predict": "def reverse_string(input_string):\n    reversed_string = input_string[::-1]\n    return reversed_string\n\nprint(reverse_string(\"Hello World!\"))"}
{"prompt": "Create an algorithm in Python to find the longest common subsequence of two sequences.\nx = \"abcdaf\";\ny = \"acbcf\"; \n", "label": "#Function to find the LCS of two strings\ndef find_lcs(x, y): \n    # Find lengths of the two strings \n    m = len(x) \n    n = len(y) \n    \n    #To store the lengths of longest common subsequences\n    lcs = [[0 for x in range(n+1)] for x in range(m+1)] \n  \n    #Fill the table in bottom up manner \n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0 or j == 0: \n                lcs[i][j] = 0\n            elif x[i-1] == y[j-1]: \n                lcs[i][j] = lcs[i-1][j-1] + 1\n            else: \n                lcs[i][j] = max(lcs[i-1][j], lcs[i][j-1]) \n  \n    #To store one of the possible common subsequence\n    index = lcs[m][n] \n    lcs_str = [\"\"] * (index+1) \n    lcs_str[index] = \"\"\n  \n    #Following loop code is used to find one of the longest common subsequence\n    i = m \n    j = n \n    while i > 0 and j > 0: \n  \n        #If current character in X and Y are same,then\n        # reduce both the count and add the character to the result string\n        if x[i-1] == y[j-1]: \n            lcs_str[index-1] = x[i-1] \n            i-=1\n            j-=1\n            index-=1\n  \n        # If not same, move to the left, top or corner (diagonal) cell \n        #Whichever has the max value\n        elif lcs[i-1][j] > lcs[i][j-1]: \n            i-=1\n        else: \n            j-=1\n  \n    # Return the longest common subsequence\n    return \"\".join(lcs_str)\n\n# Main function\nx = \"abcdaf\"\ny = \"acbcf\"\nres = find_lcs(x,y)\nprint(\"The Longest Common Subsequence is:\")\nprint(res)\n\n# Output: The Longest Common Subsequence is: \n# abcf", "predict": "def lcs(x, y):\n m = len(x)\n n = len(y)\n\n lcs_matrix = [[0 for j in range(n+1)] for i in range(m+1)]\n\n for i in range(1, m+1):\n  for j in range(1, n+1):\n   if x[i-1] == y[j-1]:\n    lcs_matrix[i][j] = lcs_matrix[i-1][j-1] + 1\n   else:\n    lcs_matrix[i][j] = max(lcs_matrix[i][j-1], lcs_matrix[i-1][j])\n\n longest_subsequence = \"\"\n i = m\n j = n\n while i > 0 and j > 0:\n  if x[i-1] == y[j-1]:\n   longest_subsequence = x[i-1] + longest_subsequence\n   i -= 1\n   j -= 1\n  elif lcs_matrix[i][j-1] > lcs_matrix[i-1][j]:\n   j -= 1\n  else:\n   i -= 1\n\n return longest_subsequence\n\nx = \"abcdaf\"\ny = \"acbcf\"\nprint(lcs(x, y))"}
{"prompt": "Write a python script to generate a random password of length 8, which consists of alphanumeric characters and at least one special character. \n", "label": "import string\nimport random\n\ndef generate_password():\n    chars = string.ascii_letters + string.digits + string.punctuation\n    pwd_length = 8\n\n    password = ''\n    for i in range(pwd_length):\n        password += random.choice(chars)\n    \n    # Check if at least one special character exists in the password\n    if any([char in string.punctuation for char in password]):\n        return password\n    else:\n        return generate_password()\n\nprint(generate_password())", "predict": "import string\nimport random\n\ndef generate_password():\n    # Create a list of all possible characters\n    characters = string.ascii_letters + string.digits + string.punctuation\n\n    # Generate a random password of length 8\n    password = ''.join(random.choice(characters) for i in range(8))\n\n    # Check if the password contains at least one special character\n    if any(c in string.punctuation for c in password):\n        return password\n    else:\n        return generate_password()\n\nprint(generate_password())"}
{"prompt": "Create a Python script that takes the list [1, 2, 3, 4, 5] and returns the sum.\n[1, 2, 3, 4, 5] \n", "label": "def sum_list(lst):\n  total = 0\n  for num in lst:\n    total += num\n  return total\n\nsum_list([1,2,3,4,5])", "predict": "def sum_list(list):\n  sum = 0\n  for num in list:\n    sum += num\n  return sum\n\nlist = [1, 2, 3, 4, 5]\nprint(sum_list(list))"}
{"prompt": "Edit the Python program to sort words in a given string by their length in decreasing alphabetical order.\nmy_string = \"This is the string which is to be sorted\" \n", "label": "my_string = \"This is the string which is to be sorted\"\n  \nwords = my_string.split(' ') # split string into list of words \n  \n# create a list of tuples where the first element \n# is the length of the word and the second element \n# is the word itself  \nwords_with_length = [(len(word), word) for word in words] \n  \n# sort list of tuples according to 1st element of tuple i.e. length of word \nwords_with_length.sort(reverse = True) \n  \n# wl contains list words in decreasing order of their length \n# now use join() to join all words whith \" \" \nsorted_string = \" \".join([i[1] for i in words_with_length]) \n  \n# print sorted string \nprint(sorted_string)", "predict": "my_string = \"This is the string which is to be sorted\"\n\n# split the string into a list of words\nwords = my_string.split()\n\n# sort the list of words by their length in decreasing order\nwords.sort(key=lambda x: (len(x), x), reverse=True)\n\n# join the sorted words back into a string\nsorted_string =''.join(words)\n\nprint(sorted_string)\n# Output: \"sorted is string this which to be string is\""}
{"prompt": "Write a python program to calculate maximum revenue.\nprices = [10, 7, 5, 8, 11, 9] \n", "label": "def max_revenue(prices):\n    diff = [prices[i + 1] - prices[i] for i in range(len(prices) - 1)] \n    max_diff = 0\n    for i in range(len(diff)): \n        for j in range(i + 1, len(diff) + 1): \n            current_diff = sum(diff[i:j]) \n            if current_diff > max_diff: \n                max_diff = current_diff \n \n    return max_diff", "predict": "def calculate_max_revenue(prices):\n    # Initialize max_revenue to 0\n    max_revenue = 0\n    \n    # Iterate over the prices\n    for i in range(len(prices)):\n        # Calculate the revenue\n        revenue = prices[i] * (len(prices) - i)\n        \n        # Update max_revenue if revenue is greater\n        if revenue > max_revenue:\n            max_revenue = revenue\n    \n    # Return the maximum revenue\n    return max_revenue"}
{"prompt": "Write a Python program to print the following output pattern \n", "label": "for i in range(1,6):\n    for j in range(1,i+1):\n        print(j, end=\"\")\n    print()", "predict": "for i in range(1, 6):\n    for j in range(1, i+1):\n        print(\"*\", end=\" \")\n    print()"}
{"prompt": "Develop a loop that prints a python array from the end to the beginning.\narr = [1, 2, 3, 4, 5] \n", "label": "def printArrayReverse(arr): \n    for i in range(len(arr) - 1, -1, -1): \n        print(arr[i], end = \" \")\n\nprintArrayReverse(arr)", "predict": "for i in reversed(arr):\n    print(i)"}
{"prompt": "Given a list of phone numbers, extract only the ones that start with 08 using Python.\n['0834567', '0945678', '07123456', '08901234', '07890123'] \n", "label": "phone_numbers = ['0834567', '0945678', '07123456', '08901234', '07890123']\nresult = [number for number in phone_numbers if number.startswith('08')]\nprint(result)", "predict": "numbers = ['0834567', '0945678', '07123456', '08901234', '07890123']\n\nfiltered_numbers = [num for num in numbers if num.startswith('08')]\n\nprint(filtered_numbers) # Output: ['0834567', '08901234']"}
{"prompt": "Write a Python program that takes a list and a search query as input and returns the indices of all elements in the list which match the search query.\nlist = [\"apple\", \"banana\", \"peach\", \"orange\", \"grape\"]\nsearch_query = \"apple\" \n", "label": "def search_list(list, search_query):\n    result = []\n    for i in range(len(list)):\n        if list[i] == search_query:\n            result.append(i)\n    return result\n\nsearch_list(list, search_query) # returns [0]", "predict": "def search_list(list, search_query):\n    result = []\n    for i in range(len(list)):\n        if list[i] == search_query:\n            result.append(i)\n    return result\n\nlist = [\"apple\", \"banana\", \"peach\", \"orange\", \"grape\"]\nsearch_query = \"apple\"\nprint(search_list(list, search_query))\n# Output: [0]"}
{"prompt": "Write a function in Python that takes an array of integer values and reverses the order of the values.\n[1, 2, 3, 4, 5] \n", "label": "def reverse_array(arr):\n  return arr[::-1]  # Returns a slice of the list in reverse order", "predict": "def reverse_array(arr):\n    return arr[::-1]"}
{"prompt": "Write a function in Python to create a random string of 10 characters. \n", "label": "import random\n\ndef generate_string(string_length):\n    random_characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n    random_string = ''.join(random.choices(random_characters, k=string_length))\n    return random_string\n\nprint(generate_string(10)) # Length: 10", "predict": "import random\nimport string\n\ndef generate_random_string():\n    return ''.join(random.choice(string.ascii_lowercase + string.ascii_uppercase + string.digits) for _ in range(10))"}
{"prompt": "Develop a Tic Tac Toe game in Python. \n", "label": "# define the board\nboard = [\" \" for i in range(9)]\n\ndef print_board():\n    row1 = \"| {} | {} | {} |\".format(board[0], board[1], board[2])\n    row2 = \"| {} | {} | {} |\".format(board[3], board[4], board[5])\n    row3 = \"| {} | {} | {} |\".format(board[6], board[7], board[8])\n\n    print()\n    print(row1)\n    print(row2)\n    print(row3)\n    print()\n\n# define player turn\ndef player_turn(icon):\n\n    if icon == \"X\":\n        number = 1\n    elif icon == \"O\":\n        number = 2\n        \n    print(\"Your turn player {}\".format(number))\n    \n    choice = int(input(\"Enter your move (1-9): \").strip())\n    if board[choice -1] == \" \":\n        board[choice -1] = icon\n    else:\n        print()\n        print(\"That space is taken!\")\n\n# check win\ndef is_victory(icon):\n    if (board[0] == icon and board[1] == icon and board[2] == icon) or \\\n        (board[3] == icon and board[4] == icon and board[5] == icon) or \\\n        (board[6] == icon and board[7] == icon and board[8] == icon) or \\\n        (board[0] == icon and board[3] == icon and board[6] == icon) or \\\n        (board[1] == icon and board[4] == icon and board[7] == icon) or \\\n        (board[2] == icon and board[5] == icon and board[8] == icon) or \\\n        (board[0] == icon and board[4] == icon and board[8] == icon) or \\\n        (board[2] == icon and board[4] == icon and board[6] == icon):\n        return True\n    else:\n        return False\n        \n# define main function\ndef main():\n    print(\"Welcome to Tic Tac Toe!\")\n    print_board()\n    \n    while True:\n        player_turn(\"X\")\n        print_board()\n        if is_victory(\"X\"):\n            print(\"X Wins! Congratulations!\")\n            break\n        elif not \" \" in board:\n            print(\"It's a tie!\")\n            break\n\n        player_turn(\"O\")\n        print_board()\n        if is_victory(\"O\"):\n            print(\"O Wins! Congratulations!\")\n            break\n        elif not \" \" in board:\n            print(\"It's a tie!\")\n            break\n\n\nmain()", "predict": "# define the game board\nboard = [''for x in range(10)]\n\n# define the winning conditions\nwinning_conditions = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n    [1, 4, 7],\n    [2, 5, 8],\n    [3, 6, 9],\n    [1, 5, 9],\n    [3, 5, 7]\n]\n\n# define the players\nplayers = ['X', 'O']\n\n# function to check for a win\ndef check_win(board, player):\n    for condition in winning_conditions:\n        if board[condition[0]] == board[condition[1]] == board[condition[2]] == player:\n            return True\n    return False\n\n# function to check for a draw\ndef check_draw(board):\n    if'' not in board:\n        return True\n    return False\n\n# main game loop\ndef main():\n    # keep track of the current player\n    current_player = 0\n    # game is not over\n    game_over = False\n    # game is not tied\n    tie = False\n\n    # while the game is not over\n    while not game_over:\n        # print the board\n        print_board(board)\n        # get the current player's move\n        move = get_move(current_player)\n        # update the board\n        board[move] = players[current_player]\n        # check for a win\n        if check_win(board, players[current_player]):\n            print_board(board)\n            print(\"Player \" + players[current_player] + \" wins!\")\n            game_over = True\n        # check for a draw\n        elif check_draw(board):\n            print_board(board)\n            print(\"It's a tie!\")\n            game_over = True\n        # switch the current player\n        current_player = (current_player + 1) % 2\n\n# function to print the board\ndef print_board(board):\n    print(\"| \" + board[1] +"}
{"prompt": "Write Python code to merge two sorted lists.\nLists A and B contain the elements [2,4,6] and [3,5,7] respectively. \n", "label": "def merge_sorted_lists(listA, listB): \n    merged_list = []\n    ptrA = 0\n    ptrB = 0\n    while ptrA < len(listA) and ptrB < len(listB): \n        if listA[ptrA] <= listB[ptrB]: \n            merged_list.append(listA[ptrA]) \n            ptrA += 1\n        else: \n            merged_list.append(listB[ptrB]) \n            ptrB += 1\n    while ptrA < len(listA): \n        merged_list.append(listA[ptrA]) \n        ptrA += 1\n    while ptrB < len(listB):\n        merged_list.append(listB[ptrB])\n        ptrB += 1\n    return merged_list", "predict": "def merge_lists(list_a, list_b):\n    merged_list = []\n    i, j = 0, 0\n\n    while i < len(list_a) and j < len(list_b):\n        if list_a[i] < list_b[j]:\n            merged_list.append(list_a[i])\n            i += 1\n        else:\n            merged_list.append(list_b[j])\n            j += 1\n\n    merged_list.extend(list_a[i:])\n    merged_list.extend(list_b[j:])\n\n    return merged_list\n\nlist_a = [2,4,6]\nlist_b = [3,5,7]\n\nmerged_list = merge_lists(list_a, list_b)\nprint(merged_list)"}
{"prompt": "Create a Python program to find the longest common subsequence between two strings.\nstring 1 = \"ABACEDF\"\nstring 2 = \"ABDCF\" \n", "label": "# Program to find the longest common subsequence between two strings \ndef lcs(X, Y): \n    # find the length of the strings \n    m = len(X) \n    n = len(Y) \n\n    # declaring the array for storing the dp values \n    L = [[None]*(n+1) for i in range(m+1)] \n\n    # Following steps to build L[m+1][n+1] in bottom up manner \n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0 or j == 0 : \n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]: \n                L[i][j] = L[i-1][j-1]+1\n            else: \n                L[i][j] = max(L[i-1][j] , L[i][j-1]) \n\n    # L[m][n] contains the length of LCS of X[0..n-1] & Y[0..m-1] \n    return L[m][n] \n\n# Driver program \nX = \"ABACEDF\"\nY = \"ABDCF\"\n\nprint(\"Length of LCS is \", lcs(X, Y))", "predict": "def lcs(string1, string2):\n m = len(string1)\n n = len(string2)\n\n # create a matrix of zeros\n matrix = [[0 for i in range(n+1)] for j in range(m+1)]\n \n # fill the matrix\n for i in range(m+1):\n for j in range(n+1):\n if i == 0 or j == 0:\n matrix[i][j] = 0\n elif string1[i-1] == string2[j-1]:\n matrix[i][j] = matrix[i-1][j-1] + 1\n else:\n matrix[i][j] = max(matrix[i-1][j], matrix[i][j-1])\n \n # find the longest common subsequence\n lcs = \"\"\n i = m\n j = n\n while i > 0 and j > 0:\n if string1[i-1] == string2[j-1]:\n lcs = string1[i-1] + lcs\n i -= 1\n j -= 1\n \n return lcs\n \n# test\nstring1 = \"ABACEDF\"\nstring2 = \"ABDCF\"\nprint(lcs(string1, string2))"}
{"prompt": "Construct a naive bayes classifier using python to classify emails as spam or not spam. \n", "label": "from sklearn.naive_bayes import GaussianNB\n\n# Create a Gaussian Classifier\nmodel = GaussianNB()\n\n# Train the model using the training sets \nmodel.fit(X_train, y_train)\n\n# Predict Output \ny_pred = model.predict(X_test)", "predict": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import GaussianNB\n\n# Load data\ndata = pd.read_csv('data.csv')\n\n# Split data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(data.iloc[:, :-1], data.iloc[:, -1], test_size=0.2)\n\n# Train model\nmodel = GaussianNB()\nmodel.fit(X_train, y_train)\n\n# Test model\ny_pred = model.predict(X_test)\n\n# Evaluate model\nfrom sklearn.metrics import accuracy_score\naccuracy = accuracy_score(y_test, y_pred)\nprint('Model accuracy:', accuracy)"}
{"prompt": "This code performs a series of calculations and plots based on input data. Before running the script, run eval_spectrum.py and calibration.py with appropriate measurements. The script imports necessary modules and", "label": "#! /usr/bin/python2.7\n# -*- coding: utf-8 -*-\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nimport errorvalues as ev # github.com/stefantkeller/errorvalues\n\nfrom VECSELsetup.eval.varycolor import varycolor\nfrom VECSELsetup.eval.gen_functions import load, extract, plotinstructions_write, plotinstructions_read, lut_from_calibfolder, lut_interp_from_calibfolder, thermal_resistance\n\n\ndef main():\n    # before running this script:\n    #   run eval_spectrum.py to provide the .._eval.csv files required for the spectra\n    #   run calibration.py (with appropriate calib measurements)\n    # and don't forget temperature_heatsink (this is not necessary for this script here, but it provides interesting insights for the measurement at hand)\n    logfile = '../24_LL_ev/20150211_sample21-1-d6/spot333um.csv'\n    calib_folder = '../24_LL_ev/20150204_calib_333um_s21-1-d6'\n    \n    \n    #------------------------------------\n    # calibration\n    emis_lut = lut_from_calibfolder(calib_folder,identifiers=['Laser'],ignore_error=False) # emission has constant value solely due to BS, no ND in front of detector etc.\n    pump_lut, refl_lut = lut_interp_from_calibfolder(calib_folder,identifiers=['Pump','Refl'])\n    \n    \n    #------------------------------------\n    # load measurement\n    current_set, current, pump, refl, laser, spectra, meantemp = extract(logfile, identifiers=['Current','Pump','Refl','Laser','Spectra', 'Temperature'])\n    Temperatures = sorted(current_set.keys()) # set temperatures (round numbers like 15.0 or 22.5 etc)\n    T_out = dict((T,meantemp[T].round(1)) for T in Temperatures) # real temperatures for display in plot, including +-uncertainty\n\n\n    #------------------------------------\n    # calculate using calibration\n    absorbed, reflected, emitted, pumped, dissipated = {}, {}, {}, {}, {}\n    for T in Temperatures:\n        reflected[T] = refl_lut(refl[T])\n        pumped[T] = pump_lut(pump[T])\n        absorbed[T] = pumped[T] - reflected[T]\n        emitted[T] = emis_lut(laser[T])\n        dissipated[T] = absorbed[T] - emitted[T]\n\n        \n    #\n    #------------------------------------\n    # invoke instructions for plot and fit\n    # plotting the data can be tricky to reproduce, store the plot properties in a text file and read from there!\n    # (easy to repeat the plot at a later time)\n    # open the instruction file in a text editor, edit the instructions and run this module again; it will use the new instructions\n    instrfile = logfile[:-4]+'_instr.csv'\n    plotinstructions_write(instrfile,Temperatures,calib_folder)\n    \n    #------------------------------------\n    # retrieve instructions\n    instr = plotinstructions_read(instrfile)\n    \n    #\n    #------------------------------------\n    # translate instructions\n    str2lst = lambda s: map(float,s[1:-1].split(','))\n\n    textx = float(instr['textx']) # x coordinate for text; same for first two subplots (absorbed-emitted and absorbed-reflectivity)\n    fontsize = float(instr['fontsize'])\n    title = instr['title']\n    xlim = str2lst(instr['xlim']) # range of x-axis;", "predict": "defines some variables and functions. The code defines the number of elements in the calculation, the number of elements in the output and the number of output elements per element. It then calculates the maximum and minimum values of the data and the number of elements to plot. It also calculates the number of elements to plot per element and the number of elements to plot for the final output.\n\nThe code then defines a function to calculate the number of elements to plot for a given element, and another function to calculate the number of elements to plot for the final output. It also defines a function to calculate the number of elements to plot per element.\n\nThe code then defines a function to calculate the number of elements to plot for a given element and a function to calculate the number of elements to plot for the final output. It also defines a function to calculate the number of elements to plot for the final output.\n\nThe code then defines a function to calculate the number of elements to plot for a given element and a function to calculate the number of elements to plot for the final output. It also defines a function to calculate the number of elements to plot for the final output.\n\nThe code then defines a function to calculate the number of elements to plot for a given element and a function to calculate the number of elements to plot for the final output. It also defines a function to calculate the number of elements to plot for the final output.\n\nThe code then defines a function to calculate the number of elements to plot for a given element and a function to calculate the number of elements to plot for the final output. It also defines a function to calculate the number of elements to plot for the final output.\n\nThe code then defines a function to calculate the number of elements to plot for a given element and a function to calculate the number of elements to plot for the final output. It also defines a function to calculate the number of elements to plot for the final output.\n\nThe code then defines a function to calculate the number of elements to plot for a given element and a function to calculate the number of elements to plot for the final output. It also defines a function to calculate the number of elements to plot for the final output.\n\nThe code then defines a function to calculate the number of elements to plot for a given element and a function to calculate the number of elements to plot for the final output. It also defines a function to calculate the number of elements to plot for the final output.\n\nThe code"}
{"prompt": "How can you return two values from a Python function? \n", "label": "There are multiple ways to return multiple values from a Python function. One way is to use a tuple inside the function and return it. Another way is to use Python's 'return' statement to return multiple values. For example:\n\ndef get_multi_values():\n    value1 = \"ABC\"\n    value2 = 123\n    return value1, value2\n\nvalue1, value2 = get_multi_values()\nprint(value1, value2)", "predict": "def two_values():\n    return 1, 2\n\nresult1, result2 = two_values()\nprint(result1, result2)"}
{"prompt": "Generate a Python program to count the number of pairs with given sum x\nX = 10 \n", "label": "def count_pairs(numbers, x):\n    count = 0\n    i, j = 0, len(numbers) - 1\n    while i < j: \n        sum = numbers[i] + numbers[j]\n        if sum == x: \n            count += 1\n            i += 1\n        elif sum < x: \n            i += 1 \n        else: \n            j -= 1\n    return count", "predict": "def count_pairs(arr, x):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == x:\n                count += 1\n    return count"}
{"prompt": "Create a Celery task in Python to send an email.\nrecipient_name = 'John Smith'\nrecipient_email = 'john@example.com'\nsubject = 'Hello World'\nmessage = 'This is a test email.' \n", "label": "from celery import Celery\nfrom flask_mail import Message\n\napp = Celery('tasks', backend='redis://localhost')\n\n@app.task\ndef send_email(recipient_name, recipient_email, subject, message):\n msg = Message(subject, sender='example@example.com', recipients=[recipient_email])\n msg.body = message\n mail.send(msg)", "predict": "from celery import Celery\nfrom django.core.mail import send_mail\n\napp = Celery('tasks', broker='pyamqp://guest@localhost//')\n\n@app.task\ndef send_email(recipient_name, recipient_email, subject, message):\n    send_mail(subject, message, recipient_email, [recipient_name])\n\nif __name__ == '__main__':\n    send_email.delay(recipient_name, recipient_email, subject, message)"}
{"prompt": "Optimize the following python code using best practices\ndef linear_search(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1 \n", "label": "def linear_search(arr, x):\n    for index, item in enumerate(arr):\n        if item == x:\n            return index\n    return -1", "predict": "def linear_search(arr, x):\n    for i, num in enumerate(arr):\n        if num == x:\n            return i\n    return -1"}
{"prompt": "Create a Python program to find the nth Fibonacci number \n", "label": "def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==0: \n        return 0\n    elif n==1: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)", "predict": "def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \n\nprint(Fibonacci(9))"}
{"prompt": "Write a Python program to identify the largest number in the given list.\n[1000, 506, 299, 620, 35] \n", "label": "max_num = 0 \n\nfor num in lst : \n    if num > max_num : \n        max_num = num \n\nprint(max_num)", "predict": "def largest_num(list):\n  largest = list[0]\n  for num in list:\n    if num > largest:\n      largest = num\n  return largest\n\nlist = [1000, 506, 299, 620, 35]\nlargest_num = largest_num(list)\nprint(largest_num)"}
{"prompt": "Write a Python program to find a substring in a string. \n", "label": "def find_substring(source, substring):\n    '''This function returns the start index of a substring in given string '''\n    if substring not in source:\n        return -1\n    i=0\n    while i < len(source):\n        if source[i] == substring[0]:\n            flag = True\n            for j in range(len(substring)):\n                if substring[j] != source[i+j]:\n                    flag = False\n                    break\n            if flag:\n                return i\n        i += 1\n    return -1", "predict": "def find_substring(string, substring):\n    index = string.find(substring)\n    if index == -1:\n        return \"Substring not found\"\n    else:\n        return \"Substring found at index \" + str(index)"}
{"prompt": "Given a list of numbers, create a Python script to print all the elements greater than 50.\n[2, 60, 5, 4, 78, 32, 99] \n", "label": "nums = [2, 60, 5, 4, 78, 32, 99]\n\nfor num in nums:\n    if num > 50:\n        print(num)", "predict": "def print_greater_than_50(lst):\n    for i in lst:\n        if i > 50:\n            print(i)\n\nprint_greater_than_50([2, 60, 5, 4, 78, 32, 99])"}
{"prompt": "Create a program in Python to sort a given array in ascending order using bubble sort.\n[3,7,4,1] \n", "label": "def bubble_sort(arr): \n    n = len(arr) \n    for i in range(n-1):\n        for j in range(0, n-i-1): \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n\narr = [3,7,4,1]\nbubble_sort(arr) \nprint (\"Sorted array :\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),", "predict": "def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\narr = [3,7,4,1]\nprint(bubble_sort(arr))"}
{"prompt": "Generate a function in Python that takes a number and prints its factors.\nNot applicable \n", "label": "def print_factors(x):\n  \"\"\"\n  This function takes a number and prints its factors\n  \n  :param x: The number whose factors to be printed \n  :return: None\n  \"\"\"\n  \n  print(\"The factors of\",x,\"are:\")\n  for i in range(1, x + 1):\n    if x % i == 0:\n      print(i)\n      \n##\n5. Instruction: Generate a basic HTML form using JavaScript to submit a user's city and the submit the details to the server.\n5. Input: Not applicable\n5. Output: \n<form id=\"myForm\" onsubmit=\"submitForm(event)\">\n  City:<br>\n  <input type=\"text\" name=\"city\"><br>\n  <input type=\"submit\">\n</form>\n\n<script>\nfunction submitForm(event) {\n  event.preventDefault();\n\n  const form = document.getElementById('myForm');\n  const city = form.querySelector('input[name=\"city\"]').value;\n\n  const data = { city: city };\n\n  const options = {\n    method: 'POST',\n    body: JSON.stringify(data),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  fetch('/my-api/submit-form', options)\n    .then(response => response.json())\n    .then(data => {\n      console.log(data);\n    });\n}\n</script>", "predict": "def factors(n):\n for i in range(1, n + 1):\n if n % i == 0:\n print(i)\n\n# Driver code \nn = 20\nfactors(n)"}
{"prompt": "Write a python script to generate an array of random numbers between two specified values.\nmin = 0\nmax = 50 \n", "label": "import random\n\n# Generate an array of random numbers between two specified values\ndef generate_array(min, max):\n array = []\n \n for i in range(min, max):\n  array.append(random.randint(min, max))\n \n return array\n \nmin = 0\nmax = 50\nprint(generate_array(min, max))", "predict": "import random\n\n# generate an array of random numbers\ndef generate_random_array(min, max):\n    random_array = []\n    for i in range(10):\n        random_array.append(random.randint(min, max))\n    return random_array\n\n# print the generated array\nprint(generate_random_array(min, max))"}
{"prompt": "Create a Python program to filter out words containing five characters or less from a list of words.\n[\"Hello\", \"Good\", \"Where\", \"Been\", \"World\", \"House\"] \n", "label": "# Function to filter out words containing five characters or less\ndef filterWords(arr):\n    result = [word for word in arr if len(word) > 5]\n    return result\n\n# Get the input\narr = [\"Hello\", \"Good\", \"Where\", \"Been\", \"World\", \"House\"]\n\n# Call the function\nresult = filterWords(arr)\n\n# Print the result\nprint(\"Filtered list of words:\", result)", "predict": "def filter_words(words):\n    filtered_words = []\n    for word in words:\n        if len(word) > 5:\n            filtered_words.append(word)\n    return filtered_words\n\nwords = [\"Hello\", \"Good\", \"Where\", \"Been\", \"World\", \"House\"]\nfiltered_words = filter_words(words)\nprint(filtered_words)"}
{"prompt": "Create a Python function to identify the number of even numbers present in a given list of numbers.\nlist = [1, 2, 3, 4, 5] \n", "label": "def countEvenNum(list):\n    return len([x for x in list if x % 2 == 0])\n\nlist = [1, 2, 3, 4, 5]\nprint(countEvenNum(list))", "predict": "def count_even_numbers(list):\n    count = 0\n    for num in list:\n        if num % 2 == 0:\n            count += 1\n    return count\n\nlist = [1, 2, 3, 4, 5]\nprint(count_even_numbers(list)) # 2"}
{"prompt": "Write a Python function to generate a random string of length 8 containing alphanumeric characters. \n", "label": "import string\nimport random\n\ndef generate_random_string(length):\n chars = string.ascii_letters + string.digits\n return ''.join(random.choice(chars) for _ in range(length))", "predict": "import random\nimport string\n\ndef random_string(length):\n    letters_and_digits = string.ascii_letters + string.digits\n    return ''.join(random.choice(letters_and_digits) for i in range(length))\n\nprint(random_string(8))"}
{"prompt": "Write a Python program to solve a linear equation system of the form: ax + by = c.\na, b, c = 2, 1, 4 \n", "label": "def solve_linear_equation_system(a, b, c):\n x = (c - b) / a\n y = (c - a*x) / b\n return x, y\n\nx, y = solve_linear_equation_system(a, b, c)\nprint(\"x = {}, y = {}\".format(x, y)) # x = 2.0, y = 2.0", "predict": "def solve_linear_equation(a, b, c):\n    x = (c - b) / a\n    y = (c - a) / b\n    return x, y"}
{"prompt": "This code loads a JSON fixture file, extracts properties from it, creates Property objects from the properties, and saves them to the database. To use this code, you need to create a JSON fixture file with a \"properties\" key containing a list of property objects. Then, run the code with the appropriate command line arguments to specify the fixture file and folder. The saved objects will be printed to the console. \n", "label": "#!/usr/bin/env python\n# coding: utf-8\n\nfrom __future__ import (\n    print_function,\n    unicode_literals,\n    absolute_import\n)\n\nimport argparse\nimport json\nimport os\n\n\ndef get_path():\n    return unicode(os.path.abspath('.'))\n\n\ndef parse_args():\n    _parser = argparse.ArgumentParser()\n    _parser.add_argument('--fixture', type=str, help='fixture file to load', default='properties.json')\n    _parser.add_argument('--fixture_folder', type=str,\n                         default='models/fixtures',\n                         help='where fixtures are stored.'\n                         )\n    return _parser.parse_args()\n\ndef main(base_path):\n    properties_to_save = []\n    args = parse_args()\n    path = os.path.sep.join([base_path,\n                             'app',\n                             args.fixture_folder,\n                             args.fixture])\n    with open(path) as file_:\n        data = json.load(file_)\n    properties = data['properties']\n    for property_ in properties:\n        property_.pop('id')\n        properties_to_save.append(Property(**property_))\n    Property.objects.insert(properties_to_save)\n\n    return len(properties_to_save)\n\n\nif __name__ == '__main__':\n    from app.models.properties import Property\n    base_path = get_path()\n    out = main(base_path)\n    print(\"{} objects saved\".format(out))", "predict": "import json\nimport argparse\nimport os\nimport property_parser\n\ndef load_fixture(filename):\n    \"\"\"Loads a fixture file containing a list of property objects.\n\n    Args:\n        filename (str): The name of the fixture file.\n\n    Returns:\n        List of Property objects.\n    \"\"\"\n    with open(filename) as f:\n        data = json.load(f)\n    return data[\"properties\"]\n\ndef save_properties(properties, db_path):\n    \"\"\"Saves the given properties to the database.\n\n    Args:\n        properties (List of Property objects): The properties to save.\n        db_path (str): The path to the database.\n    \"\"\"\n    property_parser.save_properties(properties, db_path)\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"fixture_file\", help=\"The name of the fixture file.\")\n    parser.add_argument(\"db_path\", help=\"The path to the database.\")\n    args = parser.parse_args()\n\n    properties = load_fixture(args.fixture_file)\n    save_properties(properties, args.db_path)"}
{"prompt": "Create an algorithm in Python to determine the most efficient order of tasks from an array of given tasks.\ntasks = [Task1, Task2, Task3, Task4, Task5] \n", "label": "def most_efficient_order(tasks):\n    \"\"\"\n    This method takes a list of tasks and produces the most efficient order for completing the tasks.\n\n    Parameters\n    ----------\n    tasks: List\n        A list of tasks to be performed.\n\n    Returns\n    -------\n    List\n        An ordered list of tasks representing the most efficient order for completing the tasks.\n    \"\"\"\n    tasks_to_complete = tasks.copy()\n    order = [] \n    while tasks_to_complete:\n        min_time = float(\"inf\")\n        task_index = None\n        for i, task in enumerate(tasks_to_complete):\n            if task.get_time() < min_time:\n                min_time = task.get_time()\n                task_index = i\n        order.append(tasks_to_complete.pop(task_index))\n    return order", "predict": "def most_efficient_order(tasks):\n    task_order = []\n    while len(tasks) > 0:\n        min_task = tasks[0]\n        min_index = 0\n        for i, task in enumerate(tasks):\n            if task.duration < min_task.duration:\n                min_task = task\n                min_index = i\n        task_order.append(tasks.pop(min_index))\n    return task_order"}
{"prompt": "Optimize a given Python script that reverse a string.\ndef reverse_string(string):\n    reversed_string = \"\"\n    for char in string:\n        reversed_string = char + reversed_string\n    return reversed_string \n", "label": "def reverse_string(string):\n    return string[::-1]", "predict": "def reverse_string(string):\n    return string[::-1]"}
{"prompt": "Create an HTML form with a submit button to send information to a Python program. \n", "label": "<form action=\"action.py\" method=\"post\">\n    <input type=\"submit\" value=\"Submit\">\n</form>", "predict": "<form action=\"/submit\" method=\"post\">\n  <input type=\"text\" name=\"name\" placeholder=\"Your Name\">\n  <input type=\"email\" name=\"email\" placeholder=\"Your Email\">\n  <input type=\"submit\" value=\"Submit\">\n</form>"}
{"prompt": "Generate a Python script that contains a function with two parameters and returns the sum of the two parameters.\nNot applicable \n", "label": "def add(x, y): \n \"\"\"Returns the sum of x and y\"\"\"\n return x + y", "predict": "def add(a, b):\n return a + b"}
{"prompt": "Create a Python program to read an array of integers and calculate their sum.\n[1, 3, 5, 7] \n", "label": "def calculate_sum(arr):\n  sum = 0\n\n  for i in arr:\n    sum += i\n\n  return sum\n\ninput_array = [1, 3, 5, 7]\n\nresult = calculate_sum(input_array)\n\nprint(result) # prints 16", "predict": "def sum_array(arr):\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n\narr = [1, 3, 5, 7]\nprint(sum_array(arr))"}
{"prompt": "Create a Python program that multiplies two input numbers and prints the result.\na = 3\nb = 4 \n", "label": "def multiply(a, b):\n    result = a * b\n    print(result)\n\nmultiply(a, b)", "predict": "def multiply(a, b):\n    return a * b\n\nresult = multiply(a, b)\nprint(result)"}
{"prompt": "The code is a Python class called FileSystem that provides methods for saving, deleting, and finding task data. To use this class, import it and create an instance with a parameter dictionary that includes a 'taskDir' key specifying the directory where task data should be stored. Then call the methods on the instance as needed:\n\n- To save task data, call the save_task method with a dictionary containing the data. If the dictionary does not already include an 'id' key, one will be generated and added to the dictionary. The task data will be stored in a file in a subdirectory of the taskDir directory named after the task ID.\n- To delete task data, call the delete_task method with the ID of the task to delete. This will remove the subdirectory containing the task data.\n- To find task data by ID, call the find_by_id method with the ID of the task to find. This will return the task data as a dictionary.\n- To find task data for multiple IDs, call the find_by_ids method with a list of IDs. This will return a list of task data dictionaries.\n- To find all task data, call the all_task_data", "label": "import os\nimport json\nimport logging\nimport fcntl\n\nfrom jsub.util  import safe_mkdir\nfrom jsub.util  import safe_rmdir\nfrom jsub.error import RepoReadError\nfrom jsub.error import TaskNotFoundError\n\nID_FILENAME = 'id'\n\nclass FileSystem(object):\n\tdef __init__(self, param):\n\t\tself.__jsub_dir = os.path.expanduser(param.get('taskDir', '~/jsub/'))\n#\t\tself.__id_file  = os.path.join(self.__jsub_dir, ID_FILENAME)\n\n\t\tself.__logger = logging.getLogger('JSUB')\n\n#\t\tself.__create_repo_dir()\n\n\t\tself.__json_format = param.get('format', 'compact')\n\n\tdef save_task(self, data):\n\t\tif 'id' not in data:\n\t\t\tsafe_mkdir(self.__jsub_dir)\n\t\t\tdata['id'] = self.__new_task_id()\n\t\tsafe_mkdir(os.path.join(self.__jsub_dir,str(data['id']),'taskInfo'))\n\t\ttask_path = os.path.join(self.__jsub_dir, str(data['id']),'taskInfo','repo')\n\n\t\tdata_str = self.__json_str(data)\n\t\twith open(task_path, 'a+') as f:\n\t\t\tfcntl.flock(f, fcntl.LOCK_EX)\n\t\t\tf.seek(0)\n\t\t\tf.truncate()\n\t\t\tf.write(data_str)\n\n\tdef delete_task(self, task_id):\n\t\tsafe_rmdir(os.path.join(self.__jsub_dir,str(task_id)))\n\n\tdef find_by_id(self, task_id):\n\t\treturn self.task_data(task_id)\n\n\tdef find_by_ids(self, task_ids):\n\t\tall_data = []\n\t\tfor task_id in task_ids:\n\t\t\ttry:\n\t\t\t\ttd = self.task_data(task_id)\n\t\t\t\tall_data.append(td)\n\t\t\texcept RepoReadError as e:\n\t\t\t\tself.__logger.debug(e)\n\t\treturn all_data\n\n\tdef all_task_data(self, order='asc'):\n\t\ttask_ids =[d for d in os.listdir(self.__jsub_dir) if os.path.isdir(os.path.join(self.__jsub_dir,d))]\n\t\ttask_ids.sort(key=int, reverse=(order=='desc'))\n\t\treturn self.find_by_ids(task_ids)\n\n\tdef task_data(self, task_id):\n\t\tsafe_mkdir(os.path.join(self.__jsub_dir,str(task_id),'taskInfo'))\n\t\ttask_path = os.path.join(self.__jsub_dir,str(task_id),'taskInfo','repo')\n\t\twith open(task_path, 'a+') as f", "predict": "method. This will return a list of all task data dictionaries.\n\nExample:\n\nimport FileSystem\n\nfs = FileSystem({'taskDir': '/path/to/task/data'})\n\ntask_data = {'name': 'Task 1', 'description': 'This is task 1'}\nfs.save_task(task_data)\n\nfs.delete_task(1)\n\ntask_data = fs.find_by_id(1)\nprint(task_data)\n\nfs.delete_task(2)\n\ntask_data = fs.find_by_ids([1, 2])\nprint(task_data)\n\ntask_data = fs.all_task_data()\nprint(task_data)"}
{"prompt": "Create a visualization in Python using Matplotlib that displays the top 5 most popular programming languages.\nx_values = [\"Python\", \"Java\", \"C++\", \"Javascript\", \"C#\"]\ny_values = [45, 25, 15, 10, 5] \n", "label": "import matplotlib.pyplot as plt\n\nx_values = [\"Python\", \"Java\", \"C++\", \"Javascript\", \"C#\"]\ny_values = [45, 25, 15, 10, 5]\n\nplt.bar(x_values, y_values)\n\nplt.title(\"Popular Programming Languages\")\nplt.ylabel(\"Percentage of Use\")\nplt.xlabel(\"Languages\")\n\nplt.show()", "predict": "import matplotlib.pyplot as plt\n\nx_values = [\"Python\", \"Java\", \"C++\", \"Javascript\", \"C#\"]\ny_values = [45, 25, 15, 10, 5]\n\nplt.bar(x_values, y_values)\nplt.title(\"Top 5 Programming Languages\")\nplt.xlabel(\"Programming Language\")\nplt.ylabel(\"Popularity\")\nplt.show()"}
{"prompt": "Generate a single Python line to create a list that contains elements from another list.\ngiven_list = [1, 2, 3, 4, 5] \n", "label": "new_list = [element for element in given_list]", "predict": "given_list = [1, 2, 3, 4, 5]\n\nresult = [element for element in given_list]"}
{"prompt": "Write a Python function to find the maximum of three numbers.\n3, 4, 5 \n", "label": "def max_of_three(a, b, c):\n    if a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    else:\n        return c\n\nresult = max_of_three(3, 4, 5)\nprint(result)", "predict": "def find_max(a, b, c):\n    if a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    else:\n        return c\n\nprint(find_max(3, 4, 5))"}
{"prompt": "Write a Python program to scrape the table at the following URL and extract the planets information (name, mass, and distance from the sun).\nURL: https://en.wikipedia.org/wiki/List_of_gravitationally_rounded_objects_of_the_Solar_System \n", "label": "import requests\nfrom bs4 import BeautifulSoup\n\npage = requests.get('https://en.wikipedia.org/wiki/List_of_gravitationally_rounded_objects_of_the_Solar_System')\nsoup = BeautifulSoup(page.content, 'lxml')\n\nplanets_table = soup.find('table', class_='wikitable sortable')\n\nplanets = []\nfor row in planets_table.find_all('tr'):\n if row.find('th'):\n continue\n cells = row.find_all('td')\n planets.append({\n 'name': cells[0].text,\n 'mass': cells[2].text,\n 'distance_from_sun': cells[5].text\n })\n\nprint(planets)", "predict": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://en.wikipedia.org/wiki/List_of_gravitationally_rounded_objects_of_the_Solar_System'\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\n\ntable = soup.find('table', {'class': 'wikitable sortable'})\n\nplanets = []\nfor row in table.find_all('tr')[1:]:\n    name = row.find('th').text\n    mass = row.find('td', {'class': 'data-sort-value'}).text\n    distance = row.find('td', {'class': 'data-sort-value'}).text\n    planets.append({'name': name,'mass': mass, 'distance': distance})\n\nprint(planets)"}
{"prompt": "Create a Python dictionary to store data about a student. \n", "label": "student_data = {\n    'name': 'John Smith',\n    'year': 'Freshman',\n    'gpa': 3.25,\n    'courses': ['math', 'english', 'Computer Science', 'Statistics'],\n    'extracurricular': ['Chess Club', 'Student Government', 'Debate Team']\n}", "predict": "student_data = {\n    'name': 'John Doe',\n    'age': 20,\n    'gender':'male',\n    'course': 'Computer Science',\n    'grades': [85, 90, 80]\n}"}
{"prompt": "Write a function in Python to remove duplicate entries from a list.\n[1,2,2,3,3,4] \n", "label": "def removeDuplicates(input): \n    final_list = [] \n    for num in input: \n        if num not in final_list: \n            final_list.append(num) \n    return final_list \n\nlst = [1,2,2,3,3,4]\nprint(removeDuplicates(lst))", "predict": "def remove_duplicates(list):\n    new_list = []\n    for i in list:\n        if i not in new_list:\n            new_list.append(i)\n    return new_list"}
{"prompt": "Given the following array of numbers, write a Python program to find the maximum element.\nnumbers = [1, 43, 78, 3, 92, 42] \n", "label": "#import max from the built-in library\nfrom max import max\n\n#initialize array of numbers\nnumbers = [1, 43, 78, 3, 92, 42]\n\n#find maximum element\nprint(max(numbers))\n\n#output\n92", "predict": "def find_max(numbers):\n    max_element = numbers[0]\n    for num in numbers:\n        if num > max_element:\n            max_element = num\n    return max_element\n\nprint(find_max(numbers))"}
{"prompt": "Create a Python program to compress a given data sequence.\nData sequence: 9, -2, 6, 0, -7 \n", "label": "def compress_sequence(nums):\n    output = []\n    temp = []\n\n    for i in range(1, len(nums)):\n        if nums[i-1] * nums[i] >= 0:\n            temp.append(nums[i-1])\n        else:\n            temp.append(nums[i-1])\n            output.append(temp)\n            temp = []\n    temp.append(nums[i])\n    output.append(temp)\n\n    return output\n\nprint(compress_sequence([9, -2, 6, 0, -7]))", "predict": "def compress(data):\n    result = []\n    for i in range(len(data)-1):\n        if data[i] < data[i+1]:\n            result.append(data[i])\n    result.append(data[-1])\n    return result"}
{"prompt": "Write a function in python to split an given array into two parts with equal sum.\n[1, 2, 3, 4] \n", "label": "def split_equal_sum(arr):\n    n = len(arr) \n    leftsum = 0\n    rightsum = sum(arr)\n    \n    for i in range(n): \n        rightsum -= arr[i]\n        if leftsum == rightsum:\n            return True \n        leftsum += arr[i] \n    return False", "predict": "def split_array(arr):\n    if sum(arr) % 2!= 0:\n        return None\n\n    half_sum = sum(arr) // 2\n    current_sum = 0\n    left = []\n    right = []\n\n    for num in arr:\n        current_sum += num\n        if current_sum == half_sum:\n            left = arr[:len(arr)//2]\n            right = arr[len(arr)//2:]\n            break\n        elif current_sum > half_sum:\n            left = arr[:len(arr)//2]\n            right = arr[len(arr)//2:]\n            break\n\n    return left, right"}
{"prompt": "Create a for loop in Python to calculate the total sum of all elements in the given list.\ndata = [1, 9, 3, 5] \n", "label": "total = 0\nfor element in data:\n    total = total + element\nprint(total)", "predict": "total = 0\nfor i in data:\n    total += i\nprint(total)"}
{"prompt": "Suppose you want to build an autocomplete feature for a text editor, develop a Python program to generate a list of suggestions based on a given prefix.\ndictionnary = [ \"dog\", \"deer\", \"deal\", \"dungeon\", \"dark\", \"dusk\" ]\nprefix = \"d\" \n", "label": "def auto_complete(dictionary, prefix):\n    # list for words with the given prefix\n    prefix_words = []\n\n    # iterate through the dictionary\n    for word in dictionary:\n        # if the word starts with given prefix, \n        # add it to the list\n        if word.startswith(prefix):\n            prefix_words.append(word)\n\n    return prefix_words\n\n\ndictionary = [\"dog\", \"deer\", \"deal\", \"dungeon\", \"dark\", \"dusk\"]\nprefix = \"d\"\n\nprefix_words = auto_complete(dictionary, prefix)\nprint(prefix_words)\n\n# Output:\n# ['dog', 'deer', 'deal', 'dungeon', 'dark', 'dusk']", "predict": "def generate_suggestions(dictionnary, prefix):\n    suggestions = []\n    for word in dictionnary:\n        if word.startswith(prefix):\n            suggestions.append(word)\n    return suggestions"}
{"prompt": "Design a neural network in Python to predict a customer’s annual income based on their age and education level.\nNot applicable \n", "label": "import numpy as np\nimport keras \nfrom keras.layers import Dense\nfrom keras.models import Sequential\n\n# Build model\nmodel = Sequential()\nmodel.add(Dense(64, input_dim = 2, activation = 'relu'))\nmodel.add(Dense( 1))\n\n# Compile the model\nmodel.compile(loss = 'mean_squared_error',\n              optimizer = 'adam')\n\n# Obtain some data - age (years), education level (high school, college, university)\nx_train = np.array([[25, 0], [30, 0], [35, 0], \n\t\t    [40, 0], [45, 1], [45, 2],\n\t\t    [50, 1], [50, 2], [55, 1],\n\t\t    [55, 2], [50, 3], [60, 3]])\n\n# Labels - annual income\ny_train = [15000, 20000, 25000, 30000,\n           40000, 45000, 50000, 60000, \n\t   65000, 70000, 80000, 90000]\n\n# Fit the model\nmodel.fit(x_train, y_train, epochs = 150, batch_size = 2)\n\n# Calculate the predicted annual income\nage = 50\neducation = 3\nannualIncome = model.predict(np.array([[age, education]]))\nprint(annualIncome)\n# output: [[80000]]", "predict": "import tensorflow as tf\n\n# Define the model\nmodel = tf.keras.Sequential([\n tf.keras.layers.Dense(10, activation='relu', input_shape=(2,)),\n tf.keras.layers.Dense(1)\n])\n\n# Compile the model\nmodel.compile(loss='mean_squared_error', optimizer='adam', metrics=['mae'])\n\n# Train the model\nmodel.fit(X_train, y_train, epochs=100, batch_size=32, validation_data=(X_test, y_test))\n\n# Evaluate the model\nmodel.evaluate(X_test, y_test)"}
{"prompt": "Create a python program to classify text documents into two classes: positive and negative.\npositiveText = \"This is a great movie!\"\nnegativeText = \"This movie was terrible\" \n", "label": "import nltk\nfrom nltk.classify import NaiveBayesClassifier \n  \ndef label_words(words): \n    return dict([(word, True) for word in words]) \n\npositive_tokens = nltk.word_tokenize(positiveText) \nnegative_tokens = nltk.word_tokenize(negativeText)\n\npositive_data = [(label_words(positive_tokens), 'positive')] \nnegative_data = [(label_words(negative_tokens), 'negative')]\n \ntrain_data = positive_data + negative_data \nclassifier = NaiveBayesClassifier.train(train_data) \n  \n# classify \nclassifier.classify( \n\tlabel_words(nltk.word_tokenize(\"This movie was ok\")))", "predict": "from sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Create the vectorizer\nvectorizer = CountVectorizer()\n\n# Fit the vectorizer\nX = vectorizer.fit_transform([positiveText, negativeText])\n\n# Create the classifier\nclf = MultinomialNB()\n\n# Train the classifier\nclf.fit(X, [1, 0])\n\n# Predict the class\nprediction = clf.predict(X)\n\n# Print the result\nprint(prediction)"}
{"prompt": "Design a Python program to filter out the odd numbers from a list.\nlist1 = [1, 2, 3, 4, 5, 6] \n", "label": "def filter_odd_numbers(numbers):\n    filtered_list = []\n    for num in numbers:\n        if num % 2 != 0:\n            filtered_list.append(num)\n    return filtered_list\n\nlist1 = [1,2,3,4,5,6]\nfiltered_list = filter_odd_numbers(list1)\nprint(filtered_list)  # [1, 3, 5]", "predict": "def filter_odd(list1):\n    return [x for x in list1 if x % 2 == 0]"}
{"prompt": "Write a Python script to refresh a given table of data in a PostgreSQL database every 5 minutes.\nNot applicable \n", "label": "import psycopg2\nfrom datetime import datetime, timedelta\nimport schedule\nimport time\n\nconn = psycopg2.connect(\n host=\"localhost\", \n database=\"db\", \n user=\"user\", \n password=\"password\"\n)\n\ndef refresh_data():\n cur = conn.cursor()\n query = 'REFRESH TABLE \"TableName\";'\n cur.execute(query)\n conn.commit()\n\n# run the refresh_data job every 5 minutes\nschedule.every(5).minutes.do(refresh_data)\n\nwhile True:\n schedule.run_pending()\n time.sleep(1)", "predict": "import time\nimport psycopg2\n\nconn = psycopg2.connect(database=\"mydb\", user=\"myuser\", password=\"mypassword\", host=\"localhost\", port=\"5432\")\ncur = conn.cursor()\n\nwhile True:\n    cur.execute(\"SELECT * FROM mytable\")\n    rows = cur.fetchall()\n    conn.commit()\n    print(rows)\n    time.sleep(300)"}
{"prompt": "Make the following Python code snippet more efficient.\ndef determine_commission_rate(gross_sales):\n    if gross_sales >= 10000:\n        commission_rate = 0.1\n    elif gross_sales >= 5000 and gross_sales < 10000:\n        commission_rate = 0.07\n    elif gross_sales < 5000:\n        commission_rate = 0.05\n    return commission_rate \n", "label": "def determine_commission_rate(gross_sales):\n    if gross_sales >= 10000:\n        return 0.1\n    elif gross_sales >= 5000:\n        return 0.07\n    else:\n        return 0.05", "predict": "def determine_commission_rate(gross_sales):\n    commission_rate = 0.1 if gross_sales >= 10000 else 0.07 if gross_sales >= 5000 else 0.05\n    return commission_rate"}
{"prompt": "Construct a Python program that computes the area of a circle with the given radius.\nradius = 5 \n", "label": "import math\n\ndef area_circle(radius):\n return math.pi * (radius ** 2)\n\narea = area_circle(radius)\nprint('The area of the circle is %.2f' % area)", "predict": "import math\n\ndef circle_area(radius):\n    return math.pi * radius**2\n\nradius = 5\narea = circle_area(radius)\nprint(area)"}
{"prompt": "Implement a basic version control system in Python that keeps track of changes in the code. \n", "label": "class VersionControl:\n    def __init__(self, lines):\n        self.lines = lines\n        self.mark = 0\n \n    def commit(self):\n        self.mark += 1\n        log_file = open(\"log_file.txt\", \"a+\")\n        log_file.write(str(self.mark) + \": \" + str(self.lines))\n        log_file.close()\n \n    def restore(self):\n        log_file = open(\"log_file.txt\", \"r\")\n        lines = log_file.readlines()\n        to_mark = self.mark-1\n \n        self.lines = lines[to_mark]\n        log_file.close()", "predict": "import os\n\nclass VersionControlSystem:\n    def __init__(self):\n        self.version_files = []\n        self.version_number = 0\n\n    def track_changes(self, file_name):\n        if not os.path.exists(file_name):\n            self.version_files.append(file_name)\n        else:\n            self.version_files.remove(file_name)\n\n    def increment_version_number(self):\n        self.version_number += 1\n\n    def get_version_number(self):\n        return self.version_number\n\n    def get_version_files(self):\n        return self.version_files"}
{"prompt": "Write a Python program to solve the Towers of Hanoi game.\nstarting = [(1, \"A\"), (4, \"A\"), (7, \"A\"), (2, \"A\"), (5, \"A\"), (8, \"A\"), (3, \"A\"), (6, \"A\")] \n", "label": "def hanoi(n, source, spare, target):\n    if n == 1:\n        disk = source.pop(0)\n        print(\"Moving disk {0} from {1} to {2}\".format(disk[0], disk[1], target[1]))\n        target.insert(0, disk)\n    else:\n        hanoi(n-1, source, target, spare)\n        disk = source.pop(0)\n        print(\"Moving disk {0} from {1} to {2}\".format(disk[0], disk[1], target[1]))\n        target.insert(0, disk)\n        hanoi(n-1, spare, source, target)\n\nn = 8\nsource = [(i, \"A\") for i in range(1, n+1)]\ntarget = []\nspare = []\n\nhanoi(n, source, spare, target)", "predict": "def towers_of_hanoi(starting):\n    n = len(starting)\n    def move(n, source, target, auxiliary):\n        if n > 0:\n            move(n - 1, source, auxiliary, target)\n            target.append(source.pop())\n            move(n - 1, auxiliary, target, source)\n    move(n, starting, [], [])\n    return starting"}
{"prompt": "Analyze a dataset of customers and create a classification model in scikit-learn to determine customer churn.\nNot applicable \n", "label": "# Python code\nimport pandas as pd\nimport numpy as np\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\n\n# Load the data set\ndata = pd.read_csv(\"customer_data.csv\")\n\n# Select features\nX = data.drop(['churn'], axis=1)\n\n# Select targets\ny = data['churn']\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Create the model\nmodel = RandomForestClassifier()\n\n# Train the model\nmodel.fit(X_train, y_train)\n\n# Make predictions and measure accuracy\npredictions = model.predict(X_test)\nprint(model.score(X_test, y_test))", "predict": "# Import necessary libraries\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\n# Load the dataset\ndf = pd.read_csv('customer_data.csv')\n\n# Split the dataset into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(df.drop('churn', axis=1), df['churn'], test_size=0.2)\n\n# Create the logistic regression model\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\n# Make predictions on the test set\npredictions = model.predict(X_test)\n\n# Evaluate the model\nscore = model.score(X_test, y_test)\nprint('Model accuracy:', score)"}
{"prompt": "Create a Django application with a model that stores the name, address, and email of a user. \n", "label": "# create Django app\ndjango-admin startproject myapp\n\n# create user model\nfrom django.db import models\n\nclass User(models.Model): \n    name = models.CharField(max_length=100) \n    address = models.CharField(max_length=100)\n    email = models.EmailField(max_length=100)\n\n# migrate models\npython manage.py makemigrations\npython manage.py migrate", "predict": "# models.py\nfrom django.db import models\n\nclass User(models.Model):\n    name = models.CharField(max_length=100)\n    address = models.CharField(max_length=200)\n    email = models.EmailField()\n\n    def __str__(self):\n        return self.name"}
{"prompt": "Create a function in Python to convert a given number into its Roman form.\nnumber = 15 \n", "label": "def int_to_Roman(number): \n  \n    val = [ \n        1000, 900, 500, 400, \n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ] \n    syb = [ \n        \"M\", \"CM\", \"D\", \"CD\", \n        \"C\", \"XC\", \"L\", \"XL\", \n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ] \n    roman_num = '' \n    i = 0\n    while  number > 0:\n        for_val = number // val[i]\n        roman_num += syb[i] * for_val\n        number -= val[i] * for_val\n        i += 1\n    return roman_num", "predict": "def convert_to_roman(number):\n    roman_numerals = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C', 90: 'XC', 50: 'L', 40: 'XL', 10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'}\n    roman_number = ''\n    for key, value in roman_numerals.items():\n        while number >= key:\n            roman_number += value\n            number -= key\n    return roman_number"}
{"prompt": "Create a linked-list in Python that can traverse in both directions. \n", "label": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n        self.prev = None\n\n\nclass DoubleLinkedList:\n    def __init__(self): \n        self.head = None\n \n    def append(self, new_data): \n        new_node = Node(new_data) \n        if self.head is None:\n            self.head =  new_node\n        else: \n            curr_node = self.head\n            while curr_node.next != None:\n                curr_node = curr_node.next\n            curr_node.next = new_node\n            new_node.prev = curr_node\n \n    def prepend(self, new_data):\n        new_node = Node(new_data) \n        if self.head is None: \n            self.head = new_node\n            return\n        new_node.next = self.head\n        self.head.prev = new_node \n        self.head = new_node\n\n    def reverse(self):\n        curr_node = self.head\n        while curr_node:\n            temp = curr_node.next\n            curr_node.next = curr_node.prev\n            curr_node.prev = temp\n            curr_node = curr_node.prev\n        if temp:\n            self.head = temp.prev", "predict": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n        self.prev = None\n\nclass DoublyLinkedList:\n    def __init__(self):\n        self.head = None\n        self.tail = None\n\n    def append(self, data):\n        node = Node(data)\n        if self.head is None:\n            self.head = node\n            self.tail = node\n        else:\n            self.tail.next = node\n            node.prev = self.tail\n            self.tail = node\n\n    def prepend(self, data):\n        node = Node(data)\n        if self.head is None:\n            self.head = node\n            self.tail = node\n        else:\n            self.head.prev = node\n            node.next = self.head\n            self.head = node\n\n    def traverse_forward(self):\n        node = self.head\n        while node is not None:\n            print(node.data)\n            node = node.next\n\n    def traverse_backward(self):\n        node = self.tail\n        while node is not None:\n            print(node.data)\n            node = node.prev"}
{"prompt": "Program a python code to convert Celsius to Fahrenheit. \n", "label": "def celsiusToFahrenheit(temp):\n    return round((temp * 9/5) + 32, 2)", "predict": "def celsius_to_fahrenheit(celsius):\n    return celsius * 9/5 + 32"}
{"prompt": "Create a machine learning algorithm in Python to categorize a dataset of records.\n[\n  {\"label\": \"apple\", \"features\": [1, 1, 0]}, \n  {\"label\": \"banana\", \"features\": [0, 1, 1]}, \n  {\"label\": \"lemon\", \"features\": [0, 0, 1]}, \n  {\"label\": \"orange\", \"features\": [1, 0, 0]}, \n  {\"label\": \"pear\", \"features\": [0, 1, 0]}, \n] \n", "label": "import numpy as np\nfrom sklearn.svm import SVC \n\n# Dataset \ntraining_data = [\n {\"label\": \"apple\", \"features\": [1, 1, 0]}, \n {\"label\": \"banana\", \"features\": [0, 1, 1]}, \n {\"label\": \"lemon\", \"features\": [0, 0, 1]}, \n {\"label\": \"orange\", \"features\": [1, 0, 0]}, \n {\"label\": \"pear\", \"features\": [0, 1, 0]}, \n]\n\n# Feature extraction \nX = []\ny = []\nfor data in training_data:\n X.append(data['features'])\n y.append(data['label'])\n\n# Model \nclf = SVC()\nclf.fit(X, y) \n\n# Prediction \npredict_data = [1, 0, 1]\npredicted_label = clf.predict([predict_data])\n\nprint(predicted_label[0])", "predict": "import pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\n\n# Load data\ndata = [\n  {\"label\": \"apple\", \"features\": [1, 1, 0]}, \n  {\"label\": \"banana\", \"features\": [0, 1, 1]}, \n  {\"label\": \"lemon\", \"features\": [0, 0, 1]}, \n  {\"label\": \"orange\", \"features\": [1, 0, 0]}, \n  {\"label\": \"pear\", \"features\": [0, 1, 0]}, \n]\ndf = pd.DataFrame(data)\n\n# Create and train model\nmodel = DecisionTreeClassifier()\nmodel.fit(df[['features']], df['label'])\n\n# Make predictions\npredictions = model.predict(df[['features']])\nprint(predictions)"}
{"prompt": "Create an application in Python for encryption and decryption of strings. The application should take a string as input, and use a cipher text algorithm of choice to encrypt the string.\nNot applicable \n", "label": "from Crypto.Cipher import AES\n\nkey = b'Sixteen byte key'\n\ndef encrypt(plaintext):\n    cipher = AES.new(key, AES.MODE_ECB)\n    return cipher.encrypt(plaintext)\n\ndef decrypt(ciphertext):\n    cipher = AES.new(key, AES.MODE_ECB)\n    return cipher.decrypt(ciphertext)", "predict": "import string\n\ndef encrypt(text, key):\n  # Convert the string to lowercase\n  text = text.lower()\n\n  # Create a translation table using the key\n  translation_table = str.maketrans(string.ascii_lowercase, key)\n\n  # Use the translation table to encrypt the text\n  encrypted_text = text.translate(translation_table)\n\n  return encrypted_text\n\ndef decrypt(encrypted_text, key):\n  # Create a translation table using the key\n  translation_table = str.maketrans(key, string.ascii_lowercase)\n\n  # Use the translation table to decrypt the text\n  decrypted_text = encrypted_text.translate(translation_table)\n\n  return decrypted_text\n\nif __name__ == '__main__':\n  # Get the input string and key from the user\n  text = input('Enter the string to be encrypted: ')\n  key = input('Enter the key: ')\n\n  # Encrypt the string\n  encrypted_text = encrypt(text, key)\n  print('Encrypted text:', encrypted_text)\n\n  # Decrypt the string\n  decrypted_text = decrypt(encrypted_text, key)\n  print('Decrypted text:', decrypted_text)"}
{"prompt": "Suggest a valid Python syntax to calculate the sum of two variables using lambda\na = 3, b = 4 \n", "label": "sum = lambda a, b : a + b\nprint(sum(3,4))", "predict": "sum = lambda a, b: a + b"}
{"prompt": "Generate code for a Machine Learning model in Python which can recognize handwritten digits from 0 to 9\nNot applicable \n", "label": "# Importing necessary libraries\n\nimport numpy as np\nimport pandas as pd\nfrom tensorflow.keras.datasets import mnist\nfrom tensorflow.keras.layers import Dense, Input, Dropout\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.utils import to_categorical\n\n# Loading data\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n\n# Defining the neural network model\n\n# Input layer\ninputs = Input(shape=(28,28,))\n\n# Hidden layer\nh1 = Dense(64, activation='relu')(inputs)\nh2 = Dropout(0.5)(h1)\n\n# Output layer\noutputs = Dense(10, activation='softmax')(h2)\n\n# Compiling the model\nmodel = Model(inputs=inputs, outputs=outputs)\nmodel.compile(loss='categorical_crossentropy',\n optimizer='adam',\n metrics=['accuracy'])\n\n# Data pre-processing\n\n# Reshape inputs from (60000, 28, 28) to (60000, 784)\nX_train = X_train.reshape(60000, 784)\nX_test = X_test.reshape(10000, 784)\n\n# Normalize pixel values\nX_train = X_train.astype('float32')\nX_train /= 255\nX_test = X_test.astype('float32')\nX_test /= 255\n\n# One-hot encode labels\ny_train = to_categorical(y_train, num_classes=10)\ny_test = to_categorical(y_test, num_classes=10)\n\n# Fitting the model\nmodel.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=5, batch_size=128)", "predict": "import numpy as np\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\n\n# Load the data\n(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()\n\n# Reshape the data\nx_train = x_train.reshape(x_train.shape[0], 28, 28, 1)\nx_test = x_test.reshape(x_test.shape[0], 28, 28, 1)\n\n# Normalize the data\nx_train = x_train.astype('float32')\nx_test = x_test.astype('float32')\nx_train /= 255\nx_test /= 255\n\n# Create the model\nmodel = tf.keras.models.Sequential([\n tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(28, 28, 1)),\n tf.keras.layers.MaxPooling2D(2, 2),\n tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n tf.keras.layers.MaxPooling2D(2,2),\n tf.keras.layers.Flatten(),\n tf.keras.layers.Dense(128, activation='relu'),\n tf.keras.layers.Dense(10, activation='softmax')\n])\n\n# Compile the model\nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n\n# Train the model\nmodel.fit(x_train, y_train, epochs=10)\n\n# Evaluate the model\nmodel.evaluate(x_test, y_test)"}
{"prompt": "Explain the difference between a ``list`` and a ``tuple`` in Python. \n", "label": "The difference between a list and a tuple in Python is that a list is mutable, meaning its contents can be changed, while a tuple is immutable, meaning its contents cannot be changed. A list has square brackets around it, while a tuple has parentheses around it. Lists are used when the data needs to be changed, while tuples are used when the data is fixed and cannot be changed.", "predict": "A list is an ordered, mutable collection of elements. It is defined by square brackets [] and can contain elements of different data types. Lists can be modified after they are created.\n\nA tuple is an ordered, immutable collection of elements. It is defined by parentheses () and can also contain elements of different data types. Tuples cannot be modified after they are created."}
{"prompt": "Generate a Python program to calculate the Fibonacci number at a given position.\nn = 10 \n", "label": "def fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nn = 10\nprint(fibonacci(n))", "predict": "def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \n\nprint(Fibonacci(n))"}
{"prompt": "Create a program in Python to generate a Random Password of length 8 characters, which contains at least one of each character type (lowercase, uppercase, digits, special characters).\nNot applicable \n", "label": "import string\nimport random\n\n# length of password\nlength = 8\n\n# special characters\nspecial_characters = \"!#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\"\n\n# generating password\npassword = random.choice(string.ascii_lowercase)\npassword += random.choice(string.ascii_uppercase)\npassword += random.choice(string.digits)\npassword += random.choice(special_characters)\n\nfor i in range(length):\n   password += random.choice(string.ascii_lowercase + string.ascii_uppercase + string.digits + special_characters)\n\npassword  = ''.join(random.sample(password,len(password)))\n\nprint (\"Password is: \", password)", "predict": "import random\nimport string\n\ndef generate_password():\n  password = ''\n  for i in range(8):\n    char_type = random.randint(0,3)\n    if char_type == 0:\n      password += random.choice(string.ascii_lowercase)\n    elif char_type == 1:\n      password += random.choice(string.ascii_uppercase)\n    elif char_type == 2:\n      password += random.choice(string.digits)\n    else:\n      password += random.choice(string.punctuation)\n  return password\n\nprint(generate_password())"}
{"prompt": "Write a Python program to extract all the words starting with a specific letter\nThe letter is 's' \n", "label": "\"\"\"\nExtract all the words starting with a specific letter\n\"\"\"\n\ndef extract_words(word, letter):\n    words_list = []\n    for w in word.split():\n        if w[0] == letter:\n            words_list.append(w)\n    return words_list\n\nif __name__ == '__main__':\n    words = 'This is a sample sentence to test the program'\n    letter = 's'\n    print(extract_words(words, letter))", "predict": "import re\n\ndef extract_words_starting_with_letter(text, letter):\n    pattern = re.compile(r'\\b' + letter + r'\\w+')\n    return pattern.findall(text)\n\ntext = \"This is a sample sentence to extract words starting with s\"\nletter ='s'\n\nprint(extract_words_starting_with_letter(text, letter))"}
{"prompt": "Implement a hash table in Python that supports insert, delete and retrieve operations. \n", "label": "class HashTable:\n    def __init__(self):\n        self.table = [[] for _ in range(256)]\n \n    def insert(self, key, value):\n        h = hash(key) % 256\n        for i, kv in enumerate(self.table[h]):\n            if kv[0] == key:\n                self.table[h][i] = (key, value)\n                return\n        self.table[h].append((key, value))\n \n    def retrieve(self, key):\n        h = hash(key) % 256\n        for kv in self.table[h]:\n            if kv[0] == key:\n                return kv[1]\n \n    def delete(self, key):\n        h = hash(key) % 256\n        for i, kv in enumerate(self.table[h]):\n            if kv[0] == key:\n                del self.table[h][i]", "predict": "class HashTable:\n    def __init__(self):\n        self.size = 10\n        self.table = [None] * self.size\n\n    def insert(self, key, value):\n        hash_key = self.hash(key)\n        if self.table[hash_key] is None:\n            self.table[hash_key] = [(key, value)]\n        else:\n            for item in self.table[hash_key]:\n                if item[0] == key:\n                    item[1] = value\n                    break\n            else:\n                self.table[hash_key].append((key, value))\n\n    def delete(self, key):\n        hash_key = self.hash(key)\n        if self.table[hash_key] is not None:\n            for item in self.table[hash_key]:\n                if item[0] == key:\n                    self.table[hash_key].remove(item)\n                    break\n\n    def retrieve(self, key):\n        hash_key = self.hash(key)\n        if self.table[hash_key] is not None:\n            for item in self.table[hash_key]:\n                if item[0] == key:\n                    return item[1]\n        return None"}
{"prompt": "Create a search engine in Python to quickly search through a given array.\nArray: ['school', 'hospital', 'bookstore', 'mall', 'theatre'] \n", "label": "# Define the array\narray = ['school', 'hospital', 'bookstore', 'mall', 'theatre']\n\n# Function to perform linear search\ndef linearSearch(search_item):\n    # Loop through array\n    for i in range(len(array)):\n        # If search item is found, return its position\n        if array[i] == search_item:\n            return i\n    # If item is not found, return -1\n    return -1\n\n# Input search item\ns = input(\"Enter the item to be searched: \")\n\n# Search the item\nresult = linearSearch(s)\n\n# Print result\nif result == -1:\n    print(\"Item not found.\")\nelse:\n    print(\"Item is found at position \"+str(result))", "predict": "def search(array, query):\n    results = []\n    for item in array:\n        if query in item:\n            results.append(item)\n    return results"}
{"prompt": "Create a function in Python that prints out the largest value from a given list of numbers.\nlist = [2, 4, 1, 6] \n", "label": "def get_max_value(numbers): \n    return max(numbers)\n\nprint(get_max_value(list))  # 6", "predict": "def print_largest_value(list):\n    largest_value = list[0]\n    for num in list:\n        if num > largest_value:\n            largest_value = num\n    print(largest_value)"}
{"prompt": "Write a python script that takes a list of numbers from 1 to 8  and prints its cubic values.\n[1, 2, 3, 4, 5, 6, 7, 8] \n", "label": "list_numbers = [1, 2, 3, 4, 5, 6, 7, 8]\n\nfor num in list_numbers:\n    print(num**3)", "predict": "for num in [1, 2, 3, 4, 5, 6, 7, 8]:\n    print(num**3)"}
{"prompt": "Create a dictionary in Python with key-value pairs\nKey: \"FirstName\"\nvalue: \"John\" \n", "label": "my_dict = {\n    \"FirstName\": \"John\"\n}", "predict": "my_dict = {\"FirstName\": \"John\"}"}
{"prompt": "Write a Python code to find the number of unique paths from a given source to a destination. \n", "label": "def num_unique_paths(m, n):\n    dp = [[0 for x in range(m)] for y in range(n)] \n  \n    # Count of paths to reach any\n    # cell in first column is 1  \n    for i in range(n): \n        dp[i][0] = 1\n  \n    # Count of paths to reach any\n    # cell in first column is 1  \n    for j in range(m): \n        dp[0][j] = 1\n  \n    # Calculate count of paths for other \n    # cells in bottom-up manner using\n    # the recursive solution \n    for i in range(1, n): \n        for j in range(1, m): \n  \n            # By uncommenting the last\n            # part the code calculatest he total\n            # possible paths if the diagonal \n            # Movements are allowed \n            dp[i][j] = dp[i-1][j] + dp[i][j-1]# + dp[i-1][j-1]\n  \n    return dp[n-1][m-1]", "predict": "def unique_paths(m, n):\n    if m == 1 or n == 1:\n        return 1\n    return unique_paths(m-1, n) + unique_paths(m, n-1)\n\nm = 3\nn = 3\n\nprint(unique_paths(m, n))"}
{"prompt": "Generate a Python program to display a Fibonacci sequence of first n numbers. \n", "label": "def Fibonacci(n):\n    if n==1:\n        return 0\n    elif n==2:\n        return 1\n    else:\n        return Fibonacci(n-1)+Fibonacci(n-2)\n\nn = 10\nfor i in range(1, n):\n    print(Fibonacci(i))", "predict": "def Fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \n\nn = 10\nprint(Fibonacci(n))"}
{"prompt": "This code is a Python script that provides a command-line interface to download subtitles for movies and TV shows. To use it, run the script and provide one or more release paths as arguments. You can also specify the language and subtitle site to use. The available commands are \"download\", \"exist\", \"test\", \"list\",", "label": "#!/usr/bin/env python\n#-*- coding:utf-8 -*-\n########################################################\n# Name: Subtitles Client\n# Site: http://RealGame.co.il\n__author__ = 'RealGame (Tomer Zait)'\n__license__ = 'GPL v3'\n__version__ = '1.0'\n__email__ = 'realgam3@gmail.com'\n########################################################\n\nfrom os import path\nfrom sys import argv\nfrom docopt import docopt\n\nfrom engines.engine import SubtitleSite, SUBTITLE_SITE_LIST, DEFAULTS\n\n\n__doc__ = \\\n\"\"\"\nSubtitles Client\n\nUsage:\n  {prog} download <releases_path>... [--lang=<language> --engine=<subtitle_site>...]\n  {prog} exist <releases_path>... [--lang=<language> --engine=<subtitle_site>...]\n  {prog} test [<engines>...]\n  {prog} (-l | --list)\n  {prog} (-h | --help)\n  {prog} (-v | --version)\n\nOptions:\n  -l --list                 Show subtitles engine list.\n  -h --help                 Show this screen.\n  -v --version              Show version.\n  --lang=<language>         Subtitle language (alpha2) [default: {def_language}].\n  --engine=<subtitle_site>  Subtitle site              [default: {def_engine}].\n\"\"\".format(prog=path.basename(argv[0]),\n           def_language=DEFAULTS['subtitle_language'],\n           def_engine=DEFAULTS['subtitle_engine'])\n\n\ndef download_subtitles(releases, engines=[DEFAULTS['subtitle_engine']], lang=DEFAULTS['subtitle_language']):\n    if releases:\n        for release in releases:\n            for engine in engines:\n                subtitle_release = SubtitleSite.get_file_properties(release)['release_name']\n                print \"[{engine: ^15}] Trying To Download Subtitles For: '{release}'\".format(engine=engine,\n                                                                                             release=subtitle_release)\n                sub_obj = SubtitleSite.class_factory(engine)\n                subtitle_path = sub_obj.download_subtitle(release, lang)\n                if subtitle_path:\n                    print \"{0:17} Download Success: ({file_path}).\\n\".format(\"\", file_path=subtitle_path)\n                else:\n                    print \"{0:17} Subtitles Not Found.\\n\".format(\"\")\n\n\ndef is_subtitles_exist(releases, engines=[DEFAULTS['subtitle_engine']], lang=DEFAULTS['subtitle_language']):\n    if releases:\n        for release in releases:\n            for engine in engines:\n                subtitle_release = SubtitleSite.get_file_properties(release)['release_name']\n\n                sub_obj = SubtitleSite.class_factory(engine)\n                exist_flag = sub_obj.is_subtitle_exist(release, lang)\n                res = \"Exist\"\n                if not exist_flag:\n                    res = \"Does Not \" + res\n                print \"[{engine: ^15}] '{release}' - {res}.\".format(engine=engine,\n                                                                    release=subtitle_release,\n                                                                    res=res)\n\n\ndef test_engines(engines):\n    if not engines:\n        engines = SUBTITLE_SITE_LIST.keys()\n\n    for engine_key in engines:\n        t = SubtitleSite.class_factory(engine_key)\n        t.test_engine()\n\n\ndef main():\n    args = docopt(__doc__, help=True, version='Subtitles Client %s' % __version__)\n\n    if args['download']:\n        download_subtitles(args['<releases_path>'], args['", "predict": "and \"help\". The \"download\" command downloads subtitles for the specified release paths and language, while the \"exist\" command checks if the subtitles exist. The \"test\" command tests if the subtitles can be downloaded. The \"list\" command lists the available subtitles for the specified release paths and language. The \"help\" command displays a list of available commands.\n\n#!/usr/bin/env python\n\n# import the necessary packages\nimport argparse\nimport logging\nimport os\nimport re\nimport requests\nimport sys\nimport urllib.request\nimport urllib.parse\n\n# construct the argument parser and parse the arguments\nap = argparse.ArgumentParser()\nap.add_argument(\"-l\", \"--language\", required=False, help=\"language of the subtitles\")\nap.add_argument(\"-s\", \"--subtitle_site\", required=False, help=\"subtitle site\")\nap.add_argument(\"-c\", \"--confirm\", required=False, help=\"ask for confirmation before downloading\")\nargs = vars(ap.parse_args())\n\n# initialize the logging object\nlogging.basicConfig(\n    filename='subtitles.log',\n    level=logging.DEBUG,\n    format='%(asctime)s %(levelname)s:%(message)s'\n)\n\n# define a function to download subtitles\ndef download_subtitles(release_paths, language, subtitle_site):\n    # create a logger\n    logger = logging.getLogger()\n    # create a downloader\n    downloader = SubtitleDownloader(release_paths, language, subtitle_site)\n    # download the subtitles\n    downloader.download()\n    # print a message\n    logger.info(\"Subtitles downloaded successfully\")\n\n# define a function to check if subtitles exist\ndef check_subtitles(release_paths, language, subtitle_site):\n    # create a logger\n    logger = logging.getLogger()\n    # create a checker\n    checker = SubtitleChecker(release_paths, language, subtitle_site)\n    # check the subtitles\n    checker.check()\n    # print a message\n    logger.info(\"Subtitles exist\")\n"}
{"prompt": "Optimize the following Python program to find the maximum number in a list.\nlist = [9, 2, 5, 6, 4, 1] \n", "label": "def max_num(list):\n  max_num = list[0]\n\n  for num in list:\n    if num > max_num:\n      max_num = num\n  \n  return max_num", "predict": "list = [9, 2, 5, 6, 4, 1]\n\ndef find_max(list):\n    max = list[0]\n    for num in list:\n        if num > max:\n            max = num\n    return max\n\nprint(find_max(list))"}
{"prompt": "Develop an algorithm in Python that takes a list of strings as an input and sorts them alphabetically.\nList of Strings: [\"hello\", \"world\", \"good\", \"morning\", \"programming\"] \n", "label": "def sortAlphabetically(strings): \n    strings.sort() \n    return strings \n\n#Test \nstrings = [\"hello\", \"world\", \"good\", \"morning\", \"programming\"]\nsorted_strings = sortAlphabetically(strings) \nprint(*sorted_strings)", "predict": "def sort_strings(strings):\n    strings.sort()\n    return strings\n\nprint(sort_strings([\"hello\", \"world\", \"good\", \"morning\", \"programming\"]))"}
{"prompt": "Create a Python program to print a formatted table of grades for a given set of students.\nStudents = [\n    {\n    'name': \"John\",\n    'grade': 92\n    },\n    {\n    'name': \"Alice\",\n    'grade': 95\n    },\n    {\n    'name': \"Bob\",\n    'grade': 87\n    }\n] \n", "label": "def print_grade_table(students):\n    max_name_length = max(len(student['name']) for student in students)\n    line_template = \"{{name:<{max_name_length}}}   {{grade}}\".format(max_name_length=max_name_length)\n    header = line_template.format(name='Name', grade='Grade')\n    sep = '-' * len(header)\n    print(header)\n    print(sep)\n    for student in students:\n        print(line_template.format(**student))", "predict": "def print_grades(students):\n    print(\"{:<10}{:<10}\".format(\"Name\", \"Grade\"))\n    for student in students:\n        print(\"{:<10}{:<10}\".format(student['name'], student['grade']))\n\nprint_grades(students)"}
{"prompt": "Design a Python code snippet that deletes all duplicates in a given list of numbers. \n", "label": "def deleteDuplicates(list): \n    final_list = [] \n    for num in list: \n        if num not in final_list: \n            final_list.append(num) \n    return final_list", "predict": "def remove_duplicates(numbers):\n    result = []\n    for number in numbers:\n        if number not in result:\n            result.append(number)\n    return result"}
{"prompt": "Write a Python program to visually summarize the Twitter data.\nTwitter data is a stream of tweets with data fields like : tweet author, date of tweet, text, number of likes, number of retweets. \n", "label": "import matplotlib.pyplot as plt\n\n# Process the Twitter data to extract\n# the relevant data fields\n# ...\n\n# Plot the tweet authors\nplt.xlabel('Tweet Authors')\nplt.ylabel('Number of tweets')\nplt.title('Tweet Author Summary')\nplt.bar(authors, num_tweets)\nplt.show()\n\n# Plot the number of likes\nplt.xlabel('Tweets')\nplt.ylabel('Number of Likes')\nplt.title('Number of Likes Summary')\nplt.bar(tweets, num_likes)\nplt.show()\n\n# Plot the number of retweets\nplt.xlabel('Tweets')\nplt.ylabel('Number of Retweets')\nplt.title('Number of Retweets Summary')\nplt.bar(tweets, num_retweets)\nplt.show()", "predict": "import tweepy\nimport matplotlib.pyplot as plt\n\n# Authenticate to Twitter\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\n\n# Create API object\napi = tweepy.API(auth)\n\n# Fetch tweets\ntweets = api.search(q='python')\n\n# Plotting\nfig, ax = plt.subplots()\nax.bar(tweets[0].created_at, tweets[0].favorite_count)\nax.bar(tweets[1].created_at, tweets[1].favorite_count)\nax.bar(tweets[2].created_at, tweets[2].favorite_count)\nax.bar(tweets[3].created_at, tweets[3].favorite_count)\n\n# Labels\nax.set_xlabel('Date')\nax.set_ylabel('Number of likes')\nax.set_title('Number of likes per tweet')\n\n# Show the plot\nplt.show()"}
{"prompt": "Develop a function in Python that takes in a string of sentences and removes all the punctuations.\n\"This is a sample string!\" \n", "label": "import string\n\ndef remove_punctuations(s):\n    return s.translate(str.maketrans('', '', string.punctuation))\n\nif __name__ == '__main__':\n    sentence = \"This is a sample string!\"\n    print(remove_punctuations(sentence))", "predict": "import string\n\ndef remove_punctuations(string):\n    no_punct = \"\"\n    for char in string:\n        if char not in string.punctuation:\n            no_punct += char\n    return no_punct\n\nstring = \"This is a sample string!\"\nno_punct = remove_punctuations(string)\nprint(no_punct) # Output: This is a sample string"}
{"prompt": "Create a model in Python using Linear Regression that can predict the housing prices given the living area and number of rooms.\ndata = [[2000, 3], [1600, 2.5], [2400, 3.5], [1400, 2], [3000, 4]] \n", "label": "import numpy as np\nfrom sklearn import linear_model\n\nX = np.array([[2000, 3], [1600, 2.5], [2400, 3.5], [1400, 2], [3000, 4]])\ny = np.array([75000, 43000, 59000, 32000, 85000])\n\nmodel = linear_model.LinearRegression()\nmodel.fit(X, y)\n\nprediction = model.predict([[2200, 3]])", "predict": "import numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Define the input data\nX = np.array([[2000, 3], [1600, 2.5], [2400, 3.5], [1400, 2], [3000, 4]])\n\n# Define the target values\ny = np.array([150000, 120000, 180000, 100000, 200000])\n\n# Create and fit the model\nmodel = LinearRegression().fit(X, y)\n\n# Make predictions\npredictions = model.predict(X)\n\n# Print the predictions\nprint(predictions)"}
{"prompt": "Create a loop in Python that prints each item of the following list with a message:\nmy_list = ['A', 'B', 'C', 'D'] \n", "label": "my_list = ['A', 'B', 'C', 'D']\n\nfor item in my_list:\n    print(\"The item is: {}\".format(item))", "predict": "for item in my_list:\n    print(f'The item is {item}')"}
{"prompt": "Develop a regular expression in Python to match all numeric strings. \n", "label": "import re \n  \n# Regular expression to match all numeric strings \npattern = '^[0-9]+$'\n  \n# Input string \nstring = '123456789'\n  \n# Matching a pattern \nresult = re.match(pattern, string) \nif result: \n    print(\"String is a valid numeric string\") \nelse: \n    print(\"String isn't a valid numeric string\")", "predict": "import re\n\npattern = r'\\d+'\n\n# test\ntest_str = '123 abc 456'\nmatch = re.findall(pattern, test_str)\nprint(match) # ['123', '456']"}
{"prompt": "Create a BPMN diagram for FOMDES process 1 using Python and the bpmn_pgv library. The diagram should include clusters for Secretaría Ejecutiva, Presidencia, and Presupuesto/Administración, with specific tasks and edges defined within each cluster. Additionally, include nodes for SIGEFOMDES Administración and SISAC, and connect them to the appropriate clusters using dashed edges. Finally, save the diagram as a PNG file named \"proc4.png\" and a DOT file named \"proc4.dot\". \n", "label": "#!/usr/bin/env python\n#  -*- coding: utf-8 -*-\n\n\"\"\"\nBPMN diagram for FOMDES process 1\n\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import unicode_literals\n\nfrom bpmn_pgv import *\nimport pygraphviz as pgv\n\n__author__ = 'mapologo'\n\nPROCESS_LABEL = \"Liquidación de Créditos\"\n# A graph for FOMDES processes\nF = pgv.AGraph(strict=False, directed=True)\n\nF.graph_attr.update(label=\"\", rankdir=\"TB\", splines=\"ortho\", labelloc=\"b\",\n                    size=\"8, 7.5\", forcelabels=\"true\", ranksep=\"0.25\", fontname=\"Liberation Sans Narrow Condensed\")\nF.node_attr.update(fontname=\"Liberation Sans Narrow Condensed\")\nF.edge_attr.update(fontname=\"Liberation Sans Narrow Condensed\", fontsize=\"10\")\n\nse_cluster = {\"se7\": (\"Recibir el documento protocolizado\", \"start\"),\n              \"se8\": (\"Revisar el documento protocolizado\", \"human\"),\n              \"se9\": (\"\", \"end\")}\n\nse_edges = {\"se7\": {\"se8\": {}},\n            \"se8\": {\"se9\": {\"style\": \"invis\"}}}\n\nSE = add_cluster(F, \"se\", \"Secretaría Ejecutiva\", se_cluster, se_edges)\n\np_cluster = {\"p1\": (\"Firma del cheque\", \"human\"),\n             \"p2\": (\"Entregar cheque a beneficiario\", \"message\")}\n\np_edges = {\"p1\":{\"p2\": {}}}\n\nP = add_cluster(F, \"p\", \"Presidencia\", p_cluster, p_edges)\n\npr_cluster = {\"pr2\": (\"Verificar documentación legal y elaborar certificación de disponibilidad\", \"human\"),\n              \"pr3\": (\"Crear las cuentas por cobrar\", \"human\"),\n              \"pr4\": (\"Generar tablas de amortización\", \"human\"),\n              \"pr5\": (\"Imprimir y firmar orden de liquidación y cheque\", \"human\")}\n\npr_edges = {\"pr2\": {\"pr3\": {}},\n            \"pr3\": {\"pr4\": {}},\n            \"pr4\": {\"pr5\": {}}}\n\nPR = add_cluster(F, \"pr\", \"Presupuesto/Administración\", pr_cluster, pr_edges)\n\nF.add_node(\"SIGEFOMDES Administración\", image=IMAGE_PATH + \"database.png\", shape=\"plaintext\", label=\"\", xlabel=\"SIGEFOMDES Administración\")\nF.add_node(\"SISAC\", image=IMAGE_PATH + \"database.png\", shape=\"plaintext\", label=\"\", xlabel=\"SISAC\")\n\nglobal_edges = {\"Beneficiario\":  {\"se7\": {\"style\": \"dashed\"}},\n                \"se8\": {\"pr2\": {\"style\": \"dashed\"}},\n                \"pr3\": {\"SIGEFOMDES Administración\": {\"style\": \"dashed\"}},\n                \"pr4\": {\"SISAC\": {\"style\": \"dashed\"}},\n                \"pr5\": {\"p1\": {\"style\": \"dashed\"}},\n                \"p2\": {\"se9\": {\"style\": \"dashed\"}, \"Beneficiario\": {\"style\": \"dashed\"}}}\n\nadd_edges(F, global_edges)\n\nF.draw(\"proc4.png\", prog='", "predict": "\nimport bpmn_pgv\n\n# Create the clusters\nsecretaria_ejecutiva = bpmn_pgv.Cluster(\"Secretaría Ejecutiva\", \n    [bpmn_pgv.Task(\"Designar el comité\"),\n     bpmn_pgv.Task(\"Publicar la resolución\"),\n     bpmn_pgv.Task(\"Fijar el plazo para la designación\"),\n     bpmn_pgv.Task(\"Fijar el plazo para la publicación\"),\n     bpmn_pgv.Task(\"Fijar el plazo para la designación de la Secretaría Ejecutiva\")],\n    [bpmn_pgv.Edge(\"Designar el comité\", \"Publicar la resolución\", bpmn_pgv.EdgeType.START_EDGE),\n     bpmn_pgv.Edge(\"Publicar la resolución\", \"Fijar el plazo para la designación\", bpmn_pgv.EdgeType.START_EDGE),\n     bpmn_pgv.Edge(\"Fijar el plazo para la designación\", \"Fijar el plazo para la publicación\", bpmn_pgv.EdgeType.START_EDGE),\n     bpmn_pgv.Edge(\"Fijar el plazo para la publicación\", \"Fijar el plazo para la designación de la Secretaría Ejecutiva\", bpmn_pgv.EdgeType.START_EDGE),\n     bpmn_pgv.Edge(\"Fijar el plazo para la designación de la Secretaría Ejecutiva\", \"Publicar la resolución\", bpmn_pgv.EdgeType.START_EDGE)])\n\npresidencia = bpmn_pgv.Cluster(\"Presidencia\", \n    [bpmn_pgv.Task(\"Publicar la resolución\"),\n     bpmn_pgv.Task(\"Fijar el plazo para la designación de la Secretaría Ejecutiva\")],\n    [bpmn_pgv.Edge(\"Publicar la resolución\", \"Fijar el plazo para la designación de la Secretaría Ejecutiva\", bpmn_pgv.Edge"}
{"prompt": "Write a python function to calculate an exponential series \n", "label": "def exponential_series(x,n):\n    sum = 0\n    for i in range(n+1):\n        sum += x ** i\n    return sum", "predict": "def exponential_series(n):\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result"}
{"prompt": "Design an algorithm in Python to add two large numbers represented as strings.\nThe two numbers: \"111\" and \"1337\" \n", "label": "def add_large_numbers(num1, num2):\n    num1 = num1[::-1]\n    num2 = num2[::-1] \n    carry = 0\n    result = \"\" \n   \n    # Iterate over the length of the length of larger string  \n    for i in range(max(len(num1), len(num2))): \n        if i < len(num1):\n            digit1 = int(num1[i])\n        else:\n            digit1 = 0\n\n        if i < len(num2):\n            digit2 = int(num2[i])\n        else:\n            digit2 = 0\n       \n        sum_total = digit1 + digit2 + carry  \n        carry = sum_total // 10  \n\n        result += str(sum_total % 10) \n\n    # Add remaining carry  \n    if carry > 0:  \n        result += str(carry) \n\n    return result[::-1]\n\nprint(add_large_numbers(\"111\", \"1337\"))\n# Output: 1448", "predict": "def addStrings(num1, num2):\n    # convert strings to integers\n    num1 = int(num1)\n    num2 = int(num2)\n\n    # add the numbers\n    result = num1 + num2\n\n    # convert the result to a string\n    return str(result)\n\nnum1 = \"111\"\nnum2 = \"1337\"\n\nresult = addStrings(num1, num2)\nprint(result)"}
{"prompt": "Design an algorithm in Python, that takes an array and sort it in ascending order.\n[10, 3, 9, 1, 15, 2] \n", "label": "def sort_ascending(array):\n  array.sort()\n  return array\n\nsort_ascending([10, 3, 9, 1, 15, 2])  # [1, 2, 3, 9, 10, 15]", "predict": "def sort_ascending(arr):\n    for i in range(len(arr)):\n        min_index = i\n        for j in range(i+1, len(arr)):\n            if arr[min_index] > arr[j]:\n                min_index = j\n        arr[i], arr[min_index] = arr[min_index], arr[i]\n    return arr"}
{"prompt": "Complete the Python class below so that it can calculate the sum of two integers.\nclass Sum:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y \n", "label": "class Sum:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n        \n    def add(self):\n        return self.x + self.y", "predict": "class Sum:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    \n    def calculate_sum(self):\n        return self.x + self.y"}
{"prompt": "Suggest a completion for the following Python code to check if a given number is an Armstrong number.\ndef is_armstrong_number(num): \n", "label": "def is_armstrong_number(num):\n  order = len(str(num))\n  sum = 0\n  temp = num\n  while temp > 0:\n    digit = temp % 10\n    sum += digit ** order\n    temp //= 10\n  if num == sum:\n    return True  \n  else:\n    return False", "predict": "def is_armstrong_number(num):\n    num_str = str(num)\n    length = len(num_str)\n    sum = 0\n    for digit in num_str:\n        sum += int(digit) ** length\n    return sum == num"}
{"prompt": "Write an algorithm in Python that finds the maximum sum of an array of non-negative integers, given an upper limit value.\nlimit = 10\narray = [1, 3, 5, 4, 2, 6] \n", "label": "def findMaxSum(limit, array):\n    maxSum = 0\n    for i in range(len(array)):\n        currentSum = 0\n        for j in range(i, len(array)):\n            currentSum += array[j]\n            if currentSum <= limit and currentSum > maxSum:\n                maxSum = currentSum\n    return maxSum", "predict": "def findMaxSum(array, limit):\n    maxSum = 0\n    for i in range(len(array)):\n        for j in range(i, len(array)):\n            if sum(array[i:j+1]) <= limit:\n                maxSum = max(maxSum, sum(array[i:j+1]))\n    return maxSum\n\narray = [1, 3, 5, 4, 2, 6]\nlimit = 10\nprint(findMaxSum(array, limit)) # Output: 10"}
{"prompt": "Write a Python program to generate n-grams of the given text with a window size of 3.\nThe quick brown fox jumps over the lazy dog \n", "label": "from collections import Counter\n\n\ndef generate_ngrams(text, window_size):\n    text = text.lower().split(' ')\n    ngrams = []\n    for n in range(window_size, len(text)+1):\n        for i in range(len(text)-n+1):\n            ngrams.append(' '.join(text[i:i+n]))\n    return Counter(ngrams)\n\n\ntext = \"The quick brown fox jumps over the lazy dog\"\nwindow_size = 3\n\nngrams_count = generate_ngrams(text, window_size)\n\nprint('\\nNGRAMS COUNT:',ngrams_count)\n\n# Output\n# NGRAMS COUNT: Counter({'the quick brown': 3,\n#            'quick brown fox': 2,\n#            'over the lazy': 1,\n#            'brown fox jumps': 1,\n#            'fox jumps over': 1,\n#            'the lazy dog': 1,\n#            'jumps over the': 1,\n#            'quick brown fox jumps': 1})", "predict": "def generate_ngrams(text, n):\n    words = text.split()\n    ngrams = []\n    for i in range(len(words)-n+1):\n        ngrams.append(words[i:i+n])\n    return ngrams"}
{"prompt": "Output the Fibonacci sequence as a list of integers in Python \n", "label": "def fibonacci_sequence(n): \n    # Creating list of length n \n    fib_list  = [0]*n \n      \n    # first and second terms \n    fib_list[0] = 0\n    fib_list[1] = 1\n      \n    # Application of the recursive algorithm \n    for i in range(2, n): \n        fib_list[i] = fib_list[i-1] + fib_list[i-2] \n      \n    return fib_list", "predict": "def fibonacci(n):\n  if n <= 0:\n    return []\n  elif n == 1:\n    return [0]\n  elif n == 2:\n    return [0, 1]\n  else:\n    fib_list = [0, 1]\n    for i in range(2, n):\n      fib_list.append(fib_list[i-1] + fib_list[i-2])\n    return fib_list\n\nfibonacci_list = fibonacci(10)\nprint(fibonacci_list)"}
{"prompt": "Develop a machine learning algorithm in Python to identify apples from bananas.\nNo Input \n", "label": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.svm import SVC\n\n# Load data\nX = np.array([[1,2,3], [-1,2,5], [-1,2,7], [5,5,5], [3,3,3], [5,5,7]])\ny = np.array([0, 0, 0, 1, 0, 1])\n\n# Initialize classifier\nclf = SVC(kernel='linear')\n\n# Fit data\nclf.fit(X, y)\n\n# Test classifier\nx_test = np.array([[2,2,2], [4,4,4]])\n\nprediction = clf.predict(x_test)\nprint(prediction)", "predict": "# Import libraries\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.svm import SVC\n\n# Load data\ndata = pd.read_csv('fruits.csv')\n\n# Split data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(data.drop('label', axis=1), data['label'], test_size=0.2, random_state=42)\n\n# Scale data\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)\n\n# Create and train model\nmodel = SVC(kernel='linear')\nmodel.fit(X_train, y_train)\n\n# Test model\nscore = model.score(X_test, y_test)\nprint('Model accuracy:', score)"}
{"prompt": "Write a Python program to convert a list of lists into a dictionary where the first element of each list is the key and the rest of the elements are the values.\nlist1 = [\"apple\", \"red\", \"green\"]\nlist2 = [\"banana\", \"yellow\", \"green\"] \n", "label": "dict1 = {}\nfor lst in [list1, list2]:\n key = lst[0]\n val = lst[1:]\n dict1[key] = val\n\nprint(dict1)\n# Output: {'apple': ['red', 'green'], 'banana': ['yellow', 'green']}", "predict": "list1 = [\"apple\", \"red\", \"green\"]\nlist2 = [\"banana\", \"yellow\", \"green\"]\n\ndictionary = {}\n\nfor item in list1:\n    dictionary[item] = list2\n\nprint(dictionary)\n\n# Output:\n# {'apple': ['banana', 'yellow', 'green'],'red': ['banana', 'yellow', 'green'], 'green': ['banana', 'yellow', 'green']}"}
{"prompt": "Generate a fuzzy search algorithm in Python that can match strings with near similarities. \n", "label": "def find_matches(query, choices, threshold):\n    # Convert query and choices to lower case\n    query, choices = query.lower(), [choice.lower() for choice in choices]\n    # Initialize empty list to store matches\n    matches = []\n    \n    # Loop through each choice\n    for choice in choices:\n        # Calculate Levenshtein distance between query and choice\n        distance = levenshtein_distance(query, choice)\n        # If distance is less than threshold, append choice to matches\n        if distance <= threshold:\n            matches.append(choice)\n    \n    return matches", "predict": "def fuzzy_search(string, query):\n    results = []\n    for i in range(len(string) - len(query) + 1):\n        substring = string[i:i + len(query)]\n        if edit_distance(substring, query) <= 2:\n            results.append(substring)\n    return results"}
{"prompt": "Write a Python program to generate a random password. The program should generate a string of 8 characters (numbers, letters and special characters)\nNo input \n", "label": "import random\nimport string\n\ndef generate_password():\n password_characters = string.ascii_letters + string.digits + string.punctuation\n password = ''.join(random.choice(password_characters) for i in range(8))\n print(password)\n\ngenerate_password()", "predict": "import string\nimport random\n\ndef generate_password():\n    characters = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(characters) for i in range(8))\n    return password\n\nprint(generate_password())"}
{"prompt": "Is it possible to create a HTML page that displays a table of contents from the data stored in a database? \n", "label": "Yes, it is possible to create a HTML page that displays a table of contents from the data stored in a database. You can use HTML, CSS, and JavaScript to create the table and a server-side language such as PHP or Python to query the database and retrieve the relevant data. Once you have the data, you can use JavaScript to render the table within the HTML page.", "predict": "Yes, it is possible to create a HTML page that displays a table of contents from the data stored in a database. The page can be created using a combination of HTML, CSS and JavaScript. First, the data needs to be extracted from the database and stored in an array. Then, using HTML, CSS and JavaScript, the array can be used to create a table of contents."}
{"prompt": "Write a Python program to compute the average salary of people over a given range of numbers from the dataset 'salary.csv'.\nsalary.csv:\nname, salary\nJohn, 1000\nSara, 2000\nAlice, 3000 \n", "label": "import csv\n\ndef get_average_salary(filename):\n  total = 0\n  count = 0\n\n  with open(filename, 'r') as csvfile:\n    csvreader = csv.reader(csvfile)\n    next(csvreader) # skip header\n\n    # loop through the CSV rows\n    for row in csvreader:\n      total += int(row[1])\n      count += 1\n  \n  return total/count\n\naverage_salary = get_average_salary('salary.csv')\nprint('Average Salary: ', average_salary)\n\n# Output: \n# Average Salary: 2000.0", "predict": "import csv\n\nwith open('salary.csv', 'r') as csvfile:\n    csvreader = csv.reader(csvfile)\n    next(csvreader)\n    total_salary = 0\n    num_people = 0\n    for row in csvreader:\n        total_salary += int(row[1])\n        num_people += 1\n    average_salary = total_salary / num_people\n    print('The average salary is:', average_salary)"}
{"prompt": "Implement a supervised learning algorithm in Python for a classification task using the iris dataset.\nNot applicable \n", "label": "# Import necessary libraries\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import confusion_matrix\n\n# Load and explore the data\ndataset = pd.read_csv('iris.csv')\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\n\n# Split the dataset into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n\n# Preprocess the data\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)\n\n# Define the model\nclf = KNeighborsClassifier(n_neighbors=5)\n\n# Fit the model to the training set\nclf.fit(X_train, y_train)\n\n# Make predictions on the test set\ny_pred = clf.predict(X_test)\n\n# Evaluate the model's performance\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)", "predict": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\n# Read in the data\ndata = pd.read_csv('iris.csv')\n\n# Split into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(data.iloc[:, :-1], data.iloc[:, -1], test_size=0.2, random_state=0)\n\n# Create and train the model\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\n# Evaluate the model\nscore = model.score(X_test, y_test)\nprint(f'Model accuracy: {score}')"}
{"prompt": "Improve the following Python code to check if a number is in the range of 1 to 10 (inclusive).\ndef check_number(num):\nif num >= 1 and num <= 10:\n   return True \n", "label": "def check_number(num):\n  if (num > 0 and num < 11):\n    return True\n  else:\n    return False", "predict": "def check_number(num):\nif num >= 1 and num <= 10:\n   return True\nelse:\n   return False"}
{"prompt": "Create an algorithm in Python to generate the first n elements of the Sierpinski triangle.\nn = 6 \n", "label": "def sierpinski_triangle(n): \n    # Drawing lines for first row \n    for i in range(2**n): \n        print(' ', end=\" \") \n    \n    # loop for printing n rows \n    for i in range(1, n+1): \n        # bit pattern for first and \n        # last line of each row \n        for j in range(2**(i-1), 2**i): \n            print('1', end=\" \") \n        print() \n        \n        # inner rows have opposite bit pattern \n        if i > 1: \n            for j in range(2**(i-1)+1, 2**i-1):  \n                print('0', end=\" \") \n            print() \n       \nsierpinski_triangle(6)", "predict": "def sierpinski_triangle(n):\n    # Initialize a list of lists\n    result = [[1]]\n\n    # Generate the triangle\n    for i in range(1, n+1):\n        # Get the previous row\n        prev_row = result[-1]\n        # Create a new row\n        row = []\n        for j in range(len(prev_row)+1):\n            # If the element is at the left end of the row,\n            # add 1\n            if j == 0:\n                row.append(1)\n            # If the element is at the right end of the row,\n            # add 0\n            elif j == len(prev_row):\n                row.append(0)\n            # Otherwise, add the sum of the two adjacent elements\n            else:\n                row.append(prev_row[j-1] + prev_row[j])\n        # Add the new row to the result\n        result.append(row)\n\n    # Print the triangle\n    for row in result:\n        print(row)\n\n# Call the function\nsierpinski_triangle(6)"}
{"prompt": "Write a function in Python to count the number of vowels in a string. \n", "label": "def count_vowels(string):\n    count = 0\n    vowels = set(\"aeiouAEIOU\")\n    for letter in string:\n        if letter in vowels:\n            count += 1\n    return count", "predict": "def count_vowels(string):\n    count = 0\n    vowels = 'aeiou'\n    for char in string:\n        if char in vowels:\n            count += 1\n    return count"}
{"prompt": "Implement a function f() in Python that takes an argument n and prints the multiplication table of n \n", "label": "def f(n):\n    for i in range(1, 11):\n        print(\"{} * {} = {}\".format(n, i, n*i))", "predict": "def f(n):\n    for i in range(1, 11):\n        print(n, 'x', i, '=', n*i)"}
{"prompt": "Write a python program to optimize the given objective function. \n", "label": "from scipy.optimize import minimize \n\ndef obj_func(x):\n    # objective function\n    # ...\n\ndef optimize(): \n    # set up optimization problem\n    x0 = [0.0, 0.0, 0.0] \n    res = minimize(obj_func, x0, method='nelder-mead', options={'xtol': 1e-8, 'disp': True}) \n    return res.x\n\nprint(optimize())", "predict": "import numpy as np\nfrom scipy.optimize import minimize\n\ndef objective(x):\n    return np.sum(x**2)\n\nx0 = np.array([1.3, 0.7, 0.8, 1.9, 1.2])\n\nres = minimize(objective, x0, method='nelder-mead',\n               options={'xtol': 1e-8, 'disp': True})\n\nprint(res.x)"}
{"prompt": "Create a Python generator that returns numbers from a given list.\n[1,3,5,7,9] \n", "label": "def list_generator(input_list):\n    for item in input_list:\n        yield item\n\ngen = list_generator([1,3,5,7,9])\nfor item in gen:\n    print(item)", "predict": "def generate_numbers(numbers):\n    for num in numbers:\n        yield num\n\nlist_of_numbers = [1,3,5,7,9]\ngenerator = generate_numbers(list_of_numbers)\n\nfor number in generator:\n    print(number)"}
{"prompt": "Develop a Python program to create an autocomplete system that predicts words based on the input text. \n", "label": "def autocomplete(input_text):\n    # Generate the word candidates\n    word_candidates = generate_candidates(input_text)\n    # Filter the word candidates \n    filtered_words = filter_candidates(word_candidates)\n    # Rank the words and return the top 5 \n    sorted_words = rank_words(filtered_words)\n    return sorted_words[:5]", "predict": "import json\nimport requests\n\n# Define the API endpoint\napi_url = 'https://example.com/api/autocomplete'\n\n# Define the input text\ninput_text = 'py'\n\n# Make a request to the API\nresponse = requests.get(api_url, params={'text': input_text})\n\n# Get the list of possible words\nwords = json.loads(response.text)\n\n# Print the list of possible words\nprint(words)"}
{"prompt": "Write a Python code snippet to print the unique elements of a given list. \n", "label": "def print_unique(my_list):\n    seen = set()\n    for x in my_list:\n        if x not in seen:\n            print(x)\n            seen.add(x)", "predict": "list = [1, 2, 3, 3, 4, 5, 6, 6]\n\nunique_list = []\n\nfor item in list:\n    if item not in unique_list:\n        unique_list.append(item)\n\nprint(unique_list)"}
{"prompt": "Create a Python program that convert a given string to a list of integers. \n", "label": "def to_int_list(s):\n    return [int(x) for x in s.split(',')]", "predict": "def convert_string_to_list(string):\n    # Convert the string to a list of characters\n    char_list = list(string)\n    \n    # Convert the list of characters to a list of integers\n    int_list = [ord(c) for c in char_list]\n    \n    return int_list"}
{"prompt": "Create a basic blockchain in Python using only the core modules\nNot applicable \n", "label": "import hashlib\nimport json\n\nclass Blockchain:\n\n def __init__(self):\n self.chain = []\n self.transactions = []\n\n def create_block(self, nonce, previous_hash):\n block = {\n 'block_number': len(self.chain) + 1,\n 'timestamp': self._current_timestamp(),\n 'nonce': nonce,\n 'previous_hash': previous_hash\n }\n self.chain.append(block)\n return block\n\n def _current_timestamp(self):\n return round(time.time() * 1000)\n\n def hash_block(self, block):\n string_object = json.dumps(block, sort_keys=True)\n block_string = string_object.encode()\n raw_hash = hashlib.sha256(block_string)\n hex_hash = raw_hash.hexdigest()\n return hex_hash", "predict": "import hashlib\nimport json\nimport time\n\nclass Blockchain(object):\n\n    def __init__(self):\n        self.chain = []\n        self.current_transactions = []\n\n        # Create the genesis block\n        self.new_block(previous_hash=\"0\", proof=100)\n\n    def new_block(self, proof, previous_hash=None):\n        block = {\n            'index': len(self.chain) + 1,\n            'timestamp': time.time(),\n            'transactions': self.current_transactions,\n            'proof': proof,\n            'previous_hash': previous_hash or self.hash(self.chain[-1]),\n        }\n\n        # Reset the current list of transactions\n        self.current_transactions = []\n\n        self.chain.append(block)\n        return block\n\n    def new_transaction(self, sender, recipient, amount):\n        self.current_transactions.append({\n           'sender': sender,\n           'recipient': recipient,\n            'amount': amount,\n        })\n\n        return self.last_block['index'] + 1\n\n    @staticmethod\n    def hash(block):\n        # We must make sure that the Dictionary is Ordered, or we'll have inconsistent hashes\n        block_string = json.dumps(block, sort_keys=True).encode()\n        return hashlib.sha256(block_string).hexdigest()\n\n    @property\n    def last_block(self):\n        return self.chain[-1]\n\n    def proof_of_work(self, last_proof):\n        proof = 0\n        while self.valid_proof(last_proof, proof) is False:\n            proof += 1\n        return proof\n\n    @staticmethod\n    def valid_proof(last_proof, proof):\n        guess = f'{last_proof}{proof}'.encode()\n        guess_hash = hashlib.sha256(guess).hexdigest()\n        return guess_hash[:4] == \"0000\"\n\n# Test code\nblockchain = Blockchain()\nblockchain.new_transaction(\"Alice"}
{"prompt": "Create a Python program to remove all duplicate elements from a list and preserving the original order.\n[1, 3, 3, 5, 5, 7] \n", "label": "# Program to remove duplicate elements\n\ndef remove_duplicates(nums):\n new_list = []\n for num in nums:\n if num not in new_list:\n new_list.append(num)\n \nreturn new_list\n\n# Main program\nnums = [1, 3, 3, 5, 5, 7]\ndedup_nums = remove_duplicates(nums)\nprint(dedup_nums) # [1, 3, 5, 7]", "predict": "def remove_duplicates(lst):\n  seen = set()\n  result = []\n  for item in lst:\n    if item not in seen:\n      seen.add(item)\n      result.append(item)\n  return result\n\nprint(remove_duplicates([1, 3, 3, 5, 5, 7]))"}
{"prompt": "Generate a voltage signal with random noise using a Python script.\nA signal of frequency 250 Hz and amplitude 1 V. \n", "label": "import numpy as np \n\nfreq = 250 \namplitude = 1 \n\nt= np.linspace(0, 1, 1000) \nvoltage_signal = np.sin(2*np.pi*freq*t) + np.random.normal(0, 0.1, 1000)", "predict": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Define parameters\nfrequency = 250\namplitude = 1\n\n# Generate a time array\nt = np.arange(0, 10, 0.001)\n\n# Generate the signal\nsignal = amplitude * np.sin(2 * np.pi * frequency * t)\n\n# Add random noise\nnoise = np.random.normal(0, 0.1, len(t))\nsignal += noise\n\n# Plot the signal\nplt.plot(t, signal)\nplt.xlabel('Time (s)')\nplt.ylabel('Voltage (V)')\nplt.title('Voltage signal with random noise')\nplt.show()"}
{"prompt": "Write a Python function that takes an array of numbers and returns an array with the greatest and smallest values.\n[3, 4, 2, 8, 15, 6] \n", "label": "def min_max(arr):\n  min_val = min(arr)\n  max_val = max(arr)\n  return [min_val, max_val]\n\nresult = min_max([3, 4, 2, 8, 15, 6])\nprint(result)", "predict": "def greatest_smallest(arr):\n    greatest = arr[0]\n    smallest = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > greatest:\n            greatest = arr[i]\n        elif arr[i] < smallest:\n            smallest = arr[i]\n    return [greatest, smallest]\n\nresult = greatest_smallest([3, 4, 2, 8, 15, 6])\nprint(result) # [15, 2]"}
{"prompt": "Construct a Python code that accepts a string as an input and returns the total number of vowels in the string \n", "label": "def count_vowels(string): \n    vowels = \"aeiou\"\n    count = 0\n    for s in string:\n        if s.lower() in vowels:\n            count += 1\n    return count", "predict": "def count_vowels(string):\n    vowels = \"aeiou\"\n    count = 0\n    for char in string:\n        if char in vowels:\n            count += 1\n    return count"}
{"prompt": "Generate a Python program that prints out every number from 0 to 10, but with every number being multiplied by 2.\nNot applicable \n", "label": "for i in range(11):\n print(i*2)", "predict": "for i in range(0, 11):\n print(i * 2)"}
{"prompt": "Create a Python program that takes a string and indicates whether it is a palindrome or not.\n\"racecar\" \n", "label": "def is_palindrome(s):\n  s = s.lower()\n  left = 0\n  right = len(s) - 1\n  \n  while left < right:\n    if s[left] != s[right]:\n      return False\n    left += 1\n    right -= 1\n  return True\n  \nprint(is_palindrome(\"racecar\"))", "predict": "def is_palindrome(string):\n    return string == string[::-1]\n\nstring = \"racecar\"\n\nif is_palindrome(string):\n    print(\"The string is a palindrome\")\nelse:\n    print(\"The string is not a palindrome\")"}
{"prompt": "Generate a machine learning model in Python using scikit-learn for classifying digits in the MNIST dataset.\nmnist dataset \n", "label": "# Import the necessary libraries \nfrom sklearn.datasets import fetch_openml\nimport numpy as np\nfrom sklearn.linear_model import LogisticRegression\n\n#Load the dataset\nmnist = fetch_openml('mnist_784')\n\n# Split into features and labels\nX = mnist.data\ny = mnist.target\n\n# Reshape data to be valid\nX = X.reshape((X.shape[0], -1))\nprint(X.shape, y.shape)\n\n# Create a Logistic Regression classifier \nclf = LogisticRegression()\n\n# Fit the model to the data \nclf.fit(X, y)", "predict": "import numpy as np\nfrom sklearn.datasets import fetch_openml\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neural_network import MLPClassifier\n\n# Fetch MNIST dataset\nX, y = fetch_openml('mnist_784', version=1, return_X_y=True)\n\n# Split dataset into train and test\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Create MLP classifier\nmlp = MLPClassifier(hidden_layer_sizes=(100, 50), max_iter=300, alpha=1e-4,\n                    solver='sgd', verbose=10, tol=1e-4, random_state=1,\n                    learning_rate_init=.1)\n\n# Train the model\nmlp.fit(X_train, y_train)\n\n# Test the model\nscore = mlp.score(X_test, y_test)\nprint('Test accuracy: ', score)"}
{"prompt": "Develop a Python script to generate an RSA public/private key pair.\nNot applicable \n", "label": "from Crypto.PublicKey import RSA\n\ndef generate_key_pair():\n key = RSA.generate(2048)\n pub_key = key.publickey().export_key().decode()\n with open('public.pem', 'w') as file:\n  file.write(pub_key)\n \n priv_key = key.export_key().decode()\n with open('private.pem', 'w') as file:\n  file.write(priv_key)\n\ngenerate_key_pair()", "predict": "import rsa\n\n# Generate a public/private key pair\n(public_key, private_key) = rsa.newkeys(512)\n\n# Print the public and private keys\nprint(\"Public key: \", public_key)\nprint(\"Private key: \", private_key)"}
{"prompt": "Create a web application in Python using Flask that will take user input and generate an HTML page with the input.\nNot applicable \n", "label": "from flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n@app.route('/', methods=['GET', 'POST'])\ndef home():\n    if request.method == 'POST':\n        input_text = request.form.get('input_text')\n        return render_template('result.html', input_text=input_text)\n    return render_template('index.html')\n\nif __name__ == '__main__':\n    app.run(debug=True)\n\n// result.html file\n<html>\n <body>\n  <h1>Your Input: </h1>\n  <p>{{input_text}}</p>\n </body>\n</html>", "predict": "from flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n@app.route('/', methods=['GET', 'POST'])\ndef index():\n if request.method == 'POST':\n user_input = request.form['user_input']\n return render_template('index.html', user_input=user_input)\n else:\n return render_template('index.html')\n\nif __name__ == '__main__':\n app.run(debug=True)"}
{"prompt": "Implement a basic machine learning model in Python that performs binary classification on the given data.\n[\n [0.3, 0.2, 0.6],\n [0.3, 0.1, 0.4],\n [0.2, 0.3, 0.4],\n [0.7, 0.4, 0.2],\n [0.5, 0.2, 0.1]\n] \n", "label": "from sklearn import linear_model\nfrom sklearn.metrics import accuracy_score\n\nX = [[0.3, 0.2, 0.6], [0.3, 0.1, 0.4], [0.2, 0.3, 0.4], [0.7, 0.4, 0.2], [0.5, 0.2, 0.1]]\ny = [1, 0, 0, 1, 0]\n\nmodel = linear_model.LogisticRegression()\nmodel.fit(X, y)\n\ny_pred = model.predict(X)\naccuracy = accuracy_score(y, y_pred)\n\nprint('Model accuracy:', accuracy)", "predict": "import numpy as np\nfrom sklearn.linear_model import LogisticRegression\n\n# Create the data\nX = np.array([[0.3, 0.2, 0.6],\n [0.3, 0.1, 0.4],\n [0.2, 0.3, 0.4],\n [0.7, 0.4, 0.2],\n [0.5, 0.2, 0.1]])\n\n# Create the labels\ny = np.array([1, 0, 0, 1, 0])\n\n# Create and fit the model\nmodel = LogisticRegression()\nmodel.fit(X, y)\n\n# Make predictions\npredictions = model.predict(X)\n\n# Print the predictions\nprint(predictions)"}
{"prompt": "Design a machine learning algorithm in Python that can identify whether a given sentence is an 'affirmative' sentence or a 'negative' sentence. \n", "label": "import re \nimport nltk\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords \n\n# Function to find the negation words\ndef findNegation(sentence):\n    # save all the negation words\n    negationwords = {'not', 'never', 'no', 'none', 'non', 'neither',\n                     'nobody', 'nowhere', 'cannot', 'couldnt', 'shouldnt', \n                     'wouldnt', 'dont', 'didnt', 'hasnt', 'havent', 'isnt', 'arent'} \n    words = nltk.word_tokenize(sentence)\n    neg = []\n    for word in words:\n        if word in negationwords:\n            neg.append(word)\n    return neg\n\n# Function to check if the sentence is affirmative or negative\ndef isAffirmativeorNegative(sentence):\n     negationwords = findNegation(sentence)\n    if len(negationwords)==0: \n        return \"Affirmative\" \n    else: \n        return \"Negative\"    \n\nsentence = \"He always comes late but I dont mind.\"\nresult = isAffirmativeorNegative(sentence) \nprint(result)  # prints Negative", "predict": "import nltk\nfrom nltk.tokenize import word_tokenize\n\ndef classify_sentence(sentence):\n    tokens = word_tokenize(sentence)\n    tagged = nltk.pos_tag(tokens)\n    if any(tag == 'JJ' or tag == 'JJR' or tag == 'JJS' for word, tag in tagged):\n        return 'affirmative'\n    elif any(tag == 'RB' or tag == 'RBR' or tag == 'RBS' for word, tag in tagged):\n        return 'negative'\n    else:\n        return 'neutral'"}
{"prompt": "Create an environment object that can execute and analyze Python code. The environment includes a set of predefined global variables and functions", "label": "import os\nimport ast\nimport traceback\nimport time\nimport sys\nimport types\nimport builtins\nimport collections\nimport astor\nimport weakref\nfrom .jsonify import jsonify, jsonify_print, jsonify_print_expr\nfrom .datalayer import Analysis, Execution, FileEdit\nfrom .router import send\nfrom . import stdlib\n\ndef now():\n    return int(time.time() * 1000)\n\nclass Environment:\n\n    extra_globals = {}\n\n    active = weakref.WeakSet()\n\n    def __init__(self, path):\n        self.path = path\n        self.globals = {\n            \"print\": jsonify_print,\n            \"print_expr\": jsonify_print_expr,\n            \"jsonify\": jsonify,\n            \"jsonify_print\": jsonify_print,\n            \"listdir\": stdlib.listdir,\n            \"__builtins__\": __builtins__,\n            \"FILES\": stdlib.FilesDict(self.path),\n        }\n        for name in stdlib.builtin_names:\n            self.globals[name] = getattr(stdlib, name)\n        self._cached_analysis = {}\n        self.active.add(self)\n\n    predefined_names = set([\"parsed\"])\n\n    def init_commands(self):\n        \"\"\"Returns a list of commands that represent the existing state of the\n        filesystem\"\"\"\n        for path in os.listdir(self.path):\n            if path.endswith(\".json\"):\n                continue\n            if not os.path.isfile(os.path.join(self.path, path)):\n                continue\n            try:\n                with open(os.path.join(self.path, path), \"r\") as fp:\n                    content = fp.read()\n                yield FileEdit(filename=path, content=content, external_edit=True)\n            except UnicodeDecodeError:\n                pass\n\n    def fixup_globals(self):\n        for name, value in self.extra_globals.items():\n            self.globals.setdefault(name, value)\n\n    def execute(self, filename, content, subexpressions=False):\n        print(\"Executing\", filename, subexpressions)\n        self.fixup_globals()\n        stdout = Stdout()\n        compiled = None\n        try:\n            parsed = ast.parse(content, filename, mode='exec')\n            RewriteExprToPrint(subexpressions).walk(parsed)\n            var_inspect = VariableInspector()\n            var_inspect.walk(parsed)\n            print(\"varsed used:\", sorted(var_inspect.used), \"set:\", sorted(var_inspect.set), \"imported:\", var_inspect.imports)\n            compiled = compile(parsed, filename, 'exec')\n        except:\n            stdout.write(traceback.format_exc())\n\n        def displayhook(value):\n            stdout.write_repr(value)\n\n        orig_displayhook = sys.displayhook\n        sys.displayhook = displayhook\n        orig_stdout = sys.stdout\n        orig_stderr = sys.stderr\n        sys.stdout = stdout\n        sys.stderr = stdout\n        self.globals[\"parsed\"] = parsed\n        self.globals[\"ast\"] = ast\n        globals_before = self.globals.copy()\n        start = time.time()\n        try:\n            try:\n                if compiled:\n                    exec(compiled, self.globals)\n            except:\n                traceback.print_exc()\n        finally:\n            end = time.time()\n            sys.dipslayhook = orig_displayhook\n            sys.stdout = orig_stdout\n            sys.stderr = orig_stderr\n        local_scope = dict(\n            (name, value)\n            for name, value in self.globals.items()\n            if name not in globals_before or globals_before[name] is not value)\n        defines = dict(\n            (key, {\n                \"json\": jsonify(local_scope[key]),\n                \"type\": str(type(local_scope[key])),\n            })\n            for key", "predict": ". The environment should also be able to evaluate arithmetic expressions.\n\n# Solution\nimport ast\nimport builtins\n\nclass Environment:\n    def __init__(self):\n        self.globals = {\n            'abs': abs,\n           'min': min,\n           'max': max,\n            'pow': pow,\n            'round': round,\n            'print': print\n        }\n        self.locals = {}\n\n    def execute(self, code):\n        node = ast.parse(code)\n        self.evaluate(node.body)\n\n    def evaluate(self, node):\n        if isinstance(node, ast.Expr):\n            return self.evaluate(node.value)\n        elif isinstance(node, ast.Call):\n            if isinstance(node.func, ast.Name):\n                if node.func.id in self.globals:\n                    return self.globals[node.func.id](*node.args)\n                else:\n                    raise Exception(f'Unknown function: {node.func.id}')\n            else:\n                raise Exception(f'Unknown function call: {node.func}')\n        elif isinstance(node, ast.BinOp):\n            return self.evaluate(node.left) + self.evaluate(node.right)\n        elif isinstance(node, ast.Num):\n            return node.n\n        elif isinstance(node, ast.Name):\n            if node.id in self.locals:\n                return self.locals[node.id]\n            else:\n                raise Exception(f'Unknown variable: {node.id}')\n        else:\n            raise Exception(f'Unknown node type: {type(node)}')\n\nenv = Environment()\nenv.execute('print(abs(3 - 5))') # 2\nenv.execute('print(min(2, 4))') # 2\nenv.execute('print(max(2, 4))') # 4\nenv.execute('print(pow(2, 3))') # 8\nenv.execute('print(round(3.7))') # 4\nenv.execute('print(pow(2, 3))') # 8\nenv."}
{"prompt": "Write a Python class to modify the case of the string\nA String with the text: \"Hello World\" \n", "label": "class StringCaseModifier:\n    def __init__(self, string):\n        self.string = string\n\n    def to_upper(self):\n        return self.string.upper()\n\n    def to_lower(self):\n        return self.string.lower()\n    \n    def to_title(self):\n        return self.string.title()\n\nif __name__ == '__main__':\n    test_string = 'Hello World'\n    string_modifier = StringCaseModifier(test_string)\n    print(string_modifier.to_upper())\n    print(string_modifier.to_lower())\n    print(string_modifier.to_title())", "predict": "class StringModifier:\n    def __init__(self, string):\n        self.string = string\n\n    def to_uppercase(self):\n        return self.string.upper()\n\n    def to_lowercase(self):\n        return self.string.lower()\n\nstring_modifier = StringModifier(\"Hello World\")\nprint(string_modifier.to_uppercase())\nprint(string_modifier.to_lowercase())"}
{"prompt": "Generate a Python program to reverse the order of words in a given string. \n", "label": "def reverse_words(str):\n    return \" \".join(str.split()[::-1])", "predict": "def reverse_words(string):\n    words = string.split(' ')\n    reversed_words = words[::-1]\n    return''.join(reversed_words)"}
{"prompt": "Write a Python program to replace a given string with another string.\nsentence = \"I love walking on the beach\"\nold_word = \"walking\"\nnew_word = \"swimming\" \n", "label": "sentence = \"I love walking on the beach\"\nold_word = \"walking\"\nnew_word = \"swimming\"\n\nnew_sentence = sentence.replace(old_word, new_word)\n\nprint(\"The new sentence is: '{}'\".format(new_sentence))", "predict": "sentence = \"I love swimming on the beach\"\n\n# Replace old_word with new_word\nsentence = sentence.replace(old_word, new_word)\n\nprint(sentence)"}
{"prompt": "Write a python program to merge two lists of integers into one sorted list without using the in-built sort function.\nlist1 = [3, 5, 9, 1, 8];\nlist2 = [4, 11, 7, 2]; \n", "label": "def merge_sort(list1, list2): \n    merged_list = list1 + list2 \n    for i in range(len(merged_list)): \n        min_idx = i           \n        for j in range(i+1, len(merged_list)): \n            if merged_list[min_idx] > merged_list[j]: \n                min_idx = j \n        merged_list[i], merged_list[min_idx] = merged_list[min_idx], merged_list[i] \n    return merged_list \n  \nlist1 = [3, 5, 9, 1, 8] \nlist2 = [4, 11, 7, 2]\n  \nprint(merge_sort(list1, list2))", "predict": "def merge_sorted_lists(list1, list2):\n    merged_list = []\n    i = 0\n    j = 0\n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            merged_list.append(list1[i])\n            i += 1\n        else:\n            merged_list.append(list2[j])\n            j += 1\n    merged_list += list1[i:]\n    merged_list += list2[j:]\n    return merged_list\n\nlist1 = [3, 5, 9, 1, 8]\nlist2 = [4, 11, 7, 2]\n\nprint(merge_sorted_lists(list1, list2))\n# Output: [1, 2, 3, 4, 5, 7, 8, 9, 11]"}
{"prompt": "Create a Python dictionary with three keys named \"Name\", \"Address\" and \"Phone\".\nName = 'John';\nAddress = '212 Smith Street';\nPhone = '732-123-4567'; \n", "label": "info = {\n 'Name':Name,\n 'Address':Address,\n 'Phone':Phone\n}", "predict": "my_dict = {\n 'Name': 'John',\n 'Address': '212 Smith Street',\n 'Phone': '732-123-4567'\n}"}
{"prompt": "Implement a chatbot in Python that can provide customer support in a restaurant.\nrandom_user_question.txt\nWhat meals do you serve? \n", "label": "import random\n\n# list of possible answers\npossible_responses = [\n 'We serve a variety of dishes - from salads to pizzas to steaks!',\n 'Check out our menu for a full list of options',\n 'We serve a variety of dishes, including traditional Italian, Mexican, and American fare. What would you like to try?',\n 'We have a great selection of meals! What kind of dish are you looking for?',\n 'We have a unique selection of meals - have you checked out our menu?'\n]\n\n# read the user's question\nwith open('random_user_question.txt') as user_question:\n    question = user_question.read()\n\n# choose a random response\nresponse = random.choice(possible_responses)\n\n# display the response to the user\nprint(response)", "predict": "import random\n\n# Load the questions and answers\nwith open('random_user_question.txt', 'r') as file:\n    questions = file.readlines()\n\n# Define the bot\ndef chatbot():\n    # Get the user's question\n    user_question = input('What meals do you serve? ')\n\n    # Check if the user's question is in the list of questions\n    if user_question in questions:\n        # Print the bot's answer\n        print(random.choice(questions[questions.index(user_question)+1:]))\n    else:\n        print('I do not know the answer to that question.')\n\n# Run the chatbot\nchatbot()"}
{"prompt": "Design a Python program to simulate a simple ATM machine. \n", "label": "# account class with the necessary functions \nclass Account:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, amount):\n        self.balance += amount\n\n    def withdrawal(self, amount):\n        self.balance -= amount\n\n# ATM class with the necessary functions\nclass ATM:\n    def __init__(self):\n        self.accounts = []\n\n    def createAccount(self, name, balance):\n        account = Account(name, balance)\n        self.accounts.append(account)\n\n    def deposit(self, name, amount):\n        for account in self.accounts:\n            if account.name == name:\n                account.deposit(amount)\n\n    def withdrawal(self, name, amount):\n        for account in self.accounts:\n            if account.name == name:\n                account.withdrawal(amount)\n\n    def printBalance(self, name):\n        for account in self.accounts:\n            if account.name == name:\n                print(name, \" Balance: \", account.balance)", "predict": "class ATM:\n    def __init__(self, balance):\n        self.balance = balance\n\n    def withdraw(self, amount):\n        if amount > self.balance:\n            return \"Insufficient funds\"\n        else:\n            self.balance -= amount\n            return \"Withdrawal successful\"\n\n    def deposit(self, amount):\n        self.balance += amount\n        return \"Deposit successful\""}
{"prompt": "Create a program in Python which will take in a list of strings, and print out the longest string in the list.\n['foo', 'test', 'longstring', 'bar'] \n", "label": "def longest_string(str_list): \n    longest_str = '' \n    for str in str_list: \n        if len(str) > len(longest_str): \n            longest_str = str \n  \n    return longest_str \n\nstring_list = ['foo', 'test', 'longstring', 'bar'] \nlong_string = longest_string(string_list) \n\nprint(long_string)", "predict": "def longest_string(strings):\n    longest = \"\"\n    for string in strings:\n        if len(string) > len(longest):\n            longest = string\n    return longest\n\nlongest = longest_string(['foo', 'test', 'longstring', 'bar'])\nprint(longest)"}
{"prompt": "Create a program in Python that will find the smallest number in a list of numbers.\n[5, 4, 12, 17, 9] \n", "label": "def find_smallest_number(numbers):\n    smallest = numbers[0] \n    for num in numbers:\n        if num < smallest:\n            smallest = num\n    return smallest\n\nprint(find_smallest_number([5, 4, 12, 17, 9]))", "predict": "def find_smallest(numbers):\n    smallest = numbers[0]\n    for num in numbers:\n        if num < smallest:\n            smallest = num\n    return smallest\n\nnumbers = [5, 4, 12, 17, 9]\nprint(find_smallest(numbers))"}
{"prompt": "Generate a Python code to compute the moving average of time-series data points.\nwindow = 3\ntime_series = [3, 5, 7, 2, 8, 10, 11, 65, 72, 81, 99, 100, 150] \n", "label": "def moving_average(data_points, window):\n     moving_average = []\n     for index in range(len(data_points)):\n       start = 0 if index-window+1 < 0 else index-window+1\n       window_data = data_points[start:index+1]\n       average = sum(window_data)/len(window_data)\n       moving_average.append(average)\n \n     return moving_average\n \nwindow = 3\ntime_series = [3, 5, 7, 2, 8, 10, 11, 65, 72, 81, 99, 100, 150]\nmoving_average = moving_average(time_series, window)\nprint(moving_average)", "predict": "def moving_average(window, time_series):\n    result = []\n    for i in range(len(time_series) - window + 1):\n        result.append(sum(time_series[i:i+window])/window)\n    return result"}
{"prompt": "Create a Python program to filter an array by a given criteria.\ncriteria = x % 5 == 0\narray = [1, 2, 5, 10, 15, 20, 25, 30] \n", "label": "# Function to filter an array by a given criteria\ndef filter_array(array, criteria):\n # Create an empty list\n filtered_array = []\n # Iterate through the array\n for value in array:\n  # Check if it matches the criteria\n  if criteria(value):\n   # If it matches, add it to the list\n   filtered_array.append(value)\n\n # Return the filtered array\n return filtered_array\n\n# Input criteria\ndef criteria(x):\n return x % 5 == 0\n\nresult = filter_array(array, criteria)\nprint(result) # Outputs [5, 10, 15, 20, 25, 30]", "predict": "def filter_array(criteria, array):\n    return [x for x in array if criteria(x)]"}
{"prompt": "Create a Python function to find the maximum number from a list of non-negative integers.\nlist = [1, 3, 12, 5, 8, 10] \n", "label": "def find_max(list): \n  max_num = 0\n  for i in list: \n    if i > max_num: \n      max_num = i\n  \n  return max_num\n\nlist = [1, 3, 12, 5, 8, 10]\nmax_num = find_max(list)\nprint(\"Maximum number is:\", max_num)", "predict": "def find_max(list):\n    max = 0\n    for i in list:\n        if i > max:\n            max = i\n    return max"}
{"prompt": "Write a Python function that takes a list of strings and returns the concatenation of all the elements with a separator/delimiter.\nstrings = [\"Sample\",\"Text\",\"Hello\"] \n", "label": "def concatenate_strings(strings, separator):\n return separator.join(strings)", "predict": "def concat_list(strings):\n    return''.join(strings)\n\nconcat_list(strings) # 'Sample Text Hello'"}
{"prompt": "Come up with a code in Python to find the union of two lists.\nList 1: [1, 2, 3, 4, 5]\nList 2: [3, 4, 5, 6, 7] \n", "label": "list1 = [1, 2, 3, 4, 5]\nlist2 = [3, 4, 5, 6, 7]\n\ndef unionList(list1, list2):\n    return set(list1 + list2)\n\nresult = unionList(list1, list2)\nprint(result)", "predict": "def union(list1, list2):\n    return list(set(list1) | set(list2))\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [3, 4, 5, 6, 7]\n\nprint(union(list1, list2))"}
{"prompt": "Construct a python dictionary containing student names and marks as key-value pairs. \n", "label": "student_marks = { \n    \"John\" : 90, \n    \"Levi\" : 85, \n    \"Jill\" : 95, \n    \"Sara\" : 75\n}", "predict": "students = {\n    \"John\": 90,\n    \"Mary\": 85,\n    \"Jane\": 92,\n    \"Bob\": 78,\n    \"Tom\": 88\n}"}
{"prompt": "Write a code snippet for a simple linear regression model in Python.\nNot applicable \n", "label": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn import linear_model\n\n# Read data from CSV\ndata = pd.read_csv('data.csv')\n\n# Set X and Y\nX = data['X']\nY = data['Y']\n\n# Create linear regression model\nmodel = linear_model.LinearRegression()\n\n# Train the model\nmodel.fit(X, Y)\n\n# Make predictions\nY_pred = model.predict(X)\n\n# Visualize the results\nplt.scatter(X, Y)\nplt.plot(X, Y_pred, color='red')\nplt.show()", "predict": "import numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Create data\nX = np.array([1, 2, 3, 4, 5]).reshape(-1, 1)\ny = np.array([2, 4, 6, 8, 10])\n\n# Train model\nmodel = LinearRegression()\nmodel.fit(X, y)\n\n# Make predictions\npredictions = model.predict(X)\n\n# Evaluate model\nscore = model.score(X, y)\n\n# Print results\nprint('Model score:', score)\nprint('Predictions:', predictions)"}
{"prompt": "Write code in Python to implement a linked list using classes. \n", "label": "class Node:\n    \"\"\"Node class to represent the node in a linked list\"\"\"\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\n\nclass LinkedList:\n    \"\"\"LinkedList class to represent the entire linked list\"\"\"\n    def __init__(self):\n        self.head = None\n    \n    def print_list(self):\n        node = self.head\n        while(node):\n            print(node.data)\n            node = node.next\n\n# Creating a linked list \nlinked_list = LinkedList()\n\n# Creating the nodes\nnode1 = Node(1)\nnode2 = Node(2)\nnode3 = Node(3)\n\n# Linking the nodes\nlinked_list.head = node1\nnode1.next = node2\nnode2.next = node3\n\n# Printing the linked list\nlinked_list.print_list()", "predict": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def add_node(self, data):\n        new_node = Node(data)\n        if self.head is None:\n            self.head = new_node\n        else:\n            current = self.head\n            while current.next is not None:\n                current = current.next\n            current.next = new_node"}
{"prompt": "Construct an XML document using Python which contains the following data.\nItem1, Item2, Item3 \n", "label": "import xml.etree.ElementTree as ET\n\n# creating the root element\ndata = ET.Element('data')\n\nitems = ['Item1', 'Item2', 'Item3']\n\n# loop over items\nfor item in items:\n    # creating sub elements\n    item_element = ET.SubElement(data, 'item')\n\n    # assign the value for the sub elements\n    item_element.text = item\n\n# write the XML Tree\ntree = ET.ElementTree(data)\ntree.write('data.xml')", "predict": "import xml.etree.ElementTree as ET\n\nroot = ET.Element(\"root\")\nitems = ET.SubElement(root, \"items\")\n\nitem1 = ET.SubElement(items, \"item1\")\nitem2 = ET.SubElement(items, \"item2\")\nitem3 = ET.SubElement(items, \"item3\")\n\ntree = ET.ElementTree(root)\ntree.write(\"data.xml\")"}
{"prompt": "Make a Python program generating numbers \n", "label": "def generate_numbers():\n    numbers = []\n    for i in range(10):\n        numbers.append(random.randint(0,10))\n    return numbers", "predict": "for i in range(1, 11):\n    print(i)"}
{"prompt": "Convert this sql query into a python program\nSELECT * FROM orders\nWHERE YEAR(order_date) = 2020 \n", "label": "import datetime, pyodbc\n\n# Establish a connection to the database\nconn = pyodbc.connect(\"<connection details>\")\ncursor = conn.cursor()\n\n# Get the year of the order date\nsql = \"SELECT * FROM orders\"\nquery_date = datetime.date.today().year\nwhere_clause = \"WHERE YEAR(order_date) = ?\"\n\n# Execute the query\ncursor.execute(sql + \" \" + where_clause, query_date)\nresults = cursor.fetchall()\n\n# Output the results\nfor result in results:\n    print(result)", "predict": "import pandas as pd\n\norders = pd.read_sql(\"SELECT * FROM orders WHERE YEAR(order_date) = 2020\", conn)"}
{"prompt": "This code loads a configuration file and libraries, imports necessary modules, defines two custom colormaps, loads a data file, performs cubic spline interpolation", "label": "# -*- coding: utf-8 -*-\n\nimport os, sys\nprint(\"CWD: \" + os.getcwd() )\n\n# Load configuration file before pyplot\nconfig_path = os.path.abspath('../matplotlib/')\nsys.path.append(config_path)\nimport configuration as config\n\n# Library path\nlib_path = os.path.abspath('../../lib')\nsys.path.append(lib_path)\nimport framemanager_python\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport scipy.interpolate\n\n\n# Color map\n# Define \"bds_highcontrast\" color map by Britton Smith <brittonsmith@gmail.com> from http://yt-project.org/ \ncdict = {'red':   ((0.0, 80/256., 80/256.),\n                   (0.2, 0.0, 0.0),\n                   (0.4, 0.0, 0.0),\n                   (0.6, 256/256., 256/256.),\n                   (0.95, 256/256., 256/256.),\n                   (1.0, 150/256., 150/256.)),\n         'green': ((0.0, 0/256., 0/256.),\n                   (0.2, 0/256., 0/256.),\n                   (0.4, 130/256., 130/256.),\n                   (0.6, 256/256., 256/256.),\n                   (1.0, 0.0, 0.0)),\n         'blue':  ((0.0, 80/256., 80/256.),\n                   (0.2, 220/256., 220/256.),\n                   (0.4, 0.0, 0.0),\n                   (0.6, 20/256., 20/256.),\n                   (1.0, 0.0, 0.0))}\n\nplt.register_cmap(name='bds_highcontrast', data=cdict) \n\n# Define YELLOW_RED colormap: each row consists of (x, y0, y1) where the x must increase from 0 to 1\n#row i:    x  y0  y1\n#               /\n#              /\n#row i+1:  x  y0  y1\ncdict = {'red':   ((0.0, 0.9, 0.9),\n                   (1.0, 0.9, 0.9)),\n         'green': ((0.0, 0.9, 0.9),\n                   (1.0, 0.0, 0.0)),\n         'blue':  ((0.0, 0.0, 0.0),\n                   (1.0, 0.0, 0.0))}\nplt.register_cmap(name='YELLOW_RED', data=cdict) \n#cmap=plt.get_cmap('YELLOW_RED')\n#cmap=plt.get_cmap('autumn')\n#cmap=plt.get_cmap('gist_heat')\n#cmap=plt.get_cmap('Spectral_r')\n#cmap.set_under([0.0, 0.0, 0.0])\n\n\n\n# Load profile\nprofileName = os.path.abspath(\"foam_ball_short.dsa\")\nframeID = 230\n\nframeManager = framemanager_python.FrameManagerWrapper()\nframeManager.load_profile(profileName);\nnumTSFrames = frameManager.get_tsframe_count();\n\nmatrixID = 1\n\n# Load single frame\ntsframe = np", "predict": ", and generates a heatmap with a custom colorbar. The code also saves the resulting image. \n\nimport os\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.colors as colors\nimport scipy.interpolate\n\n# Load configuration file\nconf = np.load(os.path.join('config', 'config.npz'))\n\n# Load libraries\nimport matplotlib.cm as cm\n\n# Import necessary modules\nfrom matplotlib import rcParams\nfrom matplotlib.colors import LinearSegmentedColormap\nfrom matplotlib.colors import Normalize\nfrom matplotlib.backends.backend_pdf import PdfPages\n\n# Define custom colormaps\ncmap_blue = colors.LinearSegmentedColormap.from_list(\"cmap_blue\",\n                                                  [\"#888888\", \"#0000FF\", \"#0000FF\"])\ncmap_green = colors.LinearSegmentedColormap.from_list(\"cmap_green\",\n                                                  [\"#888888\", \"#00FF00\", \"#00FF00\"])\n\n# Load data\ndata = np.load(os.path.join('data', 'data.npz'))\n\n# Interpolate data\nx = data['x']\ny = data['y']\nz = data['z']\nxi = np.linspace(x.min(), x.max(), 1000)\nyi = np.linspace(y.min(), y.max(), 1000)\nxi, yi = np.meshgrid(xi, yi)\n\nz_interp = scipy.interpolate.griddata((x, y), z, (xi, yi), method='cubic')\n\n# Plot heatmap\nfig, ax = plt.subplots(figsize=(6, 6))\nax.pcolormesh(xi, yi, z_interp, cmap=cmap_blue, vmin=z_interp.min(), vmax=z_interp.max())\n\n# Generate colorbar\ncbar = plt.colorbar(ax.pcolormesh, cmap=cmap_blue, orientation='vertical')\ncbar"}
{"prompt": "Write a function to generate a set of random numbers in Python. \n", "label": "import random\n\ndef generate_randoms(n):\n  # generate a set of n random numbers\n  rands = []\n  for _ in range(n):\n    rands.append(random.randint(1,100))\n  return rands\n\ngenerate_randoms(10)", "predict": "import random\n\ndef generate_random_numbers(n):\n    random_numbers = []\n    for _ in range(n):\n        random_numbers.append(random.randint(0, 100))\n    return random_numbers"}
{"prompt": "Write a python program to check if a given string contains any numbers \n", "label": "def string_contains_number(string):\n    pattern = re.compile(\"[0-9]\") \n    return pattern.search(string) != None", "predict": "def has_numbers(string):\n    for character in string:\n        if character.isdigit():\n            return True\n    return False"}
{"prompt": "Design a class in Python for storing movie information including the name, year of release, genre and rating. \n", "label": "class Movie:\n    def __init__(self, name, release_year, genre, rating):\n        self.name = name\n        self.release_year = release_year\n        self.genre = genre\n        self.rating = rating\n\nmovie = Movie(\"Interstellar\", 2014, \"Sci-Fi\", 8.4)\nprint(movie.name, movie.release_year, movie.genre, movie.rating)", "predict": "class Movie:\n    def __init__(self, name, year, genre, rating):\n        self.name = name\n        self.year = year\n        self.genre = genre\n        self.rating = rating\n\n    def get_name(self):\n        return self.name\n\n    def get_year(self):\n        return self.year\n\n    def get_genre(self):\n        return self.genre\n\n    def get_rating(self):\n        return self.rating"}
{"prompt": "Given an input string, write a Python program to count the occurrence of each character in the string.\n\"Hello, World!\" \n", "label": "def char_occurrences(a_string):\n char_count = {}\n for char in a_string:\n if char in char_count:\n char_count[char] += 1\n else:\n char_count[char] = 1\n return char_count\n\nstring = \"Hello, World!\"\nprint(char_occurrences(string))\n\n# Output\n# {'H': 1, 'e': 1, 'l': 3, 'o': 2, ', ': 1, 'W': 1, 'r': 1, 'd': 1, '!': 1}", "predict": "def count_characters(string):\n    counts = {}\n    for char in string:\n        if char in counts:\n            counts[char] += 1\n        else:\n            counts[char] = 1\n    return counts\n\nprint(count_characters(\"Hello, World!\"))\n\n# Output:\n{'H': 1, 'e': 1, 'l': 3, 'o': 2, ',': 1,'': 1, 'W': 1, 'r': 1, 'd': 1, '!': 1}"}
{"prompt": "Create a Python program to generate a random password. Specify a minimum length of 8 characters and it should contain at least one number and one special character.\nNot applicable \n", "label": "import string\nimport random\n\ndef generate_password():\n length = 8\n chars = string.ascii_letters + string.digits + string.punctuation\n password = \"\".join(random.choice(chars) for i in range(length))\n \n return password\n\npassword = generate_password()\nprint(password)", "predict": "import random\nimport string\n\ndef generate_password(length):\n    chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(chars) for _ in range(length))\n    return password\n\npassword = generate_password(8)\nprint(password)"}
{"prompt": "Write a Python function to generate an even number between 10 and 200 that is divisible by 5.\nNot applicable \n", "label": "def generate_even_number():\n# Generate a random number between 10 and 200\n num = random.randint(10, 200)\n# Check if the number is even\n if num % 2 == 0:\n# Check if the number is divisible by 5\n  if num % 5 == 0:\n   return num\n# If number not divisible by 5, increment number\n  else:\n   return generate_even_number(num+1)\n# If number not even, increment number\n else:\n   return generate_even_number(num+1)", "predict": "def even_divisible_by_5():\n    for i in range(10, 201):\n        if i % 2 == 0 and i % 5 == 0:\n            return i\n\nprint(even_divisible_by_5())"}
{"prompt": "Create a Python function to find the closest value to a given number in a given array.\n[5, 4, 8, 7], 5 \n", "label": "def closest_num(arr, num):\n    arr.sort()\n    n = len(arr)\n    left = 0\n    right = n - 1\n \n    if arr[right] <= num:\n        return arr[right]\n    elif arr[left] >= num:\n        return arr[left]\n    while right-left > 1:\n        mid = (right+left)//2\n        if arr[mid] == num:\n            return arr[mid]\n        elif arr[mid] > num:\n            right = mid\n        else:\n            left = mid\n    return sorted([arr[right], arr[left]])[0]\n\narr = [5, 4, 8, 7]\nnum = 5\nclosest = closest_num(arr, num)\nprint(closest)", "predict": "def find_closest_value(arr, num):\n    closest_value = arr[0]\n    min_difference = abs(num - arr[0])\n    for i in range(1, len(arr)):\n        difference = abs(num - arr[i])\n        if difference < min_difference:\n            closest_value = arr[i]\n            min_difference = difference\n    return closest_value\n\narr = [5, 4, 8, 7]\nnum = 5\nclosest_value = find_closest_value(arr, num)\nprint(closest_value)"}
{"prompt": "Write a Python code to store and print the multiplication table of a given number.\nnum = 5 \n", "label": "# Function to print the multiplication table\ndef print_multiplication_table(num):\n    # Iterate over numbers from 1 to 10\n    for i in range(1, 11):\n        print('{0} x {1} = {2}'.format(num, i, num*i))\n\nprint_multiplication_table(5)", "predict": "num = 5\n\nfor i in range(1, 11):\n    print(num, 'x', i, '=', num * i)"}
{"prompt": "Found and fix any bugs with the following python code.\ndef sum_list(list):\n    sum_list = 0\n    for num in list:\n        sum_list += num\n    return sum \n", "label": "def sum_list(list):\n    sum_list = 0\n    for num in list:\n        sum_list += num\n    return sum_list", "predict": "def sum_list(list):\n    sum_list = 0\n    for num in list:\n        sum_list += num\n    return sum_list"}
{"prompt": "Generate a function in Python that takes two parameters: ‘x’ and ‘y’ and prints the output as “x is greater than y” when x is greater than y, otherwise “y is greater than or equal to x”.\nNot applicable \n", "label": "def print_comparison(x, y):\n if x > y:\n print(f'{x} is greater than {y}')\n else:\n print(f'{y} is greater than or equal to {x}')", "predict": "def compare(x, y):\n    if x > y:\n        print(f'{x} is greater than {y}')\n    else:\n        print(f'{y} is greater than or equal to {x}')\n\ncompare(10, 5)\n# Output: 10 is greater than 5"}
{"prompt": "Create a Python program to take an array of integers and calculate the sum of squares of all numbers provided in the array.\n[2, 3, 4] \n", "label": "def sum_squares(arr):\n    total = 0\n    for num in arr:\n        total += num ** 2\n    return total\n\narr = [2, 3, 4]\n\ntotal = sum_squares(arr)\nprint(total) # 29", "predict": "def sum_of_squares(arr):\n    sum = 0\n    for num in arr:\n        sum += num**2\n    return sum\n\narr = [2, 3, 4]\nprint(sum_of_squares(arr))"}