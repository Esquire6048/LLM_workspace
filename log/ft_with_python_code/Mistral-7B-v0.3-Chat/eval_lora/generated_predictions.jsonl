{"prompt": "Create a function to calculate the sum of a sequence of integers.\n[1, 2, 3, 4, 5] ", "label": "# Python code\ndef sum_sequence(sequence):\n  sum = 0\n  for num in sequence:\n    sum += num\n  return sum", "predict": "# Python 3 program to find the sum of a sequence of integers \n\ndef sum_sequence(arr): \n    # Initialize result \n    result = 0\n   \n    # Iterate over the array \n    for i in range(len(arr)): \n        result += arr[i] \n   \n    return result \n\n# Driver Code \narr = [1, 2, 3, 4, 5] \nprint(sum_sequence(arr))"}
{"prompt": "Generate a Python code for crawling a website for a specific type of data.\nwebsite: www.example.com \ndata to crawl: phone numbers ", "label": "import requests\nimport re\n\ndef crawl_website_for_phone_numbers(website):\n    response = requests.get(website)\n    phone_numbers = re.findall('\\d{3}-\\d{3}-\\d{4}', response.text)\n    return phone_numbers\n    \nif __name__ == '__main__':\n    print(crawl_website_for_phone_numbers('www.example.com'))", "predict": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.example.com/'\n\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\n\nphone_numbers = []\n\nfor tag in soup.find_all('a'):\n    if tag.has_attr('href'):\n        if 'tel:' in tag['href']:\n            phone_numbers.append(tag['href'][4:])\n\nprint(phone_numbers)"}
{"prompt": "Create a Python list comprehension to get the squared values of a list [1, 2, 3, 5, 8, 13]. ", "label": "[x*x for x in [1, 2, 3, 5, 8, 13]]", "predict": "[x**2 for x in [1, 2, 3, 5, 8, 13]]"}
{"prompt": "Generate a python script to perform this action.\nGiven a string, remove all the consecutive duplicates from the string.\n\nInput: \"AAABBCCCD\" ", "label": "def remove_duplicates(string): \n    result = \"\" \n    prev = '' \n\n    for char in string:\n        if char != prev: \n            result += char\n            prev = char\n    return result\n\nresult = remove_duplicates(\"AAABBCCCD\")\nprint(result)", "predict": "def remove_duplicates(string):\n    result = \"\"\n    for char in string:\n        if char not in result or result[-1]!= char:\n            result += char\n    return result\n\nresult = remove_duplicates(\"AAABBCCCD\")\nprint(result)"}
{"prompt": "Write a python script to generates random numbers between 0 and 9 that are divisible by 3. ", "label": "def generate_random_divisible_number():\n    import random\n    while True:\n        # Generate a random number\n        process = random.randint(0, 9)\n        # Check if the number is divisible by 3\n        if process % 3 == 0:\n            # If it is divisible, return it\n            return process", "predict": "import random\n\ndef generate_random_numbers():\n    numbers = []\n    while True:\n        num = random.randint(0, 9)\n        if num % 3 == 0:\n            numbers.append(num)\n            if len(numbers) == 5:\n                break\n    return numbers\n\nprint(generate_random_numbers())"}
{"prompt": "Write a Python code to get the third largest element in a given row.\n[12, 13, 13, 45, 22, 99] ", "label": "def third_largest(lst):\n    if len(lst) < 3:\n        return\n    distinct = []\n    for i in lst:\n        if i not in distinct:\n            distinct.append(i)\n    distinct.sort(reverse=True)\n    return distinct[2]", "predict": "def get_third_largest(arr):\n    arr.sort()\n    return arr[-3]\n\nresult = get_third_largest([12, 13, 13, 45, 22, 99])\nprint(result)"}
{"prompt": "Generate a REST API with Python and Flask that allows users to create, read, update, and delete records from a database.\nNot applicable ", "label": "from flask import Flask, request\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(name)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'\ndb = SQLAlchemy(app)\n\nclass Record(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n name = db.Column(db.String(120), unique=True)\n\ndb.create_all()\n\n@app.route('/records', methods=['GET'])\ndef get_records():\n records = Record.query.all()\n return {'records':[record.name for record in records]}\n\n@app.route('/records', methods=['POST'])\ndef create_record():\n record = Record(name=request.json['name'])\n db.session.add(record)\n db.session.commit()\n return {'id': record.id}\n\n@app.route('/records/int:id', methods=['PUT'])\ndef update_record(id):\n record = Record.query.get(id)\n record.name = request.json['name']\n db.session.commit()\n return {'message': 'Record updated'}\n\n@app.route('/records/int:id', methods=['DELETE'])\ndef delete_record(id):\n Record.query.filter_by(id=id).delete()\n db.session.commit()\n return {'message': 'Record deleted'}\n\nif name == 'main':\n app.run(debug=True)", "predict": "from flask import Flask, request\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(name)\napp.config['SQLALCHEMY_DATABASE_URI'] ='sqlite:////tmp/test.db'\ndb = SQLAlchemy(app)\n\nclass Record(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n name = db.Column(db.String(50), nullable=False)\n\ndb.create_all()\n\n@app.route('/records', methods=['GET', 'POST'])\ndef records():\n if request.method == 'GET':\n records = Record.query.all()\n return {'records': [r.name for r in records]}\n elif request.method == 'POST':\n name = request.json['name']\n record = Record(name=name)\n db.session.add(record)\n db.session.commit()\n return {'name': name}\n\n@app.route('/records/<int:id>', methods=['GET', 'PUT', 'DELETE'])\ndef record(id):\n record = Record.query.get_or_404(id)\n if request.method == 'GET':\n return {'name': record.name}\n elif request.method == 'PUT':\n record.name = request.json['name']\n db.session.commit()\n return {'name': record.name}\n elif request.method == 'DELETE':\n db.session.delete(record)\n db.session.commit()\n return {'result':'success'}\n\nif name =='main':\n app.run(debug=True)"}
{"prompt": "Create a Python function that takes in a string and a list of words and returns true if the string contains all the words in the list.\n'This is a test', ['test', 'this', 'is'] ", "label": "def contains_words(input_string, words):\n for word in words:\n if word not in input_string:\n return False\n return True\n\nprint(contains_words('This is a test', ['test', 'this', 'is'])) # True", "predict": "def contains_all_words(string, words):\n    for word in words:\n        if word not in string:\n            return False\n    return True"}
{"prompt": "What should this Python program do?\ndef is_palindrome(s):\n    '''Write your code here.''' ", "label": "def is_palindrome(s):\n    '''This function returns True if the string s is a palindrome and False if it isn't.''' \n    return s == s[::-1]  # Checks if s is the same as its reverse.", "predict": "def is_palindrome(s):\n    '''This function will check if the given string is a palindrome.'''\n    return s == s[::-1]"}
{"prompt": "Create a Python program to sort and print out the elements of an array of integers.\n[17, 41, 5, 22, 54, 6, 29, 3, 13] ", "label": "arr = [17, 41, 5, 22, 54, 6, 29, 3, 13]\n\narr.sort()\n\nprint(arr)\n\n# Output: [3, 5, 6, 13, 17, 22, 29, 41, 54]", "predict": "arr = [17, 41, 5, 22, 54, 6, 29, 3, 13]\n\narr.sort()\n\nprint(arr)"}
{"prompt": "Generate a Python program that adds two then doubles the result. ", "label": "def double_add(num1, num2): \n    return (num1 + num2) * 2", "predict": "def double_add(x, y):\n    return (x + y) * 2"}
{"prompt": "Write a python program to extract the non-vowel words in a sentence.\nThis machine learning project is challenging. ", "label": "def extract_words(sentence):\n    non_vowel_words = []\n    words = sentence.split()\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    for word in words:\n        if not any(char in vowels for char in word):\n            non_vowel_words.append(word) \n    return non_vowel_words", "predict": "def extract_non_vowels(sentence):\n    non_vowels = []\n    for word in sentence.split():\n        if not any(vowel in word for vowel in 'aeiou'):\n            non_vowels.append(word)\n    return non_vowels\n\nsentence = 'This machine learning project is challenging.'\nprint(extract_non_vowels(sentence))"}
{"prompt": "Write a Python program to calculate the average of a list of positive integers and output the result.\nList of positive integers: [1, 5, 6, 7, 8] ", "label": "list_of_positive_integers = [1, 5, 6, 7, 8]\ntotal = sum(list_of_positive_integers)\n\navg = total/len(list_of_positive_integers)\n\nprint(\"The average of the list of positive integers is {}\".format(avg))", "predict": "def calculate_average(numbers):\n    total = 0\n    for num in numbers:\n        total += num\n    return total / len(numbers)\n\nnumbers = [1, 5, 6, 7, 8]\naverage = calculate_average(numbers)\nprint(average)"}
{"prompt": "Develop a function in Python that prints out the Pascal's triangle for a given number of rows. ", "label": "def pascal_triangle(n): \n    trow = [1] \n    y = [0] \n    for x in range(max(n, 0)): \n        print(trow) \n        trow=[l+r for l,r in zip(trow + y, y + trow)] \n    return n>=1\n\npascal_triangle(5)", "predict": "def pascal_triangle(n):\n    result = []\n    for i in range(n):\n        row = [1]\n        for j in range(i):\n            if j == 0 or j == i:\n                row.append(1)\n            else:\n                row.append(result[i-1][j-1] + result[i-1][j])\n        row.append(1)\n        result.append(row)\n    return result"}
{"prompt": "Implement a decision-making algorithm for a rock-paper-scissors game using Python. ", "label": "# Rock, paper, scissors game!\n\ndef play_game(player1, player2):\n    #  Define the winning rules\n    rules = {'rock': 'scissors', 'scissors': 'paper', 'paper': 'rock'}\n    if player1 == player2:\n        return 'It is a draw!'\n    elif rules[player1] == player2:\n        return 'Player 1 wins!'\n    elif rules[player2] == player1:\n        return 'Player 2 wins!'\n\n# Get user input\nplayer1 = input('Player 1, make a choice: rock, paper, or scissors? ').lower()\nplayer2 = input('Player 2, make a choice: rock, paper, or scissors? ').lower()\n\n# Start the game and get the result\nresult = play_game(player1, player2)\nprint(result)", "predict": "def decide_game(player1, player2):\n    if player1 == player2:\n        return 'Draw'\n    elif player1 == 'rock' and player2 =='scissors':\n        return 'Player 1 Wins'\n    elif player1 == 'paper' and player2 == 'rock':\n        return 'Player 1 Wins'\n    elif player1 =='scissors' and player2 == 'paper':\n        return 'Player 1 Wins'\n    else:\n        return 'Player 2 Wins'"}
{"prompt": "Collate a machine learning model in Python that distinguishes between cats and dogs.\nA dataset of 800 images of cats and dogs ", "label": "import numpy as np\nimport keras\nfrom keras.layers import Dense, Conv2D, MaxPooling2D, Dropout, Flatten\nfrom keras.models import Sequential\nfrom keras.preprocessing.image import ImageDataGenerator\n\n# Create the neural network model\nmodel = Sequential()\n\n# Input layer\nmodel.add(Conv2D(32, (3, 3), input_shape = (64, 64, 3), activation = 'relu'))\n\n# Hidden layers\nmodel.add(MaxPooling2D(pool_size = (2, 2)))\nmodel.add(Dropout(0.3))\nmodel.add(Conv2D(64, (3, 3), activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size = (2, 2)))\nmodel.add(Dropout(0.3))\nmodel.add(Conv2D(64, (3, 3), activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size = (2, 2)))\nmodel.add(Dropout(0.3))\n\n# Output layer\nmodel.add(Flatten())\nmodel.add(Dense(units = 128, activation = 'relu'))\nmodel.add(Dense(units = 1, activation = 'sigmoid'))\n\n# Compile the model\nmodel.compile(loss = 'binary_crossentropy', optimizer = 'adam', metrics = ['accuracy'])\n\n# Create data generator\ndatagen = ImageDataGenerator(rescale = 1./255, shear_range = 0.2, zoom_range = 0.2, horizontal_flip = True)\n\n# Fit the model\ntrain_generator = datagen.flow_from_directory(directory = '/path/to/dataset', target_size = (64, 64), color_mode = 'rgb', class_mode = 'binary', batch_size = 32)\nmodel.fit_generator(generator = train_generator, steps_per_epoch = 800, epochs = 5, validation_data = test_generator, validation_steps = 200)", "predict": "import numpy as np\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\n\n# Load the data\n(x_train, y_train), (x_test, y_test) = tf.keras.datasets.cifar10.load_data()\nx_train = x_train.astype(np.float32) / 255\nx_test = x_test.astype(np.float32) / 255\n\n# Create the model\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)),\n    tf.keras.layers.MaxPooling2D((2, 2)),\n    tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),\n    tf.keras.layers.MaxPooling2D((2, 2)),\n    tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(10, activation='softmax')\n])\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\n# Train the model\nmodel.fit(x_train, y_train, epochs=10, validation_data=(x_test, y_test))"}
{"prompt": "Write a Python program to find all the numbers divisible by a certain number within a certain range.\nint m=36, int n=74, int divisor=6 ", "label": "def find_numbers_divisible_by(m, n, divisor):\n    divisible_numbers = []\n    for i in range(m, n+1):\n        if i % divisor == 0:\n            divisible_numbers.append(i)\n    return divisible_numbers", "predict": "def find_divisible_numbers(m, n, divisor):\n    result = []\n    for i in range(m, n+1):\n        if i % divisor == 0:\n            result.append(i)\n    return result\n\nm = 36\nn = 74\ndivisor = 6\n\nresult = find_divisible_numbers(m, n, divisor)\nprint(result)"}
{"prompt": "Implement a Python function that will take two strings and return true if the first string contains the second.\nquery = \"catering\"\nword = \"cat\" ", "label": "def check_contains(query, word): \n    if query.find(word) != -1:\n        return True\n    return False\n\nresult = check_contains(query, word)", "predict": "def contains_word(query, word):\n    if word in query:\n        return True\n    else:\n        return False"}
{"prompt": "Write an algorithm in Python 3 that calculates the factorial of a number.\nNot applicable ", "label": "def factorial(n):\n if n == 0:\n  return 1\n else:\n  return n * factorial(n-1)", "predict": "def factorial(n):\n if n == 0:\n  return 1\n else:\n  return n * factorial(n-1)\n\nnum = 5\nresult = factorial(num)\nprint(result)"}
{"prompt": "Develop a Python function to predict the class labels of a given set of data.\nThe dataset contains 4 features: Length, Width, Height and Weight. ", "label": "# Load the dataset\nimport pandas as pd\ncsv_url = 'http://test.test/test.csv'\ndf = pd.read_csv(csv_url)\n\n# Split the dataset into features and label\nX = df.iloc[:, 0:4].values\ny = df.iloc[:, 4].values\n\n# Import the ML model\nfrom sklearn.tree import DecisionTreeClassifier\n\n# Create and fit the model\nmodel = DecisionTreeClassifier()\nmodel.fit(X, y)\n\n# Predict the label\ndef predict(data):\n    predicted_label = model.predict([data])\n    return predicted_label", "predict": "def predict_class_labels(data):\n    # Load the trained model\n    model = joblib.load('model.pkl')\n    \n    # Make predictions\n    predictions = model.predict(data)\n    \n    # Return the predictions\n    return predictions"}
{"prompt": "Develop a Python program to generate random passwords that consist of 8 characters.\nNot applicable ", "label": "import string\nimport random\n\ndef generate_password():\n    chars = string.ascii_letters + string.digits\n    return ''.join(random.choice(chars) for _ in range(8))\n\npassword = generate_password()\nprint(password)", "predict": "import random\nimport string\n\ndef generate_password():\n password_characters = string.ascii_letters + string.digits + string.punctuation\n password = ''.join(random.choice(password_characters) for i in range(8))\n return password\n\nprint(generate_password())"}
{"prompt": "Generate a list using a while loop in Python and appends the current number to the list. ", "label": "my_list = []\n\nnum = 0\n\nwhile num < 10:\n    my_list.append(num)\n    num += 1\n\nprint(my_list)", "predict": "my_list = []\ni = 0\n\nwhile i < 10:\n    my_list.append(i)\n    i += 1\n\nprint(my_list)"}
{"prompt": "Write a Python program to query Twitter to get the most recent tweets from a user.\nusername: @elonmusk ", "label": "import tweepy\n\n# Authenticate to Twitter\nauth = tweepy.OAuthHandler(\"CONSUMER_KEY\", \"CONSUMER_SECRET\")\nauth.set_access_token(\"ACCESS_TOKEN\", \"ACCESS_TOKEN_SECRET\")\n# Create API object\napi = tweepy.API(auth)\n\n# Get the most recent tweets from the given user\ntweets = api.user_timeline(screen_name=\"@elonmusk\")\n\nfor tweet in tweets:\n print(tweet.text)", "predict": "import tweepy\n\nconsumer_key = '<your consumer key>'\nconsumer_secret = '<your consumer secret>'\naccess_token = '<your access token>'\naccess_token_secret = '<your access token secret>'\n\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n\npublic_tweets = api.user_timeline(screen_name='elonmusk', count=200)\n\nfor tweet in public_tweets:\n print(tweet.text)"}
{"prompt": "Create a Python neural network model that takes in a given trajectory of stock prices and predicts the stock price for the next day.\n[10, 10.4, 10.5, 10.6, 10.7, 10.9, 11] ", "label": "import numpy as np\nimport tensorflow as tf\n\ndef create_model():\n    model = tf.keras.Sequential([\n        tf.keras.layers.Dense(64, activation='relu', input_shape=(7, )),\n        tf.keras.layers.Dense(1)\n    ])\n\n    model.compile(loss='mean_squared_error', \n                  optimizer='adam',\n                  metrics=['accuracy'])\n\n    return model\n    \nif __name__ == \"__main__\":\n    model = create_model()\n\n    input_data = np.array([[10, 10.4, 10.5, 10.6, 10.7, 10.9, 11]])\n    predictions = model.predict(input_data)\n\n    print(f\"Predicted stock price for the next day is: {predictions[0][0]}\")", "predict": "import numpy as np\nimport tensorflow as tf\n\n# Input data\nX = np.array([10, 10.4, 10.5, 10.6, 10.7, 10.9, 11])\n\n# Create the model\nmodel = tf.keras.Sequential()\nmodel.add(tf.keras.layers.Dense(10, activation='relu', input_shape=(1,)))\nmodel.add(tf.keras.layers.Dense(1))\n\n# Compile the model\nmodel.compile(optimizer='adam', loss='mean_squared_error')\n\n# Fit the model\nmodel.fit(X[:-1].reshape(-1,1), X[1:], epochs=100)\n\n# Predict the next day's stock price\nprediction = model.predict(X[-1].reshape(-1,1))\nprint(prediction)"}
{"prompt": "Create a way to encrypt a message using a key in Python.\nmessage = \"Hello world!\"\nkey = \"secret\" ", "label": "import hashlib\n\ndef encrypt(message, key):\n    encrypted_msg = \"\"\n    for char in message:\n        encrypted_msg += chr(ord(char) + ord(key[0]))\n    return encrypted_msg\n\nencrypted_msg = encrypt(message, key)\nprint(encrypted_msg)", "predict": "import hashlib\n\ndef encrypt(message, key):\n  # Hash the message and key\n  m = hashlib.sha256(message.encode('utf-8')).hexdigest()\n  k = hashlib.sha256(key.encode('utf-8')).hexdigest()\n  \n  # XOR the two hashes\n  encrypted_message = ''\n  for i in range(len(m)):\n    encrypted_message += chr(ord(m[i]) ^ ord(k[i % len(k)]))\n  \n  return encrypted_message\n\nmessage = \"Hello world!\"\nkey = \"secret\"\n\nencrypted_message = encrypt(message, key)\nprint(encrypted_message) # \"Khoork zruog!\""}
{"prompt": "Create a function in Python that takes two parameters and prints out the larger of them.\nparameter_1 = 7\nparameter_2 = 9 ", "label": "def printMax(parameter_1, parameter_2):\n    if parameter_1 > parameter_2:\n        print(parameter_1)\n    else:\n      print(parameter_2)", "predict": "def larger_number(a, b):\n    if a > b:\n        print(a)\n    else:\n        print(b)\n\nlarger_number(parameter_1, parameter_2)"}
{"prompt": "Rewrite the following Python code by introducing list comprehensions.\neven_numbers = []\nfor i in range(1,21):\n    if i % 2 == 0:\n        even_numbers.append(i) ", "label": "even_numbers = [i for i in range(1, 21) if i % 2 == 0]", "predict": "even_numbers = [i for i in range(1, 21) if i % 2 == 0]"}
{"prompt": "Develop an algorithm in Python to print Fibonacci series up to a given number. ", "label": "def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \n      \nn = int(input(\"Enter a number: \"))\nprint(fibonacci(n))", "predict": "def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \n  \n# Driver Program \nprint(fibonacci(9))"}
{"prompt": "Make the following code snippet into a function in Python3 capable of solving Any Sudoku puzzle\nboard = [\n    [7,8,0,4,0,0,1,2,0],\n    [6,0,0,0,7,5,0,0,9],\n    [0,0,0,6,0,1,0,7,8],\n    [0,0,7,0,4,0,2,6,0],\n    [0,0,1,0,5,0,9,3,0],\n    [9,0,4,0,6,0,0,0,5],\n    [0,7,0,3,0,0,0,1,2],\n    [1,2,0,0,0,7,4,0,0],\n    [0,4,9,2,0,6,0,0,7]\n] ", "label": "def solve_sudoku(board): \n  \n    # Utility function to find vacant cells \n    # Returns a boolean     \n    def find_vacant_cell(board, l): \n        for row in range(9): \n            for col in range(9): \n                if board[row][col] == 0: \n                    l[0] = row \n                    l[1] = col \n                    return True\n        return False\n  \n    # Utility function to check if a number  \n    # is not currently placed in a particular  \n    # row, column and block \n    def is_safe(board, row, col, num): \n  \n        # Check if 'num' is not already placed  \n        # in current row, current column  \n        # and current 3x3 box \n        for i in range(9): \n  \n            # Check the rows\n            if(board[row][i] == num): \n                return False\n  \n            # Check the columns \n            if(board[i][col] == num): \n                return False\n  \n            # Check the 3x3 boxes \n            if(board[(row//3)*3 + i//3][(col//3)*3 + i%3] == num): \n                return False\n  \n        return True\n  \n    # Solve the sudoku \n    def solve(board): \n        # 'l' is a list variable that keeps \n        # the record of row and col in \n        # find_vacant_cell function \n        l = [0, 0] \n  \n        # If there is no unassigned location, \n        # we are done \n        if (not find_vacant_cell(board, l)): \n            return True\n  \n        # Assigning the list values\n        row = l[0] \n        col = l[1] \n  \n        # consider digits 1 to 9 \n        for num in range(1, 10): \n  \n            # if it is a safe position\n            if (is_safe(board, row, col, num)): \n  \n                # make tentative assignment \n                board[row][col] = num \n  \n                # return if succcess\n                if (solve(board)): \n                    return True\n  \n                # failure, unmake and try again \n                board[row][col] = 0\n  \n        # trigger backtracking \n        return False\n  \n    #Driver Program \n    if (solve(board)): \n        for row in board: \n            print(row) \n    else: \n        print(\"No solution\")", "predict": "def solve_sudoku(board):\n    # find empty cell\n    for i in range(9):\n        for j in range(9):\n            if board[i][j] == 0:\n                for num in range(1, 10):\n                    # check if the number is valid\n                    if is_valid(board, i, j, num):\n                        # set the number\n                        board[i][j] = num\n                        # recurse\n                        if solve_sudoku(board):\n                            return True\n                        # backtrack\n                        board[i][j] = 0\n                return False\n    return True\n\ndef is_valid(board, row, col, num):\n    # check row\n    for i in range(9):\n        if board[row][i] == num:\n            return False\n    # check column\n    for i in range(9):\n        if board[i][col] == num:\n            return False\n    # check box\n    box_x = row - row % 3\n    box_y = col - col % 3\n    for i in range(3):\n        for j in range(3):\n            if board[i + box_x][j + box_y] == num:\n                return False\n    return True"}
{"prompt": "Write a function in Python to calculate the sum of the digits in a given number. ", "label": "def sum_digits(num):\n    total = 0\n    while num > 0:\n        digit = num % 10\n        total += digit\n        num = num // 10\n    return total", "predict": "def sum_digits(n):\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"}
{"prompt": "Take the list of people below and create a Python dictionary with the names as keys and the ages as values.\nJohn (20), Jane (40), Alex (18), Peter (45) ", "label": "people_dict = {'John': 20, 'Jane': 40, 'Alex': 18, 'Peter': 45}", "predict": "people = {\n 'John': 20,\n 'Jane': 40,\n 'Alex': 18,\n 'Peter': 45\n}"}
{"prompt": "Develop a Python program to clearly understand the concept of recursion. ", "label": "# This program is to understand recursion in Python.\n\n# Define a recursive function to calculate the factorial of a number\ndef factorial(n):\n   if n == 1:\n      return 1\n   else:\n      return n * factorial(n - 1)\n\n# Calculate factorial of number 5\nresult = factorial(5)\nprint(\"Factorial of 5 is \", result) \n\n# Output: Factorial of 5 is 120", "predict": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nnum = 5\nprint(\"The factorial of\", num, \"is\", factorial(num))"}
{"prompt": "Generate a random 6-digits number in Python. ", "label": "import random\n\nnumber = random.randint(100000, 999999)\nprint(number)", "predict": "import random\n\nrandom_number = random.randint(100000, 999999)\nprint(random_number)"}
{"prompt": "Create a sorting algorithm in Python to sort strings by their length.\n[\"cat\", \"dog\", \"apple\", \"banana\"] ", "label": "def sort_by_length(strings):\n    for i in range(len(strings) - 1):\n        for j in range(i + 1, len(strings)):\n            if len(strings[i]) > len(strings[j]):\n                strings[i], strings[j] = strings[j], strings[i]\n    return strings\n\nunsorted_list = [\"cat\", \"dog\", \"apple\", \"banana\"]\n\nsorted_list = sort_by_length(unsorted_list)\n\nprint(sorted_list)", "predict": "def sort_by_length(words):\n    # Sorts words in the list by their length\n    return sorted(words, key=len)"}
{"prompt": "Write a Python function to get the maximum and minimum values in a given list.\nNot applicable ", "label": "def get_max_min(lst):\n min_value = lst[0]\n max_value = lst[0]\n \n for i in range(1, len(lst)):\n  if lst[i] > max_value:\n   max_value = lst[i]\n  if lst[i] < min_value:\n   min_value = lst[i]\n \n return (min_value, max_value)", "predict": "def get_min_max(list):\n min_val = min(list)\n max_val = max(list)\n return (min_val, max_val)\n\n# example\nlist = [1, 2, 3, 4, 5]\nmin_val, max_val = get_min_max(list)\nprint(\"Minimum value is:\", min_val)\nprint(\"Maximum value is:\", max_val)"}
{"prompt": "Create a for loop in Python to iterate over a list of numbers and print only the even numbers.\nmy_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] ", "label": "for num in my_list:\n    if num % 2 == 0:\n        print(num)", "predict": "for num in my_list:\n    if num % 2 == 0:\n        print(num)"}
{"prompt": "Can you suggest a pure python alternative to declaring a Float32 array with numbers from 0 to 10? ", "label": "myArray = [float(i) for i in range(0,11)]", "predict": "my_array = [float(i) for i in range(0, 11)]"}
{"prompt": "Construct a neural network model in Python to classify the MNIST data set correctly. ", "label": "import keras\n\n# Input layer\ninput_layer = keras.layers.Input(shape=(784,))\n\n# Hidden layer\nhidden_layer = keras.layers.Dense(128, \n                activation='relu')(input_layer)\n\n# Output layer\noutput_layer = keras.layers.Dense(10, \n                activation='softmax')(hidden_layer)\n\n# Model\nmodel = keras.Model(inputs=input_layer, outputs=output_layer)\n\n# Compile model\nmodel.compile(optimizer='adam', \n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])", "predict": "import numpy as np\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense, Flatten, Conv2D, MaxPooling2D\nfrom tensorflow.keras.models import Sequential\n\nmodel = Sequential()\nmodel.add(Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=(28, 28, 1)))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(10, activation='softmax'))\n\nmodel.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel.fit(x_train, y_train, epochs=5)"}
{"prompt": "Create a machine learning classifier in Python for categorizing user input. ", "label": "from sklearn.naive_bayes import MultinomialNB \n\n# Assuming an input string is passed to the function as a parameter\n\ndef classify_string(input_string):\n\n  # Feature extraction and transformation from string to numeric\n  features = . . .\n\n  # Create an instance of the classifier \n  model = MultinomialNB()\n\n  # Train the classifier on the data\n  model.fit(data, target)\n\n  # Make a prediction based on the input\n  prediction = model.predict([features])\n\n  # Return the prediction\n  return prediction", "predict": "import pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Load data\ndata = pd.read_csv('data.csv')\n\n# Vectorize data\nvectorizer = CountVectorizer()\nX = vectorizer.fit_transform(data['input'])\n\n# Split data\ny = data['output']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train classifier\nclf = MultinomialNB()\nclf.fit(X_train, y_train)\n\n# Test classifier\ny_pred = clf.predict(X_test)\nprint('Accuracy: ', clf.score(X_test, y_test))"}
{"prompt": "Implement a algorithm in Python for sorting two large lists A and B. The algorithm should take the first element of list A and compare it with the first element of list B. If it is greater, then it should add the element to the result list and move the pointer of B to the next element. If the element of A is smaller, the pointer should move to the next element of A, and so on.\nA = [3, 6, 8, 10, 11]\nB = [2, 5, 7, 12] ", "label": "def merge_sort(A, B):\n result = [] \n i, j = 0, 0\n\n# Compare elements and add lower one to result\nwhile i < len(A) and j < len(B):\n if A[i] < B[j]:\n result.append(A[i])\n i += 1\n else:\n result.append(B[j])\n j += 1\n\n# Add remaining elements\nresult += A[i:]\nresult += B[j:]\n\nreturn result\n\n#Test the algorithm\nA = [3, 6, 8, 10, 11]\nB = [2, 5, 7, 12]\n\nprint(merge_sort(A, B))\n# Output: [2, 3, 5, 6, 7, 8, 10, 11, 12]", "predict": "def merge(A, B):\n    result = []\n    i, j = 0, 0\n    while i < len(A) and j < len(B):\n        if A[i] < B[j]:\n            result.append(A[i])\n            i += 1\n        else:\n            result.append(B[j])\n            j += 1\n    result += A[i:]\n    result += B[j:]\n    return result\n\nA = [3, 6, 8, 10, 11]\nB = [2, 5, 7, 12]\n\nprint(merge(A, B))"}
{"prompt": "Develop a program in Python for finding the longest common subsequence between two strings.\n\"ABCDF\", \"ABECD\" ", "label": "def longest_common_subsequence(string1, string2):\n    table = [[0]*(len(string2)+1) for _ in range(len(string1)+1)]\n\n    for i, x in enumerate(string1):\n        for j, y in enumerate(string2):\n            if x == y:\n                table[i+1][j+1] = table[i][j]+1\n            else:\n                table[i+1][j+1] = max(table[i+1][j], table[i][j+1])\n\n    result = \"\"\n    x, y = len(string1), len(string2)\n    while x != 0 and y != 0:\n        if table[x][y] == table[x-1][y]:\n            x -= 1\n        elif table[x][y] == table[x][y-1]:\n            y -= 1\n        else:\n            result = string1[x-1] + result\n            x -= 1\n            y -= 1\n    return result\n\nresult = longest_common_subsequence(\"ABCDF\", \"ABECD\")\nprint(result)", "predict": "def lcs(X, Y): \n    m = len(X) \n    n = len(Y) \n    L = [[None]*(n+1) for i in range(m+1)] \n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0 or j == 0 : \n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]: \n                L[i][j] = L[i-1][j-1]+1\n            else: \n                L[i][j] = max(L[i-1][j], L[i][j-1]) \n    index = L[m][n] \n    LCS = [\"\"]*(index+1) \n    LCS[index] = \"\" \n    i = m \n    j = n \n    while i > 0 and j > 0: \n        if X[i-1] == Y[j-1]: \n            LCS[index-1] = X[i-1] \n            i-=1\n            j-=1\n            index-=1\n        elif L[i-1][j] > L[i][j-1]: \n            i-=1\n        else: \n            j-=1\n    return \"\".join(LCS)"}
{"prompt": "Convert a given Python program to a C# program.\ndef power(x, y):\n    if y == 0:\n        return 1\n    else:\n        return x * power(x, y - 1) ", "label": "public int Power(int x, int y)\n{\n    if (y == 0)\n    {\n        return 1;\n    }\n    else\n    {\n        return x * Power(x, y - 1);\n    }\n}", "predict": "public static int Power(int x, int y)\n{\n    if (y == 0)\n    {\n        return 1;\n    }\n    else\n    {\n        return x * Power(x, y - 1);\n    }\n}"}
{"prompt": "Rewrite the following code in a different programming language.\n// JavaScript code\nlet arr = [1, 2, 3, 4, 5];\n\narr.forEach(item => {\n console.log(item * 2);\n}); ", "label": "# Python code\narr = [1, 2, 3, 4, 5]\n\nfor item in arr:\n print(item * 2)", "predict": "# Python code\narr = [1, 2, 3, 4, 5]\n\nfor item in arr:\n print(item * 2)"}
{"prompt": "Create a TicTacToe game in Python. ", "label": "class TicTacToe:\n\ndef __init__(self):\n    self.board = [['_' for _ in range(3)] \n                   for _ in range(3)]\n    self.turn = 'x'\n    \ndef display(self):\n    for row in self.board:\n        print(' '.join(row))\n\ndef check_win(self):\n    board = self.board\n\n    # check if the player with the current turn has a row of three\n    for row in self.board:\n        if row.count(self.turn) == 3:\n            return True\n        \n    # check if the player with the current turn has a column of three\n    for col in range(3):\n        if board[0][col] == board[1][col] and board[1][col] == board[2][col] and board[2][col] == self.turn:\n            return True\n        \n    # check for the two diagonals\n    if board[0][0] == board[1][1] and board[1][1] == board[2][2] and board[2][2] == self.turn:\n        return True\n    if board[0][2] == board[1][1] and board[1][1] == board[2][0] and board[2][0] == self.turn:\n        return True\n    return False", "predict": "import random\n\n# create a 3x3 board\nboard = [[\"_\" for i in range(3)] for j in range(3)]\n\n# function to print the board\ndef print_board():\n    for row in board:\n        print(\" \".join(row))\n\n# function to get the player's move\ndef get_move():\n    row = int(input(\"Enter the row: \"))\n    col = int(input(\"Enter the column: \"))\n    return row, col\n\n# function to check if the move is valid\ndef is_valid_move(row, col):\n    if row < 0 or row > 2 or col < 0 or col > 2 or board[row][col]!= \"_\":\n        return False\n    return True\n\n# function to make the move\ndef make_move(row, col):\n    if is_valid_move(row, col):\n        board[row][col] = \"X\"\n    else:\n        print(\"Invalid move\")\n\n# function to check if there is a winner\ndef check_winner():\n    # check rows\n    for row in board:\n        if row[0] == row[1] == row[2]:\n            return row[0]\n    # check columns\n    for col in range(3):\n        if board[0][col] == board[1][col] == board[2][col]:\n            return board[0][col]\n    # check diagonals\n    if board[0][0] == board[1][1] == board[2][2]:\n        return board[0][0]\n    if board[0][2] == board[1][1] == board[2][0]:\n        return board[0][2]\n    return None\n\n# game loop\nwhile True:\n    # print the board\n    print_board()\n\n    # get the player's move\n    row, col = get_move()\n\n    # make the move\n    make_move(row, col)\n\n    # check if there is a winner\n    winner = check_winner()\n    if winner:\n        print(\"{} wins!\".format(winner))\n        break\n    if \"_\" not in board"}
{"prompt": "Create a Python program to store the strings \"Hello\" and \"World\" and print them in the same line. ", "label": "string1 = \"Hello\"\nstring2 = \"World\"\n\nprint(string1 + \" \" + string2)", "predict": "str1 = \"Hello\"\nstr2 = \"World\"\n\nprint(str1 + \" \" + str2)"}
{"prompt": "Use the inputs provided, write Python code to check if two integers are equal.\nFirst Integer: 10\nSecond Integer: 10 ", "label": "if int(10) == int(10):\n    print(\"The two integers are equal\")\nelse:\n    print(\"The two integers are not equal\")", "predict": "def check_equal(num1, num2):\n    if num1 == num2:\n        return True\n    else:\n        return False\n\nnum1 = 10\nnum2 = 10\n\nprint(check_equal(num1, num2)) # Output: True"}
{"prompt": "Create a Python program for analyzing the sentiment of given text. The program should categorize the text into positive, negative, and neutral sentiments.\nNot applicable ", "label": "import nltk\nfrom nltk.tokenize import sent_tokenize\nfrom nltk.classify import NaiveBayesClassifier\n\ndef analyze_sentiment(text):\n    sents = sent_tokenize(text)\n    neg = 0\n    pos = 0\n    for sentence in sents:\n        sentiment_analysis = NaiveBayesClassifier.classify(sentence)\n        if sentiment_analysis == 'neg':\n            neg += 1\n        if sentiment_analysis == 'pos':\n            pos += 1\n    \n    if neg > pos:\n        sentiment = 'negative'\n    elif pos > neg:\n        sentiment = 'positive'\n    else:\n        sentiment = 'neutral'\n    \n    return sentiment\n\n# End analyze sentiment definition", "predict": "import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\n# Create a sentiment analyzer\nsentiment_analyzer = SentimentIntensityAnalyzer()\n\n# Define the text to analyze\ntext = 'This is a great day!'\n\n# Analyze the sentiment\nscores = sentiment_analyzer.polarity_scores(text)\n\n# Print the sentiment\nif scores['compound'] >= 0.05:\n print('Positive sentiment')\nelif scores['compound'] <= - 0.05:\n print('Negative sentiment')\nelse:\n print('Neutral sentiment')"}
{"prompt": "Create a Python program to calculate the average of five numbers entered by a user. ", "label": "nums = []\nfor i in range(5):\n    nums.append(int(input(\"Please enter number: \")))\n\n#Calculate average\naverage = sum(nums) / len(nums)\n\n#Print average\nprint(\"The average is \", average)", "predict": "def avg_of_five():\n    total = 0\n    for i in range(1, 6):\n        num = int(input(\"Enter number {}: \".format(i)))\n        total += num\n    return total / 5\n\nprint(\"Average of five numbers is: \", avg_of_five())"}
{"prompt": "Write a Python program to generate a Markov chain given a text input.\nAlice was beginning to get very tired of sitting by her sister on the bank, and of having nothing to do: once or twice she had peeped into the book her sister was reading, but it had no pictures or conversations in it, `and what is the use of a book,' thought Alice `without pictures or conversation?' ", "label": "import random\n\ndef generateMarkov(text):\n  words = text.split(' ')\n  markovChain = {}\n\n  for i in range(len(words) - 2):\n    current = words[i]\n    next = words[i + 1]\n    if current in markovChain:\n      if next in markovChain[current]:\n        markovChain[current][next] += 1\n      else:\n        markovChain[current][next] = 1\n    else:\n      markovChain[current] = {next: 1}\n\n  generatedText = \"\"\n  current = random.choice(list(markovChain))\n  generatedText += current\n\n  for i in range(100):\n    choices = markovChain[current]\n    choices = [\n      key for key, value in choices.items()\n      for i in range(value)\n    ]\n    try:\n      current = random.choice(choices)\n      generatedText += \" \" + current\n    except:\n      break\n\n  return generatedText\n\ntext = 'Alice was beginning to get very tired of sitting by her sister on the bank, and of having nothing to do: once or twice she had peeped into the book her sister was reading, but it had no pictures or conversations in it, `and what is the use of a book,' thought Alice `without pictures or conversation?'\n\nprint(generateMarkov(text))", "predict": "import random\n\n# Create a dictionary to store the Markov chain\nmarkov_chain = {}\n\n# Read the input text\nwith open('alice.txt', 'r') as f:\n text = f.read()\n\n# Split the text into words\nwords = text.split()\n\n# Calculate the frequency of each word\nfor word in words:\n if word in markov_chain:\n markov_chain[word]['count'] += 1\n else:\n markov_chain[word] = {'count': 1, 'next': {}}\n\n# Calculate the probability of each word\nfor word in markov_chain:\n markov_chain[word]['prob'] = markov_chain[word]['count'] / len(words)\n\n# Generate the Markov chain\ndef generate_markov_chain(length):\n result = ''\n word = random.choice(list(markov_chain.keys()))\n for _ in range(length):\n result += word +''\n result += '\\n'\n return result\n\n# Generate a Markov chain of length 10\nprint(generate_markov_chain(10))"}
{"prompt": "Write a Python program to determine if a number provided by the user is prime or not.\n17 ", "label": "# Ask the user for a number\nnum = int(input('Enter a number: '))\n\n# Set initial values\nis_prime = True\n\n# Check for prime\nfor i in range(2, num):\n if num % i == 0:\n is_prime = False\n break\n\n# Output result\nif is_prime:\n print(f'{num} is a prime number.')\nelse:\n print(f'{num} is not a prime number.')", "predict": "def is_prime(num):\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nnum = int(input(\"Enter a number: \"))\n\nif is_prime(num):\n    print(f\"{num} is a prime number\")\nelse:\n    print(f\"{num} is not a prime number\")"}
{"prompt": "Write a Python program to calculate the difference between the lowest and highest value for an array of integers.\n[12, 24, 3, 8, -1] ", "label": "def diffHighestLowest(arr):\n    lowest = min(arr)\n    highest = max(arr)\n    return highest - lowest\n\narr = [12, 24, 3, 8, -1]\ndifference = diffHighestLowest(arr)\nprint(difference)  # 25", "predict": "def find_difference(arr):\n    return max(arr) - min(arr)\n\nprint(find_difference([12, 24, 3, 8, -1]))"}
{"prompt": "Rewrite the following code snippet to find prime numbers using Python.\nNot applicable ", "label": "def is_prime(num):\n    # Iterate from 2 to the square root of the number\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n# Iterate from 2 to n\nfor n in range(2, n+1):\n    # Check if the number is prime\n    if is_prime(n):\n        print(n)", "predict": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nnums = range(2, 100)\nfor num in nums:\n    if is_prime(num):\n        print(num)"}
{"prompt": "Write a Python program to create a dictionary where the keys are numbers between 1 and 15 (both included) and the values are square of keys. ", "label": "d = {}\n\nfor i in range(1, 16):\n    d[i] = i**2\n\nprint(d)", "predict": "d = {}\nfor i in range(1, 16):\n    d[i] = i**2\n\nprint(d)"}
{"prompt": "Write a Python program to calculate the sum of all even numbers less than or equal to n. ", "label": "def sum_of_even_numbers(n):\n result = 0\n for i in range(2, n+1, 2):\n result += i\n return result", "predict": "def sum_of_even_numbers(n):\n    result = 0\n    for i in range(n+1):\n        if i % 2 == 0:\n            result += i\n    return result"}
{"prompt": "Create a Python script to calculate the Fibonacci numbers up to a given number. ", "label": "def Fibonacci(n): \n\tif n==0: \n\t\treturn 0\n\tif n==1: \n\t\treturn 1\n\telse: \n\t\treturn Fibonacci(n-1)+Fibonacci(n-2)", "predict": "def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \n\n# Driver Program \n\nprint(Fibonacci(9))"}
{"prompt": "Write a Python program to calculate the total cost of a shopping cart. The program should consider the item prices, quantity, shipping cost, and any applicable taxes.\n[ \n {\"name\": \"widget\", \"price\": 10, \"quantity\": 5 },\n {\"name\": \"thingy\", \"price\": 7, \"quantity\": 3 },\n {\"name\": \"doodad\", \"price\": 5, \"quantity\": 2 },\n]\nShipping cost: 7.50\nTax rate: 9.5% ", "label": "items = [\n {\"name\": \"widget\", \"price\": 10, \"quantity\": 5 },\n {\"name\": \"thingy\", \"price\": 7, \"quantity\": 3 },\n {\"name\": \"doodad\", \"price\": 5, \"quantity\": 2 },\n]\n\ntaxRate = 0.095\nshippingCost = 7.50\n\ntotalCost = 0\n\nfor item in items:\n totalCost += item['price'] * item['quantity']\n\ntotalCost += totalCost * taxRate\ntotalCost += shippingCost\n\nprint('Total cost:', totalCost)", "predict": "items = [\n {\"name\": \"widget\", \"price\": 10, \"quantity\": 5 },\n {\"name\": \"thingy\", \"price\": 7, \"quantity\": 3 },\n {\"name\": \"doodad\", \"price\": 5, \"quantity\": 2 },\n]\n\n# Calculate the total cost of the items\ntotal_cost = 0\nfor item in items:\n total_cost += item[\"price\"] * item[\"quantity\"]\n\n# Calculate the shipping cost\nshipping_cost = 7.50\n\n# Calculate the tax rate\ntax_rate = 0.095\n\n# Calculate the total cost with shipping and tax\ntotal_cost += shipping_cost\ntotal_cost *= (1 + tax_rate)\n\n# Print the total cost\nprint(\"Total cost: $\" + str(total_cost))"}
{"prompt": "In Python, create a function to find the maximum value within a nested dictionary.\nsample_dict = {\n    \"key1\": {\n        \"value1\": 10,\n        \"value2\": 20\n    },\n    \"key2\": {\n        \"value3\": 40\n    },\n} ", "label": "def findMaxValue(dict):\n    max_val = None\n    for key, value in dict.items():\n        if isinstance(value, dict):\n            max_val = max(findMaxValue(value), max_val)\n        else:\n            max_val = max(value, max_val)\n    return max_val\n\nprint(findMaxValue(sample_dict))", "predict": "def max_value(sample_dict):\n    max_value = float(\"-inf\")\n    for key1, value1 in sample_dict.items():\n        for key2, value2 in value1.items():\n            max_value = max(max_value, value2)\n    return max_value"}
{"prompt": "Write a function in Python that returns an object of the following time and date: Sunday March 7 5:30 PM. ", "label": "from datetime import datetime\n\ndef get_date_time():\n    dt = datetime(year=2021, month=3, day=7, hour=17, minute=30)\n    return dt\n\ndate_time = get_date_time()\nprint(date_time) # will output 2021-03-07 17:30:00", "predict": "from datetime import datetime\n\ndef get_date_time():\n    return datetime(year=2021, month=3, day=7, hour=17, minute=30)\n\ndate_time = get_date_time()\nprint(date_time)"}
{"prompt": "Generate a Python program to perform matrix multiplication on two given matrices. ", "label": "def matrix_multiplication(A, B):  \n    rows_A = len(A)  \n    cols_A = len(A[0])  \n    rows_B = len(B)  \n    cols_B = len(B[0])  \n    result = [[0 for i in range(cols_B)] for j in range(rows_A)]  \n    for i in range(rows_A): \n        for j in range(cols_B): \n            for k in range(cols_A): \n                result[i][j] += A[i][k] * B[k][j] \n    return result", "predict": "def matrix_mul(A, B):\n    # A and B should have the same number of columns\n    rows_A, cols_A = A.shape\n    rows_B, cols_B = B.shape\n    assert cols_A == rows_B\n\n    # Create an empty matrix to store the result\n    C = [[0 for i in range(cols_B)] for j in range(rows_A)]\n\n    # Perform matrix multiplication\n    for i in range(rows_A):\n        for j in range(cols_B):\n            for k in range(cols_A):\n                C[i][j] += A[i][k] * B[k][j]\n    return C"}
{"prompt": "Write a Python script to read an array from the user and then determine the mean and median of the array.\narr = [10, 15, 20, 25, 30, 35] ", "label": "def mean_median(arr): \n      arr_sum = 0 \n      for i in range(len(arr)): \n            arr_sum += arr[i] \n      \n      mean = arr_sum/len(arr) \n    \n      arr = sorted(arr) \n      if len(arr) % 2 != 0: \n            median = arr[floor(len(arr)/2)] \n      else: \n            median = (arr[len(arr)//2] + arr[len(arr)//2 - 1]) / 2\n      \n      return mean, median\n\nmean, median = mean_median(arr) \nprint(\"Mean =\", mean) \nprint(\"Median =\", median)", "predict": "# Read the array from the user\narr = [10, 15, 20, 25, 30, 35]\n\n# Calculate the mean\nmean = sum(arr) / len(arr)\n\n# Calculate the median\narr.sort()\nif len(arr) % 2 == 0:\n median = (arr[int(len(arr) / 2)] + arr[int(len(arr) / 2) - 1]) / 2\nelse:\n median = arr[int(len(arr) / 2)]\n\n# Print the results\nprint(\"Mean: {:.2f}\".format(mean))\nprint(\"Median: {:.2f}\".format(median))"}
{"prompt": "Create an algorithm in Python to check whether an array has even or odd number of elements.\n[1, 2, 3, 4] ", "label": "def is_array_even(arr): \n  if len(arr)%2 == 0:\n    return True\n  else:\n    return False", "predict": "def is_even_or_odd(arr):\n    if len(arr) % 2 == 0:\n        return 'even'\n    else:\n        return 'odd'\n\narr = [1, 2, 3, 4]\nresult = is_even_or_odd(arr)\nprint(result)"}
{"prompt": "Implement a Python function to calculate the Gini coefficient of a given dataset.\n[2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,21] ", "label": "def gini(x):\n    \"\"\"Calculate Gini Coefficient of a given dataset.\"\"\"\n    # calculate the frequency of each item in x\n    x_value_counts = x.value_counts().sort_index() \n\n    # calculate the cumulative sum of x_value_counts\n    x_cum_sum = x_value_counts.cumsum()\n\n    # calculate the Lorenz values\n    n = len(x)\n    lorenz = x_cum_sum / n\n    lorenz = np.insert(lorenz, 0, 0) # add 0 to the beginning of array\n\n    # calculate the Gini Coefficient\n    width = lorenz[:-1] - lorenz[1:]\n    gini_coef = (1 / n) * sum(width * (lorenz[1:] + lorenz[:-1]))\n\n    return gini_coef\n\nif __name__ == '__main__':\n    x = np.array([2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,21])\n    gini_coef = gini(x)\n    print(gini_coef) # should print 0.605", "predict": "def gini_coefficient(data):\n    data.sort()\n    cum_sum = 0\n    for i in range(len(data)):\n        cum_sum += data[i]\n        data[i] = cum_sum/len(data)\n\n    gini = 0\n    for i in range(len(data)):\n        gini += abs(data[i] - 0.5)\n    gini = gini/len(data)\n    return gini\n\nprint(gini_coefficient([2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,21]))"}
{"prompt": "Generate a neural network model with TensorFlow and Python for classifying hand-written digits from the MNIST dataset.\nNot applicable ", "label": "import tensorflow as tf\n\n# Import MNIST data\nfrom tensorflow.examples.tutorials.mnist import input_data\nmnist = input_data.read_data_sets(\"/tmp/data\", one_hot=True)\n\n# Parameters\nlearning_rate = 0.001\ntraining_epochs = 15\nbatch_size = 100\ndisplay_step = 1\n\n# Network Parameters\nn_hidden_1 = 256 # 1st layer number of neurons\nn_hidden_2 = 256 # 2nd layer number of neurons\nn_input = 784 # MNIST data input (img shape: 28*28)\nn_classes = 10 # MNIST total classes (0-9 digits)\n\n# tf Graph input\nX = tf.placeholder(\"float\", [None, n_input])\nY = tf.placeholder(\"float\", [None, n_classes])\n\n# Store layers weight & bias\nweights = {\n    'h1': tf.Variable(tf.random_normal([n_input, n_hidden_1])),\n    'h2': tf.Variable(tf.random_normal([n_hidden_1, n_hidden_2])),\n    'out': tf.Variable(tf.random_normal([n_hidden_2, n_classes]))\n}\nbiases = {\n    'b1': tf.Variable(tf.random_normal([n_hidden_1])),\n    'b2': tf.Variable(tf.random_normal([n_hidden_2])),\n    'out': tf.Variable(tf.random_normal([n_classes]))\n}\n\n\n# Create model\ndef multilayer_perceptron(x):\n    # Hidden fully connected layer with 256 neurons\n    layer_1 = tf.add(tf.matmul(x, weights['h1']), biases['b1'])\n    # Hidden fully connected layer with 256 neurons\n    layer_2 = tf.add(tf.matmul(layer_1, weights['h2']), biases['b2'])\n    # Output fully connected layer with a neuron for each class\n    out_layer = tf.matmul(layer_2, weights['out']) + biases['out']\n    return out_layer\n\n# Construct model\nlogits = multilayer_perceptron(X)\n\n# Define loss and optimizer\nloss_op = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(\n    logits=logits, labels=Y))\noptimizer = tf.train.AdamOptimizer(learning_rate=learning_rate)\ntrain_op = optimizer.minimize(loss_op)\n\n# Initializing the variables\ninit = tf.global_variables_initializer()\n\n# Train model\nmodel = tf.Session()\nmodel.run(init)\n\n# Training cycle\nfor epoch in range(training_epochs):\n    avg_cost = 0.\n    total_batch = int(mnist.train.num_examples/batch_size)\n    # Loop over all batches\n    for i in range(total_batch):\n        batch_x, batch_y = mnist.train.next_batch(batch_size)\n        # Run optimization op (backprop) and cost op (to get loss value)\n        _, c = model.run([train_op, loss_op], feed_dict={X: batch_x,\n                                                        Y: batch_y})\n        # Compute average loss\n        avg_cost += c / total_batch\n    # Display logs per epoch step\n    if epoch % display_step == 0:\n        print(\"Epoch:\", '%04d' % (epoch+1), \"cost=\", \\\n            \"{:.9f}\".format(avg_cost))\nprint(\"Optimization Finished!\")\n\n# Test model\npred = tf.nn.softmax(logits)  # Apply softmax to logits\ncorrect_prediction = tf.equal(tf.argmax(pred, 1), tf.argmax(Y, 1))\n# Calculate accuracy\naccuracy = tf", "predict": "\n# Import libraries\nimport tensorflow as tf\nfrom tensorflow.keras import layers\n\n# Create the model\nmodel = tf.keras.Sequential([\n layers.Flatten(input_shape=(28, 28)),\n layers.Dense(128, activation='relu'),\n layers.Dropout(0.2),\n layers.Dense(10, activation='softmax')\n])\n\n# Compile the model\nmodel.compile(optimizer='adam',\n loss='sparse_categorical_crossentropy',\n metrics=['accuracy'])\n\n# Fit the model\nmodel.fit(x_train, y_train, epochs=5)"}
{"prompt": "Write a function to generate a prime number sequence using Python. ", "label": "def generate_prime_numbers(n): \n        primes = [True for i in range(n+ 1)] \n        p = 2\n        while (p * p <= n): \n            if (primes[p] == True): \n                for i in range(p * p, n + 1, p): \n                    primes[i] = False\n            p += 1\n        primes[0] = False\n        primes[1] = False\n        for p in range(n + 1): \n            if primes[p]: \n                print(p)", "predict": "def generate_prime_sequence(n):\n    sequence = []\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            sequence.append(i)\n    return sequence"}
{"prompt": "Write a Python program that removes duplicates from a list.\nInput List: [1, 2, 3, 4, 3, 2, 1] ", "label": "def remove_duplicates(my_list):\n return list(dict.fromkeys(my_list))\n\nmy_list = [1, 2, 3, 4, 3, 2, 1]\n\nprint(remove_duplicates(my_list)) # output [1, 2, 3, 4]", "predict": "def remove_duplicates(lst):\n    new_list = []\n    for item in lst:\n        if item not in new_list:\n            new_list.append(item)\n    return new_list\n\nresult = remove_duplicates([1, 2, 3, 4, 3, 2, 1])\nprint(result)"}
{"prompt": "Generate a Python script to sort the given list of words.\n['bubble', 'selection', 'quicksort', 'insertion'] ", "label": "# function to sort the given list of words\ndef sort_words(words):\n    # sort the list of words in alphabetical order\n    words.sort()\n\n    # print the sorted list of words\n    print(words)\n\n# driver code\nwords = ['bubble', 'selection', 'quicksort', 'insertion']\nsort_words(words)\n\n# output\n['bubble', 'insertion', 'quicksort', 'selection']", "predict": "def sort_words(words):\n    words.sort()\n    return words"}
{"prompt": "Generate a function for calculating the average of a list of numbers in Python.\nNot applicable ", "label": "def avg_list(lst):\n sum = 0\n count = 0\n for i in lst:\n  sum += i\n  count += 1\n avg = sum / count\n return avg", "predict": "def average(numbers):\n total = 0\n for num in numbers:\n total += num\n return total / len(numbers)"}
{"prompt": "Generate a Python program that compares two binary trees to check if they are similar. ", "label": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef are_similar(root1, root2):\n    if root1 is None and root2 is None:\n        return True\n    if (root1 and root2) is None or (root1 or root2) is None:\n        return False\n    if root1.val != root2.val:\n        return False\n    else:\n        return are_similar(root1.left, root2.left) and are_similar(root1.right, root2.right)", "predict": "def is_similar(tree1, tree2):\n    if tree1 is None and tree2 is None:\n        return True\n    if tree1 is not None and tree2 is not None:\n        return tree1.val == tree2.val and is_similar(tree1.left, tree2.left) and is_similar(tree1.right, tree2.right)\n    return False"}
{"prompt": "Create a program for solving a quadratic equation in Python.\nEquation: x2 + 3x - 4 = 0 ", "label": "import math\n  \ndef solveQuadratic(a, b, c): \n    discriminant = (b**2) - (4*a*c);\n    \n    # If discriminant is negative there are no real roots.\n    if (discriminant < 0): \n        return {\n            \"status\": false,\n            \"roots\": []\n        }\n    # If discriminant is zero, there is only one real roots.\n    elif (discriminant == 0):\n        x = -b/(2*a)\n        return {\n            \"status\": true,\n            \"roots\": [x]\n        }\n    # Otherwise there are 2 real roots \n    else:\n        x1 = (-b + math.sqrt(discriminant)) / (2*a); \n        x2 = (-b - math.sqrt(discriminant)) / (2*a); \n        return {\n            \"status\": true,\n            \"roots\": [x1, x2]\n        }\n\na = 1\nb = 3\nc = -4\n\nprint(solveQuadratic(a, b, c)) #{'status': True, 'roots': [-4.0, 1.0]}", "predict": "def quadratic_equation(a, b, c):\n    # calculate the discriminant\n    d = (b**2) - (4*a*c)\n    \n    # find two solutions\n    sol1 = (-b-cmath.sqrt(d))/(2*a)\n    sol2 = (-b+cmath.sqrt(d))/(2*a)\n    \n    return sol1, sol2\n\n# input coefficients\na = 1\nb = 3\nc = -4\n\n# call the function\nsol1, sol2 = quadratic_equation(a, b, c)\n\nprint('The solutions are {0} and {1}'.format(sol1, sol2))"}
{"prompt": "Construct a Python code for adding two matrices. ", "label": "def add_matrix(matrix1, matrix2):\n    if len(matrix1) != len(matrix2):\n        return 'Matrices not compatible'\n    if len(matrix1[0]) != len(matrix2[0]):\n        return 'Matrices not compatible'\n    \n    rows = len(matrix1)\n    cols = len(matrix1[0])\n    result = [[sum(row) for row in zip(*size)] for size in zip(matrix1, matrix2)]\n    \n    return result", "predict": "def add_matrix(matrix1, matrix2):\n    rows = len(matrix1)\n    cols = len(matrix1[0])\n    result = [[0 for i in range(cols)] for j in range(rows)]\n\n    for i in range(rows):\n        for j in range(cols):\n            result[i][j] = matrix1[i][j] + matrix2[i][j]\n\n    return result"}
{"prompt": "Generate a Python program which takes a string as input and prints all of its substrings in order from longest to shortest length. ", "label": "def substring_in_order(string): \n    result = [] \n    n = len(string) \n    for l in range(n, 0, -1): \n        for i in range(n-l + 1): \n            result.append(string[i:i+l]) \n    return result \n\nstring = input(\"Enter the string: \") \nprint (\"All substrings in order from longest to shortest:\") \nprint (substring_in_order(string))", "predict": "def substring_length_sort(s):\n    substrings = [s[i:j] for i in range(len(s)) for j in range(i + 1, len(s) + 1)]\n    substrings.sort(key=len, reverse=True)\n    for substring in substrings:\n        print(substring)"}
{"prompt": "Generate a Python function which takes an array and a value and returns the index at which this value is present in the array.\narr = [2, 5, 9, 15], x = 5 ", "label": "def find_index(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1\n\nprint(find_index(arr, x))", "predict": "def find_index(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1\n\narr = [2, 5, 9, 15]\nx = 5\n\nprint(find_index(arr, x)) # 1"}
{"prompt": "Develop a Python program to find the common elements in two lists.\nList 1: [3, 9, 15, 21, 27]\nList 2: [21, 7, 13, 29, 31] ", "label": "common_elements = [] \n  \n# using loop \nfor i in [3, 9, 15, 21, 27]:  \n    for j in [21, 7, 13, 29, 31]:  \n        if i == j: \n            common_elements.append(i) \n  \n# printing common elements \nprint(common_elements) \n# Output: [21]", "predict": "def find_common_elements(list1, list2):\n    common_elements = []\n    for element in list1:\n        if element in list2:\n            common_elements.append(element)\n    return common_elements\n\nlist1 = [3, 9, 15, 21, 27]\nlist2 = [21, 7, 13, 29, 31]\n\nprint(find_common_elements(list1, list2))"}
{"prompt": "Create a Python program that takes in two strings and returns an integer indicating the number of common substrings between the two strings.\ns1 = \"abcd\", s2 = \"bae\" ", "label": "def num_common_substrings(s1, s2):\n    count = 0\n    for i in range(len(s1)):\n        for j in range(len(s2)):\n            if s1[i] == s2[j]:\n                count += 1\n    return count\n\nresult = num_common_substrings(\"abcd\", \"bae\")\nprint(result)", "predict": "def count_common_substrings(s1, s2):\n    # Count the number of common substrings\n    count = 0\n    for i in range(len(s1)):\n        for j in range(len(s2)):\n            if s1[i] == s2[j]:\n                count += 1\n    return count\n\ns1 = \"abcd\"\ns2 = \"bae\"\nprint(count_common_substrings(s1, s2)) # 1"}
{"prompt": "Generate a Python program to convert a string to its lowercase version. ", "label": "def str_to_lower(string):\n    new_string = \"\"\n\n    for char in string:\n        new_string += char.lower()\n\n    return new_string", "predict": "def string_to_lowercase(string):\n    return string.lower()"}
{"prompt": "Can you generate a function in Python that shuffles a given list? ", "label": "import random\n\ndef shuffle_list(list): \n    # Initialize the random number generator\n    random.seed()\n\n    # Shuffle the list\n    random.shuffle(list) \n\n    # Return the list\n    return list", "predict": "import random\n\ndef shuffle(list):\n    random.shuffle(list)\n    return list"}
{"prompt": "Write a Python function to validate an a list of emails. The function should return a boolean indicating whether a given email address is valid.\nmail_list = [\"example.user@gmail.com\", \"bad@example\"] ", "label": "def validate_mail_list(mail_list):\n    for mail in mail_list:\n        if not re.match(\"[^@]+@[^@]+\\.[^@]+\", mail):\n            return False\n    return True", "predict": "def validate_emails(mail_list):\n valid_emails = []\n for email in mail_list:\n if re.match(r\"[^@]+@[^@]+\\.[^@]+\", email):\n valid_emails.append(email)\n return all(email in valid_emails for email in mail_list)"}
{"prompt": "Create a Python script that will perform several simple math operations. The script should accept two integers as inputs and output the results of the following operations: addition, subtraction, multiplication, division, and modulo.\nint1 = 10\nint2 = 5 ", "label": "int1 = 10\nint2 = 5\n\naddition = int1 + int2\nprint('Addition:', addition)\n\nsubtraction = int1 - int2\nprint('Subtraction:', subtraction)\n\nmultiplication = int1 * int2\nprint('Multiplication:', multiplication)\n\ndivision = int1 / int2\nprint('Division:', division)\n\nmodulo = int1 % int2\nprint('Modulo:', modulo)", "predict": "def math_operations(int1, int2):\n    '''\n    This function will perform several simple math operations\n    '''\n    # addition\n    add = int1 + int2\n    # subtraction\n    sub = int1 - int2\n    # multiplication\n    mul = int1 * int2\n    # division\n    div = int1 / int2\n    # modulo\n    mod = int1 % int2\n\n    # return results\n    return add, sub, mul, div, mod\n\n# main program\nint1 = 10\nint2 = 5\n\nadd, sub, mul, div, mod = math_operations(int1, int2)\n\nprint('Addition:', add)\nprint('Subtraction:', sub)\nprint('Multiplication:', mul)\nprint('Division:', div)\nprint('Modulo:', mod)"}
{"prompt": "Create a Python program to perform sentiment analysis on product reviews. The program should use natural language processing techniques like tokenization and n-grams to generate features for sentiment analysis and use a classification model to assign sentiments to the reviews.\nNot applicable ", "label": "import numpy as np\nimport pandas as pd\nimport nltk\nfrom nltk.tokenize import word_tokenize\nimport matplotlib.pyplot as plt\nfrom nltk.corpus import stopwords\nfrom nltk.stem import WordNetLemmatizer \nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import classification_report\n\n# Read in the data\ndata = pd.read_csv('reviews.csv')\n\n# Tokenise the texts\ndata['tokenised'] = data['review'].apply(word_tokenize)\n\n# Remove stopwords\nstop_words = set(stopwords.words('english'))\ndata['filtered'] = data['tokenised'].apply(lambda x: [val for val in x if val not in stop_words])\n\n# Normalize words\nwordnet_lemmatizer = WordNetLemmatizer()\ndata['normalised'] = data['filtered'].apply(lambda x: [wordnet_lemmatizer.lemmatize(val) for val in x])\n\n# Generate features using CountVectorizer\ncv = CountVectorizer()\ndata['features'] = cv.fit_transform(data['normalised'].astype('str')).toarray()\n\n# Split into training and test sets\nX = data['features']\ny = data['sentiment']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train model\nmodel = MultinomialNB(alpha=0.1)\nmodel.fit(X_train, y_train)\n\n# Predict using the test set\npredictions = model.predict(X_test)\n\n# Generate a classification report\nreport = classification_report(y_test, predictions)\nprint(report)", "predict": "import nltk\nfrom nltk.tokenize import word_tokenize\nfrom nltk.stem.porter import PorterStemmer\nfrom nltk.corpus import stopwords\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Tokenize the reviews\ndef tokenize(review):\n words = word_tokenize(review)\n ps = PorterStemmer()\n stemmed_words = [ps.stem(word) for word in words if word not in stopwords.words('english')]\n return stemmed_words\n\n# Generate features\ncorpus = [tokenize(review) for review in product_reviews]\ncv = CountVectorizer(max_features=1000)\nX = cv.fit_transform(corpus)\n\n# Split the data into train and test sets\ny = [sentiment for sentiment in product_sentiments]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n# Train the model\nclf = MultinomialNB().fit(X_train, y_train)\n\n# Make predictions\ny_pred = clf.predict(X_test)"}
{"prompt": "Write a python program to clean up a list of emails and put them into a new list.\nThe original list of emails:\n['bob@example.com', 'alice+bob@cafe.com', 'bob@gmail.com.uk', 'bob+alice@example'] ", "label": "original_list = ['bob@example.com', 'alice+bob@cafe.com', 'bob@gmail.com.uk', 'bob+alice@example']\n\nclean_list = []\n\nfor email in original_list:\n email_without_plus = email.split('+')[0]\n email_without_dot_uk = email_without_plus.split('.uk')[0]\n clean_list.append(email_without_dot_uk)\n\nprint(clean_list) # prints ['bob@example.com', 'alice@cafe.com', 'bob@gmail.com', 'bob@example']", "predict": "def clean_emails(emails):\n cleaned_emails = []\n for email in emails:\n  cleaned_email = email.split('+')[0]\n  cleaned_email = cleaned_email.split('@')[0] + '@' + cleaned_email.split('@')[1]\n  cleaned_emails.append(cleaned_email)\n return cleaned_emails\n\noriginal_list = ['bob@example.com', 'alice+bob@cafe.com', 'bob@gmail.com.uk', 'bob+alice@example']\n\ncleaned_list = clean_emails(original_list)\n\nprint(cleaned_list)\n# Output: ['bob@example.com', 'alice@cafe.com', 'bob@gmail.com', 'bob@example.com']"}
{"prompt": "Generate sample data for a web application using Python's faker library. The output should contain three columns of data: name, email, and age.\nNot applicable ", "label": "from faker import Faker\n\nfake = Faker()\nfor _ in range(10):\n print(fake.name(), fake.email(), fake.random_int(min=18, max=60))", "predict": "from faker import Faker\n\nfake = Faker()\n\nfor _ in range(10):\n print(fake.name(), fake.email(), fake.random_int(min=18, max=60))"}
{"prompt": "Create a Python algorithm to classify positive and negative sentiment in tweets. ", "label": "def sentiment_analysis(tweets):\n    # Initialize a list to store the result \n    results = [] \n\n    # Iterate through each tweet\n    for tweet in tweets:\n        # Clean the tweet \n        tweet = preprocessing(tweet)\n\n        # Vectorize the tweet and obtain the prediction \n        tweet_vector = vectorize(tweet)\n        prediction = predict_sentiment(tweet_vector)\n\n        # Append the prediction to the result list\n        if prediction == 1:\n            results.append(\"Positive\")\n        elif preduction == 0:\n            results.append(\"Negative\")\n\n    return results", "predict": "def sentiment_classifier(tweet):\n    \"\"\"Classify the sentiment of a tweet as positive or negative.\"\"\"\n    # Create a bag of words\n    bag_of_words = bag_of_words_generator(tweet)\n\n    # Calculate the score\n    score = 0\n    for word in bag_of_words:\n        if word in positive_words:\n            score += 1\n        elif word in negative_words:\n            score -= 1\n\n    # Classify the sentiment\n    if score > 0:\n        sentiment = \"positive\"\n    elif score < 0:\n        sentiment = \"negative\"\n    else:\n        sentiment = \"neutral\"\n\n    return sentiment"}
{"prompt": "Parse the given URL and print out the protocol, domain name, and path using Python.\nhttps://www.example.com/path/to/file ", "label": "import urllib.parse\n\nurl = 'https://www.example.com/path/to/file'\nparsed_url = urllib.parse.urlparse(url)\n\n# Get the protocol\nprotocol = parsed_url.scheme\n\n# Get the domain name\ndomain_name = parsed_url.netloc\n\n# Get the path\npath = parsed_url.path\n\n# Print the results\nprint('Protocol:', protocol)\nprint('Domain name:', domain_name)\nprint('Path:', path)\n\n# Output:\n# Protocol: https\n# Domain name: www.example.com\n# Path: /path/to/file", "predict": "import urllib.parse\n\nurl = 'https://www.example.com/path/to/file'\n\nparsed_url = urllib.parse.urlparse(url)\n\nprotocol = parsed_url.scheme\ndomain_name = parsed_url.netloc\npath = parsed_url.path\n\nprint(protocol)\nprint(domain_name)\nprint(path)"}
{"prompt": "Write a recursive Python function to generate Fibonacci numbers. ", "label": "def fibonacci(n):\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n \nprint(fibonacci(10))", "predict": "def fibonacci(n): \n    if n <= 1: \n        return n \n    else: \n        return(fibonacci(n-1) + fibonacci(n-2)) \n\n# Driver Code \nprint(fibonacci(9))"}
{"prompt": "Create a Kubernetes pod setup that publishes a tweet every 5 minutes.\nNot applicable ", "label": "apiVersion: v1\nkind: Pod\nmetadata:\n  name: tweet-publisher\nspec:\n  containers:\n    - name: tweet-publisher\n      image: <INSERT_PUBLIC_PULLABLE_IMAGE_PATH_HERE>\n      command:\n        - sh\n        - -c\n        - 'crontab -lcrontab && while true; do python publish-tweet.py && crontab -l | { cat; echo \"*/5 * * * * python publish-tweet.py\"; } | crontab -; sleep 31622400; done'\n      volumeMounts:\n        - mountPath: /crontab/crontab\n          subPath: crontab\n          name: cronmount\n  volumes:\n    - name: cronmount\n      configMap:\n        name: tweet-cron\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: tweet-cron\ndata:\n  crontab: \"* * * * * python publish-tweet.py\"", "predict": "apiVersion: v1\nkind: Pod\nmetadata:\n name: tweet-bot\nspec:\n containers:\n - name: tweet-bot\n image: python:3\n command: [\"python\"]\n args: [\"tweet-bot.py\"]\n env:\n - name: CONSUMER_KEY\n value: <your_consumer_key>\n - name: CONSUMER_SECRET\n value: <your_consumer_secret>\n - name: ACCESS_TOKEN\n value: <your_access_token>\n - name: ACCESS_TOKEN_SECRET\n value: <your_access_token_secret>\n volumeMounts:\n - name: tweet-volume\n mountPath: /tweets\n subPath: tweet-bot.py\n volumes:\n - name: tweet-volume\n configMap:\n name: tweet-bot-config\n\napiVersion: v1\nkind: ConfigMap\nmetadata:\n name: tweet-bot-config\ndata:\n tweet-bot.py: |\n import tweepy\n import time\n\nconsumer_key = '<your_consumer_key>'\nconsumer_secret = '<your_consumer_secret>'\naccess_token = '<your_access_token>'\naccess_token_secret = '<your_access_token_secret>'\n\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\napi = tweepy.API(auth)\n\nwhile True:\n tweet = \"Publishing a tweet every 5 minutes\"\n api.update_status(tweet)\n time.sleep(300)"}
{"prompt": "Write a code to generate a two-dimensional array with zeros shapes in Python\nRow = 3, Column = 3 ", "label": "\"\"\"\nWrite a code to generate a two-dimensional array with zeros shapes in Python\n\"\"\"\n\ndef generate_zeros_array(row,col):\n    return [[0] * col for _ in range(row)]\n\n# Example\nrow = 3\ncol = 3\n\narray = generate_zeros_array(row, col)\nprint(array)\n# Output: [[0, 0, 0], [0, 0, 0], [0, 0, 0]]", "predict": "def generate_array(row, column):\n    arr = [[0 for x in range(column)] for y in range(row)]\n    return arr"}
{"prompt": "Write a Python code to create a dictionary which contains a data structrue in the form of [x:x^2] where x is the key and x^2 is the value.\nnumbers = [1, 2, 3, 4, 5] ", "label": "numbers = [1, 2, 3, 4, 5] \n\ndict_numbers = {num: num**2 for num in numbers}\nprint(dict_numbers)", "predict": "numbers = [1, 2, 3, 4, 5]\n\nsquares = {num:num**2 for num in numbers}\n\nprint(squares)"}
{"prompt": "Create a Python script to print the numbers from 1 to 50, but for multiples of 3 print \"Fizz\" instead of the number, for multiples of 5 print \"Buzz\" instead of the number and for multiples of both 3 and 5 print \"FizzBuzz\".\nNot applicable ", "label": "for i in range(1, 51):\n    if i % 3 == 0 and i % 5 == 0:\n        print(\"FizzBuzz\")\n    elif i % 3 == 0:\n        print(\"Fizz\")\n    elif i % 5 == 0:\n        print(\"Buzz\")\n    else:\n        print(i)", "predict": "for i in range(1, 51):\n if i % 3 == 0 and i % 5 == 0:\n print(\"FizzBuzz\")\n elif i % 3 == 0:\n print(\"Fizz\")\n elif i % 5 == 0:\n print(\"Buzz\")\n else:\n print(i)"}
{"prompt": "Create a Python program to calculate the square root of a user-defined positive number.\nn = 100 ", "label": "import math\n\nn = 100\n\n#Calculate the square root of a number\nsquare_root = math.sqrt(n)\n\nprint(f'Square root of {n} is {square_root}')", "predict": "import math\n\nn = 100\n\n# Calculate the square root of n\nsqrt_n = math.sqrt(n)\n\n# Print the result\nprint(\"The square root of {} is {}\".format(n, sqrt_n))"}
{"prompt": "Create a Python class called Rectangle to represent a two-dimensional rectangle with a length and width. ", "label": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n\n    def area(self):\n        return self.length * self.width", "predict": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n    \n    def get_area(self):\n        return self.length * self.width"}
{"prompt": "Create a data visualization dashboard in Python using Matplotlib. ", "label": "import matplotlib\nimport matplotlib.pyplot as plt\n\n# Generate the data for the dashboard\nx = [1,2,3,4,5]\ny = [10,25,30,50,80]\n\n# Create the figure and set the size\nfig = plt.figure(figsize=(10,6))\n\n# Configure the plot\nplt.plot(x, y, color='green', marker='o', linestyle='dashed', linewidth=2, markersize=12)\nplt.title(\"My Data Visualization Dashboard\")\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\n\n# Show the plot\nplt.show()", "predict": "import matplotlib.pyplot as plt\n\n# Set up the figure\nfig, ax = plt.subplots()\n\n# Add data to the figure\nax.plot([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\nax.plot([1, 2, 3, 4, 5], [5, 4, 3, 2, 1])\n\n# Add a title\nax.set_title(\"Data Visualization Dashboard\")\n\n# Add labels\nax.set_xlabel(\"X-axis\")\nax.set_ylabel(\"Y-axis\")\n\n# Show the figure\nplt.show()"}
{"prompt": "Edit the following python code to prompt the user to enter the value of radius to calculate the area of a circle. ", "label": "# Calculate area of a circle\n\nPi = 3.14\n\n# Get radius from user\nradius = float(input(\"Please enter the radius of the circle: \"))\n\n# Calculate the circle area\narea = Pi*radius**2\n\n# Print the area\nprint(\"The area of the circle is:\", area)", "predict": "import math\n\n# prompt the user to enter the value of radius\nradius = float(input(\"Enter the radius of the circle: \"))\n\n# calculate the area of the circle\narea = math.pi * (radius ** 2)\n\n# print the area of the circle\nprint(\"The area of the circle is:\", area)"}
{"prompt": "Create a Python algorithm to identify the longest word in a sentence.\n“The rain in Spain stays mainly in the plain.” ", "label": "def find_longest_word(sentence):\n    words = sentence.split()\n    # initialise longest_word variable with 0\n    longest_word = 0\n    for word in words:\n        if len(word) > longest_word:\n            longest_word = len(word)\n            longest_word_str = word\n    return longest_word_str", "predict": "def longest_word(sentence):\n    words = sentence.split()\n    longest_word = ''\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word\n\nsentence = \"The rain in Spain stays mainly in the plain.\"\nprint(longest_word(sentence)) # \"stays\""}
{"prompt": "Write a Python script that can convert degrees Fahrenheit to degrees Celsius. ", "label": "def FahrenheitToCelsius(temp_fahrenheit):\n    temp_celsius = (temp_fahrenheit - 32) * 5/9\n    return temp_celsius", "predict": "def fahrenheit_to_celsius(fahrenheit):\n    celsius = (fahrenheit - 32) * 5/9\n    return celsius"}
{"prompt": "Generate a Python function that checks if a given number is an Armstrong number. ", "label": "def is_armstrong_number(num):   \n    n = len(str(num)) \n    # initialize sum  \n    temp = num  \n    sum_of_digits = 0\n  \n    # find sum of nth power of individual digits  \n    while temp > 0:  \n        digit = temp % 10  \n        sum_of_digits += digit ** n  \n        temp //= 10  \n  \n    # if num is equal to sum_of_digits then the number is an Armstrong number  \n    if num == sum_of_digits:  \n        return True \n  \n    else: \n        return False", "predict": "def is_armstrong_number(n):\n    num_digits = len(str(n))\n    sum_of_cubes = 0\n    temp = n\n\n    while temp > 0:\n        digit = temp % 10\n        sum_of_cubes += digit ** num_digits\n        temp //= 10\n\n    if n == sum_of_cubes:\n        return True\n    else:\n        return False"}
{"prompt": "Write a code in Python to print the following pattern: ", "label": "for i in range(5):\n    for j in range(i+1):\n        print(\"*\", end=\"\")\n    print(\"\")\n\nfor i in range(5, 0, -1):\n    for j in range(i):\n        print(\"*\", end=\"\")\n    print(\"\")", "predict": "for i in range(1, 6):\n    for j in range(1, i+1):\n        print(\"*\", end=\"\")\n    print()"}
{"prompt": "Program a web scraper in Python to extract the latest stock prices from specific websites.\n[\"AAPL stocks\", \"MSFT stocks\", \"FB stocks\", \"GOOG stocks\"] ", "label": "import requests\nfrom bs4 import BeautifulSoup\n\n# input\nstocks = [\"AAPL stocks\", \"MSFT stocks\", \"FB stocks\", \"GOOG stocks\"]\n\n# process\ndef get_stock_price(stock):\n    url = f\"https://finance.yahoo.com/quote/{stock}\"\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    price = soup.find('div', {'class': 'My(6px) Pos(r) smartphone_Mt(6px)'}).find('span').text\n    return price\n\n# output\nfor stock in stocks:\n    price = get_stock_price(stock)\n    print(f'The price of {stock} is {price}.')", "predict": "import requests\nimport bs4\n\n# List of stocks to scrape\nstocks = [\"AAPL stocks\", \"MSFT stocks\", \"FB stocks\", \"GOOG stocks\"]\n\n# Scrape stock prices\nfor stock in stocks:\n    # Get the HTML of the stock page\n    url = f\"https://www.example.com/stock/{stock}\"\n    response = requests.get(url)\n    html = response.text\n\n    # Parse the HTML using BeautifulSoup\n    soup = bs4.BeautifulSoup(html, 'html.parser')\n\n    # Extract the latest stock price\n    price = soup.find('div', class_='stock-price').text\n    print(f\"{stock} stock price: {price}\")"}
{"prompt": "The code provides Python wrappers around TensorFlow ops for decoding LibSVM input to tensors. To use it, call the `decode_libsvm` function with the following arguments: `input` (a `Tensor` of type `string`), `num_features` (an `int` that is `>= 1`), `dtype` (an optional `tf.DType` from: `tf.float32, tf.float64, tf.", "label": "\"\"\"Python wrappers around TensorFlow ops.\n\nThis file is MACHINE GENERATED! Do not edit.\nOriginal C++ source file: libsvm_ops.cc\n\"\"\"\n\nimport collections as _collections\nimport six as _six\n\nfrom tensorflow.python import pywrap_tensorflow as _pywrap_tensorflow\nfrom tensorflow.python.eager import context as _context\nfrom tensorflow.python.eager import core as _core\nfrom tensorflow.python.eager import execute as _execute\nfrom tensorflow.python.framework import dtypes as _dtypes\nfrom tensorflow.python.framework import errors as _errors\nfrom tensorflow.python.framework import tensor_shape as _tensor_shape\n\nfrom tensorflow.core.framework import op_def_pb2 as _op_def_pb2\n# Needed to trigger the call to _set_call_cpp_shape_fn.\nfrom tensorflow.python.framework import common_shapes as _common_shapes\nfrom tensorflow.python.framework import op_def_registry as _op_def_registry\nfrom tensorflow.python.framework import ops as _ops\nfrom tensorflow.python.framework import op_def_library as _op_def_library\nfrom tensorflow.python.util.tf_export import tf_export\n\n\n_decode_libsvm_outputs = [\"label\", \"feature_indices\", \"feature_values\",\n                         \"feature_shape\"]\n_DecodeLibsvmOutput = _collections.namedtuple(\n    \"DecodeLibsvm\", _decode_libsvm_outputs)\n\n\n@tf_export('decode_libsvm')\ndef decode_libsvm(input, num_features, dtype=_dtypes.float32, label_dtype=_dtypes.int64, name=None):\n  r\"\"\"Convert LibSVM input to tensors. The output consists of\n\n  a label and a feature tensor. The shape of the label tensor\n  is the same as input and the shape of the feature tensor is\n  `[input_shape, num_features]`.\n\n  Args:\n    input: A `Tensor` of type `string`. Each string is a record in the LibSVM.\n    num_features: An `int` that is `>= 1`. The number of features.\n    dtype: An optional `tf.DType` from: `tf.float32, tf.float64, tf.int32, tf.int64`. Defaults to `tf.float32`.\n    label_dtype: An optional `tf.DType` from: `tf.float32, tf.float64, tf.int32, tf.int64`. Defaults to `tf.int64`.\n    name: A name for the operation (optional).\n\n  Returns:\n    A tuple of `Tensor` objects (label, feature_indices, feature_values, feature_shape).\n\n    label: A `Tensor` of type `label_dtype`. A tensor of the same shape as input.\n    feature_indices: A `Tensor` of type `int64`. A 2-D int64 tensor of dense_shape [N, ndims].\n    feature_values: A `Tensor` of type `dtype`. A 1-D tensor of any type and dense_shape [N].\n    feature_shape: A `Tensor` of type `int64`. A 1-D int64 tensor of dense_shape [ndims].\n  \"\"\"\n  _ctx = _context._context\n  if _ctx is None or not _ctx._eager_context.is_eager:\n    num_features = _execute.make_int(num_features, \"num_features\")\n    if dtype is None:\n      dtype = _dtypes.float32\n    dtype = _execute.make_type(dtype, \"dtype\")\n    if label_dtype is None:\n      label_dtype = _dtypes.int64\n    label_dtype = _execute.make_type(label_dtype", "predict": "int32, tf.int64, tf.uint8, tf.uint16, tf.uint32, tf.uint64, tf.bool, tf.complex64, tf.complex128, tf.string, tf.qint8, tf.qint32, tf.qint64, tf.quint8, tf.quint32, tf.quint64, tf.qint16, tf.qint8, tf.qint16, tf.qint32, tf.qint64, tf.complex128, tf.string`), and `delimiter` (an optional `str`). The function returns a `Tensor` of type `tf.float32` or the given `dtype`."}
{"prompt": "Write a Python program to compute the sum of the values of a given dictionary\ndictionary = {'A':5, 'B':6, 'C':10} ", "label": "def dict_sum(dict):\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum", "predict": "def compute_sum(dictionary):\n    sum = 0\n    for key in dictionary:\n        sum += dictionary[key]\n    return sum\n\ndictionary = {'A':5, 'B':6, 'C':10}\n\nsum = compute_sum(dictionary)\nprint(sum)"}
{"prompt": "Create a REST API in Python that can be used to delete an item from a list.\nNot applicable ", "label": "from flask import Flask, request\nimport json\n\napp = Flask(__name__)\nitems = [\"Apple\", \"Banana\", \"Orange\"]\n\n@app.route('/items', methods=[\"GET\"])\ndef get_items():\n return json.dumps(items)\n\n@app.route('/items/<item>', methods=[\"DELETE\"])\ndef delete_item(item):\n if item in items:\n  items.remove(item)\n  message = \"Item successfully deleted.\"\n else:\n  message = \"Item not found.\"\n return json.dumps({\"message\": message})", "predict": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/list', methods=['GET', 'POST'])\ndef list_items():\n if request.method == 'GET':\n # Get the list of items\n elif request.method == 'POST':\n # Delete an item from the list\n return 'Item deleted'\n\nif __name__ == '__main__':\n app.run(debug=True)"}
{"prompt": "Read a given list of strings and create a new list of all strings that are longer than 5 characters long.\n['Python', 'is', 'Fun'] ", "label": "def filter_long_strings(string_list):\n long_strings = []\n for string in string_list:\n if len(string) > 5:\n long_strings.append(string)\n return long_strings\n\nstring_list = ['Python', 'is', 'Fun']\n\nlong_strings = filter_long_strings(string_list)\nprint(long_strings)", "predict": "[‘Python’, ‘Fun’]"}
{"prompt": "Craft an algorithm in Python to move all zeroes in a list to the end of the list.\n[3, 0, 1, 0, 5, 0, 2] ", "label": "def move_zeroes(lst):\n    # Count the number of non-zero elements\n    num_non_zeroes = 0\n    for num in lst:\n        if num != 0:\n            num_non_zeroes += 1\n  \n    # Initialize the new list\n    new_lst = []\n  \n    # Move all non-zeroes to the beginning of the new list\n    for i in range(num_non_zeroes):\n        new_lst.append(lst[i])\n  \n    # Append 0's to the end\n    for _ in range(len(lst)-num_non_zeroes):\n        new_lst.append(0)\n  \n    # Return the new list\n    return new_lst\n\nlst = [3, 0, 1, 0, 5, 0, 2]\nresult = move_zeroes(lst)\nprint(result)", "predict": "def move_zeros_end(arr):\n    zeros = []\n    non_zeros = []\n\n    for i in arr:\n        if i == 0:\n            zeros.append(i)\n        else:\n            non_zeros.append(i)\n\n    return non_zeros + zeros"}
{"prompt": "Create a Python program to implement the Fibonacci sequence. ", "label": "def fibonacci_seq(n): \n    if n==0: \n        return 0\n    elif n==1: \n        return 1\n    else: \n        return fibonacci_seq(n-1)+fibonacci_seq(n-2)", "predict": "def fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return(fibonacci(n-1) + fibonacci(n-2))"}
{"prompt": "Write a function in Python to print out an array backwards. ", "label": "def print_reverse_array(arr):\n for i in range(len(arr)-1, -1, -1): \n  print(arr[i])", "predict": "def print_backwards(arr):\n    for i in range(len(arr)-1, -1, -1):\n        print(arr[i])"}
{"prompt": "Create a Python program to find the possible prime numbers from one to one hundred by using the Sieve of Eratosthenes algorithm. ", "label": "def sieve_eratosthenes(n): \n    prime_list = [True] * (n+1) \n    prime_list[0] = False\n    prime_list[1] = False\n    primes = [] \n      \n    for i in range(2, n+1): \n        if prime_list[i] == True: \n            primes.append(i) \n            for j in range(i*i, n+1, i): \n                prime_list[j] = False\n    return primes \n  \nn = 100\nprint(\"The Prime numbers from 1 to 100 are:\")\nprint(sieve_eratosthenes(n))", "predict": "def sieve_of_eratosthenes(n):\n    prime_list = [True] * (n + 1)\n    prime_list[0] = False\n    prime_list[1] = False\n    for i in range(2, n + 1):\n        if prime_list[i] == True:\n            for j in range(2 * i, n + 1, i):\n                prime_list[j] = False\n    return [i for i in range(2, n + 1) if prime_list[i]]"}
{"prompt": "Create a Python function named \"Transpile\" that takes in four arguments: \"src_dir\", \"dst_dir\", \"model_filename\", and \"params_filename\". Inside the function, create a CPUPlace object and an Executor object using Paddle Fluid. Then, create a Scope object using fluid.core.Scope(). Load the inference program, feed target names, and fetch targets using fluid.io.load_inference_model() with the \"src_dir\", \"exe\", \"model_filename\", and \"params_filename\" arguments. Clone the inference program and apply the inference transpiler using fluid.InferenceTranspiler() and t.transpile(). Save the optimized inference program to \"dst_dir\" using fluid.io.save_persistables() and the \"inference_transpiler_program\" and \"params_filename\" arguments. If \"dst_dir\" does not exist, create it using os.makedirs(). Finally, create a main function that takes in arguments using argparse.ArgumentParser() and calls the \"Transpile\" function with the parsed arguments. ", "label": "import os\nimport sys\nimport argparse\nimport paddle.fluid as fluid\n\n\ndef Transpile(src_dir, dst_dir, model_filename, params_filename):\n    place = fluid.CPUPlace()\n    exe = fluid.Executor(place)\n\n    inference_scope = fluid.core.Scope()\n    with fluid.scope_guard(inference_scope):\n        print \"Loading inference_program from \", src_dir\n        [inference_program, feed_target_names,\n         fetch_targets] = fluid.io.load_inference_model(src_dir, exe, model_filename, params_filename)\n\n        inference_transpiler_program = inference_program.clone()\n        # NOTE: Applying the inference transpiler will change the inference_transpiler_program.\n        t = fluid.InferenceTranspiler()\n        # Under the with statement, inference_scope is the global scope.\n        t.transpile(inference_transpiler_program, place)\n\n        #print inference_transpiler_program\n\n        print \"Saving the optimized inference_program to \", dst_dir\n        # There is a bug in fluid.io.save_inference_model, so we can use the following code instead.\n        if not os.path.isdir(dst_dir):\n            os.makedirs(dst_dir)\n        model_path = os.path.join(dst_dir, model_filename)\n        with open(model_path, \"wb\") as f:\n            f.write(inference_transpiler_program.desc.serialize_to_string())\n        fluid.io.save_persistables(exe, dst_dir, inference_transpiler_program, params_filename)\n\n\ndef main():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--src_dir', help='Source directory of inference model')\n    parser.add_argument('--dst_dir', help='Dstination directory of inference model')\n    parser.add_argument('--model_filename', default=None, help='The name of model file')\n    parser.add_argument('--params_filename', default=None, help='The name of params file')\n    args = parser.parse_args()\n    Transpile(args.src_dir, args.dst_dir, args.model_filename, args.params_filename)\n\n\nif __name__ == '__main__':\n    main()\n", "predict": "import os\nimport paddle\nfrom paddle.fluid.inference import Transpiler\nfrom paddle.fluid.core import Scope\nfrom paddle.fluid.io import load_inference_model, save_persistables\nimport argparse\nimport os.path\n\ndef Transpile(src_dir, dst_dir, model_filename, params_filename):\n    place = paddle.CPUPlace()\n    exe = paddle.Executor(place)\n\n    scope = Scope()\n    inference_transpiler_program = load_inference_model(\n        src_dir, exe, scope, model_filename, params_filename)\n\n    target_names = [x.name for x in inference_transpiler_program.global_block.inputs]\n    targets = [x.name for x in inference_transpiler_program.global_block.outputs]\n\n    cloned_inference_transpiler_program = inference_transpiler_program.clone(for_test=True)\n    transpiler = fluid.InferenceTranspiler(cloned_inference_transpiler_program)\n    t = transpiler.transpile()\n\n    save_persistables(exe, [t], dst_dir, params_filename)\n    if not os.path.exists(dst_dir):\n        os.makedirs(dst_dir)\n\ndef main():\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--src_dir\", help=\"source directory of the inference model\")\n    parser.add_argument(\"--dst_dir\", help=\"destination directory of the optimized inference model\")\n    parser.add_argument(\"--model_filename\", help=\"name of the model file\")\n    parser.add_argument(\"--params_filename\", help=\"name of the parameters file\")\n    args = parser.parse_args()\n\n    Transpile(args.src_dir, args.dst_dir, args.model_filename, args.params_filename)\n\nif __name__ == \"__main__\":\n    main()"}
{"prompt": "Create a Python function called add_marks which takes two parameters: marks(a list) and mark(an integer). The function should add the mark to each value in the marks list.\nmarks = [87, 56, 99, 54]\nmark = 4 ", "label": "def add_marks(marks, mark):\n return [m + mark for m in marks]", "predict": "def add_marks(marks, mark):\n    new_marks = []\n    for m in marks:\n        new_marks.append(m + mark)\n    return new_marks\n\nmarks = [87, 56, 99, 54]\nmark = 4\n\nprint(add_marks(marks, mark))\n# Output: [91, 60, 103, 58]"}
{"prompt": "Design a positive feedback loop for the following python program.\nfor i in range(10):\n    print(\"hello\") ", "label": "for i in range(10):\n    print(\"hello\")\n    i += 1\n    if i == 10:\n        print(\"You've got it!\")", "predict": "for i in range(10):\n    print(\"hello\")\n    if i == 9:\n        print(\"Great job!\")"}
{"prompt": "Implement a function that prints out the numbers from 1 to 50 in python ", "label": "def print_numbers():\n    for i in range(1, 51):\n        print(i)\n\nprint_numbers()", "predict": "def print_numbers():\n    for i in range(1, 51):\n        print(i)\n\nprint_numbers()"}
{"prompt": "Write a Python program to send an automated email. The program should take a list of emails as input, iterate over the list, and send an email to each address.\nrecipient_emails = [\"email1@example.com\",\"email2@example.com\"] ", "label": "import smtplib\n\nsender_email = 'example@gmail.com'\npassword = 'example_password'\n\nfor email in recipient_emails:\n    with smtplib.SMTP('smtp.gmail.com', 587) as server:\n        server.ehlo()\n        server.starttls()\n        server.login(sender_email, password)\n\n        subject = 'Automated Email from Program'\n        message = 'Message body'\n \n        server.sendmail(sender_email, email, 'Subject: ' + subject + '\\n\\n' + message)\n        server.quit()\n        print('Email sent successfully.')", "predict": "import smtplib\n\nsender_email = \"sender@example.com\"\npassword = \"sender_password\"\n\nfor recipient_email in recipient_emails:\n    with smtplib.SMTP('smtp.example.com', 587) as server:\n        server.starttls()\n        server.login(sender_email, password)\n        message = f\"Subject:Test email\\n\\nThis is a test email.\"\n        server.sendmail(sender_email, recipient_email, message)\n        server.quit()"}
{"prompt": "Create a Python class which represents a 3D Vector ", "label": "class Vector3D:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n    \n    def __str__(self):\n        return \"(\" + str(self.x) + \", \" + str(self.y) + \", \" + str(self.z) + \")\"", "predict": "class Vector3D:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n    \n    def __str__(self):\n        return 'Vector3D({}, {}, {})'.format(self.x, self.y, self.z)"}
{"prompt": "Given two strings, write a Python program to find the total number of common characters present in both strings ", "label": "def num_common_chars(str1, str2):\n    common = 0\n    for c in str1:\n        if c in str2:\n            common += 1\n    return common", "predict": "def count_common_characters(str1, str2):\n    count = 0\n    for char in str1:\n        if char in str2:\n            count += 1\n    return count"}
{"prompt": "Modify the following Python code to handle errors.\ndef read_data_from_json(filename):\n    with open(filename, 'r') as f:\n        data = json.load(f)\n    return data ", "label": "def read_data_from_json(filename):\n    try:\n        with open(filename, 'r') as f:\n            data = json.load(f)\n        return data\n    except FileNotFoundError:\n        print(\"The file specified does not exist.\")\n    except json.decoder.JSONDecodeError:\n        print(\"The file specified is not in a valid JSON format.\")", "predict": "def read_data_from_json(filename):\n    try:\n        with open(filename, 'r') as f:\n            data = json.load(f)\n        return data\n    except FileNotFoundError:\n        print('File not found.')\n    except json.JSONDecodeError:\n        print('Error in JSON format.')"}
{"prompt": "Analyze a given Python code and write a function that checks if a given number is prime.\ndef primeCheck(num): ", "label": "def primeCheck(num):\n if num > 1:\n for i in range(2, num):\n  if (num % i) == 0:\n   return False\n else:\n  return False\n return True", "predict": "def primeCheck(num):\n    if num <= 1:\n        return False\n\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n\n    return True"}
{"prompt": "Create a python program to filter out all the even numbers from a given list.\n[3, 4, 5, 6, 7] ", "label": "def filter_even_numbers(numbers):\n    even_numbers = []\n    for i in numbers:\n        if i % 2 == 0:\n            even_numbers.append(i)\n    return even_numbers\n    \n    \nfiltered = filter_even_numbers([3, 4, 5, 6, 7])\nprint(filtered)", "predict": "def filter_even(lst):\n    return [x for x in lst if x % 2 == 0]"}
{"prompt": "Implement a function in Python that takes a Huffman tree and drop all its leaf nodes.\n(1)\n      /      \\\n    (2)      (3)\n    / \\      / \\\n  (4) (5)  (6) (7) ", "label": "def dropLeafNodes(head): \n    \n    # If node is not None and doesn't have any children \n    if head and not head.left and not head.right: \n        return None\n  \n    # Don't change anything if head is None \n    if not head: \n        return None\n  \n    # Recursively call dropLeafNodes on left and right subtrees\n    head.left = dropLeafNodes(head.left) \n    head.right = dropLeafNodes(head.right) \n  \n    # Return head of the modified tree\n    return head", "predict": "def drop_leaf_nodes(tree):\n    if tree.is_leaf():\n        return None\n    else:\n        left_subtree = drop_leaf_nodes(tree.left)\n        right_subtree = drop_leaf_nodes(tree.right)\n        return HuffmanTree(left_subtree, right_subtree)"}
{"prompt": "Create a web crawler in Python that starts from a website and looks for other links in the page then scrapes the page content.\nNot applicable ", "label": "import requests\nfrom bs4 import BeautifulSoup\nimport re\n\ndef crawl(url):\n visited = set()\n queue = [url] \n \n while queue:\n curr = queue.pop(0)\n visited.add(curr) \n response = requests.get(curr)\n \n if response.ok:\n soup = BeautifulSoup(response.text, 'html.parser')\n\n# scrape the page here \n\n# find all the links\n links = soup.find_all('a', href=re.compile('^http')) \n \n for link in links:\n if link['href'] not in visited:\n queue.append(link['href'])", "predict": "import requests\nfrom bs4 import BeautifulSoup\n\ndef crawler(url):\n page = requests.get(url)\n soup = BeautifulSoup(page.content, 'html.parser')\n\n for link in soup.find_all('a'):\n  link_url = link.get('href')\n  if link_url is not None:\n   print(link_url)\n   crawler(link_url)\n\n  page_content = soup.get_text()\n  print(page_content)\n\ncrawler('http://example.com')"}
{"prompt": "Write a Python program to calculate the maximum, minimum and mean number of elements in a given string. ", "label": "def get_stats_for_string(string):\n    num_elements = len(string)\n    max_element = max(string)\n    min_element = min(string)\n    mean_element = sum(string) / num_elements\n    return (max_element, min_element, mean_element)\n\nstring = \"abcdef\"\nstats_for_string = get_stats_for_string(string)\nprint(\"Max: {0}, Min: {1}, Mean: {2}\".format(*stats_for_string))", "predict": "def max_min_mean(string):\n    max_num = 0\n    min_num = 1000\n    sum_num = 0\n    for i in string:\n        if i.isdigit():\n            max_num = max(max_num, int(i))\n            min_num = min(min_num, int(i))\n            sum_num += int(i)\n    if len(string) > 0:\n        mean_num = sum_num/len(string)\n    else:\n        mean_num = 0\n    return max_num, min_num, mean_num"}
{"prompt": "Write a Python program to calculate the compound interest.\ninvestment_amount = 1000, time = 5, rate_of_interest = 5 ", "label": "def compoundInterest(investment_amount, rate_of_interest, time):\n    compound_interest = investment_amount * (pow((1 + rate_of_interest / 100), time))\n    return compound_interest\n\nci = compoundInterest(1000, 5, 5)\nprint(ci)", "predict": "def calculate_compound_interest(investment_amount, time, rate_of_interest):\n    compound_interest = investment_amount * (1 + rate_of_interest/100)**time\n    return compound_interest"}
{"prompt": "Create a command-line application in Python that stores customer data and allows customer to query by customer name ", "label": "import sys \n  \ndef print_customer_data(name): \n    # Code for searching customer data by customer name and \n    # printing results \n    ...\n\n# Main function for the customer search application\nif __name__==\"__main__\": \n    # Get command line arguments \n    args = sys.argv \n    \n    if len(args) == 2: \n        name = args[1]\n        print_customer_data(name) \n    else: \n        print(\"Invalid arguments, please specify a customer name.\")", "predict": "import sqlite3\n\nconn = sqlite3.connect('customer.db')\nc = conn.cursor()\n\nc.execute('''CREATE TABLE customers\n        (name TEXT, address TEXT, phone TEXT)''')\n\nc.execute(\"INSERT INTO customers VALUES ('John Doe', '123 Main St', '555-555-5555')\")\nc.execute(\"INSERT INTO customers VALUES ('Jane Smith', '456 Oak St', '555-555-5556')\")\n\nconn.commit()\n\nwhile True:\n    name = input('Enter customer name: ')\n    c.execute(\"SELECT * FROM customers WHERE name =?\", (name,))\n    customer = c.fetchone()\n    if customer:\n        print(customer)\n    else:\n        print('No customer found.')\n\nconn.close()"}
{"prompt": "Develop a program in Python to calculate the Fibonacci sequence. ", "label": "def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \n\n# Driver Code \nprint(fibonacci(9))", "predict": "def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==1: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \n  \n# Driver Program \nprint(Fibonacci(9))"}
{"prompt": "Generate a python program that takes two sets of integers as input and outputs the intersection of those sets.\nset1 = {1, 2, 3, 4}\nset2 = {3, 4, 5, 6} ", "label": "def intersection(set1, set2): \n   return set1 & set2\n\nresult = intersection(set1, set2) \nprint(result)", "predict": "set1 = {1, 2, 3, 4}\nset2 = {3, 4, 5, 6}\n\ndef intersection(set1, set2):\n    return set1.intersection(set2)\n\nprint(intersection(set1, set2))"}
{"prompt": "Design an algorithm in Python to find the smallest number in a given list.\n[4, 5, 6, 7, 8] ", "label": "def smallestNumber(nums):\n    smallest = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] < smallest:\n            smallest = nums[i]\n    return smallest\n\nnums = [4, 5, 6, 7, 8]\nsmallestNum = smallestNumber(nums)\nprint('The smallest number is', smallestNum)", "predict": "def find_smallest(numbers):\n    smallest = numbers[0]\n    for num in numbers:\n        if num < smallest:\n            smallest = num\n    return smallest\n\nnumbers = [4, 5, 6, 7, 8]\nsmallest = find_smallest(numbers)\nprint(smallest)"}
{"prompt": "Generate a python program for printing a Pascal triangle.\nNumber of rows= 5 ", "label": "def PascalTriangle(n) : \n      \n    # An auxiliary array to store \n    # generated pscal triangle values \n    arr = [0 for i in range(n)] \n      \n    # Iterate through every line and \n    # print integer(s) in it \n    for line in range(0, n) : \n          \n        # Every line has number of  \n        # integers equal to line  \n        # number \n        for i in range (0, line + 1) : \n              \n            # First and last values  \n            # in every row are 1 \n            if (i == 0 or i == line) : \n                arr[i] = 1\n                  \n            # Other values are sum of  \n            # values just above and  \n            # left of above \n            else : \n                arr[i] = arr[i] + arr[i - 1]  \n              \n        # Printing array in \n        # mantainence of order          \n        for i in range (0, line + 1) : \n            print(arr[i], end =\" \")  \n        print()   \n  \n# Driver Code \nn = 5\nPascalTriangle(n)", "predict": "def pascal_triangle(n):\n    result = []\n    for line in range(1, n+1):\n        row = [1]\n        for i in range(1, line):\n            next = row[i-1] + row[i]\n            row.append(next)\n        row.append(1)\n        result.append(row)\n    return result\n\nprint(pascal_triangle(5))"}
{"prompt": "Create a python script that filters out all negative numbers from the given matrix\n[[-1, 2, -3], [-4, 5, 6], [-7, 8, 9]] ", "label": "import numpy as np\n\ndef filter_out_negative(matrix):\n  # Convert matrix to numpy array\n  matrix = np.array(matrix)\n  # Find all negative numbers and set them to 0\n  matrix[matrix < 0] = 0\n  return matrix\n\nresult = filter_out_negative([[-1, 2, -3], [-4, 5, 6], [-7, 8, 9]])\nprint(result)", "predict": "def filter_negative(matrix):\n    filtered_matrix = []\n    for row in matrix:\n        filtered_row = []\n        for num in row:\n            if num >= 0:\n                filtered_row.append(num)\n        filtered_matrix.append(filtered_row)\n    return filtered_matrix"}
{"prompt": "Create a basic REST API using Python and Flask to list all the countries in the world.\nNot applicable ", "label": "import flask\nfrom flask import Flask, request, jsonify\nimport json\n\napp = Flask(name)\n\n@app.route('/countries', methods=['GET'])\ndef get_countries():\nwith open('data.json', 'r') as f:\n countries = json.load(f)\n return jsonify(countries)\n\nif name == 'main':\n app.run()", "predict": "from flask import Flask, jsonify\nimport json\n\napp = Flask(__name__)\n\n@app.route('/countries', methods=['GET'])\ndef get_countries():\n countries = []\n with open('countries.json') as f:\n  countries = json.load(f)\n\n return jsonify(countries)\n\nif __name__ == '__main__':\n app.run()"}
{"prompt": "Create a web scraper in Python that can extract hotel reviews from TripAdvisor.\nNot applicable ", "label": "import requests\nfrom bs4 import BeautifulSoup\n\n# Define the URL and the headers\nurl = '<url>'\nheaders = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36'}\n\n# Make a request and get HTML in response\nresponse = requests.get(url, headers=headers)\n\n# Parse HTML\nsoup = BeautifulSoup(response.text, 'html.parser')\n\n# Find all reviews\nreviews = soup.find_all('div', {'class': 'review-container'})\n\n# Go through every review and extract the data\nfor review in reviews:\n    # Get the title\n    title = review.find('span', {'class': 'noQuotes'}).text\n\n    # Get the text\n    text = review.find('p', {'class': 'partial_entry'}).text\n\n    # Print for demo\n    print(title)\n    print(text)\n    print('-' * 50)", "predict": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.tripadvisor.com/Hotel_Review-g186757-d293312-Reviews-Hotel_Villa_Cipriani-Venice_Veneto.html'\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\n\nreviews = soup.find_all('div', {'class':'review-content'})\n\nfor review in reviews:\n text = review.find('span', {'class':'review-text'}).text\n rating = review.find('span', {'class':'review-bubble'}).text\n print(f'Rating: {rating}\\n{text}')"}
{"prompt": "Develop a machine learning model in Python to identify the author of a given article. ", "label": "from sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import train_test_split\n\n# load data\nsamples = [\n  \"sample 1 from AuthorA\",\n  \"sample 2 from AuthorA\",\n  \"sample 1 from AuthorB\",\n  \"sample 2 from AuthorB\"\n]\nlabels = [\n  \"AuthorA\",\n  \"AuthorA\",\n  \"AuthorB\",\n  \"AuthorB\"\n]\n\n# build the model\nmodel = Pipeline([\n  ('tfidf', TfidfVectorizer()),\n  ('clf', GaussianNB())\n])\n\n# train the model\nX_train, X_test, y_train, y_test = train_test_split(samples, labels, test_size=0.3)\nmodel.fit(X_train, y_train)\n\n# evalulate the model\nscore = model.score(X_test, y_test)\nprint(f'model score: {score}')", "predict": "import pandas as pd\nimport numpy as np\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\n# Load data\ndata = pd.read_csv('data.csv')\n\n# Extract features\nvectorizer = CountVectorizer()\nX = vectorizer.fit_transform(data['text'])\n\n# Split data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, data['author'], test_size=0.2)\n\n# Train model\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\n# Test model\naccuracy = model.score(X_test, y_test)\nprint('Accuracy: ', accuracy)"}
{"prompt": "Write a Python program to divide a given list of numbers into two equal parts such that the difference between the sum of the two parts is minimum.\n[2, 3, 4, 5, 6, 7] ", "label": "def divide_in_two_equal_parts(lst):\n    target = sum(lst) // 2\n    part1 = []\n    part2 = []\n    left_sum = 0\n    right_sum = 0\n    \n    for num in lst:\n        if left_sum <= right_sum:\n            left_sum += num\n            part1.append(num)\n        else:\n            right_sum += num\n            part2.append(num)\n         \n    return part1, part2\n\npart1, part2 = divide_in_two_equal_parts([2, 3, 4, 5, 6, 7])\n\nprint(\"Part 1:\", part1)\nprint(\"Part 2:\", part2)", "predict": "def divide_list(lst):\n    n = len(lst)\n    mid = n//2\n    left_sum = 0\n    right_sum = 0\n    for i in range(mid):\n        left_sum += lst[i]\n    for i in range(mid, n):\n        right_sum += lst[i]\n    diff = abs(left_sum - right_sum)\n    return diff"}
{"prompt": "Develop an algorithm to detect and fix Python syntax errors in a given code snippet.\ndef test ():\n    x = 5\n    y = 3 \n    z ", "label": "def test():\n    x = 5\n    y = 3\n    try:\n        z\n    except NameError:\n        print(\"NameError: Name 'z' is not defined\")", "predict": "def test ():\n    x = 5\n    y = 3\n    z = x + y\n\ndef detect_syntax_errors(code):\n    lines = code.splitlines()\n    for i, line in enumerate(lines):\n        if line.endswith(';'):\n            lines[i] = line[:-1]\n    code = '\\n'.join(lines)\n    try:\n        exec(code)\n    except SyntaxError as e:\n        print('Syntax error at line %d: %s' % (e.lineno, e.args[0]))\n    return code\n\ncode = '''\ndef test ():\n    x = 5\n    y = 3\n    z \n'''\ncode = detect_syntax_errors(code)\nprint(code)"}
{"prompt": "Design a data structure in Python to store integer values. ", "label": "class IntList:\n    def __init__(self):\n        self.values = []\n   \n    def add_value(self, value):\n        self.values.append(value)\n    \n    def find_min(self):\n        return min(self.values)", "predict": "class IntList:\n    def __init__(self):\n        self.data = []\n    \n    def add(self, value):\n        self.data.append(value)\n    \n    def get(self, index):\n        return self.data[index]\n    \n    def remove(self, index):\n        del self.data[index]"}
{"prompt": "Create an algorithm in Python for a linear search. The algorithm should take in an array and a value to search for, and return the index of the value if it is found, or -1 if it is not.\nArray: [5, 3, 7, 2]\nSearch value: 7 ", "label": "def linearSearch(arr, value):\n  for i in range(len(arr)):\n    if arr[i] == value:\n      return i  # value found, return index\n  return -1  # value not found\n\narr = [5, 3, 7, 2]\nsearchValue = 7\n\nresult = linearSearch(arr, searchValue)\n\nif result == -1:\n  print(\"Element not found\")\nelse:\n  print(\"Element present at index\", result)", "predict": "def linear_search(arr, x): \n for i in range(len(arr)): \n if arr[i] == x: \n return i \n \n return -1\n\n# Example\narr = [5, 3, 7, 2] \nx = 7\n\n# Print the index of the search value\nresult = linear_search(arr, x) \nif result == -1: \n print(\"Element is not present in the array\") \nelse: \n print(\"Element is present at index\", result)"}
{"prompt": "Given a list of strings, write a Python function to remove all the whitespaces from each string.\n['Hello  World  ', 'Hi  there', 'Good  Morning'] ", "label": "def remove_whitespace(word_list):\n    return [word.strip() for word in word_list]\n\nstripped_list = remove_whitespace(['Hello  World  ', 'Hi  there', 'Good  Morning'])\nprint(stripped_list)", "predict": "def remove_whitespaces(strings):\n  return [s.strip() for s in strings]"}
{"prompt": "Design a Python program to randomize a list of given integers using an optimized Fisher-Yates algorithm. ", "label": "def randomized_list(num_list):\n    for i in range(len(num_list)-1,0,-1):\n        j = random.randint(0,i)\n        num_list[i],num_list[j] = num_list[j],num_list[i]\n    return num_list", "predict": "def randomize(arr):\n    \"\"\"Randomize a list of integers using the Fisher-Yates algorithm.\"\"\"\n    for i in range(len(arr) - 1, 0, -1):\n        # Pick a random index from 0 to i\n        j = random.randint(0, i)\n        # Swap the elements\n        arr[i], arr[j] = arr[j], arr[i]\n    return arr"}
{"prompt": "Create a system in Python for generating natural language responses.\nA sample utterance \"What time is it?\" ", "label": "from tensorflow.keras.layers import Input, Dense, Embedding, GRU\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.utils import plot_model\n\n# Create inputs\ninputs1 = Input(shape=(20,))\nx1 = Embedding(1000, 64)(inputs1)\nx1 = GRU(128)(x1)\n\n# Create outputs\ny1 = Dense(1000, activation='softmax')(x1)\n\n# Create model\nmodel = Model(inputs=[inputs1], outputs=[y1])\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])\n\n# Train the model\nmodel.fit([inputs], [outputs],  epochs=10, batch_size=32)\n\n# Generate the response to the sample utterance\nquery = \"What time is it?\"\nprediction = model.predict(query)\n\nprint(prediction)", "predict": "def generate_response(utterance):\n    if utterance == \"What time is it?\":\n        return \"The time is 3:00 PM.\"\n\ngenerate_response(\"What time is it?\")"}
{"prompt": "Create a web scraper using Python that collects the title and content from the homepage of a given website.\nhttps://www.example.com as the target website. ", "label": "import requests\nimport bs4\n\nurl = 'https://www.example.com'\nr = requests.get(url)\nhtml = bs4.BeautifulSoup(r.text,\"html.parser\")\n\n# Find title\ntitle = html.find('title')\nprint(title.text)\n\n# Find content\ncontent = html.find('div', {'class': 'content'})\nprint(content.text)", "predict": "import requests\nfrom bs4 import BeautifulSoup\n\n# Get the webpage\nurl = 'https://www.example.com'\nresponse = requests.get(url)\n\n# Parse the webpage\nsoup = BeautifulSoup(response.text, 'html.parser')\n\n# Get the title and content\ntitle = soup.find('title').text\ncontent = soup.find('div', {'class': 'content'}).text\n\nprint(title)\nprint(content)"}
{"prompt": "Generate a Python script that finds the total surface area of a cuboid, given its three dimensions.\n2, 3, 4 ", "label": "def find_total_surfacearea(length, breadth, height):\n   return (2*(length*breadth + breadth*height + height*length))\n\nprint(find_total_surfacearea(2, 3, 4))\n\nOutput: 52", "predict": "def cuboid_surface_area(length, breadth, height):\n    return 2*(length*breadth + breadth*height + height*length)\n\nlength = 2\nbreadth = 3\nheight = 4\n\nprint(\"Total surface area of the cuboid is: \", cuboid_surface_area(length, breadth, height))"}
{"prompt": "Generate a Python program to clean a string of HTML tags.\nExample Input: \"<p>This is a <b>test</b> string</p>\". ", "label": "import re\n\n# Clean a string of HTML tags \ndef clean_html_tags(str):\n    clean_str = re.sub(\"<.*?>\", \"\", str)\n    return clean_str\n\nhtml_string = \"<p>This is a <b>test</b> string</p>\"\n\nclean_str = clean_html_tags(html_string)\n\nprint(clean_str) #This is a test string", "predict": "import re\n\ndef clean_html(html_string):\n    clean_string = re.sub('<.*?>', '', html_string)\n    return clean_string"}
{"prompt": "Generate a Python function that takes an integer array as input and returns the number of unique elements in the array.\n[1, 2, 3, 2, 1, 4, 7, 8, 9, 8] ", "label": "def num_unique_elements(arr):\n    unique_arr = set(arr)\n    return len(unique_arr)\n\nprint(num_unique_elements([1, 2, 3, 2, 1, 4, 7, 8, 9, 8]))", "predict": "def count_unique(arr):\n    return len(set(arr))\n\narr = [1, 2, 3, 2, 1, 4, 7, 8, 9, 8]\nprint(count_unique(arr))"}
{"prompt": "Create a Python program to scrape an online news website to get the headlines. ", "label": "import requests\nfrom bs4 import BeautifulSoup \n\n# url of the website you want to scrape \nurl = \"https://www.news.com/\" \n\n# get the response in the form of html\nr = requests.get(url) \n\n# create a beautifulsoup object to parse contents \nsoup = BeautifulSoup(r.content, 'html5lib') \n\n# find headlines from the parsed page  \nheadlines = soup.find_all('h2') \n\n# Print the headlines \nfor headline in headlines: \n    print(headline.text)", "predict": "import requests\nfrom bs4 import BeautifulSoup\n\ndef get_headlines(url):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    headlines = soup.find_all('h3')\n    return [headline.text for headline in headlines]"}
{"prompt": "Edit the given Python program to print 'Happy Holidays' 10 times.\nfor i in range(10):\n    print('Hello World') ", "label": "for i in range(10):\n    print('Happy Holidays')", "predict": "for i in range(10):\n    print('Happy Holidays')"}
{"prompt": "Combine 2 strings and reverse the result in Python.\nwords = \"Hello \"\nwords2 = \"world!\" ", "label": "words = \"Hello \"\nwords2 = \"world!\"\n\ncombined = words + words2\nresult = combined[::-1]\n\nprint(result)", "predict": "words = \"Hello \"\nwords2 = \"world!\"\n\nresult = words + words2\n\nprint(result[::-1])"}
{"prompt": "Create a class to represent a bank account in Python. ", "label": "class BankAccount:\n    \n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n        \n    def deposit(self, amount):\n        self.balance += amount\n    \n    def withdraw(self, amount):\n        if self.balance >= amount:\n            self.balance -= amount\n            return True\n        else:\n            return False\n        \n    def get_balance(self):\n        return self.balance", "predict": "class BankAccount:\n    def __init__(self, balance=0):\n        self.balance = balance\n    \n    def deposit(self, amount):\n        self.balance += amount\n        return self.balance\n    \n    def withdraw(self, amount):\n        if amount > self.balance:\n            raise ValueError(\"Insufficient funds\")\n        self.balance -= amount\n        return self.balance\n    \n    def get_balance(self):\n        return self.balance"}
{"prompt": "Optimize the following Python code to sort a set of numbers (set = [2, 6, 3, 8, 4]) in O(n) time complexity.\nunsorted_list = [2, 6, 3, 8, 4] ", "label": "def sort_list(unsorted_list):\n    sorted_list = []\n    while unsorted_list:\n        min_elem = min(unsorted_list)\n        unsorted_list.remove(min_elem)\n        sorted_list.append(min_elem)\n    return sorted_list", "predict": "def sort_list(unsorted_list):\n    sorted_list = []\n    while unsorted_list:\n        min_val = min(unsorted_list)\n        unsorted_list.remove(min_val)\n        sorted_list.append(min_val)\n    return sorted_list\n\nsorted_list = sort_list(unsorted_list)\nprint(sorted_list)"}
{"prompt": "Design a Python program to perform linear regression for predicting the numbers in a given dataset.\nX = [1,2,3,4,5]\nY = [3,5,7,9,13] ", "label": "import numpy as np\nfrom sklearn.linear_model import LinearRegression\n\nX = np.array([1,2,3,4,5]).reshape(-1,1)\nY = np.array([3,5,7,9,13])\n\nmodel = LinearRegression()\nmodel.fit(X, Y)\n\n# Predicts the value of y\nprint(model.predict([[7]]))", "predict": "import numpy as np\nfrom sklearn.linear_model import LinearRegression\n\nX = np.array([1,2,3,4,5]).reshape(-1,1)\nY = np.array([3,5,7,9,13])\n\nmodel = LinearRegression()\nmodel.fit(X, Y)\n\nprint(\"Coefficients: \\n\", model.coef_)\nprint(\"Intercept: \\n\", model.intercept_)"}
{"prompt": "Create a Python object that contains two attributes, \"Name\" and \"Age\". ", "label": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\nperson = Person(\"John\", 25)", "predict": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age"}
{"prompt": "Write a function in Python that takes a list of objects and returns a list of those objects sorted by one of their attributes.\n[{\"name\": \"Alice\", \"age\": 20}, {\"name\": \"Bob\", \"age\": 21}] ", "label": "def sort_by_attr(objects, attr):\n return sorted(objects, key=lambda item: item[attr])\n \nsort_by_attr([{\"name\": \"Alice\", \"age\": 20}, {\"name\": \"Bob\", \"age\": 21}], \"age\")", "predict": "def sort_by_attribute(list_of_objects, attribute):\n return sorted(list_of_objects, key=lambda obj: obj[attribute])"}
{"prompt": "Write a Python program to generate an HTML table displaying information about the top 10 bestselling books in a specific genre.\nTable name: Books\nTable columns: id (int), title (string), author (string), genre (string), sales (int) ", "label": "import sqlite3\n\n# connect to the database\nconn = sqlite3.connect('books.db')\nc = conn.cursor()\n\n# retrieve the data\nc.execute('''SELECT title, author, genre, sales\nFROM Books\nWHERE genre='Fantasy'\nORDER BY sales DESC\nLIMIT 10''')\n\n# save the results\nresults = c.fetchall()\n\n# generate the HTML code\nhtml = '<table>'\nhtml += '<tr><th>Title</th><th>Author</th><th>Genre</th><th>Sales</th></tr>'\n\nfor result in results:\n title = result[0]\n author = result[1]\n genre = result[2]\n sales = result[3]\n\n html += f'<tr><td>{title}</td><td>{author}</td><td>{genre}</td><td>{sales}</td></tr>'\n\nhtml += '</table>'\n\n# display the results\nprint(html)", "predict": "import sqlite3\n\nconn = sqlite3.connect('books.db')\n\ncur = conn.cursor()\n\ncur.execute('SELECT title, author, genre, sales FROM Books WHERE genre =? ORDER BY sales DESC LIMIT 10', (genre,))\n\nrows = cur.fetchall()\n\nprint('<table>')\nfor row in rows:\n print('<tr><td>{}</td><td>{}</td><td>{}</td><td>{}</td></tr>'.format(*row))\nprint('</table>')\n\nconn.close()"}
{"prompt": "Create a Python script to filter out all the vowels from a string. ", "label": "def filter_vowels(string):\n     vowels = ('a', 'e', 'i', 'o', 'u')\n     return ''.join(c for c in string if c not in vowels)", "predict": "def filter_vowels(string):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    filtered_string = \"\"\n    for char in string:\n        if char.lower() not in vowels:\n            filtered_string += char\n    return filtered_string"}
{"prompt": "In Python, write a script to sort the list items in descending order.\nlist_items = [3, 7, 5, 8, 10] ", "label": "list_items = [3, 7, 5, 8, 10]\n\nlist_items.sort(reverse=True)\n\nprint(list_items) # Output: [10, 8, 7, 5, 3]", "predict": "list_items.sort(reverse=True)\nprint(list_items)"}
{"prompt": "Create a Python function that takes in a text string and returns a dictionary of words and the number of times each word appears in the text string.\nA quick brown fox jumps over the lazy dog ", "label": "def words_count(text):\n words_dict = {}\n for word in text.split(' '):\n if word in words_dict:\n words_dict[word] += 1\n else:\n words_dict[word] = 1\n return words_dict\n\nwords_dict = words_count(\"A quick brown fox jumps over the lazy dog\")\nprint(words_dict)", "predict": "def word_frequency(text):\n    words = text.split()\n    frequency = {}\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    return frequency\n\nresult = word_frequency(\"A quick brown fox jumps over the lazy dog\")\nprint(result)"}
{"prompt": "Create an object-oriented structure to solve a maze by using python. ", "label": "import collections\n\nclass Maze:\n    def __init__(self, n, m):\n        self._n, self._m = n, m\n        self._grid = [[None] * m for _ in range(n)]\n\n    def solve_maze(self):\n        result, found = [], False\n        start, end = (0, 0), (self._n-1, self._m-1)\n\n        for i in range(self._n):\n            for j in range(self._m):\n                if self._grid[i][j] == 1:\n                    value = 0\n                    self._find_omega(i, j, value, result, start, end,\n                                     found)\n                    return result\n\n    def _find_omega(self, i, j, value,\n                    result, start, end, found):\n        rowNbr, colNbr = [-1, 0, 0, 1], [0, -1, 1, 0]\n\n        if (i, j) == end:\n            found = True\n            result.append(value)\n            return\n\n        if found == True:\n            return\n\n        self._grid[i][j] = 0\n        for k in range(4):\n            if self._on_board(i + rowNbr[k], j + colNbr[k]):\n                self._find_omega(i + rowNbr[k], j + colNbr[k],\n                                 value + 1, result,\n                                 start, end, found)\n\n    def _on_board(self, i, j):\n        return 0 <= i < self._n and 0 <= j < self._m and self._grid[i][j] == 1", "predict": "class Maze:\n    def __init__(self, maze_map):\n        self.maze_map = maze_map\n        self.start_pos = (0, 0)\n        self.end_pos = (len(maze_map)-1, len(maze_map[0])-1)\n        self.visited = set()\n        self.path = []\n    \n    def find_path(self):\n        self.visited.add(self.start_pos)\n        self.dfs(self.start_pos)\n        return self.path\n    \n    def dfs(self, pos):\n        if pos == self.end_pos:\n            self.path.append(pos)\n            return\n        else:\n            neighbors = self.get_neighbors(pos)\n            for neighbor in neighbors:\n                if neighbor not in self.visited:\n                    self.visited.add(neighbor)\n                    self.path.append(neighbor)\n                    self.dfs(neighbor)\n                    self.path.pop()\n                    self.visited.remove(neighbor)\n\n    def get_neighbors(self, pos):\n        neighbors = []\n        if pos[0] > 0:\n            neighbors.append((pos[0]-1, pos[1]))\n        if pos[1] > 0:\n            neighbors.append((pos[0], pos[1]-1))\n        if pos[0] < len(self.maze_map)-1:\n            neighbors.append((pos[0]+1, pos[1]))\n        if pos[1] < len(self.maze_map[0])-1:\n            neighbors.append((pos[0], pos[1]+1))\n        return neighbors"}
{"prompt": "Compose a piece of code to print the length of a given string.\n\"Python\" ", "label": "string = \"Python\"\nprint(\"Length of the given string is:\", len(string))", "predict": "print(len(\"Python\"))"}
{"prompt": "Compose a Python program to calculate the maximum possible revenue from the items with given weights and values.\nweights = [2, 1, 3], values = [4, 2, 3] ", "label": "\"\"\"\nCalculate the maximum possible revenue from the items with given weights and values\n\"\"\"\n\n# given  weights and values \nweights = [2, 1, 3] \nvalues = [4, 2, 3] \n\n# number of items \nn = len(weights) \n  \n# function to calculate the maximum revenue \ndef knapsack(weights, values, n): \n  \n    # total capacity of knapsack \n    W = 5\n  \n    # matrix to store solution matrix \n    K = [[0 for x in range(W+1)] for x in range(n+1)] \n  \n    # build the solution matrix in bottom up manner \n    for i in range(n+1): \n        for w in range(W+1): \n            if i==0 or w==0: \n                K[i][w] = 0\n            elif weights[i-1] <= w: \n                K[i][w] = max(values[i-1] + K[i-1][w-weights[i-1]],  K[i-1][w]) \n            else: \n                K[i][w] = K[i-1][w] \n  \n    return K[n][W] \n  \nprint (knapsack(weights, values, n))", "predict": "def knapsack(weights, values, capacity):\n    n = len(weights)\n    table = [[0 for x in range(capacity + 1)] for x in range(n + 1)]\n    for i in range(n + 1):\n        for j in range(capacity + 1):\n            if i == 0 or j == 0:\n                table[i][j] = 0\n            elif weights[i - 1] <= j:\n                table[i][j] = max(values[i - 1] + table[i - 1][j - weights[i - 1]], table[i - 1][j])\n            else:\n                table[i][j] = table[i - 1][j]\n    return table[n][capacity]"}
{"prompt": "Write a Python program to read in a tweet and remove all punctuation, special characters and stopwords.\n\"I'm so excited to be going to the #MuseumTour! #BigDay #travel\" ", "label": "import re\nimport string\nfrom nltk.corpus import stopwords\n\ntweet = \"I'm so excited to be going to the #MuseumTour! #BigDay #travel\"\ntweet_clean = re.sub(r'[^\\w\\s]','',tweet) #remove punctuation\ntokens = tweet_clean.split() #split string into individual words \nstop_words = set(stopwords.words(\"english\")) #get list of stopwords\nfiltered_tokens = [w for w in tokens if not w in stop_words] #remove stopwords\nprint(filtered_tokens)", "predict": "import re\nimport string\nfrom nltk.corpus import stopwords\n\ntweet = \"I'm so excited to be going to the #MuseumTour! #BigDay #travel\"\ntweet = tweet.lower()\ntweet = re.sub(r'#', '', tweet)\ntweet = re.sub(r'[^\\w\\s]', '', tweet)\ntweet = tweet.split()\ntweet = [word for word in tweet if word not in stopwords.words('english')]\nprint(' '.join(tweet))\n\n# Output: excited going museum tour big day travel"}
{"prompt": "Implement a web scraper in Python to extract the top ten trending YouTube videos. ", "label": "import requests\nfrom bs4 import BeautifulSoup\n\n# make a request to get the page content\npage = requests.get(\"https://www.youtube.com/feed/trending\")\n\n# parse the page content\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# extract the list of trending videos\ntrending_videos = soup.find_all(class_='expanded-shelf-content-item-wrapper')\n\n# print the top ten trending videos\nfor video in trending_videos[:10]:\n    print(video.find(class_='yt-uix-tile-link').get('title'))", "predict": "import requests\nfrom bs4 import BeautifulSoup\n\n# Get the YouTube trending page\nurl = \"https://www.youtube.com/feed/trending\"\npage = requests.get(url)\n\n# Parse the HTML\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# Extract the top ten trending videos\ntrending_videos = soup.find_all('a', class_=\"yt-uix-tile-link\")[:10]\n\n# Print the video titles\nfor video in trending_videos:\n    print(video.find('h3').text)"}
{"prompt": "Make a code in Python to find the mode of the given set of values.\n1, 2, 3, 2, 4, 2 ", "label": "def find_mode(list):\n  max_count = 0\n  mode = list[0]\n  count = {}\n  for item in list:\n    if (item in count):\n      count[item] += 1\n    else:\n      count[item] = 1\n    if (count[item] > max_count):\n      max_count = count[item]\n      mode = item\n  return mode", "predict": "def find_mode(arr):\n    max_count = 0\n    mode = None\n    for num in arr:\n        count = arr.count(num)\n        if count > max_count:\n            max_count = count\n            mode = num\n    return mode\n\narr = [1, 2, 3, 2, 4, 2]\nmode = find_mode(arr)\nprint(mode)"}
{"prompt": "Create a web API with Python and Flask to give the current date and time.\nNot applicable ", "label": "from flask import Flask\nimport datetime\n\napp = Flask(__name__)\n\n@app.route('/datetime')\ndef get_datetime():\n    return datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n\nif __name__ == '__main__':\n    app.run()", "predict": "from flask import Flask, jsonify\nimport datetime\n\napp = Flask(__name__)\n\n@app.route('/date-time')\ndef get_date_time():\n    current_date_time = datetime.datetime.now()\n    return jsonify(current_date_time)\n\nif __name__ == '__main__':\n    app.run()"}
{"prompt": "Create a Python function that takes a list containing fruit names and returns the most common fruit name.\n['Apple', 'Orange', 'Apple', 'Pineapple', 'Grape', 'Apple'] ", "label": "def most_common_fruit(fruit_list):\n \n    # Dictionary to get count of each fruit\n    freq_dict = {}\n \n    # Count frequency of each fruit\n    for fruit in fruit_list:\n        if fruit in freq_dict:\n            freq_dict[fruit] += 1\n        else:\n            freq_dict[fruit] = 1\n \n    # Get maximum frequency \n    max_freq = 0\n    for freq in freq_dict.values():\n        if freq > max_freq:\n            max_freq = freq\n \n    # Get the most common fruit\n    most_common_fruit = None\n    for fruit, freq in freq_dict.items():\n        if freq == max_freq:\n            most_common_fruit = fruit\n            break\n \n    return most_common_fruit", "predict": "def most_common_fruit(fruits):\n    return max(set(fruits), key=fruits.count)\n\nmost_common_fruit(['Apple', 'Orange', 'Apple', 'Pineapple', 'Grape', 'Apple']) # returns 'Apple'"}
{"prompt": "Write a Python program to take in a list of phrases and generate a string with the each phrase followed by its length.\nphrases = [\"A bird in the hand\", \"is worth two in the bush\"] ", "label": "result = \"A bird in the hand (17)is worth two in the bush (25)\"\n \ncode:\ninput_phrases = [\"A bird in the hand\", \"is worth two in the bush\"]\n \nresult = \"\"\nfor phrase in input_phrases:\n result += phrase + ' (' + str(len(phrase)) + ')'\n \nprint(result)", "predict": "output = \"\"\nfor phrase in phrases:\n output += f\"{phrase}: {len(phrase)}\"\n print(output)"}
{"prompt": "Write a simple Python function that takes a list of integers and returns the sum of all elements divisible by 3.\nli = [4, 6, 17, 24, 5, 9] ", "label": "def divisibleBy3(li):\n total = 0\n for num in li:\n  if num % 3 == 0:\n   total += num\n return total\n# Output: 24", "predict": "def sum_divisible_by_3(li):\n    result = 0\n    for num in li:\n        if num % 3 == 0:\n            result += num\n    return result\n\nresult = sum_divisible_by_3(li)\nprint(result)"}
{"prompt": "Create a program in Python that takes a number from the user and prints all the divisors of the number. ", "label": "divisors = []\n\nnum = int(input('Enter a number: '))\n \nfor i in range(1, num + 1):\n    if num % i == 0:\n        divisors.append(i)\n\nprint('The divisors of',num ,'are:')\nprint(*divisors, sep=', ')", "predict": "def divisors(n):\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\nn = int(input(\"Enter a number: \"))\ndivisors = divisors(n)\nprint(\"The divisors of\", n, \"are:\", divisors)"}
{"prompt": "Write a Python program to generate an HTML page containing a table with some employee data.\nEmployee Data:\nName: John Doe\nJob Title: Senior Developer\nDepartment: IT\nSalary: $120,000\n\nName: Jane Doe\nJob Title: Manager\nDepartment: Finance\nSalary: $95,000\n\nName: Tim Smith\nJob Title: Junior Developer\nDepartment: IT\nSalary: $55,000 ", "label": "<html>\n  <head>\n    <title>Employee Data</title>\n  </head>\n  <body>\n    <table>\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Job Title</th>\n          <th>Department</th>\n          <th>Salary</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>John Doe</td>\n          <td>Senior Developer</td>\n          <td>IT</td>\n          <td>$120,000</td>\n        </tr>\n        <tr>\n          <td>Jane Doe</td>\n          <td>Manager</td>\n          <td>Finance</td>\n          <td>$95,000</td>\n        </tr>\n        <tr>\n          <td>Tim Smith</td>\n          <td>Junior Developer</td>\n          <td>IT</td>\n          <td>$55,000</td>\n        </tr>\n      </tbody>\n    </table>\n  </body>\n</html>", "predict": "<html>\n<head>\n <title>Employee Data</title>\n</head>\n<body>\n <h1>Employee Data</h1>\n <table>\n <tr>\n <th>Name</th>\n <th>Job Title</th>\n <th>Department</th>\n <th>Salary</th>\n </tr>\n <tr>\n <td>John Doe</td>\n <td>Senior Developer</td>\n <td>IT</td>\n <td>$120,000</td>\n </tr>\n <tr>\n <td>Jane Doe</td>\n <td>Manager</td>\n <td>Finance</td>\n <td>$95,000</td>\n </tr>\n <tr>\n <td>Tim Smith</td>\n <td>Junior Developer</td>\n <td>IT</td>\n <td>$55,000</td>\n </tr>\n </table>\n</body>\n</html>"}
{"prompt": "Create a Python function to select all rows from a table where the 'status' is 'approved' ", "label": "def select_approved_rows():\n   sql = \"SELECT * FROM table WHERE status = 'approved'\"\n   cur.execute(sql)\n   return cur.fetchall()", "predict": "def select_approved_rows(conn):\n    cur = conn.cursor()\n    query = \"SELECT * FROM table_name WHERE status = 'approved'\"\n    cur.execute(query)\n    rows = cur.fetchall()\n    return rows"}
{"prompt": "Create a Python program to generate random passwords of length 8 characters, containing at least one lowercase letter, one uppercase letter and one number. ", "label": "from random import choice\nimport string\n\ndef generate_password():\n    chars = string.ascii_uppercase + string.ascii_lowercase + string.digits\n    password = ''.join(choice(chars) for i in range(8))\n    if any(c.islower() for c in password) and any(c.isupper() for c in password) and any(c.isdigit() for c in password):\n        return password\n    else: \n        return generate_password()\n\nif __name__ == '__main__':\n    print(generate_password())", "predict": "import random\nimport string\n\ndef generate_password():\n    password_characters = string.ascii_letters + string.digits\n    password = ''.join(random.choice(password_characters) for i in range(8))\n    if not any(c.islower() for c in password) or not any(c.isupper() for c in password) or not any(c.isdigit() for c in password):\n        return generate_password()\n    return password\n\npassword = generate_password()\nprint(password)"}
{"prompt": "Generate a solution to translate a text from English to French using Python. ", "label": "# install the module \n# in command prompt\npip install googletrans\n\n# import module\nfrom googletrans import Translator\n\n# create an object\ntranslator = Translator()\n\n# define text\ntext = \"Hello, this is a sample text to translate.\"\n\n# call the function and pass the text\ntranslation = translator.translate(text, dest='fr') \n\n# print the translation \nprint(translation.text)", "predict": "import googletrans\nfrom googletrans import Translator\n\ntranslator = Translator()\n\ndef translate_text(text, target):\n    translation = translator.translate(text, dest=target)\n    return translation.text\n\ntext = 'Hello, how are you?'\ntarget = 'fr'\n\nprint(translate_text(text, target))"}
{"prompt": "Create a function to generate a unique 6 digit number. ", "label": "# Python program to generate \n# a unique 6 digit number \nimport random \ndef generate_number(): \n      \n    # Choose a random number \n    # between 10000 and 99999 \n    random_number = random.randint(10000, 99999) \n  \n    # Return the random number \n    return random_number \n  \n# Driver Code \nif __name__ == \"__main__\": \n    print(generate_number())", "predict": "import random\n\ndef generate_unique_number():\n    number = random.randint(100000, 999999)\n    while number in [int(x) for x in open('numbers.txt').readlines()]:\n        number = random.randint(100000, 999999)\n    with open('numbers.txt', 'a') as f:\n        f.write(str(number) + '\\n')\n    return number\n\nprint(generate_unique_number())"}
{"prompt": "Write a Python program to generate 10 random numbers and put them in a list. ", "label": "import random\n\nrandom_list = []\nfor i in range(10):\n number = random.randint(1, 100)\n random_list.append(number)", "predict": "import random\n\nrandom_numbers = []\n\nfor _ in range(10):\n    random_numbers.append(random.randint(1,100))\n\nprint(random_numbers)"}
{"prompt": "Write a Python program to replace all occurrences of a given string with an alternate string.\n\"Hello World!\", \"World\", \"Python\" ", "label": "def replace_string(input_string, target_string, replacement_string):\n    return input_string.replace(target_string, replacement_string)\n\nprint(replace_string(\"Hello World!\", \"World\", \"Python\"))", "predict": "def replace_string(s, old_string, new_string):\n    return s.replace(old_string, new_string)\n\nprint(replace_string(\"Hello World!\", \"World\", \"Python\"))"}
{"prompt": "Generate a Python class for an online store item that includes fields for ID, name, price, and description.\nNot applicable ", "label": "class StoreItem:\n    def __init__(self, item_id, name, price, description):\n        self.item_id = item_id\n        self.name = name\n        self.price = price\n        self.description = description\n\n    def __str__(self):\n        return f'{self.name}, ${self.price}'\n\n    def to_dict(self):\n        return {\n            'item_id': self.item_id,\n            'name': self.name,\n            'price': self.price,\n            'description': self.description\n        }", "predict": "class StoreItem:\n def __init__(self, id, name, price, description):\n self.id = id\n self.name = name\n self.price = price\n self.description = description\n\n def get_id(self):\n return self.id\n\n def get_name(self):\n return self.name\n\n def get_price(self):\n return self.price\n\n def get_description(self):\n return self.description"}
{"prompt": "Create a virtual assistant using Python and Dialogflow to answer a basic set of questions.\nNot applicable ", "label": "import dialogflow_v2 as dialogflow\nimport requests\n\nproject_id = 'project-id'\nsession_client = dialogflow.SessionsClient()\nsession = session_client.session_path(project_id, 'session-id')\n\nwhile True:\n text = input('User: ')\n text_input = dialogflow.types.TextInput(text=text, language_code='en-US')\n query_input = dialogflow.types.QueryInput(text=text_input)\n response = session_client.detect_intent(session=session, query_input=query_input)\n\n print('Assistant:', response.query_result.fulfillment_text)", "predict": "import dialogflow_v2 as dialogflow\nfrom dialogflow_v2.entities.types import EntityType\n\n# Initialize the session\nsession_client = dialogflow.SessionsClient()\nsession = session_client.session_path('project-id','session-id')\n\n# Define the context\ncontext = dialogflow.types.Context()\ncontext.name = 'projects/project-id/sessions/session-id/contexts/default'\ncontext.lifespan_count = 10\n\n# Define the query\nquery = dialogflow.types.TextInput(text=input('Enter your question: '), language_code='en-US')\n\n# Make the request\nresponse = session_client.detect_intent(session=session, query_input=query, contexts=[context])\n\n# Print the response\nprint('Query type: ', response.query_result.query_type)\nprint('Detected intent: ', response.query_result.intent.display_name)\nprint('Fulfillment text: ', response.query_result.fulfillment_text)"}
{"prompt": "Create an algorithm in Python to solve \"Tower of Hanoi\" game of a 4 disk problem. ", "label": "def solveTowerOfHanoi(num_disks, start_rod = 'A', end_rod = 'C', aux_rod = 'B'): \n    if num_disks == 1: \n        print(\"Move disk 1 from rod\", start_rod, \"to rod\", end_rod) \n        return\n    solveTowerOfHanoi(num_disks - 1, start_rod, aux_rod, end_rod) \n    print(\"Move disk\", num_disks, \"from rod\", start_rod, \"to rod\", end_rod) \n    solveTowerOfHanoi(num_disks - 1, aux_rod, end_rod, start_rod) \n  \n  \n# Driver code \nnum_disks = 4\nsolveTowerOfHanoi(num_disks)", "predict": "def tower_of_hanoi(n, source, auxiliary, destination):\n    if n == 1:\n        print(\"Move disk 1 from {} to {}\".format(source, destination))\n        return\n    tower_of_hanoi(n - 1, source, destination, auxiliary)\n    print(\"Move disk {} from {} to {}\".format(n, source, destination))\n    tower_of_hanoi(n - 1, auxiliary, source, destination)\n\ntower_of_hanoi(4, \"A\", \"B\", \"C\")"}
{"prompt": "Generate an api response in Python for the provided data.\nData = {\n\"name\" : \"John\",\n\"age\" : 28\n} ", "label": "response = {\n  \"status\": 200,\n  \"data\": {\"name\": \"John\",\"age\":28},\n  \"message\": \"Success\"\n}", "predict": "import json\n\ndata = {\n \"name\" : \"John\",\n \"age\" : 28\n}\n\napi_response = {\n \"status\": \"success\",\n \"data\": data\n}\n\nprint(json.dumps(api_response))"}
{"prompt": "Create a webscraper using Python’s Selenium that retrieves data from an online store.\nNot applicable ", "label": "from selenium import webdriver\n\n# create a new Firefox session\ndriver = webdriver.Firefox()\ndriver.implicitly_wait(30)\ndriver.maximize_window()\n\n# navigate to the application home page\ndriver.get(\"https://www.example.com/\")\n\n# get the search textbox\nsearch_field = driver.find_element_by_name(\"q\")\nsearch_field.clear()\n\n# enter search keyword and submit\nsearch_field.send_keys(\"shoes\")\nsearch_field.submit()\n\n# get the list of elements which are displayed after the search\n# currently on result page using find_elements_by_class_name\nproduct_list = driver.find_elements_by_class_name(\"product\")\n\n# iterate through each element and print the text that is\n# name of the product\nfor product in product_list:\n    print(product.text)\n\n# close the browser window\ndriver.quit()", "predict": "from selenium import webdriver\n\n# Initialize the web driver\ndriver = webdriver.Chrome()\n\n# Load the page\ndriver.get('https://www.example.com/store')\n\n# Get all the product elements\nproducts = driver.find_elements_by_class_name('product')\n\n# Iterate over the products\nfor product in products:\n # Get the product name\n product_name = product.find_element_by_class_name('name').text\n \n # Get the product price\n product_price = product.find_element_by_class_name('price').text\n \n # Print the product name and price\n print('Product Name: {} | Price: {}'.format(product_name, product_price))\n\n# Close the web driver\ndriver.close()"}
{"prompt": "Develop a web scraper with Python BeautifulSoup to scrape data from an online web store.\nNot applicable ", "label": "import requests\nfrom bs4 import BeautifulSoup\n \n# Make a GET request to fetch the raw HTML content\nhtml_content = requests.get('http://web-store.com').text\n \n# Parse the html content\nsoup = BeautifulSoup(html_content, \"lxml\")\n \n# Get the product data\nproducts = soup.find_all('div', attrs={\"itemprop\": \"product\"})\nfor product in products:\n    name = product.find(\"span\", attrs={\"itemprop\": \"name\"}).text\n    price = product.find(\"span\", attrs={\"itemprop\": \"price\"}).text\n    description = product.find(\"span\", attrs={\"itemprop\": \"description\"}).text\n    print(name, price, description)", "predict": "import requests\nfrom bs4 import BeautifulSoup\n\n# Make a request to the website\nurl = 'https://www.example.com/store'\nr = requests.get(url)\n\n# Parse the HTML content\nsoup = BeautifulSoup(r.text, 'html.parser')\n\n# Find all product elements\nproducts = soup.find_all('div', {'class': 'product'})\n\n# Iterate through each product and scrape data\nfor product in products:\n    # Scrape the product name\n    product_name = product.find('h3', {'class': 'product-name'}).text\n    # Scrape the product price\n    product_price = product.find('span', {'class': 'product-price'}).text\n    # Scrape the product image\n    product_image = product.find('img', {'class': 'product-image'})['src']\n\n    # Print the scraped data\n    print(product_name)\n    print(product_price)\n    print(product_image)"}
{"prompt": "Implement a basic algorithm in Python to calculate the nth Fibonacci number.\n6 ", "label": "def fibonacci(n):\n if n == 0:\n return 0\n elif n == 1:\n return 1\n else:\n return fibonacci(n - 1) + fibonacci(n - 2)\n \nprint(fibonacci(6)) // 8", "predict": "def fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return fibonacci(n-1)+fibonacci(n-2) \n\nprint(fibonacci(6))"}
{"prompt": "Create a Python class that receives two strings and has methods for comparing the strings and returning whether they are equal, different, or similar up to a provided threshold.\nNot applicable ", "label": "class StringComparator:\n\ndef __init__(self, string1, string2):\n self.string1 = string1\n self.string2 = string2\n\ndef is_equal(self):\n return self.string1 == self.string2\n\ndef is_different(self):\n return self.string1 != self.string2\n\ndef is_similar(self, threshold=0.5):\n distance = edit_distance(self.string1, self.string2)\n max_length = max(len(self.string1), len(self.string2))\n\n return distance / max_length < threshold", "predict": "class StringComparator:\n def __init__(self, string1, string2):\n self.string1 = string1\n self.string2 = string2\n\n def are_equal(self):\n return self.string1 == self.string2\n\n def are_different(self):\n return self.string1!= self.string2\n\n def is_similar(self, threshold):\n return len(set(self.string1) - set(self.string2)) <= threshold"}
{"prompt": "Generate a program in Python to evaluate the accuracy of a machine-learning model.\nfrom sklearn.svm import SVC\nclf = SVC(kernel='poly', degree=2, gamma=0.05) ", "label": "import numpy as np\nfrom sklearn.metrics import accuracy_score\n\nclf.fit(X_train, y_train)\ny_pred = clf.predict(X_test)\n\n# Calculating the accuracy\naccuracy = accuracy_score(y_test, y_pred)\n\nprint(\"Accuracy: \" + str(accuracy))", "predict": "from sklearn.metrics import accuracy_score\n\n# Fit the model\nclf.fit(X_train, y_train)\n\n# Make predictions\ny_pred = clf.predict(X_test)\n\n# Calculate accuracy\naccuracy = accuracy_score(y_test, y_pred)\n\n# Print the accuracy\nprint('Accuracy: {:.2f}'.format(accuracy))"}
{"prompt": "Write a Python program to replace all occurrences of a character in a string with the provided replacement character.\nstr = \"Hello World!\"\n\nreplacement = ‘X' ", "label": "def replace_all_occurrences(str, char, replacement):\n  return str.replace(char, replacement)\n\nprint(replace_all_occurrences(\"Hello World!\", 'l', 'X'))", "predict": "def replace_char(str, char, replacement):\n    new_str = \"\"\n    for c in str:\n        if c == char:\n            new_str += replacement\n        else:\n            new_str += c\n    return new_str\n\nstr = \"Hello World!\"\nreplacement = 'X'\n\nprint(replace_char(str, 'l', replacement))"}
{"prompt": "Create a python program to find the largest prime factor of a number.\nNumber: 331 ", "label": "import math\n\ndef largest_prime_factor(n):\n\n# Separate the list of larger factors of the number into prime and composite numbers \n    factors = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(int(n/i))\n# Find the largest prime factor in the list\n    prime_factors = []\n    for potential_factor in factors:\n        is_prime = True\n        for j in range(2,int(math.sqrt(potential_factor))+1):\n            if potential_factor % j == 0 and potential_factor != j: \n                is_prime = False\n        if is_prime:\n            prime_factors.append(potential_factor)\n\n# Return the largest prime factor\n    return max(prime_factors)\n\nprint(largest_prime_factor(331))", "predict": "def largest_prime_factor(n):\n    largest_prime = 0\n    for i in range(2, n+1):\n        if n % i == 0:\n            largest_prime = i\n            n = n/i\n    return largest_prime\n\nprint(largest_prime_factor(331))"}
{"prompt": "Write a Python program to check if an element exists within a given list of integers. ", "label": "def element_exists(elem, list_int):\n  return elem in list_int", "predict": "def check_element(nums, element):\n    return element in nums"}
{"prompt": "Create a Python program that takes a sentence and converts it to Morse code.\nNot applicable ", "label": "MORSE_CODE = {\n 'A': '.-', 'B': '-...',\n 'C': '-.-.', 'D': '-..',\n 'E': '.', 'F': '..-.',\n 'G': '--.', 'H': '....',\n 'I': '..', 'J': '.---',\n 'K': '-.-', 'L': '.-..',\n 'M': '--', 'N': '-.',\n 'O': '---', 'P': '.--.',\n 'Q': '--.-', 'R': '.-.',\n 'S': '...', 'T': '-',\n 'U': '..-', 'V': '...-',\n 'W': '.--', 'X': '-..-',\n 'Y': '-.--', 'Z': '--..',\n '0': '-----', '1': '.----',\n '2': '..---', '3': '...--',\n '4': '....-', '5': '.....',\n '6': '-....', '7': '--...',\n '8': '---..', '9': '----.',\n ' ': ' ', '.': '.-.-.-',\n ',': '--..--', '?': '..--..',\n '/': '-..-.', '-': '-....-',\n '(': '-.--.-', ')': '-.--.-'\n}\n\ndef encode(message):\n code = ''\n for letter in message:\n  code += MORSE_CODE[letter.upper()] + ' '\n \n return code\n\nprint(encode(\"Hello world\"))\n# Output: .... . .-.. .-.. ---  .-- --- .-. .-.. -..", "predict": "# Morse Code\n\nmorse_code = {\n 'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---',\n 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-',\n 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..',\n '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....',\n '6': '-....', '7': '--...', '8': '---..', '9': '----.', '0': '-----',\n ', ': '--..--', '.': '.-.-.-', '?': '..--..', '/': '-..-.', '-': '-....-',\n '(': '-.--.', ')': '-.--.-'\n}\n\ndef encode(text):\n encoded_message = ''\n for char in text:\n  if char in morse_code:\n   encoded_message += morse_code[char] +''\n return encoded_message\n\nprint(encode('HELLO WORLD'))\n# Output:.--.- --. -..- ---\n\n# Decode\n\ndef decode(morse_code):\n decoded_message = ''\n for char in morse_code:\n  if char!='':\n   decoded_message += decode_morse_code[char]\n return decoded_message\n\nprint(decode('..-....-.-...-. ---'))\n# Output: HELLO"}
{"prompt": "Generate a python program to sort a list of numbers\narray = [4, 2, 6, 7, 1] ", "label": "def sort_list(array): \n    n = len(array) \n  \n    for i in range(n): \n  \n        min_idx = i \n        for j in range(i+1, n): \n            if array[min_idx] > array[j]: \n                min_idx = j \n        array[i], array[min_idx] = array[min_idx], array[i]\n\nif __name__ == \"__main__\":\n    array = [4, 2, 6, 7, 1]\n    sort_list(array)\n    print(array)", "predict": "def sort_list(array):\n    for i in range(len(array)):\n        for j in range(i + 1, len(array)):\n            if array[i] > array[j]:\n                array[i], array[j] = array[j], array[i]\n    return array\n\nsorted_list = sort_list(array)\nprint(sorted_list)"}
{"prompt": "Create a program in Python to remove all the occurrences of an item from a list.\nList: [1, 2, 3, 4, 2, 5, 2]\nItem to Remove: 2 ", "label": "def removeItem(list, item):\n    # loop through the list\n    for i in list:\n        # check if the element is the item to remove\n        if i == item:\n            # remove the item\n            list.remove(i)\n    # return the list\n    return list\n\n#example\nlist = [1, 2, 3, 4, 2, 5, 2]\nresult = removeItem(list, 2)\n\nprint(result)\n# Output: [1, 3, 4, 5]", "predict": "def remove_item(list, item):\n    return [i for i in list if i!= item]\n\nlist = [1, 2, 3, 4, 2, 5, 2]\nitem = 2\n\nresult = remove_item(list, item)\nprint(result)"}
{"prompt": "Could you build a web scraper in Python that collects all the links from a website? ", "label": "# Python program to scrape a webpage\nimport requests as req \nfrom bs4 import BeautifulSoup \n  \nURL = \"http://www.example.com/\"\n  \n# GET request \nr = req.get(URL) \n  \n# parse the downloaded homepage and grab all text\nsoup = BeautifulSoup(r.text, \"html.parser\") \n  \n# find and print all links \nlinks = soup.find_all('a') \nfor link in links: \n    print(link.get('href'))", "predict": "import requests\nfrom bs4 import BeautifulSoup\n\ndef get_links(url):\n    # make a GET request to fetch the raw HTML content\n    html_content = requests.get(url).text\n    # parse the html content\n    soup = BeautifulSoup(html_content, \"lxml\")\n    # get all the links\n    links = []\n    for link in soup.find_all('a'):\n        links.append(link.get('href'))\n    return links\n\nurl = \"https://example.com/\"\nlinks = get_links(url)\nprint(links)"}
{"prompt": "Generate a Python program to delete a given key from a dictionary.\ndictionary = {'foo': 1, 'bar': 2, 'baz': 3}\nkey = 'baz' ", "label": "dictionary = {'foo': 1, 'bar': 2, 'baz': 3}\nkey = 'baz'\n\ndef delete_key(dic, k):\n  if k in dic:\n    del dic[k]\n\ndelete_key(dictionary, key)\n\nprint(dictionary)", "predict": "def delete_key(dictionary, key):\n    if key in dictionary:\n        del dictionary[key]\n    return dictionary\n\ndictionary = {'foo': 1, 'bar': 2, 'baz': 3}\nkey = 'baz'\nprint(delete_key(dictionary, key))"}
{"prompt": "Analyze the following Python function to detect any potential errors.\ndef expand_list(list):\n    for item in list:\n        list *= 2 ", "label": "The function is attempting to modify the list while iterating over it. This can lead to unexpected behavior and should be avoided. To fix the code, the list should be copied before the iteration takes place: \n\ndef expand_list(list):\n    list_copy = list[:]   # make a copy of the list\n    for item in list_copy:\n        list *= 2", "predict": "The function takes a list as an argument but does not use it. The function also modifies the list it receives as an argument, which can have unexpected side effects. The function also does not return any value, so it is not clear what the result of the function should be."}
{"prompt": "Generate a Python program to reverse the order of words in a sentence but keep the order of the characters in each word the same. ", "label": "def reverse_words(string):\n  words = string.split(\" \")\n  reversed_words = []\n  for word in words:\n    reversed_words.insert(0, word)\n  return ' '.join(reversed_words)\n\nstring = 'This is a sentence.'\nreverse_words = reverse_words(string)\nprint(reverse_words)", "predict": "def reverse_words(sentence):\n    words = sentence.split(' ')\n    reversed_words = []\n    for word in words:\n        reversed_words.insert(0, word)\n    return''.join(reversed_words)"}
{"prompt": "Port a Java code snippet to Python 3.\npublic class Foo {\n  public int foo( int a, int b ) {\n    return a + b;\n  }\n} ", "label": "def foo(a, b):\n return a + b", "predict": "def foo(a, b):\n  return a + b"}
{"prompt": "Generate a Python program that takes a list of strings as input and prints the strings in alphabetical order.\n['cat', 'dog', 'apple', 'banana'] ", "label": "strings = ['cat', 'dog', 'apple', 'banana']\n\nstrings.sort()\n\nfor string in strings:\n    print(string)", "predict": "list = ['cat', 'dog', 'apple', 'banana']\n\nlist.sort()\n\nfor item in list:\n    print(item)"}
{"prompt": "Build a Python program that extracts all email addresses from a given string.\n\"This is an example with two emails: john@example.com, and jane@example.com\" ", "label": "import re\n\ndef find_emails(text):\n    regex = r\"([a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+)\"\n    emails = re.findall(regex, text)\n    return emails\n\nemails = find_emails(\"This is an example with two emails: john@example.com, and jane@example.com\")\nprint(emails)", "predict": "import re\n\nstring = \"This is an example with two emails: john@example.com, and jane@example.com\"\n\n# find all email addresses in the string\nemails = re.findall(r\"[\\w\\.-]+@[\\w\\.-]+\", string)\n\n# print the emails\nprint(emails)\n\n# Output: ['john@example.com', 'jane@example.com']"}
{"prompt": "Create a Python code to generate a random string of length 8 made of uppercase letters and numbers. ", "label": "import string\nimport random\n\nlength = 8\nchars = string.ascii_uppercase + string.digits\npassword = ''.join(random.choice(chars) for i in range(length))\n\nprint (password)", "predict": "import random\nimport string\n\ndef generate_random_string():\n    chars = string.ascii_uppercase + string.digits\n    random_string = ''.join(random.choice(chars) for _ in range(8))\n    return random_string\n\nprint(generate_random_string())"}
{"prompt": "This code calculates the percent of transcripts mapping to rRNA. To use it, you need to supply two inputs: an HTseq_counts file and an original reference transcriptome aligned to. To produce tables with rRNA and MT counts for each sample, run the command \"./rRNA_MT_count.py --gtf /path/to/GTF/file --htseq /path/to/", "label": "#!/usr/bin/python\n\n# Malwina Prater, mn367@cam.ac.uk,  2017, Copyright\n# Centre for Trophoblast Research, University of Cambridge\n#\n# Script version: v01.\n#\n# Script to calculate the percent of transcripts mapping to rRNA\n#\n#  INPUTS :\n# 1. HTseq_counts file\n# 2. Original reference transcriptome alignned to\n#\n#  USAGE :    \n#  For producing table(s) with rRNA and MT counts for each sample use commands like that:\n#\n#    ./rRNA_MT_count.py --gtf /Users/malwina/Documents/CTR-Data/genomes/Mus_musculus/mm10/Mus_musculus.GRCm38.84.gtf --htseq C17_3_S20_Aligned.out.srt.bam_htseq_combined_counts.txt\n#\n\n\n# import modules: \nimport os,sys\nfrom optparse import OptionParser\nimport re\n\n# parse in the user options:\n\nparser = OptionParser(usage=\"%prog [-x Excel [-i imagefile] [-s squares]\",\n                      version=\"%prog 0.1\")\n\nparser.add_option(\"--htseq\", dest=\"FileName\", type=\"string\", action=\"store\")\nparser.add_option(\"--gtf\", dest=\"GTF\", type=\"string\", action=\"store\")\n\n(options, args) = parser.parse_args()\n\n\n#files = sys.argv[]\nHTSEQ_COUNTS = options.FileName\nGTF = options.GTF\n\n\n# check if files supplied exist:\ntry:\n    handle = open(GTF, \"rU\")\n    handle.close()\nexcept:\n    print \"\\nError->\\tGTF File: %s does not exist\\n\" % GTF\n    sys.exit()\n\ntry:\n    handle = open(HTSEQ_COUNTS, \"rU\")\n    handle.close()\nexcept:\n    print \"\\nError->\\tFile: %s does not exist\\n\" % HTSEQ_COUNTS\n    sys.exit()\n\n\n#\n# First job is to extract all the identifiers of genes/transcripts mapping to the rRNA and MT genes and store in 2 arrays\n#\n\nrRNA_identifiers = {}\nMT_identifiers = {}\n\n\nwith open(GTF, \"rU\") as handle:\n    #line = handle.readline()\n    for line in handle:\n    \tline.rstrip('\\n')\n    \tif 'gene_biotype \"rRNA\"' in line:\n            identifier = line\n            identifier = re.sub('.*gene_id \"', '', identifier)\n            identifier = re.sub('\"; gene_version.*\\n', '', identifier)\n            rRNA_identifiers[identifier] = 1\n        if 'MT' in line:\n            identifier = line\n            identifier = re.sub('.*gene_id \"', '', identifier)\n            identifier = re.sub('\"; gene_version.*\\n', '', identifier)\n            MT_identifiers[identifier] = 1    \nhandle.close()    \n\n#print(\"rRNA:\")\n#print(rRNA_identifiers.keys())\n#print(\"MT:\")\n#print(MT_identifiers.keys())\n\n\n#\n# Second job is to go through the HTSEQ-couts and count reads matching the rRNA identifiers\n#\nCummulative_rRNA_Count = 0\nrRNA_genes = 0\nReadCount = 0\nline_number = 0\nMT_genes = 0;\nCummulative_MT_Count = 0;\n\nwith open(HTSEQ_COUNTS, \"rU\") as handle:\n    for line in handle", "predict": "HTseq/counts/file --reference /path/to/reference/genome/ --transcripts /path/to/transcripts/file --threads 16 --sample_name /path/to/sample/name/file --outdir /path/to/output/directory\""}
{"prompt": "Modify the following Python code to raise an exception if the input value is not an integer\ndef square_root(x):\n    return x**0.5 ", "label": "def square_root(x):\n    if not isinstance(x, int):\n        raise TypeError('Input must be an integer')\n    return x**0.5", "predict": "def square_root(x):\n    if not isinstance(x, int):\n        raise TypeError(\"Input must be an integer\")\n    return x**0.5"}
{"prompt": "Create a program in Python that extracts titles of all YouTube videos from a URL.\nhttps://www.youtube.com/user/Thexvid/videos ", "label": "import requests\nimport re\n\nurl = \"https://www.youtube.com/user/Thexvid/videos\"\n\nr = requests.get(url)\ntitles = re.findall('<a href=\"/watch\\?v=([^\"]+)\">(.+?)<\\/a>',r.content.decode('utf-8'))\n\nfor title in titles:\n print(title[1])", "predict": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.youtube.com/user/Thexvid/videos'\nr = requests.get(url)\nsoup = BeautifulSoup(r.content, 'html.parser')\n\nvideo_titles = []\nfor video in soup.find_all('a', {'class': 'yt-uix-tile-link'}):\n video_titles.append(video.text)\n\nprint(video_titles)"}
{"prompt": "Write Python code to list the contents of a directory. ", "label": "# get the list of contents\nimport os\ndirectory_contents = os.listdir()\n\n# print the contents\nfor content in directory_contents:\n    print(content)", "predict": "import os\n\nfor item in os.listdir():\n    print(item)"}
{"prompt": "Create an AI-powered Python script to optimize any given code.\nExample code:\nfunction getResult(a, b, c) {\n return a + b + c;\n} ", "label": "# Import the required libraries\nfrom dataclasses import dataclass\n\n@dataclass\nclass Params:\n a: int\n b: int\n c: int\n\ndef get_result(params: Params) -> int:\n \"\"\"Returns the sum of the three given numbers\"\"\"\n return params.a + params.b + params.c\n\n# Optimize the code\ndef optimize(fn, params):\n best_score = 0\n best_params = None\n for a in range(params.a - 10, params.a + 10):\n for b in range(params.b - 10, params.b + 10):\n for c in range(params.c - 10, params.c + 10):\n score = fn(Params(a, b , c))\n if score > best_score:\n best_score = score\n best_params = {\n 'a': a,\n 'b': b,\n 'c': c\n }\n return best_params\n\nif __name__ == '__main__':\n # Initialize the parameters\n params = Params(a=1, b=2, c=3)\n # Get the optimized params\n best_params = optimize(get_result, params)\n # Print the optimized result\n print(\"Optimized result: %d\" % get_result(Params(best_params['a'], best_params['b'], best_params['c'])))", "predict": "import ast\nimport autofix\n\ncode = \"\"\"\ndef getResult(a, b, c):\n return a + b + c;\n\"\"\"\n\ntree = ast.parse(code)\n\nautofix.apply_fixes(tree)\n\noptimized_code = ast.unparse(tree)\n\nprint(optimized_code)\n\n# Output:\ndef getResult(a, b, c):\n return (a + b) + c"}
{"prompt": "Create a Python function that takes two strings and returns true if the first string is a subsequence of the second.\nString 1: abc\nString 2: qaxbcy ", "label": "def is_subsequence(str1, str2):\n    i = 0\n    j = 0\n\n    while(i < len(str1) and j < len(str2)):\n        if str1[i] == str2[j]:\n            i += 1\n        j += 1\n\n    return i == len(str1)", "predict": "def is_subsequence(s1, s2):\n    index1 = 0\n    index2 = 0\n    while index1 < len(s1) and index2 < len(s2):\n        if s1[index1] == s2[index2]:\n            index1 += 1\n        index2 += 1\n    return index1 == len(s1)\n\nresult = is_subsequence(\"abc\", \"qaxbcy\")\nprint(result)"}
{"prompt": "Create a neural network class in Python to model a linear regression function. ", "label": "import numpy as np\nclass LinearRegressionModel:\n    def __init__(self, input_dim, output_dim):\n        ''' Initialises the weights and bias of the linear regression model\n        Arguments:\n            input_dim {int} -- Number of input features\n            output_dim {int} -- Number of outputs\n        '''\n        self.weights = np.zeros((input_dim, output_dim))\n        self.bias = np.zeros((1, output_dim))\n\n    def forward(self, x):\n        ''' Calculates the forward pass of the linear regression model\n        Arguments:\n            x {numpy array} -- Input data of size (N, input_dim)\n        Returns:\n            out {numpy array} -- Output of the linear regression model of size (N, output_dim)\n        '''\n        out = np.dot(x, self.weights) + self.bias\n        return out", "predict": "import numpy as np\n\nclass NeuralNetwork:\n    def __init__(self):\n        self.weights = np.random.rand(1, 1)\n\n    def forward(self, x):\n        self.input = x\n        self.output = np.dot(self.input, self.weights)\n\n    def backward(self, y):\n        error = y - self.output\n        self.weights += error * self.input\n\n    def train(self, x, y):\n        self.forward(x)\n        self.backward(y)"}
{"prompt": "Develop a ML model in Python for predicting the winning team of football matches. Use data from the past 5 years of the Premier League.\nNot applicable ", "label": "import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import GradientBoostingClassifier\n\n# Load data\ndata = pd.read_csv('data.csv')\n\n# Select features\nfeatures = data[['home_team_goals', 'away_team_goals', 'home_team_possession', 'away_team_possession',\n                 'home_team_shots', 'away_team_shots', 'home_team_yellow_cards', 'away_team_yellow_cards',\n                 'home_team_red_cards', 'away_team_red_cards']]\n\n# Select target\ntarget = data['winner']\n\n# Split data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)\n\n# Train the model\ngbm = GradientBoostingClassifier()\ngbm.fit(X_train, y_train)\n\n# Make predictions\ny_pred = gbm.predict(X_test)\n\n# Evaluate the model\nscore = gbm.score(X_test, y_test)\nprint(f'Model score: {score}')", "predict": "import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Read the data\ndata = pd.read_csv('premier_league.csv')\n\n# Split the data into features and labels\nX = data.drop('team_winner', axis=1)\ny = data['team_winner']\n\n# Split the data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train the model\nmodel = RandomForestClassifier(n_estimators=100)\nmodel.fit(X_train, y_train)\n\n# Evaluate the model\nscore = model.score(X_test, y_test)\nprint('Model accuracy:', score)"}
{"prompt": "Create a program in Python that evaluates a postfix expression. The input to the program should be a string with the postfix expression. The output should be the evaluated value of the expression.\n\"2 3 + 4 5 * *\" ", "label": "def evaluate(expression): \n  \n    # split expression into list  \n    expression = expression.split() \n  \n    # stack to store integer values. \n    stack = []  \n  \n    # do for every element of expression. \n    for element in expression: \n  \n        # If element is an operand push \n        # into stack it's a number only \n        if element.isdigit(): \n            stack.append(element) \n  \n        # if element is an operator, \n        # pop two elements from stack \n        # perform respective operations \n        else:  \n            val1 = stack.pop() \n            val2 = stack.pop() \n            stack.append(str(eval(val2 + element + val1))) \n  \n    # return the value  \n    return (int(stack[0])) \n  \n# Driver Code  \nexpression = \"2 3 + 4 5 * *\"\n  \nprint(evaluate(expression)) \n\nOutput: 46", "predict": "def postfixEval(expression):\n    stack = []\n    for token in expression.split():\n        if token.isdigit():\n            stack.append(int(token))\n        else:\n            op2 = stack.pop()\n            op1 = stack.pop()\n            result = eval(f\"{op1} {token} {op2}\")\n            stack.append(result)\n    return stack[0]\n\nprint(postfixEval(\"2 3 + 4 5 *\"))"}
{"prompt": "Write a Python script to identify the words that contain more than one vowel in a given sentence.\nSentence: The quick brown fox jumped over the lazy dog. ", "label": "import re\n\nsentence = \"The quick brown fox jumped over the lazy dog.\"\npattern = r\"\\b(\\w*[aeiou]\\w*){2,}\\b\"\n\nmatch = re.findall(pattern, sentence)\nprint(match)\n\n# Output: ['quick', 'brown', 'jumped', 'over', 'lazy']", "predict": "sentence = \"The quick brown fox jumped over the lazy dog.\"\nvowels = \"aeiouAEIOU\"\n\nwords = sentence.split()\nvowel_words = []\n\nfor word in words:\n    if any(letter in vowels for letter in word):\n        vowel_words.append(word)\n\nprint(\"Words with more than one vowel:\")\nfor word in vowel_words:\n    print(word)"}
{"prompt": "This code provides a Python API for KB SRU. To use it, you can create an instance of the \"sru\" class", "label": "#! /usr/bin/env python\n\"\"\"\nPython API for KB SRU\n\"\"\"\n\nimport sys\nimport urllib\nimport requests\nfrom lxml import etree\n\nSRU_BASEURL = 'http://jsru.kb.nl/sru/sru'\nSRU_BASEURL += '?version=1.2&maximumRecords=%i'\nSRU_BASEURL += '&operation=searchRetrieve'\nSRU_BASEURL += '&startRecord=%i'\nSRU_BASEURL += '&recordSchema=%s'\nSRU_BASEURL += '&x-collection=%s&query=%s'\n\nSETS = {'ANP': {'collection': 'ANP',\n                'description_en': 'Radio Bulletins ANP Press Agency',\n                'description_nl': 'ANP Radiobulletins Digitaal',\n                'metadataPrefix': 'didl',\n                'recordschema': 'dcx',\n                'setname': 'anp',\n                'time_period': [1937, 1989]},\n        'DPO': {'collection': 'DPO_boekdeel',\n                'description_en': 'Early Dutch Books Online',\n                'description_nl': 'Early Dutch Books Online',\n                'metadataPrefix': 'didl',\n                'recordschema': 'ddd',\n                'setname': 'DPO',\n                'time_period': [1781, 1800]},\n        'BYVANCK': {'description_en': 'Medieval Illuminated Manuscripts',\n                    'description_nl': 'Middeleeuwse Verluchte Handschriften',\n                    'metadataPrefix': 'dcx',\n                    'setname': 'BYVANCK',\n                    'time_period': [500, 1500]},\n        'SGD': {'description_en': 'States General Digital',\n                'description_nl': 'Staten-Generaal Digitaal',\n                'metadataPrefix': 'dcx',\n                'setname': 'sgd:register',\n                'time_period': [1962, 1994]},\n        'GGC': {'collection': 'GGC',\n                'description_en': 'General Catalogue KB',\n                'description_nl': 'Algemene Catalogus KB',\n                'metadataPrefix': 'dcx',\n                'recordschema': 'dcx',\n                'setname': 'ggc',\n                'time_period': [1937, 2021]}}  # No idea what to use here?\n\n# Name spaces in GGC records\n\nsrw_ns = 'http://www.loc.gov/zing/srw/'\ntel_ns = 'http://krait.kb.nl/coop/tel/handbook/telterms.html'\nxsi_ns = 'http://www.w3.org/2001/XMLSchema-instance'\ndc_ns = 'http://purl.org/dc/elements/1.1/'\ndcterms_ns = 'http://purl.org/dc/terms/'\ndcx_ns = 'http://krait.kb.nl/coop/tel/handbook/telterms.html'\n\nNSMAPGGC = {\"srw\": srw_ns,\n            \"tel\": tel_ns,\n            \"xsi\": xsi_ns,\n            \"dc\":  dc_ns,\n            \"dcterms\": dcterms_ns,\n            \"dcx\": dcx_ns}\n\n\nclass response():\n    def __init__(self, record_data, sru):\n        self.record_data = record_data\n        self.sru = sru\n\n    def getElementText(self, tagName, attributeName, attributeValue):\n        # Returns text content of all elements for which tag matches tagName,\n        # and attribute value equals attributeValue. Set attributeName to empty\n        # string to get all tagName matches.\n        textFields = []\n        for r in self.record_data.iter():", "predict": "and call the appropriate methods. The \"sru\" class is derived from the \"sru_client\" class, which provides a basic implementation of the SRU protocol.\n\n\n# Copyright (C) 2010  The KB Project\n#\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\nimport sys\nimport time\nimport datetime\nimport os\nimport urllib\nimport urllib2\nimport socket\nimport json\nimport zlib\nimport base64\nimport hashlib\nimport random\nimport string\nimport copy\nimport threading\nimport collections\nimport Queue\nimport logging\nimport traceback\n\nimport urlparse\n\nfrom sru_client import sru_client\nfrom sru_client import sru_exception\nfrom sru_client import sru_response\nfrom sru_client import sru_client_factory\nfrom sru_client import sru_record\nfrom sru_client import sru_record_factory\nfrom sru_client import sru_record_parser\nfrom sru_client import sru_record_factory\nfrom sru_client import sru_record_parser\nfrom sru_client import sru_client_factory\nfrom sru_client import sru_client_factory\n\nimport xml.sax\nfrom xml.sax import ContentHandler, parse\nfrom xml.sax.saxutils import escape\n\nimport kb_utils\n\nfrom kb_sru_record import kb_sru_record\nfrom kb_sru_record import kb_sru"}
{"prompt": "Using numpy, create a Python code which would return an array with the running total of numbers in a given list. ", "label": "import numpy as np\n\ndef runningTotal(arr):\n    return np.cumsum(arr)", "predict": "import numpy as np\n\ndef running_total(arr):\n    return np.cumsum(arr)"}
{"prompt": "Construct a neural network in Python that can perform basic regression.\nNot applicable ", "label": "import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n \n# Load the data\ndata = pd.read_csv('data.csv')\n \n# Split the data into features and labels\nX = data.drop(['label'], axis=1).values\ny = data['label'].values\n \n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n \n# Create the neural network\nmodel = Sequential()\nmodel.add(Dense(12, input_dim=X.shape[1], kernel_initializer='normal', activation='relu'))\nmodel.add(Dense(12, kernel_initializer='normal', activation='relu'))\nmodel.add(Dense(1, kernel_initializer='normal'))\n \n# Compile the model\nmodel.compile(loss='mean_squared_error', optimizer='adam')\n \n# Train the model\nmodel.fit(X_train, y_train, epochs=100, batch_size=20, verbose=0)\n \n# Evaluate the model\nscore = model.evaluate(X_test, y_test, verbose=0)\nprint('Test score:', score)", "predict": "import numpy as np\nimport tensorflow as tf\n\n# Define the model\nmodel = tf.keras.Sequential([\n tf.keras.layers.Dense(128, activation='relu', input_shape=(1,)),\n tf.keras.layers.Dense(128, activation='relu'),\n tf.keras.layers.Dense(1)\n])\n\n# Compile the model\nmodel.compile(optimizer='adam',\n loss='mean_squared_error',\n metrics=['mae'])\n\n# Train the model\nmodel.fit(X_train, y_train, epochs=50, batch_size=32)\n\n# Evaluate the model\nscore = model.evaluate(X_test, y_test, batch_size=32)\nprint('Test loss:', score[0])\nprint('Test mean absolute error:', score[1])"}
{"prompt": "Generate a program in Python to take in two strings as input, and output a list of all thewords in both strings.\nString 1: I want to make a difference\nString 2: The journey to success is long ", "label": "def string_to_list(s1, s2):\n    s1_list = s1.split()\n    s2_list = s2.split()\n    output_list = s1_list + s2_list\n    return output_list\n\nwords = string_to_list(\"I want to make a difference\", \"The journey to success is long\")\nprint(words)", "predict": "def combine_words(str1, str2):\n    words1 = str1.split(' ')\n    words2 = str2.split(' ')\n    combined_words = words1 + words2\n    return combined_words\n\ncombined_words = combine_words('I want to make a difference', 'The journey to success is long')\nprint(combined_words)"}
{"prompt": "Create a web scraper using Python that retrieves the 10 most recent articles from a news website.\nNot applicable ", "label": "import requests \nfrom bs4 import BeautifulSoup \n  \n# URL to scrap \nURL = 'http://example.com/news'\n  \n# get the source code \nhtml_content = requests.get(URL).text \n  \n# parse the html content \nsoup = BeautifulSoup(html_content, \"lxml\") \n  \n# get all the articles  \narticles = soup.find_all('article') \n  \n# print the first 10 articles \nfor article in articles[:10]: \n    print(article.text)", "predict": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'http://www.example.com/news'\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# Find all the article links\nlinks = soup.find_all('a', class_='article-link')\n\n# Extract the 10 most recent articles\narticles = []\nfor link in links[:10]:\n articles.append(link.get('href'))\n\n# Print out the 10 most recent articles\nfor article in articles:\n print(article)"}
{"prompt": "Create a Python program to convert HTML to plain text without using any libraries. ", "label": "def html_to_text(html_string):\n    output = ''\n    in_tag = False\n    for char in html_string:\n        if char == '<':\n            in_tag = True\n        elif char == '>':\n            in_tag = False\n        elif in_tag == False:\n            output += char\n    return output", "predict": "def html_to_text(html):\n    text = \"\"\n    in_tag = False\n    for char in html:\n        if char == '<':\n            in_tag = True\n        elif char == '>':\n            in_tag = False\n        elif in_tag == False:\n            text += char\n    return text"}
{"prompt": "Write a python program to convert the given temperature from Celsius to Fahrenheit.\n0°C ", "label": "\"\"\"\nConvert the given temperature from Celsius to Fahrenheit\n\"\"\"\n\ndef celsius_to_fahrenheit(celsius):\n    fahrenheit = (celsius * 9/5) + 32\n    return fahrenheit\n\nif __name__ == '__main__':\n    celsius = 0\n    print(celsius_to_fahrenheit(celsius))", "predict": "def celsius_to_fahrenheit(celsius):\n    fahrenheit = celsius * 9/5 + 32\n    return fahrenheit\n\ncelsius = 0\nfahrenheit = celsius_to_fahrenheit(celsius)\nprint(\"{}°C is equal to {}°F\".format(celsius, fahrenheit))"}
{"prompt": "Create a lambda expression in Python to filter a list of integer greater than 50.\n[45, 12, 52, 89, 33, 99] ", "label": "list1 = [45, 12, 52, 89, 33, 99]\nfiltered_list = list(filter(lambda x: x > 50, list1))\n\nprint(filtered_list)", "predict": "my_list = [45, 12, 52, 89, 33, 99]\n\nfiltered_list = list(filter(lambda x: x > 50, my_list))\n\nprint(filtered_list)"}
{"prompt": "Create a Python program to evaluate and compare the performance of two different heuristics algorithms. ", "label": "import time\nimport heuristics_algorithm1\nimport heuristics_algorithm2\n\n#input data for algorithms\ndata1 = ...\ndata2 = ...\n\n#Evaluate and compare the performance of two different heuristics algorithms\nstart = time.time()\nresult1 = heuristics_algorithm1.run(data1)\nend = time.time()\ntime1 = end - start\n\nstart = time.time()\nresult2 = heuristics_algorithm2.run(data2)\nend = time.time()\ntime2 = end - start\n\nif time1 < time2:\n    print(\"Algorithm 1 is faster than algorithm 2\")\nelif time2 < time1:\n    print(\"Algorithm 2 is faster than algorithm 1\")\nelse:\n    print(\"Both algorithms have the same performance time\")", "predict": "import numpy as np\nfrom scipy.optimize import minimize\n\n# Define the objective function\ndef objective(x):\n    return np.sum(x**2)\n\n# Define the two heuristics\ndef heuristic1(x):\n    return np.sum(x)\n\ndef heuristic2(x):\n    return np.sum(np.abs(x))\n\n# Evaluate the performance of the two heuristics\nx1 = minimize(objective, 10*np.ones(10), method='Nelder-Mead', options={'xtol': 1e-8, 'disp': True})\nx2 = minimize(objective, 10*np.ones(10), method='Nelder-Mead', heuristic=heuristic1, options={'xtol': 1e-8, 'disp': True})\nx3 = minimize(objective, 10*np.ones(10), method='Nelder-Mead', heuristic=heuristic2, options={'xtol': 1e-8, 'disp': True})\n\n# Compare the performance of the two heuristics\nprint('Heuristic 1: ', x1.fun)\nprint('Heuristic 2: ', x2.fun)\nprint('Heuristic 3: ', x3.fun)"}
{"prompt": "Generate a function in Python that takes in a dictionary (string → integer) and returns the sum of all values in the dictionary.\nmy_dict = {\n   \"a\": 5,\n   \"b\": 10,\n   \"c\": 15\n} ", "label": "def compute_dict_sum(input_dict):\n    result = 0\n    for val in input_dict.values():\n        result += val\n    return result\n\nprint(compute_dict_sum(my_dict))", "predict": "def sum_dict_values(d):\n    total = 0\n    for val in d.values():\n        total += val\n    return total"}
{"prompt": "Write a Python script that filters a list of integers and returns only even numbers.\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] ", "label": "def filter_even_numbers(lst):\n    # Filter out even numbers from the given list \n    even_numbers = [num for num in lst if num % 2 == 0]\n    return even_numbers\n\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nresult = filter_even_numbers(list)\nprint(result)", "predict": "def filter_even_numbers(list):\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers\n\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\neven_numbers = filter_even_numbers(list)\nprint(even_numbers)"}
{"prompt": "Generate a Python program that takes a sentence as input and prints out only the verbs.\nThe cat jumped over the moon. ", "label": "import nltk\n\ndef extract_verbs(sentence):\n    tokens = nltk.word_tokenize(sentence)\n    tags = nltk.pos_tag(tokens)\n    verbs = [word for word, pos in tags if pos.startswith('V')]\n    return verbs\n\nsentence = \"The cat jumped over the moon.\"\nverbs = extract_verbs(sentence)\nprint(verbs)", "predict": "import re\n\nsentence = \"The cat jumped over the moon.\"\n\n# Extract all verbs from the sentence\nverbs = re.findall(r'\\w+', sentence)\n\n# Print out the verbs\nprint(verbs)"}
{"prompt": "Create an AI-based system in Python for predicting stock market movements.\nNot applicable ", "label": "#import libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n#import data\ndata = pd.read_csv('data.csv') \n\n#split data into train and test data\nX_train=data.iloc[:, 0] #Choosing the independent variable \ny_train=data.iloc[:, 1]  #Choosing the dependent variable\nX_test=data.iloc[:, 0] #Choosing the independent variable \ny_test=data.iloc[:, 1]  #Choosing the dependent variable\n\n#Build a deep learning model\n#import necessary libraries\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.models import Sequential\n\n#create a model and add layers\nmodel = Sequential()\nmodel.add(Dense(64, input_shape=(1,), activation='relu'))\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dense(1))\n\n#compile the model\nmodel.compile(optimizer='adam', loss='mse', metrics=['mse'])\n\n#train the model\nmodel.fit(X_train, y_train, batch_size=64, epochs=20, validation_data=(X_test, y_test))\n\n#Evaluate the model\nscore = model.evaluate(X_test, y_test, verbose=0)", "predict": "import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Read in data\ndata = pd.read_csv('stock_data.csv')\n\n# Split data into features and target\nX = data.iloc[:, :-1]\ny = data.iloc[:, -1]\n\n# Create and train the model\nmodel = LinearRegression()\nmodel.fit(X, y)\n\n# Make predictions\npredictions = model.predict(X)"}
{"prompt": "Develop an API in Python that fetches data from an SQL database and presents the data in the form of a JSON.\nNone ", "label": "import json \nimport sqlite3\nfrom flask import Flask, request, jsonify \n\napp = Flask(__name__) \n  \ndef dict_factory(cursor, row):\n    d = {}\n    for idx, col in enumerate(cursor.description):\n        d[col[0]] = row[idx]\n    return d \n  \n@app.route('/', methods=['GET'])\ndef index(): \n    connection = sqlite3.connect('database.db')\n    connection.row_factory = dict_factory\n    cur = connection.cursor() \n    all_users = cur.execute('SELECT * FROM users;').fetchall() \n    return jsonify(all_users) \n  \nif __name__ == '__main__': \n    app.run(debug = True)", "predict": "import sqlite3\nimport json\n\n# connect to the database\nconn = sqlite3.connect('mydatabase.db')\nc = conn.cursor()\n\n# fetch the data\nc.execute('SELECT * FROM mytable')\ndata = c.fetchall()\n\n# create the JSON\njson_data = json.dumps(data)\n\n# close the connection\nconn.close()"}
{"prompt": "Generate a Python dictionary that contains the count of the characters in a given string.\n\"Hello World\" ", "label": "def count_chars(string):\n    count_dict = {}\n\n    for char in string:\n        if char in count_dict:\n            count_dict[char] += 1\n        else:\n            count_dict[char] = 1\n\n    return count_dict\n\nprint(count_chars(\"Hello World\"))\n\n# Output: {'H': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'W': 1, 'r': 1, 'd': 1}", "predict": "string = \"Hello World\"\n\nchar_dict = {}\n\nfor char in string:\n    if char in char_dict:\n        char_dict[char] += 1\n    else:\n        char_dict[char] = 1\n\nprint(char_dict)"}
{"prompt": "Write a Python program to store and querying user data.\nuser_data = {\n    \"Name\": \"John\",\n    \"Age\": 25,\n    \"City\": \"New York\"\n    \n} ", "label": "import json\n\nuser_data = {\"Name\": \"John\", \"Age\": 25, \"City\": \"New York\"}\n\ndef store_user_data(data):\n    with open('user_data.json', 'w') as f:\n        json.dump(data, f)\n\ndef get_user_data():\n    with open('user_data.json') as f:\n        return json.load(f)\n\n# store data in JSON file\nstore_user_data(user_data)\n\n# get data\ndata = get_user_data()\nprint(data)", "predict": "def store_user_data(user_data):\n    # Store user data in a database\n    pass\n\ndef query_user_data(name):\n    # Query user data from the database\n    pass"}
{"prompt": "You are required to write a Python program to optimize an equation.\nx + x + y + y + y ", "label": "def optimize_equation(equation):\n    variables = []\n    for term in equation.split('+'):\n        var, count = term.strip().split(' ')\n        variables.append((var, int(count)))\n\n    new_equation = \"\"\n    for var, count in variables:\n        new_equation += (var + '^' + str(count)) + ' + '\n    return new_equation[:-3]\n\nequation = 'x + x + y + y + y'\n\nprint(optimize_equation(equation))", "predict": "def optimize_equation(equation):\n    variables = equation.split()\n    variables_dict = {}\n    for variable in variables:\n        if variable not in variables_dict:\n            variables_dict[variable] = 1\n        else:\n            variables_dict[variable] += 1\n    optimized_equation = ''\n    for variable in variables_dict:\n        optimized_equation += variable + '**' + str(variables_dict[variable]) +'+ '\n    optimized_equation = optimized_equation[:-3]\n    return optimized_equation\n\nprint(optimize_equation('x + x + y + y + y'))"}
{"prompt": "Generate Python code that takes a list of strings and generates a list of lists of words from the strings. The returned list should have the first word for each string followed by following words for each string.\n[\"Hello world\", \"This is a test\"] ", "label": "def get_word_lists(strings):\n    word_lists = []\n    for string in strings:\n        words = string.split(\" \")\n        word_list = []\n        for i in range(len(words)):\n            word_list.append(words[i:])\n        word_lists.append(word_list)\n    return word_lists\n\nword_lists = get_word_lists([\"Hello world\", \"This is a test\"])\nprint(word_lists) # prints \"[[\"Hello\", \"world\"], [\"This\", \"is\", \"a\", \"test\"]]\"", "predict": "def generate_list_of_words(string_list):\n    result = []\n    for string in string_list:\n        words = string.split()\n        result.append([words[0]])\n        for i in range(1, len(words)):\n            result[-1].append(words[i])\n    return result"}
{"prompt": "Create a web scraper that extracts specific data from a given website. ", "label": "The web scraper should utilize the Python package BeautifulSoup to parse webpages and extract the required data. BeautifulSoup will allow us to find HTML elements on the webpage using tags and attributes. Once the data is found, it can be converted into the desired format and stored.\n\nFor example, to extract the URL from a list of webpages, the following code snippet can be used:\n\nimport requests\nfrom bs4 import BeautifulSoup\n\n# Get the web page\nwebpage = requests.get(\"<url_of_webpage>\")\n\n# Parse the web page\nsoup = BeautifulSoup(webpage.content, 'html.parser')\n\n# Find all 'a' tags\nlinks = soup.find_all('a')\n\n# Extract the URLs in the 'href' attribute\nfor link in links:\n    print(link.get('href'))", "predict": "# Python code\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = \"https://example.com\"\n\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# Extract specific data\ndata = soup.find_all('div', class_='data')\n\nfor d in data:\n    print(d.text)"}
{"prompt": "Construct a script in Bash that can install a given software.\nPython 3.8.5 ", "label": "#!/bin/bash\n\n# Download latest version of Python\ncurl -O https://www.python.org/ftp/python/3.8.5/Python-3.8.5.tgz\n\n# Extract the tgz file\ntar -xzf Python-3.8.5.tgz\n\n# Move into the Python directory\ncd Python-3.8.5\n\n# Run the configure script\n./configure\n\n# Compile and install\nmake\nmake install", "predict": "#!/bin/bash\n\n# Update package manager\nsudo apt-get update\n\n# Install Python 3.8.5\nsudo apt-get install python3.8\n\n# Verify installation\npython3.8 --version\n\n# Install pip\nsudo apt-get install python3-pip\n\n# Verify installation\npip3.8 --version"}
{"prompt": "Write a function in Python that takes a list of integers and returns a new list containing only odd numbers.\n[3, 8, 6, 10, 17] ", "label": "def odd_numbers_list(numbers):\n    return [num for num in numbers if num % 2 != 0]", "predict": "def get_odd_numbers(numbers):\n  return [num for num in numbers if num % 2!= 0]"}
{"prompt": "Create a Python script that adds two numbers together and prints the result. ", "label": "def add(a, b):\n    sum = a + b\n    print(sum)\n\nadd(5,7)", "predict": "def add_numbers(a, b):\n    return a + b\n\nresult = add_numbers(2, 3)\nprint(result)"}
{"prompt": "Design an algorithm in Python to find the most common elements in an array of integers.\n[3, 4, 1, 2, 5, 3, 3] ", "label": "def most_common(nums):\n    # Create a dictionary to store the counts\n    counts = {}\n\n    # Iterate over the elements\n    for num in nums:\n        # If the element is not present in the dictionary, add it\n        if num not in counts:\n            counts[num] = 0\n\n        # Update the count\n        counts[num] += 1\n\n    # Get the maximum count\n    max_count = max(counts.values())\n\n    # Return the elements that have maximum count\n    return [num for num, count in counts.items() if count == max_count]", "predict": "def most_common(arr):\n    max_count = 0\n    max_element = None\n\n    for element in arr:\n        count = arr.count(element)\n        if count > max_count:\n            max_count = count\n            max_element = element\n\n    return max_element\n\nresult = most_common([3, 4, 1, 2, 5, 3, 3])\nprint(result)"}
{"prompt": "Write a Python program to find the maximum element in the given array [1, 10, 50, 3, 8].\nNot applicable ", "label": "array = [1, 10, 50, 3, 8]\n\n# Get the maximum element\nmax_element = max(array)\n\nprint(max_element) # Output: 50", "predict": "arr = [1, 10, 50, 3, 8]\n\nmax_elem = max(arr)\nprint(\"The maximum element is\", max_elem)"}
{"prompt": "Create a Python script to analyze the sentiment of a text. ", "label": "import re\nfrom nltk.stem.snowball import SnowballStemmer\nfrom nltk.tokenize import word_tokenize\nfrom nltk.corpus import stopwords\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer \n\ndef sentiment_analyzer(text):\n    # Tokenize the text\n    tokens = word_tokenize(text)\n\n    # Create stemmer object\n    stemmer = SnowballStemmer('english')\n\n    # Stem each token\n    stemmed_words = [stemmer.stem(word) for word in tokens]\n\n    # Remove punctuation\n    clean_words = [word for word in stemmed_words if re.match('[a-zA-Z-]+$', word)]\n\n    # Remove stopwords\n    meaningful_words = [word for word in clean_words if not word in stopwords.words('english')]\n\n    # Create a SentimentIntensityAnalyzer object\n    sid = SentimentIntensityAnalyzer()\n\n    # Get the polarity score of the text\n    polarity_score = sid.polarity_scores(' '.join(meaningful_words))\n\n    return polarity_score", "predict": "import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ndef analyze_sentiment(text):\n    analyzer = SentimentIntensityAnalyzer()\n    sentiment_scores = analyzer.polarity_scores(text)\n    if sentiment_scores['compound'] > 0:\n        return 'positive'\n    elif sentiment_scores['compound'] == 0:\n        return 'neutral'\n    else:\n        return 'negative'"}
{"prompt": "Create a Python script that takes a list of email addresses as input and prints a filtered list of email addresses that belong to a particular domain.\nlist = [\"john@gmail.com\", \"sarah@yahoo.com\", \"bob@microsoft.com\", \"sophie@gmail.com\"] ", "label": "filtered_list = [email for email in list if email.endswith(\"@gmail.com\")]\n\nprint(filtered_list)\n# Output: [\"john@gmail.com\", \"sophie@gmail.com\"]", "predict": "def filter_by_domain(list, domain):\n filtered_list = []\n for email in list:\n if domain in email:\n filtered_list.append(email)\n return filtered_list\n\nfiltered_list = filter_by_domain(list, \"gmail.com\")\nprint(filtered_list) # Output: [\"john@gmail.com\", \"sophie@gmail.com\"]"}
{"prompt": "Generate a Python function to execute a valid insertion sort on a given list of integers. ", "label": "def insertion_sort(arr):\n for i in range(1, len(arr)):\n key = arr[i]\n j = i -1\n while j >= 0 and key < arr[j] :\n    arr[j + 1] = arr[j]\n    j = j - 1\n arr[j + 1] = key\n\nreturn arr", "predict": "def insertion_sort(arr):\n    \"\"\"\n    Function to execute insertion sort on a given list of integers.\n    \n    Parameters:\n    arr (list): List of integers\n    \n    Returns:\n    sorted_arr (list): Sorted list of integers\n    \"\"\"\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i-1\n        while j >= 0 and key < arr[j]:\n            arr[j+1] = arr[j]\n            j -= 1\n        arr[j+1] = key\n    return arr"}
{"prompt": "Generate a program to sort a list of numbers using Insertion Sort algorithm in Python. ", "label": "def insertionSort(arr):\n\tfor i in range(1, len(arr)):\n\t\tcurrent = arr[i]\n\t\tj =i-1\n\t\twhile j>=0 and arr[j]>current:\n\t\t\tarr[j+1] = arr[j]\n\t\t\tj-=1\n\t\tarr[j+1] = current\n\treturn arr\n\nif __name__ == '__main__':\n\tarr = [2, 4, 7, 3, 8, 6, 1]\n\tprint(insertionSort(arr))", "predict": "def insertion_sort(nums):\n    for i in range(1, len(nums)):\n        key = nums[i]\n        j = i - 1\n        while j >= 0 and key < nums[j]:\n            nums[j + 1] = nums[j]\n            j -= 1\n        nums[j + 1] = key\n    return nums"}
{"prompt": "Create an Python function that takes a string containing a numerical expression and returns the result. ", "label": "def eval_expr(expr):\n   return eval(expr)", "predict": "def eval_expression(expression):\n    return eval(expression)"}
{"prompt": "Given a json-formatted string, create a python program to parse it into a dict.\ndata = '{\"name\": \"John\",\"age\": 30,\"address\": {\"city\": \"New York\",\"state\": \"NY\"}}' ", "label": "import json\n\ndata = '{\"name\": \"John\",\"age\": 30,\"address\": {\"city\": \"New York\",\"state\": \"NY\"}}'\n\ndata_dict = json.loads(data)", "predict": "import json\n\ndata = '{\"name\": \"John\",\"age\": 30,\"address\": {\"city\": \"New York\",\"state\": \"NY\"}}'\n\nparsed_data = json.loads(data)\n\nprint(parsed_data)"}
{"prompt": "Create a Python program to compress a given string by replacing all repeating characters with a single instance and its count.\nString: aabbbbbbcccc ", "label": "def compress(s): \n    # Initialize results \n    output = \"\" \n  \n    # Initialize count \n    count = 1\n  \n    # Traverse the string \n    for i in range(len(s)): \n          \n        # If the current character is same \n        # as next one, increment its count \n        if (i+1 < len(s) and s[i] == s[i+1]): \n            count += 1\n          \n        else: \n            # Append the count and character \n            outputo + = str(count) + s[i] \n          \n            # Reset the  count  \n            count = 1\n          \n    # Append the last obtained characters \n    # and their count \n    output += str(count) + s[i] \n  \n    return output\n\ns = \"aabbbbbbcccc\"\nprint(compress(s))\n# Output: 2a6b4c", "predict": "def compress(s):\n    output = \"\"\n    curr = s[0]\n    count = 1\n    for i in range(1, len(s)):\n        if s[i] == curr:\n            count += 1\n        else:\n            output += curr + str(count)\n            curr = s[i]\n            count = 1\n    output += curr + str(count)\n    return output\n\ns = \"aabbbbbbcccc\"\nprint(compress(s))"}
{"prompt": "Create a basic CRUD API for the BlogPost model with Python/Flask. The API should include endpoints for creating a post, getting all posts, getting a single post, editing a post, and deleting a post.\nNot applicable ", "label": "from flask import Flask, jsonify, request\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] =  'sqlite:///test.db'\ndb = SQLAlchemy(app)\n\nclass BlogPost(db.Model):\n  id = db.Column(db.Integer, primary_key=True)\n  title = db.Column(db.String(200))\n  content = db.Column(db.Text)\n\n  def __repr__(self):\n    return '<BlogPost %r>' % self.title\n\n@app.route('/post', methods=['POST'])\ndef create_post():\n  data = request.get_json()\n  post = BlogPost(title=data['title'], content=data['content'])\n  db.session.add(post)\n  db.session.commit()\n  return jsonify(post.id)\n\n@app.route('/posts', methods=['GET'])\ndef get_posts():\n  posts = BlogPost.query.all()\n  return jsonify([post.serialize() for post in posts])\n\n@app.route('/post/<id>', methods=['GET'])\ndef get_post(id):\n  post = BlogPost.query.filter_by(id=id).first()\n  return jsonify(post.serialize())\n\n@app.route('/post/<id>', methods=['PUT'])\ndef edit_post(id):\n  data = request.get_json()\n  post = BlogPost.query.filter_by(id=id).first()\n  post.title = data['title']\n  post.content = data['content']\n  db.session.commit()\n  return jsonify(post.serialize())\n\n@app.route('/post/<id>', methods=['DELETE'])\ndef delete_post(id):\n  post = BlogPost.query.filter_by(id=id).first()\n  db.session.delete(post)\n  db.session.commit()\n  return jsonify({ 'message' : 'Post deleted' })\n\nif __name__ == '__main__':\n  app.run(debug=True)", "predict": "from flask import Flask, request, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] ='sqlite:////tmp/test.db'\ndb = SQLAlchemy(app)\n\nclass BlogPost(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n title = db.Column(db.String(120), unique=True, nullable=False)\n content = db.Column(db.Text, nullable=False)\n\ndb.create_all()\n\n@app.route('/posts', methods=['GET'])\ndef get_posts():\n posts = BlogPost.query.all()\n return jsonify([post.serialize() for post in posts])\n\n@app.route('/posts/<int:id>', methods=['GET'])\ndef get_post(id):\n post = BlogPost.query.get(id)\n return jsonify(post.serialize())\n\n@app.route('/posts', methods=['POST'])\ndef create_post():\n post = BlogPost(title=request.json['title'], content=request.json['content'])\n db.session.add(post)\n db.session.commit()\n return jsonify(post.serialize())\n\n@app.route('/posts/<int:id>', methods=['PUT'])\ndef edit_post(id):\n post = BlogPost.query.get(id)\n post.title = request.json['title']\n post.content = request.json['content']\n db.session.commit()\n return jsonify(post.serialize())\n\n@app.route('/posts/<int:id>', methods=['DELETE'])\ndef delete_post(id):\n BlogPost.query.filter_by(id=id).delete()\n db.session.commit()\n return jsonify({'message': 'Post deleted'})\n\nif __name__ == '__main__':\n app.run(debug=True)"}
{"prompt": "Write a Python program that calculates the distance between two points on a two-dimensional plane.\nPoint1 (x1: 3, y1: 4); Point2 (x2: -9, y2: -2) ", "label": "#include <iostream>\n#include <math.h>\n\nint main() \n{ \n    int x1 = 3; \n    int y1 = 4; \n\n    int x2 = -9; \n    int y2 = -2;\n\n    float distance = sqrt(pow(x2 - x1, 2) + pow(y2 - y1, 2)); \n\n    std::cout << \"Distance between the two points is: \" << distance << std::endl; \n\n    return 0; \n}", "predict": "import math\n\ndef calculateDistance(x1, y1, x2, y2):\n    return math.sqrt((x2-x1)**2 + (y2-y1)**2)\n\ndistance = calculateDistance(3, 4, -9, -2)\nprint(\"Distance between the two points is:\", distance)"}
{"prompt": "Create an AI-based chatbot in Python that can answer simple queries about a product or service.\nNot applicable ", "label": "import random\n\n# The answers to the queries\nanswers = {\n    'What is XYZ?': 'XYZ is a company that provides XYZ services.',\n    'What does XYZ do?': 'XYZ helps customers find solutions to their problems.',\n    'Where is XYZ located?': 'XYZ is located in ABC city.',\n    'What are the benefits of using XYZ?': 'XYZ provides a quick and easy way to find solutions to your problems.'\n}\n\n# Generate a response\ndef generate_response(question):\n    if question in answers:\n        return answers[question]\n    else:\n        return random.choice(['I am not sure I understand.', 'Can you give me more information?', 'Can I help you with something else?'])\n\n# Start the conversation\nquestion = input('Welcome to XYZ. How can I help you? ')\nresponse = generate_response(question)\n\nwhile response != 'Goodbye':\n    print(response)\n    question = input('Is there anything else I can help you with? ')\n    response = generate_response(question)\n\nprint('Goodbye!')", "predict": "import nltk\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.corpus import wordnet\n\nlemmatizer = WordNetLemmatizer()\n\ndef chatbot_response(user_input):\n user_input = user_input.lower()\n\n words = nltk.word_tokenize(user_input)\n tagged_words = nltk.pos_tag(words)\n lemmatized_words = [lemmatizer.lemmatize(word, get_wordnet_pos(tag)) for word, tag in tagged_words]\n\n response = \"I'm sorry, I don't understand.\"\n\n if \"product\" in lemmatized_words or \"service\" in lemmatized_words:\n response = \"We offer a variety of products and services. What are you looking for?\"\n\n return response\n\ndef get_wordnet_pos(tag):\n tag = tag.upper()\n\n if tag.startswith('J'):\n return wordnet.ADJ\n elif tag.startswith('V'):\n return wordnet.VERB\n elif tag.startswith('N'):\n return wordnet.NOUN\n elif tag.startswith('R'):\n return wordnet.ADV\n else:\n return None"}
{"prompt": "Generate a python program to read the contents from a given URL ", "label": "import requests\n\ndef read_url(url):\n  r = requests.get(url)\n  if r.status_code == 200:\n    return r.text\n  else:\n    return None", "predict": "import requests\n\ndef read_url(url):\n    response = requests.get(url)\n    if response.status_code == 200:\n        return response.text\n    else:\n        return None"}
{"prompt": "Code a function in Python that takes a list of integers (denoted by `lst`) and returns a list of booleans where each element of the output list is `True` if the corresponding element in the input list is a prime number, and `False` otherwise.\nlst = [7, 8, 12, 19, 22, 23] ", "label": "def is_prime(n):\n # check if n is divisible by any of the numbers\n # between 2 and n-1\n for i in range(2, n):\n if n % i== 0:\n return False\n\n return True \n\ndef check_lst(lst):\n # generate a list of booleans \n # where each element corresponds to the corresponding\n # element of lst\n result_lst = []\n for i in range(len(lst)):\n if is_prime(lst[i]):\n result_lst.append(True)\n else:\n result_lst.append(False)\n\n return result_lst\n\nlst = [7, 8, 12, 19, 22, 23]\nprint(check_lst(lst))\n\n# Output: \n# [True, False, False, True, False, True]", "predict": "def is_prime(lst):\n    prime_list = []\n    for num in lst:\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    prime_list.append(False)\n                    break\n            else:\n                prime_list.append(True)\n    return prime_list"}
{"prompt": "Generate a program in Python to output the top 3 numbers from an array of integers\n[7, 13, 5, 8, 50, 11, 64, 48] ", "label": "def top_three(numbers):\n    sorted_numbers = sorted(numbers, reverse=True)\n    return sorted_numbers[:3]\n\nprint(top_three([7, 13, 5, 8, 50, 11, 64, 48]))", "predict": "def top_three(arr):\n    sorted_arr = sorted(arr, reverse=True)\n    return sorted_arr[:3]\n\nprint(top_three([7, 13, 5, 8, 50, 11, 64, 48]))"}
{"prompt": "Using Python, build a dictionary containing the numbers from 1 to n as the key and the square of each number as the value.\nn = 10 ", "label": "my_dict = {}\n\nfor i in range(1,n+1):\n my_dict[i] = i**2\n\nprint(my_dict)", "predict": "my_dict = {}\nfor i in range(1, n+1):\n    my_dict[i] = i**2\nprint(my_dict)"}
{"prompt": "Edit the following Python program to make a correct API request and parse the response.\nimport requests\n\nurl = 'https://api.example.com/users'\n\nresponse = requests.get(url)\n\nprint(response.json()) ", "label": "import requests\n\nurl = 'https://api.example.com/users'\n\nheaders = {\n 'Authorization': 'Bearer YOUR_API_TOKEN',\n 'Content-Type': 'application/json',\n}\n\nresponse = requests.get(url, headers=headers).json()\n\nfor user in response['data']:\n print(user)", "predict": "import requests\n\nurl = 'https://api.example.com/users'\n\nheaders = {\n    'Authorization': 'Bearer YOUR_API_KEY',\n    'Content-Type': 'application/json'\n}\n\nresponse = requests.get(url, headers=headers)\n\ndata = response.json()\n\nfor user in data:\n    print(user['name'])"}
{"prompt": "Create a Python program that takes in text input from the user and searches a given list of strings to find any matches.\nstrings = [\"First\",\"Second\",\"Third\"] ", "label": "import re \n  \n# input string \nstrings = [\"First\",\"Second\",\"Third\"]\n\n# Get the string \ninp_str = input(\"Please enter your string :\") \n\n# Initialize the flag \nfound = False\n  \n# Search the string \nfor i in strings: \n    if re.search(i, inp_str):\n        found = True\n\n# Print result \nif found == True: \n    print(\"String matches\") \nelse: \n    print(\"String doesn't matches\")", "predict": "def search_strings(text, strings):\n    for string in strings:\n        if string in text:\n            return string\n    return None\n\ntext = input(\"Enter text: \")\nstrings = [\"First\",\"Second\",\"Third\"]\nmatch = search_strings(text, strings)\nif match:\n    print(\"Match found:\", match)\nelse:\n    print(\"No match found.\")"}
{"prompt": "Generate a program in Python to convert all characters of a string in lowercase.\nString = \"HELLO\" ", "label": "def to_lower(string):\n    return string.lower()", "predict": "def to_lowercase(string):\n    return string.lower()"}
{"prompt": "Edit the following Python program to use a dictionary instead of a list.\nitems = [1, 2, 3, 4]\n\nfor item in items:\n print(item) ", "label": "items = {1: 'one', 2: 'two', 3: 'three', 4: 'four'}\n\nfor key, value in items.items():\n print(value)", "predict": "items = {1: 1, 2: 2, 3: 3, 4: 4}\n\nfor item in items:\n print(item)"}
{"prompt": "Construct a prime number sieve in Python which returns a list of all primes up to a given number.\nn = 10 ", "label": "def primeSieve(n): \n    prime_list = [True for i in range(n+1)] \n    p = 2\n    while (p * p <= n): \n        if (prime_list[p] == True): \n            for i in range(p * 2, n+1, p): \n                prime_list[i] = False\n        p += 1\n    primes=[] \n    for p in range(2, n): \n        if prime_list[p]: \n            primes.append(p) \n    return primes\n\nprint(primeSieve(10))  # [2, 3, 5, 7]", "predict": "def prime_sieve(n):\n    primes = [True] * (n+1)\n    primes[0] = False\n    primes[1] = False\n    for i in range(2, n+1):\n        if primes[i]:\n            for j in range(i*i, n+1, i):\n                primes[j] = False\n    return [i for i in range(n+1) if primes[i]]\n\nn = 10\nprint(prime_sieve(n))"}
{"prompt": "Write a python code to print all prime numbers between 1 and a given number n. ", "label": "# Function to generate prime numbers between 1 and a given number n \ndef generate_prime_numbers(n): \n  \n    # Array for checking if a number is prime or not\n    prime_list = [True for i in range(n + 1)] \n    p = 2\n    while (p * p <= n): \n          \n        # If prime_list[p] is not changed, then it is a prime \n        if (prime_list[p] == True): \n              \n            # Update all multiples of p \n            for i in range(p * 2, n + 1, p): \n                prime_list[i] = False\n        p += 1\n  \n    # Collecting prime numbers \n    for p in range(2, n): \n        if prime_list[p]: \n            print(p)", "predict": "def print_primes(n):\n    for num in range(2, n+1):\n        for i in range(2, num):\n            if (num % i) == 0:\n                break\n        else:\n            print(num)"}
{"prompt": "Find the optimal solution to solve a knapsack problem using dynamic programming.\nGiven Items (with values and weights): [(60, 10), (100, 20), (120, 30)] \nCapacity of Knapsack: 50 ", "label": "// A Naive recursive Python \n// program for 0-1 Knapsack problem \n \n# Returns the maximum value  \n# that can be put in a knapsack of  \n# capacity W \ndef knapSack(W, wt, val, n): \n  \n    # Base Case \n    if n == 0 or W == 0 : \n        return 0\n  \n    # If weight of the nth item is more \n    # than Knapsack capacity W, then \n    # this item cannot be included in the optimal solution \n    if (wt[n-1] > W): \n        return knapSack(W, wt, val, n-1) \n  \n    # return the maximum of two cases: \n    # (1) nth item included \n    # (2) not included \n    else: \n        return max(val[n-1] + knapSack(W-wt[n-1], wt, val, n-1), \n                    knapSack(W, wt, val, n-1)) \n  \n# end of function knapSack", "predict": "# Python program for 0-1 Knapsack problem \n\n# Recursive function to get the maximum value \ndef knapsack(W, wt, val, n): \n    if n == 0 or W == 0 : \n        return 0\n    if wt[n-1] > W: \n        return knapsack(W, wt, val, n-1) \n    else: \n        return max(val[n-1] + knapsack(W-wt[n-1], wt, val, n-1), \n                   knapsack(W, wt, val, n-1)) \n  \n# Driver code to test above\nvalues = [60, 100, 120] \nweights = [10, 20, 30] \n  \ncapacity = 50\nn = len(values) \n  \nprint(knapsack(capacity, weights, values, n))"}
{"prompt": "Using Python, create a function that calculates the objective function of a linear equation.\nax + by = c\n\na = 3, b = 5, c = 7 ", "label": "def linear_eq(a, b, c):\n    return a*x + b*y - c\n\n# For example:\nresult = linear_eq(3, 5, 7)\nprint(result)", "predict": "def objective_function(a, b, c):\n    return a*x + b*y - c\n\na = 3\nb = 5\nc = 7\n\nprint(objective_function(a, b, c))"}
{"prompt": "Implement an insertion sort algorithm in Python. ", "label": "def insertion_sort(list):\n    for i in range(1,len(list)):\n        key = list[i]\n        j = i - 1\n        while j>=0 and key < list[j]:\n            list[j+1] = list[j]\n            j-=1\n        list[j+1] = key\n    return list", "predict": "def insertion_sort(array):\n    for i in range(1, len(array)):\n        key = array[i]\n        j = i - 1\n        while j >= 0 and array[j] > key:\n            array[j + 1] = array[j]\n            j -= 1\n        array[j + 1] = key\n    return array"}
{"prompt": "Write a python program to generate a random password given a set of letters, numbers, and characters.\nNo input ", "label": "import random \n  \n  \n# All the possible characters \n# that could go into the password \nstring = \"abcdefghijklmnopqrstuvwxyz01234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()?\"\n  \n# Using the choice function of the \n# random module choose any \n# character randomly from the set of characters \npassword =  \"\".join(random.sample(string, 8)) \nprint(password)", "predict": "import random\n\ndef generate_password(length, letters, numbers, characters):\n password = \"\"\n for _ in range(length):\n  char = random.choice(letters + numbers + characters)\n  password += char\n return password\n\nlength = 8\nletters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\nnumbers = \"1234567890\"\ncharacters = \"!@#$%^&*\"\n\npassword = generate_password(length, letters, numbers, characters)\nprint(password)"}
{"prompt": "Develop a Python module to generate random numbers. ", "label": "import random\n\ndef generate_random_numbers(length, min_value, max_value):\n    return [random.uniform(min_value, max_value) for _ in range(length)]", "predict": "import random\n\ndef generate_random_number(min_val, max_val):\n    return random.randint(min_val, max_val)"}
{"prompt": "How do we use recursion to solve a given problem in Python? ", "label": "Recursion is a powerful technique for solving problems. It involves defining a problem in terms of itself. A recursion problem is solved by breaking it down into smaller problems, until the problem is small enough to be solved directly. The result from a smaller problem can then be combined with the result from the larger problem, until the original problem is solved. In Python, a recursive function is one that calls itself.", "predict": "Recursion is a technique used in programming where a function calls itself. It can be used to solve problems by breaking them down into smaller sub-problems and solving each of them individually. The solution to the original problem can then be obtained by combining the solutions to the sub-problems. Recursion is often used when a problem can be broken down into smaller sub-problems that are similar to the original problem. It can be used to solve a wide variety of problems, including those involving algorithms, data structures, and mathematics."}
{"prompt": "Create an application using Python and Flask to submit form data and store it in a database.\nForm elements: Name, Email, Phone ", "label": "from flask import Flask, render_template, request, redirect\nimport sqlite3\n\napp = Flask(__name__)\n\n@app.route('/')\ndef home():\n return render_template('index.html')\n\n@app.route('/submit', methods=['POST'])\ndef submit():\n name = request.form.get('name')\n email = request.form.get('email')\n phone = request.form.get('phone')\n \n conn = sqlite3.connect('data.db')\n cur = conn.cursor()\n \n cur.execute(\"INSERT INTO data (name, email, phone) VALUES (?, ?, ?)\", (name, email, phone))\n conn.commit()\n \n return redirect('/')\n\t\nif __name__ == '__main__':\n app.run(debug=True)", "predict": "from flask import Flask, request, render_template\nimport sqlite3\n\napp = Flask(__name__)\n\n@app.route('/', methods=['GET', 'POST'])\ndef index():\n    if request.method == 'POST':\n        # Get form data\n        name = request.form['name']\n        email = request.form['email']\n        phone = request.form['phone']\n\n        # Connect to database\n        conn = sqlite3.connect('data.db')\n        c = conn.cursor()\n\n        # Insert data into database\n        c.execute(\"INSERT INTO data (name, email, phone) VALUES (?,?,?)\", (name, email, phone))\n        conn.commit()\n        conn.close()\n\n    return render_template('index.html')\n\nif __name__ == '__main__':\n    app.run(debug=True)"}
{"prompt": "Optimize a Python program that processes a 2d array and stores the transpose output in a new array.\nNot applicable ", "label": "def transpose(A):\n n = len(A)\n m = len(A[0])\n\n B = [[0 for x in range(n)] for x in range(m)]\n\n for i in range(n):\n for j in range(m):\n B[j][i] = A[i][j]\n\n return B", "predict": "def transpose(A):\n # Initialize the output array\n output = [[0 for i in range(len(A[0]))] for j in range(len(A))]\n\n # Iterate through the rows and columns\n for i in range(len(A)):\n for j in range(len(A[0])):\n output[j][i] = A[i][j]\n\n # Return the output array\n return output"}
{"prompt": "Generate a Python script that takes any number of integer arguments and returns their sum.\n3 5 7 ", "label": "def sum_ints(*args):\n    total = 0\n    for num in args:\n        total += num\n    \n    return total\n\nprint(sum_ints(3, 5, 7))", "predict": "def sum_ints(*args):\n    result = 0\n    for arg in args:\n        result += arg\n    return result\n\nresult = sum_ints(3, 5, 7)\nprint(result)"}
{"prompt": "Create a function in Python which takes a list as input and returns the sum of the items in the list. ", "label": "def sum_list(input_list):\n  sum = 0\n  for i in input_list:\n    sum += i\n  return sum", "predict": "def list_sum(list):\n    total = 0\n    for item in list:\n        total += item\n    return total"}
{"prompt": "Create a Selenium script in Python to automate the login process in a given website.\nTarget website: www.example.com ", "label": "from selenium import webdriver\nfrom selenium.webdriver.common.keys import Keys\nimport time\n\n# Initialize web driver\ndriver = webdriver.Chrome()\n\n# Navigate to the target web page\ndriver.get('http://www.example.com')\n\n# Locate username field\nusername = driver.find_element_by_name('username')\n\n# Enter username\nusername.send_keys('username')\n\n# Locate password field\npassword = driver.find_element_by_name('password')\n\n# Enter password\npassword.send_keys('password')\n\n# Locate submit button\nsubmit_button = driver.find_element_by_name('submit')\n\n# Click submit button\nsubmit_button.click()\n\n# Wait for login process to complete\ntime.sleep(5)\n\n# Login successful\nprint('Login successful!')\n\ndriver.close()", "predict": "from selenium import webdriver\n\n# Initialize the web driver\ndriver = webdriver.Chrome()\n\n# Open the website\ndriver.get('http://www.example.com')\n\n# Find the username field\nusername_field = driver.find_element_by_id('username')\n\n# Find the password field\npassword_field = driver.find_element_by_id('password')\n\n# Enter the username\nusername_field.send_keys('username')\n\n# Enter the password\npassword_field.send_keys('password')\n\n# Click the login button\ndriver.find_element_by_id('login-button').click()"}
{"prompt": "Create an AI model in Python to classify emails from the Enron Spam Dataset as either spam or non-spam.\nNot applicable ", "label": "import pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import svm\nfrom sklearn.metrics import precision_score\n\n# Load the dataset\ndf = pd.read_csv(\"spam.csv\", encoding='iso-8859-1')\n# Load label and data\nX = df['EmailText']\ny = df['Label']\n\n# Split data into train-test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)\n\n# Create bag of words model\ncount_vectorizer = CountVectorizer()\nX_train_counts = count_vectorizer.fit_transform(X_train)\n\n# Train the model\nclf = svm.SVC(kernel='linear')\nclf.fit(X_train_counts, y_train)\n\n# Test the model\nX_test_counts = count_vectorizer.transform(X_test)\npredictions = clf.predict(X_test_counts)\nscore = precision_score(y_test, predictions, average='binary')\n\nprint('Precision score of the model:', score)", "predict": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Read the data\ndata = pd.read_csv('enron_spam_dataset.csv')\n\n# Split into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(data['email'], data['label'], test_size=0.2, random_state=42)\n\n# Create a CountVectorizer\nvectorizer = CountVectorizer()\n\n# Fit and transform the training data\nX_train_vectorized = vectorizer.fit_transform(X_train)\n\n# Transform the test data\nX_test_vectorized = vectorizer.transform(X_test)\n\n# Create and train the model\nmodel = MultinomialNB()\nmodel.fit(X_train_vectorized, y_train)\n\n# Make predictions\ny_pred = model.predict(X_test_vectorized)\n\n# Evaluate the model\naccuracy = model.score(X_test_vectorized, y_test)\nprint('Accuracy:', accuracy)"}
{"prompt": "Re-write the following SQL query in Python.\nSELECT * FROM Movies WHERE category = 'horror'; ", "label": "import sqlite3\n\nconn = sqlite3.connect('movies.db') \ncursor = conn.cursor()\n\ncursor.execute(\"SELECT * FROM Movies WHERE category = 'horror'\")\n\nresult = cursor.fetchall()\nfor row in result:\n    print(row)\n\nconn.close()", "predict": "import sqlite3\n\nconn = sqlite3.connect('movies.db')\nc = conn.cursor()\nc.execute(\"SELECT * FROM Movies WHERE category = 'horror'\")\nresult = c.fetchall()\nconn.close()"}
{"prompt": "Take two matrices, A and B, and produce a matrix C where each element is the product of the corresponding elements of A and B.\nA = [[3, 4], \n     [1, 2]]\nB = [[7, 5],\n     [0, 1]] ", "label": "# Python\ndef matrixMultiplication(A, B):\n    if len(A[0]) != len(B):\n        return \"Matrix multiplication not possible\"\n\n    C = [[0 for i in range(len(A[0]))] for j in range(len(B[0]))]\n\n    for i in range(len(A)):\n        for j in range(len(B[0])):\n            for k in range(len(B)):\n                C[i][j] += A[i][k] * B[k][j]\n\n    return C\n\nA = [[3, 4], \n     [1, 2]]\nB = [[7, 5],\n     [0, 1]]\nC = matrixMultiplication(A, B)\n\nprint(C) # Output = [[21, 17], [0, 2]]", "predict": "C = [[21, 20], \n      [ 3,  4]]"}
{"prompt": "Come up with a correct approach to optimize the following python program.\nnumbers = [1, 2, 3, 4, 5, 6]\n\nfor x in numbers:\n    print(x) ", "label": "numbers = [1, 2, 3, 4, 5, 6]\n\nprint(*numbers, sep='\\n')", "predict": "numbers = [1, 2, 3, 4, 5, 6]\n\nprint(*numbers, sep='\\n')"}
{"prompt": "Design a program in Python to detect the vowel in a given string.\nHello World ", "label": "def vowelCheck(inputString): \n    vowels = ['a','e','i','o','u','A','E','I','O','U'] \n    for x in inputString: \n        if x in vowels: \n            return x", "predict": "def detectVowel(s): \n    vowels = ('a', 'e', 'i', 'o', 'u') \n    for letter in s: \n        if letter in vowels: \n            return letter \n    return -1\n  \ns = \"Hello World\"\nvowel = detectVowel(s) \nif vowel!= -1: \n    print(\"The vowel is: \", vowel) \nelse: \n    print(\"No vowel found\")"}
{"prompt": "Convert a given SQL statement into a Python Pandas DataFrame.\nSELECT * FROM book; ", "label": "import pandas as pd\n\ndf = pd.read_sql_query(\"SELECT * FROM book;\", conn)", "predict": "import pandas as pd\n\ndf = pd.read_sql_query(\"SELECT * FROM book\", conn)"}
{"prompt": "Using the data provided, generate a histogram in Python.\ndata = [3, 5, 7, 2, 8, 10, 11, 65, 72, 81, 99, 100, 150] ", "label": "import matplotlib.pyplot as plt\n\ndata = [3, 5, 7, 2, 8, 10, 11, 65, 72, 81, 99, 100, 150]\n\n# plotting the histogram \nplt.hist(data, bins = [0, 20, 40, 60, 80, 100, 120, 140, 160], edgecolor = 'black') \n  \n# x-axis label \nplt.xlabel('Range of values') \n# y-axis label \nplt.ylabel('Number of Occurrences') \n# plot title \nplt.title('Histogram of data') \n  \n# function to show the plot \nplt.show()", "predict": "import matplotlib.pyplot as plt\n\ndata = [3, 5, 7, 2, 8, 10, 11, 65, 72, 81, 99, 100, 150]\n\nplt.hist(data, bins=20, edgecolor='k')\nplt.xlabel('Data Values')\nplt.ylabel('Frequency')\nplt.title('Histogram of Data Values')\nplt.show()"}
{"prompt": "Create a Python script to populate an array with random numbers from 1-100. ", "label": "import random\n\ndef populateArray(array_length):\n array = []\n for i in range(array_length):\n array.append(random.randint(1, 100))\n return array", "predict": "import random\n\n# Create an array with 100 elements\nmy_array = [0] * 100\n\n# Populate the array with random numbers from 1-100\nfor i in range(len(my_array)):\n    my_array[i] = random.randint(1, 100)"}
{"prompt": "Create an natural language processing application in Python that extracts the top 10 most frequent words from a given text.\nLorem ipsum dolor sit amet, consectetur adipiscing elit, \nsed do eiusmod tempor incididunt ut labore et dolore magna aliqua. ", "label": "from collections import Counter\n\ntext = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\"\n\n# Split the text into individual words\nwords = text.split()\n\n# Create a counter object\ncounter = Counter(words)\n\n# Get the top 10 most frequent words\ntop_words = counter.most_common(10)\n\nprint(top_words)\n\n# Output: [('dolor', 1), ('Lorem', 1), ('ipsum', 1), ('amet', 1), ('consectetur', 1), ('adipiscing', 1), ('elit,', 1), ('sed', 1), ('do', 1), ('eiusmod', 1)]", "predict": "import re\nimport collections\n\ntext = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\"\n\n# Clean the text\ntext = re.sub(r'[^\\w\\s]','',text)\n\n# Split the text into words\nwords = text.split()\n\n# Count the words\nword_count = collections.Counter(words)\n\n# Print the top 10 words\nprint(word_count.most_common(10))"}
{"prompt": "Given an array of strings, write a Python function to remove all duplicates and return the resulting array.\nExample array: ['a', 'b', 'a', 'c', 'c', 'd'] ", "label": "def removeDuplicates(arr):\n result = [] \n  \n # traverse for all elements \n for i in arr: \n  \n  # check if exists in result \n  if i not in result: \n   result.append(i) \n  \n # return result \n return result", "predict": "def remove_duplicates(arr):\n result = []\n for i in arr:\n if i not in result:\n result.append(i)\n return result\n\nremove_duplicates(['a', 'b', 'a', 'c', 'c', 'd']) # returns ['a', 'b', 'c', 'd']"}
{"prompt": "Generate a Python script to find the longest common substring in two strings.\n\"Helwallomst\", \"Welcome\" ", "label": "def longest_common_substring(str1, str2):\n    match = 0\n    substr = \"\"\n    for i in range(len(str1)):\n        for j in range(len(str2)):\n            l = 0\n            while (i + l < len(str1) and j + l < len(str2) and str1[i + l] == str2[j + l]):\n                l += 1\n            if l > match:\n                substr = str1[i:i + l]\n                match = l\n    return substr\n\nresult = longest_common_substring(\"Helwallomst\", \"Welcome\")\nprint(result)", "predict": "def longest_common_substring(str1, str2):\n    # Create a matrix to store results of subproblems\n    matrix = [[0 for x in range(len(str2)+1)] for x in range(len(str1)+1)]\n    longest, x_longest = 0, 0\n\n    # Fill the matrix in bottom up manner\n    for x in range(1, len(str1)+1):\n        for y in range(1, len(str2)+1):\n            if str1[x-1] == str2[y-1]:\n                matrix[x][y] = matrix[x-1][y-1] + 1\n                if matrix[x][y] > longest:\n                    longest = matrix[x][y]\n                    x_longest = x\n            else:\n                matrix[x][y] = 0\n\n    # Find the longest substring\n    result = \"\"\n    x = x_longest\n    y = len(str2)\n    while x > 0 and y > 0:\n        if str1[x-1] == str2[y-1]:\n            result = str1[x-1] + result\n            x -= 1\n            y -= 1\n        else:\n            x -= 1\n    return result\n\nresult = longest_common_substring(\"Helwallomst\", \"Welcome\")\nprint(result)"}
{"prompt": "Write a function in Python to search for a character in a given string.\nString: “Hello”\nCharacter: ‘l’ ", "label": "def serach_char(input_str, char):\n  for char in input_str:\n    if char == input_char:\n      return True\n  return False", "predict": "def search_char(str, char):\n    for i in range(len(str)):\n        if str[i] == char:\n            return i\n    return -1\n\nresult = search_char(\"Hello\", 'l')\nprint(result)"}
{"prompt": "Write a python program to parse an XML document and return a list of tag objects.\n<xml>\n  <root>\n    <child1 id=\"1\">\n      <subchild1 value=\"a\">\n      </subchild1>\n      <subchild2 value=\"b\">\n      </subchild2>\n    </child1>\n    <child2 id=\"2\">\n      <subchild3 value=\"c\">\n      </subchild3>\n      <subchild4 value=\"d\">\n      </subchild4>\n    </child2>\n  </root>\n</xml> ", "label": "def parse_xml(text):\n    tag_objects = []\n\n    root = ET.fromstring(text)\n    for child in root:\n        tag = Tag(child.attrib[\"id\"])\n        for subchild in child:\n            tag.add_value(subchild.attrib[\"value\"])\n        tag_objects.append(tag)\n\n    return tag_objects\n\nclass Tag:\n    def __init__(self, tag_id):\n        self.tag_id = tag_id\n        self.values = []\n    \n    def add_value(self, value):\n        self.values.append(value)", "predict": "import xml.etree.ElementTree as ET\n\ndef parse_xml(xml_string):\n    root = ET.fromstring(xml_string)\n    tag_objects = []\n    for child in root:\n        tag_objects.append({\n            'id': child.attrib.get('id'),\n           'subchild1': child.find('subchild1').attrib.get('value'),\n           'subchild2': child.find('subchild2').attrib.get('value'),\n           'subchild3': child.find('subchild3').attrib.get('value'),\n           'subchild4': child.find('subchild4').attrib.get('value'),\n        })\n    return tag_objects"}
{"prompt": "Based on a given input, create a function in Python to generate a random string of length 6. ", "label": "import random\nimport string\n\ndef random_string(length):\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(length))\n\nrandom_string(6)", "predict": "import random\n\ndef random_string(string_length=6):\n    \"\"\"Generate a random string of length'string_length'\"\"\"\n    # Create an empty string\n    random_string = \"\"\n\n    # Loop through the length of the string\n    for i in range(string_length):\n        # Generate a random index\n        random_index = random.randint(0, 25)\n\n        # Append the character at the random index to the string\n        random_string += chr(random_index)\n\n    return random_string\n\nif __name__ == \"__main__\":\n    print(random_string())"}
{"prompt": "Create a Python program to average the elements of a 2-dimensional array.\na = [[3,2,6],\n     [8,5,9],\n     [4,7,1]] ", "label": "def averageMatrix(matrix):\n sum = 0\n for row in matrix:\n  for e in row:\n   sum += e\n\n return sum / (len(matrix) * len(matrix[0]))\n\na = [[3,2,6],\n     [8,5,9],\n     [4,7,1]]\n\nprint(averageMatrix(a)) # 4.77", "predict": "def average2d(a):\n    total = 0\n    for row in a:\n        total += sum(row)\n    return total / len(a)\n\na = [[3,2,6],\n     [8,5,9],\n     [4,7,1]]\n\nprint(average2d(a)) # 5.333333333333334"}
{"prompt": "Generate a code in Python to convert a number into binary format. ", "label": "\"\"\"\nGenerate a code in Python to convert a number into binary format\n\"\"\"\ndef convert_to_binary(num):\n    # check if the number is 0, if so return 0\n    if num == 0:\n        return 0\n    \n    # initialize an empty binary string\n    binary = ''\n    \n    # loop through the number and get the remainder \n    # which is the bits of the binary\n    while num != 0:\n        remainder = num % 2\n        binary = str(remainder) + binary\n        num = num // 2\n    \n    return binary\n\n# test the function \nprint(convert_to_binary(10)) # 1010", "predict": "def to_binary(n):\n    if n == 0:\n        return 0\n    binary_list = []\n    while n > 0:\n        binary_list.append(n % 2)\n        n //= 2\n    return binary_list[::-1]"}
{"prompt": "Generate a python program that takes an integer and then prints out the factorial of it?\n7 ", "label": "def factorial(num):\n    if num <= 1:\n        return 1\n    else:\n        return num * factorial(num - 1) \n\nn = int(input(\"Enter a number: \"))  \nprint(\"Factorial of\",n,\"is\",factorial(n))", "predict": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nnum = int(input(\"Enter an integer: \"))\nprint(\"The factorial of\", num, \"is\", factorial(num))"}
{"prompt": "Write a Python program to convert a positive integer to negative or vice versa using bitwise NOT operator. ", "label": "def convert_to_negative(x): \n    return ~x + 1 \n  \ndef convert_to_positive(x): \n    return ~(x-1)", "predict": "def convert_to_negative(num):\n    return ~num + 1\n\ndef convert_to_positive(num):\n    return ~(num - 1)"}
{"prompt": "Build a simple blockchain system in Python.\nNot applicable ", "label": "import hashlib\nimport json\n\n# Define the Block class\nclass Block:\n def __init__(self, index, timestamp, data, previous_hash):\n self.index = index\n self.timestamp = timestamp\n self.data = data\n self.previous_hash = previous_hash\n self.hash = self.hash_block()\n\n # Create the hash of the block contents\n def hash_block(self):\n sha = hashlib.sha256()\n sha.update((str(self.index) + \n str(self.timestamp) + \n str(self.data) + \n str(self.previous_hash)).encode('utf-8'))\n return sha.hexdigest()\n\n# Create the blockchain\ndef create_blockchain():\n blockchain = [create_genesis_block()]\n previous_block = blockchain[0]\n\n # Add blocks for each item in the list of transactions\n for i in range(1, len(blockchain_transactions)):\n block_to_add = next_block(previous_block, blockchain_transactions[i])\n blockchain.append(block_to_add)\n previous_block = block_to_add\n\n# Print the blockchain\ndef print_blockchain():\n for block in blockchain:\n block_index = str(block.index)\n block_timestamp = str(block.timestamp)\n block_data = str(block.data)\n block_hash = block.hash", "predict": "import hashlib\nimport json\nimport time\n\nclass Block:\n def __init__(self, index, timestamp, data, previous_hash):\n self.index = index\n self.timestamp = timestamp\n self.data = data\n self.previous_hash = previous_hash\n self.hash = self.hash_block()\n\n def hash_block(self):\n sha = hashlib.sha256()\n\n # Convert the block to a string and hash it\n block_string = str(self.index) + str(self.timestamp) + str(self.data) + str(self.previous_hash)\n sha.update(block_string.encode('utf-8'))\n\n return sha.hexdigest()\n\nclass Blockchain:\n def __init__(self):\n self.chain = []\n self.transactions = []\n self.create_genesis_block()\n\n def create_genesis_block(self):\n self.chain.append(Block(0, time.time(), {}, '0'))\n\n def add_block(self, block):\n block.index = len(self.chain)\n block.previous_hash = self.chain[-1].hash\n self.chain.append(block)\n\n def add_transaction(self, sender, receiver, amount):\n self.transactions.append({'sender': sender,'receiver': receiver, 'amount': amount})\n\n def mine_block(self):\n self.chain[-1].data = self.transactions\n self.transactions = []\n self.add_block(self.chain[-1])\n\ndef main():\n blockchain = Blockchain()\n\n # Add transactions\n blockchain.add_transaction('Alice', 'Bob', 10)\n blockchain.add_transaction('Bob', 'Charlie', 5)\n\n # Mine the block\n blockchain.mine_block()\n\n print(blockchain.chain)\n\nif __name__ == '__main__':\n main()"}
{"prompt": "Write a Python script to find the GCD of two numbers.\n1000, 500 ", "label": "def findGCD(a, b): \n   if (b == 0): \n       return a\n   return findGCD(b, a % b)\n    \na = 1000\nb = 500\nprint(\"GCD of number is: \", findGCD(a, b))", "predict": "def gcd(x, y): \n    while(y): \n        x, y = y, x % y \n  \n    return x \n  \nx = 1000\ny = 500\nprint(\"GCD of\", x, \"and\", y, \"is\", gcd(x, y))"}
{"prompt": "Create a program in Python to find the number of occurrences of an element x in a list y.\n[3, 5, 2, 7, 4, 3, 2], x = 2 ", "label": "def count_x(x, y):\n    count = 0\n    for i in y:\n        if i == x:\n            count += 1\n    return count", "predict": "def count_occurrences(y, x):\n    count = 0\n    for element in y:\n        if element == x:\n            count += 1\n    return count\n\nprint(count_occurrences([3, 5, 2, 7, 4, 3, 2], 2))"}
{"prompt": "Write a Python program to convert ratings in a list of strings to a float.\n['4.5', '3.0', '2.5', '4.0'] ", "label": "def str_to_float(ratings):\n    return [float(x) for x in ratings]", "predict": "ratings = ['4.5', '3.0', '2.5', '4.0']\n\nfloating_ratings = [float(rating) for rating in ratings]\n\nprint(floating_ratings) # [4.5, 3.0, 2.5, 4.0]"}
{"prompt": "Create a Python program that encrypts a message using a Caesar cipher. ", "label": "def caesar_encrypt(message, shift):\n    encrypted_message = \"\"\n    for c in message:\n        encrypted_c = ord(c) + shift\n        if encrypted_c > 126:\n            encrypted_c -= 94\n        encrypted_message += chr(encrypted_c)\n    return encrypted_message", "predict": "def caesar_encrypt(message, shift):\n    encrypted_message = \"\"\n    for char in message:\n        if char.isalpha():\n            char_code = ord(char)\n            encrypted_char_code = char_code + shift\n            encrypted_char = chr(encrypted_char_code)\n            encrypted_message += encrypted_char\n        else:\n            encrypted_message += char\n    return encrypted_message"}
{"prompt": "Write a Python program to find the largest three numbers in a list.\n1, 6, 3, 8, 7, 4 ", "label": "my_list = [1, 6, 3, 8, 7, 4]\nlargest_three = sorted(my_list)[-3:]\nprint(largest_three)", "predict": "list = [1, 6, 3, 8, 7, 4]\n\nlist.sort()\n\nprint(\"The three largest numbers are:\")\nprint(list[-1], list[-2], list[-3])"}
{"prompt": "Given two binary trees, check if the first tree is subtree of the second tree. ", "label": "# Python program to check if \n# a binary tree is subtree of another binary tree \n  \n# A binary tree node \nclass Node: \n      \n    # Constructor to create a new node \n    def __init__(self, data): \n        self.data = data \n        self.left = None\n        self.right = None\n  \ndef isSubTree(T, S): \n    \n    if S is None: \n        return True\n  \n    if T is None: \n        return False\n  \n    if areIdentical(T, S): \n        return True\n  \n    return isSubTree(T.left, S) or isSubTree(T.right, S) \n  \n  \ndef areIdentical(T, S): \n      \n    if T is None and S is None: \n        return True\n  \n    if T is None or S is None: \n        return False\n  \n    return (T.data == S.data and areIdentical(T.left, S.left)and\n        areIdentical(T.right, S.right))", "predict": "# Python program to check if the first tree is subtree of the second tree \n  \n# A utility function to check if a node in tree1 exists in tree2 \ndef isIdentical(tree1, tree2): \n  \n    # If both trees are empty, return true \n    if tree1 is None and tree2 is None: \n        return True\n  \n    # If one of the tree is not empty and other is empty, \n    # return false \n    if tree1 is not None and tree2 is None: \n        return False\n  \n    # If data of both the trees is same, then check for left and right subtrees \n    if tree1.data == tree2.data: \n        return isIdentical(tree1.left, tree2.left) and isIdentical(tree1.right, tree2.right) \n  \n    # If data is not same, return false \n    return False\n  \n# A utility function to check if the first tree is subtree of the second tree \ndef isSubtree(tree1, tree2): \n  \n    # If tree2 is empty, return true \n    if tree2 is None: \n        return True\n  \n    # If tree1 is empty, return false \n    if tree1 is None: \n        return False\n  \n    # If the data of both the trees is same, then check for left and right subtrees \n    if tree1.data == tree2.data: \n        return isIdentical(tree1, tree2) \n  \n    # If data is not same, check for left subtree \n    return isSubtree(tree1.left, tree2) or isSubtree(tree1.right, tree2)"}
{"prompt": "Write a Python program to swap the values of two variables. ", "label": "x = 5\ny = 10\n\n# Swapping process \nx, y = y, x \n\nprint(\"x:\", x) \nprint(\"y:\", y)", "predict": "a = 10\nb = 20\n\n# Swapping two variables \na, b = b, a\n\nprint(\"a =\", a) \nprint(\"b =\", b)"}
{"prompt": "Optimize the following Python code to use built-in functions.\ndef removeDuplicates(array): \n    for i in range (len(array)): \n        for j in range (i + 1, len(array)): \n            if array[i] == array[j]: \n                array.pop(j) ", "label": "def removeDuplicates(array): \n    finalArray = []\n    for element in array: \n        if element not in finalArray: \n            finalArray.append(element)\n    return finalArray", "predict": "def removeDuplicates(array): \n    new_array = [] \n    for element in array: \n        if element not in new_array: \n            new_array.append(element) \n    return new_array"}
{"prompt": "Create a program in Python that takes a list of words and an integer n and returns a list of words that appear at least n times in the given list.\nwords =['a', 'b', 'a', 'c', 'd', 'a', 'x', 'd', 'd']\nn = 3 ", "label": "from collections import Counter\n\ndef frequent_words(words, n):\n    counts = Counter(words)\n    return [word for word, count in counts.items() if count >= n]\n\nresult = frequent_words(words, n)\n\nprint(result) # prints ['a', 'd']", "predict": "def find_words(words, n):\n    # Create an empty dictionary\n    word_count = {}\n\n    # Count the number of occurrences of each word\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n\n    # Create a list to store the words that appear at least n times\n    words_found = []\n\n    # Iterate through the dictionary and add words that appear at least n times to the list\n    for word, count in word_count.items():\n        if count >= n:\n            words_found.append(word)\n\n    # Return the list of words\n    return words_found\n\nwords = ['a', 'b', 'a', 'c', 'd', 'a', 'x', 'd', 'd']\nn = 3\n\nwords_found = find_words(words, n)\nprint(words_found)"}
{"prompt": "Devise a Python program to determine whether a given number is even or odd. ", "label": "def even_or_odd(num):\n    if num % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"", "predict": "def is_even(num):\n    if num % 2 == 0:\n        return True\n    else:\n        return False"}
{"prompt": "Compose a basic blockchain system in Python. ", "label": "import hashlib\nimport json\n\n# We will use SHA256 as our hashing function\ndef sha256(data):\n    hash_function = hashlib.sha256()\n    hash_function.update(data.encode('utf-8'))\n    return hash_function.hexdigest()\n\n# Create a class for each block\nclass Block:\n    def __init__(self, index, timestamp, data, previous_hash):\n        self.index = index\n        self.timestamp = timestamp\n        self.data = data\n        self.previous_hash = previous_hash\n        self.hash = sha256(f'{self.index}{self.timestamp}{self.data}{self.previous_hash}')\n\n# Create a class for the blockchain\nclass Blockchain:\n    def __init__(self):\n        self.chain = []\n\n    def add_block(self, data):\n        previous_hash = self.chain[-1].hash if len(self.chain) > 0 else None\n        block = Block(len(self.chain), data['timestamp'], data['data'], previous_hash)\n        self.chain.append(block)\n\n    # This method will return the entire blockchain in JSON format\n    def get_chain(self):\n        return json.dumps([b.__dict__ for b in self.chain], indent=2)", "predict": "class Block:\n    def __init__(self, index, timestamp, data, previous_hash):\n        self.index = index\n        self.timestamp = timestamp\n        self.data = data\n        self.previous_hash = previous_hash\n        self.hash = self.hash_object()\n\n    def hash_object(self):\n        sha = hashlib.sha256(\n            self.index.to_bytes(32, 'big') +\n            self.timestamp.to_bytes(32, 'big') +\n            self.data +\n            self.previous_hash.encode('utf-8')\n        ).hexdigest()\n        return sha\n\nclass Blockchain:\n    def __init__(self):\n        self.chain = []\n\n    def add_block(self, data):\n        block = Block(len(self.chain), datetime.now(), data, self.get_last_block().hash)\n        self.chain.append(block)\n\n    def get_last_block(self):\n        return self.chain[-1]"}
{"prompt": "Provide a Python code that uses the exponential smoothing algorithm to predict the next day's forecast temperature given the past three day's forecast temperatures.\n[21, 22, 20] ", "label": "\"\"\"\nThis code uses the exponential smoothing algorithm to predict the next day's forecasted temperature given the past three day's forecasted temperatures.\n\"\"\"\n\ndef predict_temperature(temperature_list):\n    alpha = 0.5 #Confidence value\n    predicted_temperature = temperature_list[-1] # Initializing prediction\n    for temperature in temperature_list[:-1]:\n        predicted_temperature = alpha*temperature + (1-alpha)*predicted_temperature\n    return predicted_temperature\n\nif __name__ == '__main__':\n    temperature_list = [21, 22, 20]\n    print(predict_temperature(temperature_list))", "predict": "import numpy as np\n\ndef exponential_smoothing(values):\n    alpha = 0.5 # Smoothing factor\n    n = len(values)\n\n    # Calculate the exponential smoothing value for each data point\n    smoothed_values = [values[0] for i in range(n)]\n    for i in range(1, n):\n        smoothed_values[i] = alpha * values[i] + (1 - alpha) * smoothed_values[i-1]\n\n    # Predict the next day's temperature\n    predicted_value = alpha * smoothed_values[n-1] + (1 - alpha) * smoothed_values[n-2]\n\n    return predicted_value\n\nvalues = [21, 22, 20]\npredicted_value = exponential_smoothing(values)\nprint(predicted_value)"}
{"prompt": "Write a function in Python to sort a dictionary according to its values, in descending order.\ndictionary = {'apple': 2, 'banana': 3, 'mango': 1} ", "label": "def sortDictionary(dictionary):\n  sorted_list = sorted(dictionary.items(), key=lambda x: x[1], reverse=True)\n  sorted_dictionary = dict(sorted_list)\n  return sorted_dictionary\n\nsorted_dictionary = sortDictionary({'apple': 2, 'banana': 3, 'mango': 1})\nprint(sorted_dictionary)", "predict": "def sort_dict_by_values(dictionary):\n sorted_dict = dict(sorted(dictionary.items(), key=lambda x: x[1], reverse=True))\n return sorted_dict\n\ndictionary = {'apple': 2, 'banana': 3,'mango': 1}\nsorted_dict = sort_dict_by_values(dictionary)\nprint(sorted_dict)"}
{"prompt": "Create a function in Python to generate a multiplication table with numbers in a range given start and end parameters.\nstart = 5\nend = 10 ", "label": "def multiplication_table(start, end):\n\tfor x in range(start, end + 1):\n\t\tfor y in range(start, end + 1):\n\t\t\tprint(x * y, end = \"  \")\n\t\tprint(\"\\n\")\n\t\t\nmultiplication_table(start, end)", "predict": "def multiplication_table(start, end):\n    for i in range(start, end+1):\n        for j in range(start, end+1):\n            print(i*j, end=\"\\t\")\n        print()\n\nmultiplication_table(5, 10)"}
{"prompt": "Write a python program to identify if a string s has matching parentheses ", "label": "def matching_paren(s):\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False \n            stack.pop()\n    \n    if len(stack) == 0:\n        return True\n    else:\n        return False", "predict": "def is_valid(s):\n    stack = []\n    for c in s:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if not stack or stack.pop()!= '(':\n                return False\n    return not stack"}
{"prompt": "Develop a function in Python to take as input two array of integers and swap their elements.\narr1 = [3, 5, 6, 9]\narr2 = [2, 4, 7, 8] ", "label": "def swap(arr1, arr2):\n    assert len(arr1) == len(arr2)\n    for i in range(len(arr1)):\n        temp = arr1[i]\n        arr1[i] = arr2[i]\n        arr2[i] = temp", "predict": "def swap(arr1, arr2):\n    for i in range(len(arr1)):\n        temp = arr1[i]\n        arr1[i] = arr2[i]\n        arr2[i] = temp\n    return arr1, arr2\n\narr1 = [3, 5, 6, 9]\narr2 = [2, 4, 7, 8]\n\nprint(swap(arr1, arr2))"}
{"prompt": "Can you design a function in Python for reversing a list?\n[1,2,3,4,5] ", "label": "def reverse_list(list): \n    return list[::-1]", "predict": "def reverse_list(list):\n    return list[::-1]"}
{"prompt": "Create a Python script to build a dictionary from string to string of the given samples.\nSamples:\napple->red\nbanana->yellow\ncherry->red ", "label": "def build_dictionary(samples):\n dictionary = {}\n for sample in samples:\n  key, value = sample.split(\"->\")\n  dictionary[key] = value\n return dictionary\n \nsamples = [\"apple->red\", \"banana->yellow\", \"cherry->red\"]\ndictionary = build_dictionary(samples)\n\nprint(dictionary)", "predict": "samples = [('apple','red'), ('banana', 'yellow'), ('cherry','red')]\n\n# create a dictionary from the samples\ndictionary = dict(samples)\n\n# print the dictionary\nprint(dictionary)"}
{"prompt": "Write a Python script to find the average of numbers stored in an array.\n[10, 20, 30] ", "label": "def calculate_mean(numbers):\n    total_sum = 0\n    for num in numbers:\n        total_sum += num\n    mean = total_sum / len(numbers)\n    return mean\n\nprint(calculate_mean([10, 20, 30]))", "predict": "def average(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total / len(arr)\n\nresult = average([10, 20, 30])\nprint(result)"}
{"prompt": "Generate a Python program that takes two lists as input and returns a new list containing only the common elements.\n[1, 2, 3, 4, 8], [2, 6, 8, 10] ", "label": "def common_elements(list1, list2): \n    common_list=[]\n    for element in list1: \n        if element in list2: \n            common_list.append(element) \n    return common_list\n  \nlist1 = [1, 2, 3, 4, 8] \nlist2 = [2, 6, 8, 10]\n\ncommon_list = common_elements(list1, list2) \n\nprint(common_list)", "predict": "def common_elements(list1, list2):\n    return [element for element in list1 if element in list2]"}
{"prompt": "Create a loop in Python to print out all the odd numbers from 1 to 10. ", "label": "for i in range(1, 11):\n    if i % 2 != 0:\n        print(i)", "predict": "for i in range(1, 11):\n    if i % 2!= 0:\n        print(i)"}
{"prompt": "Create a machine learning model in Python that predecits customer lifetime value given a customer's past transactions.\nNot applicable ", "label": "import pandas as pd\nimport numpy as np\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestRegressor\n\n# Preprocessing\ndf = pd.read_csv('transactions.csv')\nX = df.iloc[:,:-1].values\ny = df.iloc[:,-1].values\nscaler = StandardScaler()\nX = scaler.fit_transform(X)\n\n# Model Training\nmodel = RandomForestRegressor()\nmodel.fit(X, y)\n\n# Prediction\ncustomer_input = np.array([[10,100,5,...]]) # provide data related to past transactions\ntrans_scaled = scaler.transform(customer_input)\npredicted_LTV = model.predict(trans_scaled)[0]\nprint('Predicted customer lifetime value', predicted_LTV)", "predict": "import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\n\n# Read in data\ndata = pd.read_csv('customer_data.csv')\n\n# Define features and target\nX = data[['transaction_amount', 'transaction_date']]\ny = data['customer_lifetime_value']\n\n# Split into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train the model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Evaluate the model\naccuracy = model.score(X_test, y_test)\nprint('Model accuracy: ', accuracy)"}
{"prompt": "Given a list of numbers and a target number, write a Python program to find a pair of numbers from the given list that add up to the given target.\nInput List: [1, 2, 3, 4, 4, 5, 6]\nTarget: 8 ", "label": "def find_pair(lst, target):\n    for i in range(len(lst)):\n        if (target - lst[i]) in lst[i+1:]:\n            return [lst[i], target-lst[i]]\n\nfind_pair([1,2,3,4,4,5,6], 8)", "predict": "def find_pair_sum(nums, target):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return [nums[i], nums[j]]\n\nnums = [1, 2, 3, 4, 4, 5, 6]\ntarget = 8\n\nresult = find_pair_sum(nums, target)\nprint(result) # Output: [4, 4]"}
{"prompt": "Develop a class in Python to perform various matrix operations like addition, subtraction, multiplication and transpose. ", "label": "class Matrix: \n    def __init__(self, m, n, lst): \n        self.m = m             \n        self.n = n             \n        self.mat = [] \n  \n        c = 0\n        for i in range(self.m): \n            a =[] \n            for j in range(self.n): \n                    a.append(lst[c]) \n                    c += 1\n            self.mat.append(a) \n  \n    def __str__(self): \n        output = \"\"\n        for i in self.mat: \n            for j in i: \n                output += str(j) + \" \"\n            output += '\\n'\n        return output \n  \n    def add(self, mat2): \n        for i in range(self.m): \n            for j in range(self.n): \n                self.mat[i][j] += mat2.mat[i][j] \n  \n    def sub(self, mat2): \n        for i in range(self.m): \n            for j in range(self.n): \n                self.mat[i][j] -= mat2.mat[i][j]\n    \n    def mul(self, mat2): \n        result = [] \n        for i in range(self.m): \n            a =[] \n            for j in range(mat2.n): \n                s = 0\n                for k in range(self.n): \n                    s += self.mat[i][k] * mat2.mat[k][j] \n                a.append(s) \n            result.append(a) \n        self.mat = result \n        self.m = len(result) \n        self.n = len(result[0]) \n  \n    def transpose(self):\n        result = [[self.mat[j][i] for j in range(len(self.mat))] for i in range(len(self.mat[0]))]\n        self.mat = result \n        self.m = len(result) \n        self.n = len(result[0])", "predict": "class Matrix:\n    def __init__(self, matrix):\n        self.matrix = matrix\n \n    def add(self, matrix):\n        result = [[sum(x) for x in zip(a, b)] for a, b in zip(self.matrix, matrix)]\n        return result\n \n    def subtract(self, matrix):\n        result = [[sum(x) for x in zip(a, b)] for a, b in zip(self.matrix, matrix)]\n        for row in result:\n            for num in row:\n                num -= self.matrix[0][0]\n        return result\n \n    def multiply(self, matrix):\n        result = [[sum(x) for x in zip(a, b)] for a, b in zip(self.matrix, matrix)]\n        return result\n \n    def transpose(self):\n        result = []\n        for i in range(len(self.matrix[0])):\n            row = []\n            for j in range(len(self.matrix)):\n                row.append(self.matrix[j][i])\n            result.append(row)\n        return result"}
{"prompt": "Write a Python script to generate a random number between 0 and 9. ", "label": "import random\n\nrandom_num = random.randint(0,9)\nprint(random_num)", "predict": "import random\n\nrand_num = random.randint(0, 9)\nprint(rand_num)"}
{"prompt": "Create a Python Flask app that listens for POST requests on the '/webhook' route. When a request is received, extract the necessary parameters from the request and call the 'makeWebhookResult' function to generate a response. The response should be a JSON object containing a 'speech' field with the text to be spoken by the voice assistant. The app should be started", "label": "#!/usr/bin/env python\n# coding=utf-8\nimport requests\nimport urllib2\nimport json\nimport os\nfrom flask import Flask\nfrom flask import request\nfrom flask import make_response\nfrom bs4 import BeautifulSoup \n\n\n# Flask app should start in global layout\napp = Flask(__name__)\n\n\n@app.route('/webhook', methods=['POST'])\ndef webhook():\n\treq = request.get_json(silent=True, force=True)\n\tres = makeWebhookResult(req)\n    \tres = json.dumps(res, indent=4)\n    \tprint(res)\n    \tr = make_response(res)\n    \tr.headers['Content-Type'] = 'application/json'\n    \treturn r\n\ndef makeWebhookResult(req):\n\tresult = req.get(\"result\")\n\tparameters = result.get(\"parameters\")\n\t\n\tif req.get(\"result\").get(\"action\") == \"productos.sura\":\n        \tcliente = parameters.get(\"tipo_cliente\")\n       \t\tspeech = \"Buscando productos para \" + cliente\n\t\t\n\telif req.get(\"result\").get(\"action\") == \"producto.info\":\n        \tproducto = parameters.get(\"producto\")\n\t\tif (producto==\"hogar\"):\n\t\t\turl = \"https://www.sura.com/soluciones-personas/seguro-hogar.aspx\"\n\t\t\tr = urllib2.urlopen(url).read()\n\t\t\tsoup = BeautifulSoup(r, 'html.parser')\n\t\t\tprint soup\n\t\t\tcontenido = soup.find_all(\"div\",class_=\"textRightColumn\")\n\t\t\tif (len(contenido)==0):\n\t\t\t\tspeech = \"No encontrado\"\n\t\t\telse:\n\t\t\t\tspeech = contenido[0]\n\t\t\t\n\t\telse:\n       \t\t\tspeech = \"Buscando informacion del producto \" + producto\n        \n    \telif req.get(\"result\").get(\"action\") == \"planes.salud\":\n        \turl = \"https://api.segurossura.com.co/public/v1/directory/products\"\n        \tmyResponse = requests.get(url)\n\n        \tif(myResponse.ok):\n\t\t\tjData = json.loads(myResponse.text)\n\t\t\t\n\t\tspeech = \"Seguros Sura Colombia ofrece los siguientes planes de salud: \\n\"\n\t\t\n        \tfor plan in jData:\n\t       \t\tspeech = speech + \"\\n\" + plan[\"nombreField\"].title()\n\t\t\t\n\telif req.get(\"result\").get(\"action\") == \"info.especialistas\":\n\t\tproducto = parameters.get(\"plan-salud\")\n\t\tciudad = parameters.get(\"ciudad\")\n\t\tespecialidad = parameters.get(\"especialidad\")\n\t\t\n\t\turl = \"https://api.segurossura.com.co/public/v1/directory/search/\" + producto + \"/\" + ciudad + \"?speciality=\" + especialidad + \"&firstname=&secondname=&firstlastname=&secondlastname=\"\n\t\tmyResponse = requests.get(url)\n\n\t\tif(myResponse.ok):\n\t\t\tjData = json.loads(myResponse.text)\n\t\t\n\t\tspeech = \"Los profesionales que coinciden con tu busqueda son: \\n\"\n\n\t\tfor medico in jData:\n\t       \t\tspeech = speech + \"\\n\" + medico[\"nombreField\"] + \"\\n Direccion: \" + medico[\"direccionField\"].title() + \"\\n Telefono: \" + medico[\"telefonoField\"] + \"\\n\"\n\t\t\t\n\telif req.get(\"result\").get(\"action", "predict": "with the 'app.run()' function.\n\nimport flask\nfrom flask import request\n\nimport dialogflow_v2 as dialogflow\nimport json\n\nproject_id = 'project-id'\nsession_client = dialogflow.SessionsClient()\n\nsession = session_client.session_path(project_id,'session-id')\n\napp = flask.Flask(__name__)\n\n@app.route('/webhook', methods=['POST'])\ndef webhook():\n    req = request.get_json(silent=True, force=True)\n\n    result = makeWebhookResult(req)\n    response = flask.make_response(json.dumps(result))\n    response.headers['Content-Type'] = 'application/json'\n    return response\n\ndef makeWebhookResult(req):\n    result = req.get(\"result\")\n    parameters = result.get(\"parameters\")\n    response = dialogflow.types.TextResponse()\n    response.text = parameters.get(\"Text\")\n    return {\n        \"speech\": response.text\n    }\n\nif __name__ == '__main__':\n    app.run()"}
{"prompt": "Modify an existing Python function to eliminate any redundancies\ndef just_me(name):\n    print(\"Hi, my name is \"+name+\".\")\n    print(\"I am special and nothing else matters.\")\n    print(\"What about you?\") ", "label": "def just_me(name):\n    print(\"Hi, my name is \"+name+\". I am special and nothing else matters.\")\n    print(\"What about you?\")", "predict": "def just_me(name):\n    print(\"Hi, my name is \"+name+\". I am special and nothing else matters. What about you?\")"}
{"prompt": "Create a simple chatbot using Python and state diagrams.\nNot applicable ", "label": "# Create the states\nstate0 = {\n     'name': 'state0',\n     'message': 'Hello! How can I help you?',\n     'replies': {'I need some advice': 'state1', 'Can you answer my questions?': 'state2'}\n}\n\nstate1 = {\n     'name': 'state1',\n     'message': 'Sure, what kind of advice do you need?',\n     'replies': {'Career advice': 'state3','Health advice': 'state4'}\n}\n\nstate2 = {\n     'name': 'state2',\n     'message': 'Yes, I'll do my best! What do you want to know?',\n     'replies': {'Where can I find good tutorials': 'state5', 'Why is coding so hard': 'state6'}\n}\n\nstate3 = {\n     'name': 'state3',\n     'message': 'It is always a good idea to research the field you are interested in and creating a plan to learn the skills that are required. Make sure to contact professionals in the field to understand their experience.',\n     'replies': {}\n}\n\nstate4 = {\n     'name': 'state4',\n     'message': 'Focus on eating healthy and staying active. Make sure to consult a medical professional if you have any concerns.',\n     'replies': {}\n}\n\nstate5 = {\n     'name': 'state5',\n     'message': 'You can find tutorials online or join coding communities to get help from experienced coders. StackOverflow and Cod Academy are great resources.',\n     'replies': {}\n}\n\nstate6 = {\n     'name': 'state6',\n     'message': 'Coding can be challenging, especially at first. Just remember that with practice, patience and problem solving skills you can overcome the obstacles.',\n     'replies': {}\n}\n\n\n# Initialize the state\ncurrent_state = state0\n\n# Keep a record of conversation\nconversation = []\n\nwhile True:\n # Print the current state message\n print(current_state['message'])\n conversation.append(current_state['message'])\n\n # Get the user input\n user_input = input('>> ')\n conversation.append(user_input)\n\n # Update the state\n if user_input in current_state['replies']:\n  current_state = eval(current_state['replies'][user_input])\n else:\n  print(\"I don't understand what you mean. Please try again.\")\n\n# End the conversation when the state is terminal\n if not bool(current_state['replies']):\n  print('Goodbye!')\n  break\n\nprint(\"=========================\")\nprint(\"Conversation:\")\nfor message in conversation:\n print(message)", "predict": "import sys\n\n# State Diagram\n# Initial state\nstate = 'initial'\n\n# Dictionary of possible states\nstates = {\n 'initial': {'hello': 'greeting', 'how are you': 'greeting'},\n 'greeting': {'fine': 'goodbye', 'good': 'goodbye'},\n 'goodbye': {'see you': 'initial', 'bye': 'initial'}\n}\n\n# Function to process user input\ndef process_input(input_string):\n global state\n\n # Get the current state\n current_state = states[state]\n\n # Get the response\n response = current_state[input_string]\n\n # Set the new state\n if response:\n state = response\n\n # Return the response\n return response\n\n# Function to get the user input\ndef get_input():\n user_input = input('You: ')\n return user_input\n\n# Main loop\nwhile True:\n user_input = get_input()\n response = process_input(user_input)\n if response:\n print('Bot:'+ response)\n else:\n print('I am sorry, I don\\'t understand.')"}
{"prompt": "Create a Python 3 program that takes an integer input from the user and prints its cube. ", "label": "number = int(input(\"Please enter a number: \"))\ncube = number**3\nprint(\"The cube of the number is: \" + str(cube))", "predict": "def cube(n):\n    return n * n * n\n\nn = int(input(\"Enter an integer: \"))\nprint(\"The cube of\", n, \"is\", cube(n))"}
{"prompt": "Write a Python program to find the first non-repeating character in a given list.\nlst = [1, 2, 3, 4, 4, 3, 2, 1] ", "label": "def first_non_repeating_char(lst):\n    dct = {}\n    \n    for l in lst:\n        if l in dct:\n            dct[l] += 1\n        else:\n            dct[l] = 1\n            \n    for l in lst:\n        if dct[l] == 1:\n            return l\n            \n    return None\n\nlst = [1, 2, 3, 4, 4, 3, 2, 1]\nprint(first_non_repeating_char(lst))", "predict": "def first_non_repeating_char(lst):\n    for char in lst:\n        if lst.count(char) == 1:\n            return char\n    return None"}
{"prompt": "Create a k-means clustering algorithm in Python. ", "label": "import numpy as np \n\ndef kmeans(k, data): \n    \"\"\"\n    Perform k-means clustering on data\n    \"\"\"\n    # randomly set initial centroids\n    centroids = data[np.random.randint(low=0, high=len(data), size=k)]\n    prev_centroids = np.zeros(centroids.shape)\n\n    clusters = np.zeros(len(data))\n    distances = np.zeros((len(data), k))\n    \n    # find the closest centroid for each sample\n    while not np.allclose(centroids, prev_centroids):\n        # save old centroids\n        prev_centroids = centroids\n    \n        # get the distance between each point and each centroid\n        for idx, centroid in enumerate(centroids):\n            distances[:, idx] = np.linalg.norm(data - centroid, axis=1)\n    \n        # assign each sample to the closest centroids\n        clusters = np.argmin(distances, axis=1)\n    \n        # update centroids \n        for idx in range(k):\n            centroids[idx] = np.mean(data[clusters == idx], axis=0)\n    \n    return clusters, centroids", "predict": "from sklearn.cluster import KMeans\n\ndef k_means_clustering(X, k):\n    # Initialize the KMeans model\n    model = KMeans(n_clusters=k)\n\n    # Fit the model to the data\n    model.fit(X)\n\n    # Get the cluster labels\n    labels = model.labels_\n\n    # Return the cluster labels\n    return labels"}
{"prompt": "Write a Python code snippet that produces the following output: ", "label": "for i in range(7):\n    for j in range(7):\n        if (i + j) % 2 == 0:\n            print('#', end='')\n        else:\n            print(' ', end='')\n    print()", "predict": "print(\"Welcome to the world of programming!\")"}
{"prompt": "Construct a Python class that takes a given number and calculates the sum of the digits.\n6342 ", "label": "class SumOfDigits:\n    \n    def __init__(self, num):\n        self.num = num\n    \n    def calculate_sum_of_digits(self):\n        total = 0\n        for ch in str(self.num):\n            total += int(ch)\n        return total\n\ndigit_sum = SumOfDigits(6342)\nresult = digit_sum.calculate_sum_of_digits()\nprint(result)", "predict": "class SumOfDigits:\n    def __init__(self, number):\n        self.number = number\n\n    def sum_of_digits(self):\n        sum = 0\n        for digit in str(self.number):\n            sum += int(digit)\n        return sum\n\nsum_of_digits = SumOfDigits(6342)\nprint(sum_of_digits.sum_of_digits())"}
{"prompt": "Implement a sorting algorithm in Python that takes a list of integers as input and outputs the list sorted in ascending order. ", "label": "def sort_ascending(nums):\n    for i in range(len(nums)):\n        min_idx = i\n        for j in range(i + 1, len(nums)):\n            if nums[min_idx] > nums[j]:\n                min_idx = j\n        nums[i], nums[min_idx] = nums[min_idx], nums[i] \n    return nums", "predict": "def sort(arr):\n    for i in range(len(arr)):\n        min_index = i\n        for j in range(i+1, len(arr)):\n            if arr[min_index] > arr[j]:\n                min_index = j\n        arr[i], arr[min_index] = arr[min_index], arr[i]\n    return arr"}
{"prompt": "Create a feature extraction function in Python to extract data from a json string.\n{\"id\":111,\"title\":\"This is a sample title\",\"body\":\"This is a sample body text\"} ", "label": "def feature_extraction(input_str):\n    import json\n    data = json.loads(input_str)\n\n    features = {\n        \"id\": data[\"id\"],\n        \"title\": data[\"title\"],\n        \"body_len\": len(data[\"body\"])\n    }\n\n    return features", "predict": "import json\n\ndef extract_features(json_string):\n    data = json.loads(json_string)\n    features = {\n        'id': data['id'],\n        'title_length': len(data['title']),\n        'body_length': len(data['body']),\n        'title_words': len(data['title'].split()),\n        'body_words': len(data['body'].split())\n    }\n    return features"}
{"prompt": "Construct a Python program to combine the elements of two lists into a list of tuples.\n[1, 2, 3], [4, 5, 6] ", "label": "def combine_list(array1, array2):\n    return list(zip(array1, array2))", "predict": "def combine_lists(list1, list2):\n    combined_list = list(zip(list1, list2))\n    return combined_list"}
{"prompt": "Design and implement a neural network in Python to predict the price of a house given a set of features.\n[0.8, 0.4, 0.7] ", "label": "import numpy as np\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\nfeatures = np.array([[0.8, 0.4, 0.7]])\n\nmodel = Sequential()\nmodel.add(Dense(64, input_dim=3, activation='relu'))\nmodel.add(Dense(32, activation='relu'))\nmodel.add(Dense(1, activation='linear'))\n\nmodel.compile(loss='mse', optimizer='adam', metrics=['mse'])\n\nmodel.fit(features, batch_size=3,epochs=200)", "predict": "import numpy as np\nimport tensorflow as tf\n\n# Input layer\nx = tf.placeholder(tf.float32, shape=[None, 3])\n\n# Hidden layer\nW1 = tf.Variable(tf.truncated_normal([3, 4], stddev=1.0))\nb1 = tf.Variable(tf.zeros([4]))\nh1 = tf.nn.relu(tf.matmul(x, W1) + b1)\n\n# Output layer\nW2 = tf.Variable(tf.truncated_normal([4, 1], stddev=1.0))\nb2 = tf.Variable(tf.zeros([1]))\ny = tf.matmul(h1, W2) + b2\n\n# Define cost function\ncost = tf.reduce_mean(tf.square(y - tf.placeholder(tf.float32, [None])))\n\n# Define optimizer\noptimizer = tf.train.GradientDescentOptimizer(0.01).minimize(cost)\n\n# Initialize the variables\ninit = tf.global_variables_initializer()\n\n# Train the model\nwith tf.Session() as sess:\n sess.run(init)\n\n for i in range(1000):\n sess.run(optimizer, feed_dict={x: np.array([[0.8, 0.4, 0.7]])})\n\nprint(sess.run(y, feed_dict={x: np.array([[0.8, 0.4, 0.7]])}))"}
{"prompt": "Create a Python program that takes two arguments in the form of two lists and calculates the dot product of the two arguments.\n[1,2], [3,4] ", "label": "def dot_product(list1, list2):\n  product = 0\n  for i in range(len(list1)):\n    product += (list1[i] * list2[i])\n  return product\n#Example\nlist1 = [1,2]\nlist2 = [3,4]\n\nresult = dot_product(list1, list2)\nprint(result)\n#Output\n11", "predict": "def dot_product(list1, list2):\n    if len(list1)!= len(list2):\n        return None\n    result = 0\n    for i in range(len(list1)):\n        result += list1[i] * list2[i]\n    return result\n\nprint(dot_product([1,2], [3,4]))"}
{"prompt": "Create a Python web application for a car insurance calculator. The application should have a page where the user can input the data (e.g age, gender, car model, etc) and should return a calculated insurance price.\nNot applicable ", "label": "import flask\nfrom flask import request, jsonify\n\n# Creating the application app\napp = flask.Flask(__name__)\n\n\n@app.route('/calculate', methods=['POST'])\ndef calculate():\n    # Get the input data from the user\n    data = request.get_json()\n\n    age = data['age']\n    gender = data['gender']\n    car_model = data['car_model']\n\n    # Calculate the insurance price\n    # ...\n    insurance_price = 0.00\n\n    # Return the calculated insurance price in JSON format\n    return jsonify({'insurance_price': insurance_price})\n\t\napp.run(host='0.0.0.0', port=8006)", "predict": "import flask\nfrom flask import request, jsonify\n\napp = flask.Flask(__name__)\n\n@app.route('/insurance', methods=['POST'])\ndef insurance_calculator():\n data = request.get_json()\n age = data['age']\n gender = data['gender']\n car_model = data['car_model']\n\n # Calculate insurance price\n insurance_price = age * gender * car_model\n\n return jsonify({'insurance_price': insurance_price})\n\nif __name__ == '__main__':\n app.run(debug=True)"}
{"prompt": "Create a Python script that generates a list of the prime numbers between two given numbers. The script should use the Sieve of Eratosthenes algorithm to generate the prime numbers\nStart=1, End=20 ", "label": "def sieve_of_eratosthenes(start, end):\n    prime = [True] * (end + 1)\n    p = 2\n    while p * p <= end:\n        if prime[p]:\n            for i in range(p * p, end + 1, p):\n                prime[i] = False\n        p += 1\n    prime_numbers = []\n\n    for p in range (start, end):\n        if prime[p]:\n            prime_numbers.append(p)\n\n    return prime_numbers\n\nprint (sieve_of_eratosthenes(1, 20))", "predict": "def sieve_of_eratosthenes(start, end):\n    prime_numbers = []\n    primes = [True] * (end + 1)\n    primes[0] = False\n    primes[1] = False\n    for i in range(2, int(end**0.5) + 1):\n        if primes[i]:\n            for j in range(i*i, end + 1, i):\n                primes[j] = False\n    for i in range(start, end + 1):\n        if primes[i]:\n            prime_numbers.append(i)\n    return prime_numbers\n\nprint(sieve_of_eratosthenes(1, 20))"}
{"prompt": "Construct a program in Python to compute the sum of square numbers in a given range, including the start and end numbers.\nRange: 10-20 ", "label": "def sumOfRanges(start, end):\n sum = 0\n \n for i in range(start, end+1):\n sum += i*i\n \n return sum\n\nsumOfRanges(10,20) #673", "predict": "def sum_of_squares(start, end):\n    sum = 0\n    for i in range(start, end + 1):\n        sum += i * i\n    return sum\n\nresult = sum_of_squares(10, 20)\nprint(result)"}
{"prompt": "In Python, build a program that can remove all vowels from a given string. ", "label": "def remove_vowels(string):\n    vowels = ['a','e','i','o','u']\n    new_string = ''\n    for char in string:\n        if char.lower() not in vowels:\n            new_string += char\n    return new_string", "predict": "def remove_vowels(s):\n    vowels = (\"a\", \"e\", \"i\", \"o\", \"u\")\n    for x in s:\n        if x in vowels:\n            s = s.replace(x,\"\")\n    return s"}
{"prompt": "Improve the following function by using Python built-in functions:\ndef sum_array(array):\n    '''A function that takes in an array of numbers and returns the sum of all the numbers'''\n    total = 0\n    for num in array:\n        total = total + num\n    return total ", "label": "def sum_array(array):\n    '''A function that takes in an array of numbers and returns the sum of all the numbers'''\n    return sum(array)", "predict": "def sum_array(array):\n    '''A function that takes in an array of numbers and returns the sum of all the numbers'''\n    return sum(array)"}
{"prompt": "Write a python code for sorting n distinct integers using insertion sort. ", "label": "def insertion_sort(arr):\n    for i in range(1, len(arr)): \n  \n        key = arr[i] \n  \n        # Move elements of arr[0..i-1], \n        # that are greater than key, \n        # to one position ahead of \n        # their current position \n        j = i-1\n        while j >= 0 and key < arr[j] : \n                arr[j + 1] = arr[j] \n                j -= 1\n        arr[j + 1] = key", "predict": "def insertion_sort(nums):\n    for i in range(1, len(nums)):\n        key = nums[i]\n        j = i-1\n        while j >= 0 and nums[j] > key:\n            nums[j+1] = nums[j]\n            j -= 1\n        nums[j+1] = key\n    return nums"}
{"prompt": "Create a Python script for a django-like ORM with standard CRUD functionality. The script should include methods for Create, Read, Update and Delete.\nModel. name - string ", "label": "import sqlite3\n\nclass Model:\n\n  def __init__(self):\n    self.conn = sqlite3.connect(\":memory:\")\n    self.cursor = self.conn.cursor()\n\n  def create(self,name):\n    self.cursor.execute(\n\t\t\t\"CREATE TABLE IF NOT EXISTS Models (name TEXT)\"\n\t\t)\n    self.cursor.execute(\n\t\t\t\"INSERT INTO Models(name) VALUES (?)\",\n\t\t\t(name,),\n\t\t)\n    self.conn.commit()\n\n  def read(self):\n    self.cursor.execute(\"SELECT * FROM Models\")\n    return self.cursor.fetchall()\n\n  def update(self,name):\n    self.cursor.execute(\n\t\t\t\"UPDATE Models SET name = ? WHERE name = ?\", \n\t\t\t(name, name,),\n\t\t)\n    self.conn.commit()\n  \n  def delete(self, name):\n    self.cursor.execute(\n\t\t\t\"DELETE FROM Models WHERE name = ?\",\n\t\t\t(name,),\n\t\t)\n    self.conn.commit()", "predict": "import sqlite3\n\nclass Model:\n    def __init__(self, name):\n        self.name = name\n        self.conn = sqlite3.connect(f'{name}.db')\n        self.cursor = self.conn.cursor()\n\n    def create(self, columns):\n        self.cursor.execute(f\"CREATE TABLE {self.name} ({columns})\")\n        self.conn.commit()\n\n    def read(self, query):\n        self.cursor.execute(query)\n        return self.cursor.fetchall()\n\n    def update(self, query, values):\n        self.cursor.execute(query, values)\n        self.conn.commit()\n\n    def delete(self, query):\n        self.cursor.execute(query)\n        self.conn.commit()"}
{"prompt": "Can you write a Python script to sort a list of strings alphabetically?\n[\"Hello\", \"Yes\", \"No\", \"World\"] ", "label": "strings = [\"Hello\", \"Yes\", \"No\", \"World\"]\n\nstrings.sort()\n\nprint(strings)", "predict": "list = [\"Hello\", \"Yes\", \"No\", \"World\"]\nlist.sort()\nprint(list)"}
{"prompt": "Write a class in Python that can find the median of an unsorted list of numbers. ", "label": "class MedianFinder:\n def __init__(self):\n     self._data = []\n \n def add(self, num):\n     self._data.append(num)\n \n def find_median(self):\n     data = sorted(self._data)\n     n = len(data)\n     return (data[(n-1)//2] + data[n//2])/2", "predict": "class MedianFinder:\n    def __init__(self):\n        self.list = []\n\n    def add(self, num):\n        self.list.append(num)\n\n    def find_median(self):\n        self.list.sort()\n        if len(self.list) % 2 == 0:\n            return (self.list[len(self.list)//2] + self.list[len(self.list)//2 - 1]) / 2\n        else:\n            return self.list[len(self.list)//2]"}
{"prompt": "Generate an array of random numbers in Python.\nsize: 10 ", "label": "import numpy as np\n\nsize = 10\nrandom_array = np.random.randint(0, 100, size)\nprint(random_array)", "predict": "import random\n\nrandom_array = [random.randint(0, 100) for _ in range(10)]\nprint(random_array)"}
{"prompt": "Compute the edit distance between two strings in Python.\nstring1 = “kitten”\nstring2 = “sitting” ", "label": "def editDistance(string1, string2, m, n):\n    # Create an empty matrix\n    dp = [[0 for x in range(n+1)] for x in range(m+1)] \n  \n    # Filling the first column of the matrix\n    for i in range(m+1): \n        dp[i][0] = i \n  \n    # Filling the second column of the matrix \n    for j in range(n+1): \n        dp[0][j] = j \n  \n    # Populate the matrix\n    for i in range(1, m+1): \n        for j in range(1, n+1): \n  \n            if string1[i-1] == string2[j-1]: \n                dp[i][j] = dp[i-1][j-1] \n            else: \n                dp[i][j] = 1 + min(dp[i][j-1],        # Insert\n                                   dp[i-1][j],        # Remove \n                                   dp[i-1][j-1])      # Replace\n  \n    return dp[m][n] \n  \n  \n# Driver program \nstring1 = \"kitten\"\nstring2 = \"sitting\"\nm = len(string1) \nn = len(string2) \nprint(editDistance(string1, string2, m, n))", "predict": "def edit_distance(string1, string2):\n    # Create a 2D array to store results of subproblems\n    dp = [[0 for x in range(len(string2) + 1)] for x in range(len(string1) + 1)]\n\n    # Fill d[][] in bottom up manner\n    for i in range(len(string1) + 1):\n        for j in range(len(string2) + 1):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            elif string1[i-1] == string2[j-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = 1 + min(dp[i][j-1],      # Insert\n                                   dp[i-1][j],      # Remove\n                                   dp[i-1][j-1])   # Replace\n\n    # Return the edit distance\n    return dp[len(string1)][len(string2)]"}
{"prompt": "Create a 3-layer artificial neural network using Python and print the outcome. ", "label": "import numpy as np\n\n# define the 3 layers #\ninput_layer = np.array([2, 3])\nhidden_layer = np.array([[0.1, 0.4],\n                         [0.8, 0.6],\n                         [0.3, 0.9]])\noutput_layer = np.array([0.3, 0.7])\n\n# compute the output of the 3-layer network #\nhidden_layer_output = np.dot(input_layer, hidden_layer)\noutput = np.dot(hidden_layer_output, output_layer)\n\nprint(output)", "predict": "import numpy as np\n\n# Create the layers\ninput_layer = np.array([[1, 2], [3, 4], [5, 6]])\nhidden_layer = np.array([[0.5, 0.5], [0.5, 0.5], [0.5, 0.5]])\noutput_layer = np.array([[0.8, 0.2], [0.4, 0.6], [0.2, 0.8]])\n\n# Create the weights\nweights_input_hidden = np.array([[0.2, 0.3], [0.4, 0.5], [0.6, 0.7]])\nweights_hidden_output = np.array([[0.8, 0.2], [0.4, 0.6]])\n\n# Compute the output of the hidden layer\nhidden_layer_output = np.dot(input_layer, weights_input_hidden)\n\n# Compute the output of the output layer\noutput_layer_output = np.dot(hidden_layer_output, weights_hidden_output)\n\n# Print the output\nprint(output_layer_output)"}
{"prompt": "Create a Python program to read in 15 integers and print the sum of them.\n[1, 5, 9, 0, 2, 4, 7, 8, 6, 10, 3, 11, 12, 13, 14] ", "label": "def sum_nums(nums):\n    total = 0\n    for num in nums:\n        total += num\n    return total\n\nlst = [1, 5, 9, 0, 2, 4, 7, 8, 6, 10, 3, 11, 12, 13, 14]\ntotal = sum_nums(lst)\nprint(total)", "predict": "# Read in the integers\nnums = [1, 5, 9, 0, 2, 4, 7, 8, 6, 10, 3, 11, 12, 13, 14]\n\n# Calculate the sum\ntotal = 0\nfor num in nums:\n total += num\n\n# Print the result\nprint(total)"}
{"prompt": "Implement a REST API in Python for creating and reading users. The API should have endpoints for creating a user, reading all users, and reading a single user.\nNot applicable ", "label": "from flask import Flask, jsonify, request\nfrom flask_mysqldb import MySQL\n\napp = Flask(name)\n\n# Mysql configuration\napp.config['MYSQL_USER'] = 'root'\napp.config['MYSQL_PASSWORD'] = 'password'\napp.config['MYSQL_DB'] = 'users'\napp.config['MYSQL_CURSORCLASS'] = 'DictCursor'\n\nmysql = MySQL(app)\n\n@app.route('/users', methods=['POST'])\ndef create_user():\n name = request.json['name']\n email = request.json['email']\n\n cur = mysql.connection.cursor()\n cur.execute(\"INSERT INTO users (name, email) VALUES (%s, %s)\", (name, email))\n mysql.connection.commit()\n cur.close()\n\n return jsonify({'message': 'User created'})\n\n@app.route('/users', methods=['GET'])\ndef get_users():\n cur = mysql.connection.cursor()\n cur.execute(\"SELECT * FROM users\")\n users = cur.fetchall()\n cur.close()\n\n return jsonify(users)\n\n@app.route('/users/int:id', methods=['GET'])\ndef get_user(id):\n cur = mysql.connection.cursor()\n cur.execute(\"SELECT * FROM users WHERE id=%s\", (id))\n user = cur.fetchone()\n cur.close()\n\n return jsonify(user)\n\nif name == \"main\":\n app.run(debug=True)", "predict": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\nusers = []\n\n@app.route('/users', methods=['POST'])\ndef create_user():\n data = request.get_json()\n user = {\n 'id': len(users) + 1,\n 'name': data['name'],\n 'email': data['email']\n }\n users.append(user)\n return jsonify(user)\n\n@app.route('/users', methods=['GET'])\ndef get_users():\n return jsonify(users)\n\n@app.route('/users/<int:id>', methods=['GET'])\ndef get_user(id):\n user = next((u for u in users if u['id'] == id), None)\n if user:\n return jsonify(user)\n else:\n return jsonify({'error': 'User not found'})\n\nif __name__ == '__main__':\n app.run(debug=True)"}
{"prompt": "Explain the approach for solving a linear programming problem using the Simplex method in Python. ", "label": "The Simplex Method is an algorithm for solving a linear programming problem, which involves finding the maximum or minimum value of a linear function. This method uses simultaneous equations to define a polytope that contains the solution to the linear programming problem. It then finds the optimal solution in this polytope by iteratively making moves from a vertex to another in the polytope that gives an increase in the message value. \n\nTo solve a linear programming problem using the Simplex Method in Python, first, define the problem in terms of the decision variables, objective function, and constraints. Next, convert the problem into standard form by introducing slack variables, if needed. Then, create a tableau containing the coefficients of the decision variables and the right-hand sides of the constraints, and set up the starting solution in the tableau. Now, iteratively use the Simplex algorithm to move from a vertex to the next until an optimum solution is reached. Determine the optimum solution by inspecting the values in the tableau.", "predict": "The Simplex method is an algorithm for solving linear programming problems. It is an iterative method that works by finding the vertex of the feasible region and moving to the next vertex that improves the objective function. The algorithm works by maintaining a tableau, which is a matrix that contains the coefficients of the objective function and the constraints. The algorithm then uses the pivot operation to move from one vertex to the next. The pivot operation involves finding the pivot column and the pivot row and then performing a series of operations to move from one vertex to the next. The algorithm stops when it reaches the optimal solution."}
{"prompt": "Optimize a Python algorithm to find the greatest 2 numbers from a 10000 integers list.\nmyList = [1, 5, 3, 7, 4, 7, 8, 9, 2, 10, 6, 8] ", "label": "def get_greatest_2(items):\n max1 = max2 = float('-inf')\n for item in items:\n if item > max1:\n max1, max2 = item, max1\n elif item > max2:\n max2 = item\n return max1, max2\n\nmyList = [1, 5, 3, 7, 4, 7, 8, 9, 2, 10, 6, 8]\nprint('The greatest 2 numbers from the array:', get_greatest_2(myList))\n\nOutput:\nThe greatest 2 numbers from the array: (9, 8)", "predict": "def find_greatest_two(myList):\n    # Sort the list in ascending order\n    myList.sort()\n    # Return the last two elements of the list\n    return myList[-2:]"}
{"prompt": "Write a python code that takes in a list of integers and removes all the duplicate elements from it.\n[1, 2, 3, 2, 4, 5, 6, 3] ", "label": "final_list = [] \nfor num in list_of_integers: \n    if num not in final_list: \n    \tfinal_list.append(num) \nprint(final_list)", "predict": "def remove_duplicates(lst):\n    return list(set(lst))\n\nresult = remove_duplicates([1, 2, 3, 2, 4, 5, 6, 3])\nprint(result)"}
{"prompt": "Using the NumPy library, create a Python program to generate a 3X3 array of random integers ranging from 1 to 5.\nNot applicable ", "label": "import numpy as np \n\na = np.random.randint(1, 6, size=(3,3)) \nprint(a)", "predict": "import numpy as np\n\n# Generate a 3X3 array of random integers\narr = np.random.randint(1, 5, size=(3, 3))\n\n# Print the array\nprint(arr)"}
{"prompt": "Can you provide a code snippet in Python that takes a list of strings as input and sorts them based on their length?\n[\"Hello\",\"World!\",\"Good\",\"Morning\"] ", "label": "words = [\"Hello\",\"World!\",\"Good\",\"Morning\"]\n\nwords.sort(key=len)\n\nprint(words)", "predict": "def sort_by_length(words):\n    return sorted(words, key=len)\n\nprint(sort_by_length([\"Hello\",\"World!\",\"Good\",\"Morning\"]))\n\n# Output: ['Good', 'Hello', 'Morning', 'World!']"}
{"prompt": "Create a Python program to classify the sentiment of movie reviews using Natural Language Processing.\nThe movie was terrible. It felt like it would never end! ", "label": "import nltk\nfrom nltk.sentiment import vader\n\nsentence = 'The movie was terrible. It felt like it would never end!'\n\nsid = vader.SentimentIntensityAnalyzer()\nscores = sid.polarity_scores(sentence)\n\nif scores['neg'] > scores['pos']:\n  print('The sentiment of the sentence is negative!')\nelse:\n  print('The sentiment of the sentence is positive!')", "predict": "import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\n# Input text\ntext = 'The movie was terrible. It felt like it would never end!'\n\n# Initialize sentiment analyzer\nsid = SentimentIntensityAnalyzer()\n\n# Get sentiment scores\nscores = sid.polarity_scores(text)\n\n# Classify sentiment\nif scores['compound'] >= 0.05:\n sentiment = 'positive'\nelif scores['compound'] <= -0.05:\n sentiment = 'negative'\nelse:\n sentiment = 'neutral'\n\n# Print result\nprint(f'Sentiment: {sentiment}')"}
{"prompt": "Create a python script that parses a CSV and generates a new CSV that adds the total number of rows, total number of columns, and total amount of the data for each attribute. ", "label": "\"\"\"\nParses a CSV and generates a new CSV that adds the total number of rows, total \nnumber of columns, and total amount of data for each attribute.\n\"\"\"\n\nimport csv\n\ndef parse_csv(filename):\n    with open(filename) as csv_file:\n        reader = csv.DictReader(csv_file)\n        rows =0\n        cols = 0\n        data_totals = []\n        for row in reader:\n            rows += 1\n            cols = len(row)\n            for col in row:\n                if len(data_totals) < cols:\n                    data_totals.append([row[col],1])\n                else:\n                    existing_total = data_totals[cols - 1]\n                    new_total = [existing_total[0] + float(row[col]), existing_total[1] + 1]\n                    data_totals.append(new_total)\n        #write to new csv\n        with open('new_csv.csv', mode='w') as new_csv_file:\n            writer = csv.writer(new_csv_file, delimiter=',', quotechar='\"', quoting=csv.QUOTE_MINIMAL)\n            writer.writerow(['Rows', 'Columns', 'Data Totals'])\n            writer.writerow([rows, cols, data_totals])\n\nif __name__ == '__main__':\n    filename = 'test.csv'\n    parse_csv(filename)", "predict": "import csv\n\n# Read the CSV file\nwith open('input.csv', 'r') as csvfile:\n    reader = csv.reader(csvfile)\n    rows = []\n    cols = []\n    total = 0\n    for row in reader:\n        rows.append(row)\n        cols.append(len(row))\n        total += sum(map(int, row))\n\n# Write the output CSV file\nwith open('output.csv', 'w') as csvfile:\n    writer = csv.writer(csvfile)\n    writer.writerow(['Rows', 'Columns', 'Total'])\n    writer.writerow([len(rows), len(cols), total])"}
{"prompt": "Create a class in Python which matches the following criteria.\nA class Song with two instance variables, title and artist, and three methods, str(), eq(), and length(). ", "label": "class Song:\n    def __init__(self, title, artist):\n        self.title = title\n        self.artist = artist\n  \n    def __str__(self):\n        return f'Title: {self.title}\\nArtist: {self.artist}'\n    \n    def __eq__(self, other):\n        return self.artist == other.artist and self.title == other.title\n\n    def length(self):\n        return len(self.title)", "predict": "class Song:\n    def __init__(self, title, artist):\n        self.title = title\n        self.artist = artist\n    \n    def __str__(self):\n        return f'{self.title} by {self.artist}'\n    \n    def __eq__(self, other):\n        if isinstance(other, Song):\n            return self.title == other.title and self.artist == other.artist\n        return False\n    \n    def length(self):\n        return len(self.title)"}
{"prompt": "Create a Python script to scrape a given website. ", "label": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = '<your website url>'\npage = requests.get(url)\nsoup = BeautifulSoup(page.text, 'html.parser')\n\n# Scraping code goes here....", "predict": "import requests\nfrom bs4 import BeautifulSoup\n\ndef scrape_website(url):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    return soup"}
{"prompt": "Create objects of type Student in Python containing relevant attributes. ", "label": "class Student:\n    def __init__(self, name, age, gender):\n        self.name = name\n        self.age = age\n        self.gender = gender", "predict": "class Student:\n    def __init__(self, name, age, gender, course):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        self.course = course\n\n    def get_details(self):\n        return self.name, self.age, self.gender, self.course"}
{"prompt": "Design and write a Python program to extract all public email addresses from a given string\n\"My email is john@example.com and yours is john@gmail.com.\" ", "label": "import re\n\ndef extract_emails(text):\n  emails = re.findall(r\"[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+\", text)\n  return emails\n\nextracted_emails = extract_emails(\"My email is john@example.com and yours is john@gmail.com\")\nprint(extracted_emails)", "predict": "import re\n\nstring = \"My email is john@example.com and yours is john@gmail.com.\"\n\nemails = re.findall(r\"[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+\", string)\n\nfor email in emails:\n    print(email)"}
{"prompt": "Generate a basic REST API with authentication and endpoints in Python.\nNot applicable ", "label": "from flask import Flask, request\nfrom flask_restful import Resource, Api\nfrom flask_jwt import JWT, jwt_required\n\napp = Flask(name)\napi = Api(app)\n\n# Setup JWT authentication\napp.secret_key = 'super-secret-key'\njwt = JWT(app, authenticate, identity)\n\nitems = []\n\nclass Item(Resource):\n @jwt_required()\n def get(self, name):\n for item in items:\n if item['name'] == name:\n return item\n return {'item': None}, 404\n\n def post(self, name):\n new_item = {'name': name, 'price': 12.00}\n items.append(new_item)\n return new_item, 201\n\n\nclass ItemList(Resource):\n def get(self):\n return {'items': items}\n\n\napi.add_resource(Item, '/item/<string:name>')\napi.add_resource(ItemList, '/items')\n\nif name == 'main':\n app.run(port=5000, debug=True)", "predict": "import flask\nfrom flask import request, jsonify\nimport jwt\n\napp = flask.Flask(__name__)\napp.config['SECRET_KEY'] ='secret-key'\n\n@app.route('/api/v1/login', methods=['POST'])\ndef login():\n username = request.json.get('username')\n password = request.json.get('password')\n\n # Check credentials\n if username == 'admin' and password == 'password':\n token = jwt.encode({'username': username}, app.config['SECRET_KEY'])\n return jsonify({'token': token.decode('UTF-8')})\n else:\n return jsonify({'message': 'Invalid credentials'}), 401\n\n@app.route('/api/v1/protected', methods=['GET'])\n@jwt.unauthorized_loader\ndef protected():\n return jsonify({'message': 'Access granted'})\n\nif __name__ == '__main__':\n app.run(debug=True)"}
{"prompt": "Generate a set of Python functions to take inputs values from a list of objects and output a result. The output for each object should include the object's ID and the calculated results from the given inputs.\n[{\"id\": 1, \"inputs\": [1,2,3]}, {\"id\": 2, \"inputs\": [2,3,4]}] ", "label": "def calculate_result(obj_list):\n result_list = []\n\n for obj in obj_list:\n  result = {}\n  result['id'] = obj['id']\n  result['result'] = sum(obj['inputs'])\n\n result_list.append(result)\n\nreturn result_list\n\nobj_list = [{\"id\": 1, \"inputs\": [1,2,3]}, \n{\"id\": 2, \"inputs\": [2,3,4]}]\n\nprint(calculate_result(obj_list))\n\n# Output: [{'id': 1, 'result': 6}, {'id': 2, 'result': 9}]", "predict": "def calculate_result(objects):\n results = []\n for obj in objects:\n  result = {\n   \"id\": obj[\"id\"],\n   \"result\": sum(obj[\"inputs\"])\n  }\n  results.append(result)\n return results"}
{"prompt": "Reverse an input string using Python.\nHello World! ", "label": "def rev_string(s): \n   return s[::-1] \n  \ns = \"Hello World!\"\nprint(rev_string(s))", "predict": "def reverse_string(input_string):\n    reversed_string = \"\"\n    for i in range(len(input_string) - 1, -1, -1):\n        reversed_string += input_string[i]\n    return reversed_string\n\nresult = reverse_string(\"Hello World!\")\nprint(result)"}
{"prompt": "Create an algorithm in Python to find the longest common subsequence of two sequences.\nx = \"abcdaf\";\ny = \"acbcf\"; ", "label": "#Function to find the LCS of two strings\ndef find_lcs(x, y): \n    # Find lengths of the two strings \n    m = len(x) \n    n = len(y) \n    \n    #To store the lengths of longest common subsequences\n    lcs = [[0 for x in range(n+1)] for x in range(m+1)] \n  \n    #Fill the table in bottom up manner \n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0 or j == 0: \n                lcs[i][j] = 0\n            elif x[i-1] == y[j-1]: \n                lcs[i][j] = lcs[i-1][j-1] + 1\n            else: \n                lcs[i][j] = max(lcs[i-1][j], lcs[i][j-1]) \n  \n    #To store one of the possible common subsequence\n    index = lcs[m][n] \n    lcs_str = [\"\"] * (index+1) \n    lcs_str[index] = \"\"\n  \n    #Following loop code is used to find one of the longest common subsequence\n    i = m \n    j = n \n    while i > 0 and j > 0: \n  \n        #If current character in X and Y are same,then\n        # reduce both the count and add the character to the result string\n        if x[i-1] == y[j-1]: \n            lcs_str[index-1] = x[i-1] \n            i-=1\n            j-=1\n            index-=1\n  \n        # If not same, move to the left, top or corner (diagonal) cell \n        #Whichever has the max value\n        elif lcs[i-1][j] > lcs[i][j-1]: \n            i-=1\n        else: \n            j-=1\n  \n    # Return the longest common subsequence\n    return \"\".join(lcs_str)\n\n# Main function\nx = \"abcdaf\"\ny = \"acbcf\"\nres = find_lcs(x,y)\nprint(\"The Longest Common Subsequence is:\")\nprint(res)\n\n# Output: The Longest Common Subsequence is: \n# abcf", "predict": "def longest_common_subsequence(x, y):\n m = len(x)\n n = len(y)\n\n dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n for i in range(m):\n  for j in range(n):\n   if x[i] == y[j]:\n    dp[i + 1][j + 1] = dp[i][j] + 1\n   else:\n    dp[i + 1][j + 1] = max(dp[i + 1][j], dp[i][j + 1])\n\n return dp[m][n]"}
{"prompt": "Write a python script to generate a random password of length 8, which consists of alphanumeric characters and at least one special character. ", "label": "import string\nimport random\n\ndef generate_password():\n    chars = string.ascii_letters + string.digits + string.punctuation\n    pwd_length = 8\n\n    password = ''\n    for i in range(pwd_length):\n        password += random.choice(chars)\n    \n    # Check if at least one special character exists in the password\n    if any([char in string.punctuation for char in password]):\n        return password\n    else:\n        return generate_password()\n\nprint(generate_password())", "predict": "import random\nimport string\n\ndef generate_password():\n    chars = string.ascii_letters + string.digits + string.punctuation\n    length = 8\n    password = ''.join(random.choice(chars) for i in range(length))\n    return password\n\nprint(generate_password())"}
{"prompt": "Create a Python script that takes the list [1, 2, 3, 4, 5] and returns the sum.\n[1, 2, 3, 4, 5] ", "label": "def sum_list(lst):\n  total = 0\n  for num in lst:\n    total += num\n  return total\n\nsum_list([1,2,3,4,5])", "predict": "def sum_list(lst):\n    sum = 0\n    for num in lst:\n        sum += num\n    return sum\n\nresult = sum_list([1, 2, 3, 4, 5])\nprint(result)"}
{"prompt": "Edit the Python program to sort words in a given string by their length in decreasing alphabetical order.\nmy_string = \"This is the string which is to be sorted\" ", "label": "my_string = \"This is the string which is to be sorted\"\n  \nwords = my_string.split(' ') # split string into list of words \n  \n# create a list of tuples where the first element \n# is the length of the word and the second element \n# is the word itself  \nwords_with_length = [(len(word), word) for word in words] \n  \n# sort list of tuples according to 1st element of tuple i.e. length of word \nwords_with_length.sort(reverse = True) \n  \n# wl contains list words in decreasing order of their length \n# now use join() to join all words whith \" \" \nsorted_string = \" \".join([i[1] for i in words_with_length]) \n  \n# print sorted string \nprint(sorted_string)", "predict": "my_string = \"This is the string which is to be sorted\"\n\nwords = my_string.split(\" \")\nwords.sort(key=lambda x: (len(x), x))\nwords.reverse()\n\nprint(\" \".join(words))"}
{"prompt": "Write a python program to calculate maximum revenue.\nprices = [10, 7, 5, 8, 11, 9] ", "label": "def max_revenue(prices):\n    diff = [prices[i + 1] - prices[i] for i in range(len(prices) - 1)] \n    max_diff = 0\n    for i in range(len(diff)): \n        for j in range(i + 1, len(diff) + 1): \n            current_diff = sum(diff[i:j]) \n            if current_diff > max_diff: \n                max_diff = current_diff \n \n    return max_diff", "predict": "def max_revenue(prices):\n    max_revenue = 0\n    for i in range(len(prices)):\n        for j in range(i+1, len(prices)):\n            if prices[i] + prices[j] > max_revenue:\n                max_revenue = prices[i] + prices[j]\n    return max_revenue"}
{"prompt": "Write a Python program to print the following output pattern ", "label": "for i in range(1,6):\n    for j in range(1,i+1):\n        print(j, end=\"\")\n    print()", "predict": "for i in range(1, 6):\n    for j in range(1, i+1):\n        print(j, end=\"\")\n    print()"}
{"prompt": "Develop a loop that prints a python array from the end to the beginning.\narr = [1, 2, 3, 4, 5] ", "label": "def printArrayReverse(arr): \n    for i in range(len(arr) - 1, -1, -1): \n        print(arr[i], end = \" \")\n\nprintArrayReverse(arr)", "predict": "arr = [1, 2, 3, 4, 5]\n\nfor i in range(len(arr)-1, -1, -1):\n    print(arr[i])"}
{"prompt": "Given a list of phone numbers, extract only the ones that start with 08 using Python.\n['0834567', '0945678', '07123456', '08901234', '07890123'] ", "label": "phone_numbers = ['0834567', '0945678', '07123456', '08901234', '07890123']\nresult = [number for number in phone_numbers if number.startswith('08')]\nprint(result)", "predict": "phone_numbers = ['0834567', '0945678', '07123456', '08901234', '07890123']\n\nfiltered_numbers = [number for number in phone_numbers if number.startswith('08')]\n\nprint(filtered_numbers) # ['0834567', '08901234']"}
{"prompt": "Write a Python program that takes a list and a search query as input and returns the indices of all elements in the list which match the search query.\nlist = [\"apple\", \"banana\", \"peach\", \"orange\", \"grape\"]\nsearch_query = \"apple\" ", "label": "def search_list(list, search_query):\n    result = []\n    for i in range(len(list)):\n        if list[i] == search_query:\n            result.append(i)\n    return result\n\nsearch_list(list, search_query) # returns [0]", "predict": "def search_list(list, search_query):\n indices = []\n for i in range(len(list)):\n if list[i] == search_query:\n indices.append(i)\n return indices\n\nindices = search_list(list, search_query)\nprint(indices)"}
{"prompt": "Write a function in Python that takes an array of integer values and reverses the order of the values.\n[1, 2, 3, 4, 5] ", "label": "def reverse_array(arr):\n  return arr[::-1]  # Returns a slice of the list in reverse order", "predict": "def reverseArray(arr):\n    return arr[::-1]"}
{"prompt": "Write a function in Python to create a random string of 10 characters. ", "label": "import random\n\ndef generate_string(string_length):\n    random_characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n    random_string = ''.join(random.choices(random_characters, k=string_length))\n    return random_string\n\nprint(generate_string(10)) # Length: 10", "predict": "import random\nimport string\n\ndef random_string(string_length=10):\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(string_length))\n\nprint(random_string())"}
{"prompt": "Develop a Tic Tac Toe game in Python. ", "label": "# define the board\nboard = [\" \" for i in range(9)]\n\ndef print_board():\n    row1 = \"| {} | {} | {} |\".format(board[0], board[1], board[2])\n    row2 = \"| {} | {} | {} |\".format(board[3], board[4], board[5])\n    row3 = \"| {} | {} | {} |\".format(board[6], board[7], board[8])\n\n    print()\n    print(row1)\n    print(row2)\n    print(row3)\n    print()\n\n# define player turn\ndef player_turn(icon):\n\n    if icon == \"X\":\n        number = 1\n    elif icon == \"O\":\n        number = 2\n        \n    print(\"Your turn player {}\".format(number))\n    \n    choice = int(input(\"Enter your move (1-9): \").strip())\n    if board[choice -1] == \" \":\n        board[choice -1] = icon\n    else:\n        print()\n        print(\"That space is taken!\")\n\n# check win\ndef is_victory(icon):\n    if (board[0] == icon and board[1] == icon and board[2] == icon) or \\\n        (board[3] == icon and board[4] == icon and board[5] == icon) or \\\n        (board[6] == icon and board[7] == icon and board[8] == icon) or \\\n        (board[0] == icon and board[3] == icon and board[6] == icon) or \\\n        (board[1] == icon and board[4] == icon and board[7] == icon) or \\\n        (board[2] == icon and board[5] == icon and board[8] == icon) or \\\n        (board[0] == icon and board[4] == icon and board[8] == icon) or \\\n        (board[2] == icon and board[4] == icon and board[6] == icon):\n        return True\n    else:\n        return False\n        \n# define main function\ndef main():\n    print(\"Welcome to Tic Tac Toe!\")\n    print_board()\n    \n    while True:\n        player_turn(\"X\")\n        print_board()\n        if is_victory(\"X\"):\n            print(\"X Wins! Congratulations!\")\n            break\n        elif not \" \" in board:\n            print(\"It's a tie!\")\n            break\n\n        player_turn(\"O\")\n        print_board()\n        if is_victory(\"O\"):\n            print(\"O Wins! Congratulations!\")\n            break\n        elif not \" \" in board:\n            print(\"It's a tie!\")\n            break\n\n\nmain()", "predict": "import random\n\n# Create the board\nboard = [\"_\"] * 9\n\n# Print the board\ndef print_board():\n    for i in range(0, 9, 3):\n        print(board[i] + \"|\" + board[i+1] + \"|\" + board[i+2])\n        if (i!= 6):\n            print(\"- - -\")\n\n# Player's turn\ndef player_turn(player):\n    print(\"It's \" + player + \"'s turn\")\n    move = input(\"Where do you want to move? (1-9)\")\n    if move in [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]:\n        if board[int(move) - 1] == \"_\":\n            board[int(move) - 1] = player\n            print_board()\n    else:\n        print(\"Invalid move\")\n\n# Check if the game is over\ndef check_game_over():\n    # Check rows\n    for i in range(0, 9, 3):\n        if board[i] == board[i+1] == board[i+2]!= \"_\":\n            return board[i]\n    # Check columns\n    for i in range(3):\n        if board[i] == board[i+3] == board[i+6]!= \"_\":\n            return board[i]\n    # Check diagonals\n    if board[0] == board[4] == board[8]!= \"_\":\n        return board[0]\n    if board[2] == board[4] == board[6]!= \"_\":\n        return board[2]\n    # Game not over\n    return None\n\n# Main function\ndef main():\n    print(\"Welcome to Tic Tac Toe!\")\n    board = [\"_\"] * 9\n    player1 = input(\"Player 1, enter your name: \")\n    player2 = input(\"Player 2, enter your name: \")\n    turn = 0\n\n    while (turn < 9):\n        # Player 1's turn\n        if (turn % 2 == 0):\n            player_turn("}
{"prompt": "Write Python code to merge two sorted lists.\nLists A and B contain the elements [2,4,6] and [3,5,7] respectively. ", "label": "def merge_sorted_lists(listA, listB): \n    merged_list = []\n    ptrA = 0\n    ptrB = 0\n    while ptrA < len(listA) and ptrB < len(listB): \n        if listA[ptrA] <= listB[ptrB]: \n            merged_list.append(listA[ptrA]) \n            ptrA += 1\n        else: \n            merged_list.append(listB[ptrB]) \n            ptrB += 1\n    while ptrA < len(listA): \n        merged_list.append(listA[ptrA]) \n        ptrA += 1\n    while ptrB < len(listB):\n        merged_list.append(listB[ptrB])\n        ptrB += 1\n    return merged_list", "predict": "def merge_sorted_lists(list_a, list_b):\n    # create an empty list to store the merged list\n    merged_list = []\n\n    # loop through both lists\n    while list_a and list_b:\n        if list_a[0] < list_b[0]:\n            merged_list.append(list_a.pop(0))\n        else:\n            merged_list.append(list_b.pop(0))\n\n    # add the remaining elements of the lists to the merged list\n    merged_list.extend(list_a)\n    merged_list.extend(list_b)\n\n    return merged_list"}
{"prompt": "Create a Python program to find the longest common subsequence between two strings.\nstring 1 = \"ABACEDF\"\nstring 2 = \"ABDCF\" ", "label": "# Program to find the longest common subsequence between two strings \ndef lcs(X, Y): \n    # find the length of the strings \n    m = len(X) \n    n = len(Y) \n\n    # declaring the array for storing the dp values \n    L = [[None]*(n+1) for i in range(m+1)] \n\n    # Following steps to build L[m+1][n+1] in bottom up manner \n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0 or j == 0 : \n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]: \n                L[i][j] = L[i-1][j-1]+1\n            else: \n                L[i][j] = max(L[i-1][j] , L[i][j-1]) \n\n    # L[m][n] contains the length of LCS of X[0..n-1] & Y[0..m-1] \n    return L[m][n] \n\n# Driver program \nX = \"ABACEDF\"\nY = \"ABDCF\"\n\nprint(\"Length of LCS is \", lcs(X, Y))", "predict": "def longest_common_subsequence(s1, s2):\n m = len(s1)\n n = len(s2)\n dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n \n for i in range(m):\n for j in range(n):\n if s1[i] == s2[j]:\n dp[i + 1][j + 1] = dp[i][j] + 1\n else:\n dp[i + 1][j + 1] = max(dp[i + 1][j], dp[i][j + 1])\n \n i, j = m, n\n lcs = \"\"\n while i > 0 and j > 0:\n if s1[i - 1] == s2[j - 1]:\n lcs = s1[i - 1] + lcs\n i -= 1\n j -= 1\n else:\n if dp[i][j - 1] > dp[i - 1][j]:\n j -= 1\n else:\n i -= 1\n \n return lcs\n\ns1 = \"ABACEDF\"\ns2 = \"ABDCF\"\nprint(longest_common_subsequence(s1, s2))\n# Output: \"ABCDF\""}
{"prompt": "Construct a naive bayes classifier using python to classify emails as spam or not spam. ", "label": "from sklearn.naive_bayes import GaussianNB\n\n# Create a Gaussian Classifier\nmodel = GaussianNB()\n\n# Train the model using the training sets \nmodel.fit(X_train, y_train)\n\n# Predict Output \ny_pred = model.predict(X_test)", "predict": "import numpy as np\nfrom sklearn.naive_bayes import GaussianNB\n\n# Create a Gaussian Naive Bayes classifier\nclf = GaussianNB()\n\n# Train the model using the training sets\nclf.fit(X_train, y_train)\n\n# Predict the labels of the test set\ny_pred = clf.predict(X_test)\n\n# Calculate the accuracy of the model\naccuracy = np.mean(y_pred == y_test)\nprint('Accuracy:', accuracy)"}
{"prompt": "This code performs a series of calculations and plots based on input data. Before running the script, run eval_spectrum.py and calibration.py with appropriate measurements. The script imports necessary modules", "label": "#! /usr/bin/python2.7\n# -*- coding: utf-8 -*-\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nimport errorvalues as ev # github.com/stefantkeller/errorvalues\n\nfrom VECSELsetup.eval.varycolor import varycolor\nfrom VECSELsetup.eval.gen_functions import load, extract, plotinstructions_write, plotinstructions_read, lut_from_calibfolder, lut_interp_from_calibfolder, thermal_resistance\n\n\ndef main():\n    # before running this script:\n    #   run eval_spectrum.py to provide the .._eval.csv files required for the spectra\n    #   run calibration.py (with appropriate calib measurements)\n    # and don't forget temperature_heatsink (this is not necessary for this script here, but it provides interesting insights for the measurement at hand)\n    logfile = '../24_LL_ev/20150211_sample21-1-d6/spot333um.csv'\n    calib_folder = '../24_LL_ev/20150204_calib_333um_s21-1-d6'\n    \n    \n    #------------------------------------\n    # calibration\n    emis_lut = lut_from_calibfolder(calib_folder,identifiers=['Laser'],ignore_error=False) # emission has constant value solely due to BS, no ND in front of detector etc.\n    pump_lut, refl_lut = lut_interp_from_calibfolder(calib_folder,identifiers=['Pump','Refl'])\n    \n    \n    #------------------------------------\n    # load measurement\n    current_set, current, pump, refl, laser, spectra, meantemp = extract(logfile, identifiers=['Current','Pump','Refl','Laser','Spectra', 'Temperature'])\n    Temperatures = sorted(current_set.keys()) # set temperatures (round numbers like 15.0 or 22.5 etc)\n    T_out = dict((T,meantemp[T].round(1)) for T in Temperatures) # real temperatures for display in plot, including +-uncertainty\n\n\n    #------------------------------------\n    # calculate using calibration\n    absorbed, reflected, emitted, pumped, dissipated = {}, {}, {}, {}, {}\n    for T in Temperatures:\n        reflected[T] = refl_lut(refl[T])\n        pumped[T] = pump_lut(pump[T])\n        absorbed[T] = pumped[T] - reflected[T]\n        emitted[T] = emis_lut(laser[T])\n        dissipated[T] = absorbed[T] - emitted[T]\n\n        \n    #\n    #------------------------------------\n    # invoke instructions for plot and fit\n    # plotting the data can be tricky to reproduce, store the plot properties in a text file and read from there!\n    # (easy to repeat the plot at a later time)\n    # open the instruction file in a text editor, edit the instructions and run this module again; it will use the new instructions\n    instrfile = logfile[:-4]+'_instr.csv'\n    plotinstructions_write(instrfile,Temperatures,calib_folder)\n    \n    #------------------------------------\n    # retrieve instructions\n    instr = plotinstructions_read(instrfile)\n    \n    #\n    #------------------------------------\n    # translate instructions\n    str2lst = lambda s: map(float,s[1:-1].split(','))\n\n    textx = float(instr['textx']) # x coordinate for text; same for first two subplots (absorbed-emitted and absorbed-reflectivity)\n    fontsize = float(instr['fontsize'])\n    title = instr['title']\n    xlim = str2lst(instr['xlim']) # range of x-axis; same for first two subplots\n    ylim1 = str2lst(instr['ylim1']) # range of y-axis of first (aborbed-emitted", "predict": "and functions from those two files.\nimport os\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport math\nfrom scipy.interpolate import interp1d\nfrom calibration import *\nfrom eval_spectrum import *\n\n# Set the path to the calibration files\ncal_dir = os.path.dirname(os.path.realpath(__file__))\ncal_dir = os.path.join(cal_dir, 'calibration')\ncal_file = os.path.join(cal_dir, 'calibration.csv')\n\n# Set the path to the eval_spectrum files\neval_dir = os.path.dirname(os.path.realpath(__file__))\neval_dir = os.path.join(eval_dir, 'eval_spectrum')\neval_file = os.path.join(eval_dir, 'eval_spectrum.csv')\n\n# Load the calibration data\ncal_data = pd.read_csv(cal_file)\n\n# Load the eval_spectrum data\neval_data = pd.read_csv(eval_file)\n\n# Calculate the wavelengths\nwavelengths = eval_data['wavelength']\n\n# Calculate the corrected intensity values\nintensities = eval_data['intensity']\n\n# Calculate the intensity values in the 400-800 nm range\nintensities_400_800 = intensities[intensities >= 400] & intensities[intensities <= 800]\n\n# Calculate the mean intensity values\nmean_intensities = np.mean(intensities_400_800)\n\n# Calculate the standard deviation of the intensity values\nstd_intensities = np.std(intensities_400_800)\n\n# Calculate the corrected mean intensity values\ncorrected_mean_intensities = corrected_mean(intensities_400_800)\n\n# Calculate the corrected standard deviation of the intensity values\ncorrected_std_intensities = corrected_std(intensities_400_800)\n\n# Calculate"}
{"prompt": "How can you return two values from a Python function? ", "label": "There are multiple ways to return multiple values from a Python function. One way is to use a tuple inside the function and return it. Another way is to use Python's 'return' statement to return multiple values. For example:\n\ndef get_multi_values():\n    value1 = \"ABC\"\n    value2 = 123\n    return value1, value2\n\nvalue1, value2 = get_multi_values()\nprint(value1, value2)", "predict": "A Python function can return multiple values by using a tuple. For example, a function can return two values like this:\n\ndef get_values():\n  value1 = 10\n  value2 = 20\n  return value1, value2\n\nvalue1, value2 = get_values()\nprint(value1, value2)"}
{"prompt": "Generate a Python program to count the number of pairs with given sum x\nX = 10 ", "label": "def count_pairs(numbers, x):\n    count = 0\n    i, j = 0, len(numbers) - 1\n    while i < j: \n        sum = numbers[i] + numbers[j]\n        if sum == x: \n            count += 1\n            i += 1\n        elif sum < x: \n            i += 1 \n        else: \n            j -= 1\n    return count", "predict": "def count_pairs(arr, x):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == x:\n                count += 1\n    return count\n\narr = [2, 4, 6, 8, 10]\nx = 10\n\nprint(count_pairs(arr, x))"}
{"prompt": "Create a Celery task in Python to send an email.\nrecipient_name = 'John Smith'\nrecipient_email = 'john@example.com'\nsubject = 'Hello World'\nmessage = 'This is a test email.' ", "label": "from celery import Celery\nfrom flask_mail import Message\n\napp = Celery('tasks', backend='redis://localhost')\n\n@app.task\ndef send_email(recipient_name, recipient_email, subject, message):\n msg = Message(subject, sender='example@example.com', recipients=[recipient_email])\n msg.body = message\n mail.send(msg)", "predict": "from celery import Celery\nfrom flask_mail import Message\n\napp = Celery('tasks', backend='redis://localhost')\n\n@app.task\ndef send_email(recipient_name, recipient_email, subject, message):\n    msg = Message(subject, sender='sender@example.com', recipients=[recipient_email])\n    msg.body = message\n    mail.send(msg)"}
{"prompt": "Optimize the following python code using best practices\ndef linear_search(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1 ", "label": "def linear_search(arr, x):\n    for index, item in enumerate(arr):\n        if item == x:\n            return index\n    return -1", "predict": "def linear_search(arr, x):\n    \"\"\"\n    Searches for a given element in a given list\n    using linear search algorithm.\n\n    Parameters:\n    arr (list): The list in which to search\n    x (int): The element to search for\n\n    Returns:\n    int: The index of the element if found, -1 otherwise\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1"}
{"prompt": "Create a Python program to find the nth Fibonacci number ", "label": "def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==0: \n        return 0\n    elif n==1: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)", "predict": "def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \n  \n# Driver Program \nprint(Fibonacci(9))"}
{"prompt": "Write a Python program to identify the largest number in the given list.\n[1000, 506, 299, 620, 35] ", "label": "max_num = 0 \n\nfor num in lst : \n    if num > max_num : \n        max_num = num \n\nprint(max_num)", "predict": "def find_largest_number(list):\n    largest_number = list[0]\n    for number in list:\n        if number > largest_number:\n            largest_number = number\n    return largest_number\n\nlist = [1000, 506, 299, 620, 35]\nlargest_number = find_largest_number(list)\nprint(largest_number)"}
{"prompt": "Write a Python program to find a substring in a string. ", "label": "def find_substring(source, substring):\n    '''This function returns the start index of a substring in given string '''\n    if substring not in source:\n        return -1\n    i=0\n    while i < len(source):\n        if source[i] == substring[0]:\n            flag = True\n            for j in range(len(substring)):\n                if substring[j] != source[i+j]:\n                    flag = False\n                    break\n            if flag:\n                return i\n        i += 1\n    return -1", "predict": "def find_substring(string, substring):\n    if substring in string:\n        return True\n    else:\n        return False"}
{"prompt": "Given a list of numbers, create a Python script to print all the elements greater than 50.\n[2, 60, 5, 4, 78, 32, 99] ", "label": "nums = [2, 60, 5, 4, 78, 32, 99]\n\nfor num in nums:\n    if num > 50:\n        print(num)", "predict": "my_list = [2, 60, 5, 4, 78, 32, 99]\n\nfor num in my_list:\n    if num > 50:\n        print(num)"}
{"prompt": "Create a program in Python to sort a given array in ascending order using bubble sort.\n[3,7,4,1] ", "label": "def bubble_sort(arr): \n    n = len(arr) \n    for i in range(n-1):\n        for j in range(0, n-i-1): \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n\narr = [3,7,4,1]\nbubble_sort(arr) \nprint (\"Sorted array :\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),", "predict": "def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\narr = [3,7,4,1]\nresult = bubble_sort(arr)\nprint(result)"}
{"prompt": "Generate a function in Python that takes a number and prints its factors.\nNot applicable ", "label": "def print_factors(x):\n  \"\"\"\n  This function takes a number and prints its factors\n  \n  :param x: The number whose factors to be printed \n  :return: None\n  \"\"\"\n  \n  print(\"The factors of\",x,\"are:\")\n  for i in range(1, x + 1):\n    if x % i == 0:\n      print(i)\n      \n##\n5. Instruction: Generate a basic HTML form using JavaScript to submit a user's city and the submit the details to the server.\n5. Input: Not applicable\n5. Output: \n<form id=\"myForm\" onsubmit=\"submitForm(event)\">\n  City:<br>\n  <input type=\"text\" name=\"city\"><br>\n  <input type=\"submit\">\n</form>\n\n<script>\nfunction submitForm(event) {\n  event.preventDefault();\n\n  const form = document.getElementById('myForm');\n  const city = form.querySelector('input[name=\"city\"]').value;\n\n  const data = { city: city };\n\n  const options = {\n    method: 'POST',\n    body: JSON.stringify(data),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  fetch('/my-api/submit-form', options)\n    .then(response => response.json())\n    .then(data => {\n      console.log(data);\n    });\n}\n</script>", "predict": "def print_factors(num):\n for i in range(1, num + 1):\n  if num % i == 0:\n   print(i)\n\nprint_factors(12)"}
{"prompt": "Write a python script to generate an array of random numbers between two specified values.\nmin = 0\nmax = 50 ", "label": "import random\n\n# Generate an array of random numbers between two specified values\ndef generate_array(min, max):\n array = []\n \n for i in range(min, max):\n  array.append(random.randint(min, max))\n \n return array\n \nmin = 0\nmax = 50\nprint(generate_array(min, max))", "predict": "import random\n\nmin = 0\nmax = 50\n\narray_length = 10\n\narray = []\n\nfor i in range(array_length):\n array.append(random.randint(min, max))\n\nprint(array)"}
{"prompt": "Create a Python program to filter out words containing five characters or less from a list of words.\n[\"Hello\", \"Good\", \"Where\", \"Been\", \"World\", \"House\"] ", "label": "# Function to filter out words containing five characters or less\ndef filterWords(arr):\n    result = [word for word in arr if len(word) > 5]\n    return result\n\n# Get the input\narr = [\"Hello\", \"Good\", \"Where\", \"Been\", \"World\", \"House\"]\n\n# Call the function\nresult = filterWords(arr)\n\n# Print the result\nprint(\"Filtered list of words:\", result)", "predict": "words = [\"Hello\", \"Good\", \"Where\", \"Been\", \"World\", \"House\"]\n\nfiltered_words = [word for word in words if len(word) > 5]\n\nprint(filtered_words)\n# Output: [\"World\", \"House\"]"}
{"prompt": "Create a Python function to identify the number of even numbers present in a given list of numbers.\nlist = [1, 2, 3, 4, 5] ", "label": "def countEvenNum(list):\n    return len([x for x in list if x % 2 == 0])\n\nlist = [1, 2, 3, 4, 5]\nprint(countEvenNum(list))", "predict": "def count_even(list):\n    count = 0\n    for num in list:\n        if num % 2 == 0:\n            count += 1\n    return count"}
{"prompt": "Write a Python function to generate a random string of length 8 containing alphanumeric characters. ", "label": "import string\nimport random\n\ndef generate_random_string(length):\n chars = string.ascii_letters + string.digits\n return ''.join(random.choice(chars) for _ in range(length))", "predict": "import string\nimport random\n\ndef generate_random_string():\n    letters_and_digits = string.ascii_letters + string.digits\n    return ''.join(random.choice(letters_and_digits) for i in range(8))"}
{"prompt": "Write a Python program to solve a linear equation system of the form: ax + by = c.\na, b, c = 2, 1, 4 ", "label": "def solve_linear_equation_system(a, b, c):\n x = (c - b) / a\n y = (c - a*x) / b\n return x, y\n\nx, y = solve_linear_equation_system(a, b, c)\nprint(\"x = {}, y = {}\".format(x, y)) # x = 2.0, y = 2.0", "predict": "def solve_linear_equation(a, b, c):\n x = (c - b) / a\n y = (c - a*x) / b\n return x, y\n\nx, y = solve_linear_equation(2, 1, 4)\nprint(x, y) # 2.0, 2.0"}
{"prompt": "This code loads a JSON fixture file, extracts properties from it, creates Property objects from the properties, and saves them to the database. To use this code, you need to create a JSON fixture file with a \"properties\" key containing a list of property objects. Then, run the code with the appropriate command line arguments to specify the fixture file and folder. The saved objects will be printed to the console. ", "label": "#!/usr/bin/env python\n# coding: utf-8\n\nfrom __future__ import (\n    print_function,\n    unicode_literals,\n    absolute_import\n)\n\nimport argparse\nimport json\nimport os\n\n\ndef get_path():\n    return unicode(os.path.abspath('.'))\n\n\ndef parse_args():\n    _parser = argparse.ArgumentParser()\n    _parser.add_argument('--fixture', type=str, help='fixture file to load', default='properties.json')\n    _parser.add_argument('--fixture_folder', type=str,\n                         default='models/fixtures',\n                         help='where fixtures are stored.'\n                         )\n    return _parser.parse_args()\n\ndef main(base_path):\n    properties_to_save = []\n    args = parse_args()\n    path = os.path.sep.join([base_path,\n                             'app',\n                             args.fixture_folder,\n                             args.fixture])\n    with open(path) as file_:\n        data = json.load(file_)\n    properties = data['properties']\n    for property_ in properties:\n        property_.pop('id')\n        properties_to_save.append(Property(**property_))\n    Property.objects.insert(properties_to_save)\n\n    return len(properties_to_save)\n\n\nif __name__ == '__main__':\n    from app.models.properties import Property\n    base_path = get_path()\n    out = main(base_path)\n    print(\"{} objects saved\".format(out))", "predict": "#!/usr/bin/env python\n\nfrom __future__ import print_function\n\nimport argparse\nimport json\nimport os\n\nimport pymongo\n\n\ndef load_fixture(filename):\n    with open(filename, 'r') as f:\n        return json.load(f)\n\n\ndef save_object(collection, obj):\n    collection.insert_one(obj)\n    print(obj)\n\n\ndef main():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('fixture', help='The fixture file')\n    parser.add_argument('folder', help='The folder where the database is stored')\n    args = parser.parse_args()\n\n    client = pymongo.MongoClient()\n    db = client[os.path.basename(args.folder)]\n\n    properties = load_fixture(args.fixture)\n    properties_collection = db['properties']\n    for property in properties:\n        save_object(properties_collection, property)\n\n\nif __name__ == '__main__':\n    main()"}
{"prompt": "Create an algorithm in Python to determine the most efficient order of tasks from an array of given tasks.\ntasks = [Task1, Task2, Task3, Task4, Task5] ", "label": "def most_efficient_order(tasks):\n    \"\"\"\n    This method takes a list of tasks and produces the most efficient order for completing the tasks.\n\n    Parameters\n    ----------\n    tasks: List\n        A list of tasks to be performed.\n\n    Returns\n    -------\n    List\n        An ordered list of tasks representing the most efficient order for completing the tasks.\n    \"\"\"\n    tasks_to_complete = tasks.copy()\n    order = [] \n    while tasks_to_complete:\n        min_time = float(\"inf\")\n        task_index = None\n        for i, task in enumerate(tasks_to_complete):\n            if task.get_time() < min_time:\n                min_time = task.get_time()\n                task_index = i\n        order.append(tasks_to_complete.pop(task_index))\n    return order", "predict": "def most_efficient_order(tasks):\n    # Sort the tasks by their execution time\n    tasks.sort(key=lambda x: x.execution_time)\n    \n    # Initialize the result list\n    result = []\n    \n    # Iterate over the tasks\n    for task in tasks:\n        # Check if any other task is dependent on this task\n        is_dependent = False\n        for dependent_task in result:\n            if dependent_task.depends_on(task):\n                is_dependent = True\n                break\n        # If this task is not dependent on any other task, add it to the result list\n        if not is_dependent:\n            result.append(task)\n            \n    return result"}
{"prompt": "Optimize a given Python script that reverse a string.\ndef reverse_string(string):\n    reversed_string = \"\"\n    for char in string:\n        reversed_string = char + reversed_string\n    return reversed_string ", "label": "def reverse_string(string):\n    return string[::-1]", "predict": "def reverse_string(string):\n    return string[::-1]"}
{"prompt": "Create an HTML form with a submit button to send information to a Python program. ", "label": "<form action=\"action.py\" method=\"post\">\n    <input type=\"submit\" value=\"Submit\">\n</form>", "predict": "<form action=\"python_program.py\" method=\"post\">\n    <input type=\"submit\" value=\"Submit\">\n</form>"}
{"prompt": "Generate a Python script that contains a function with two parameters and returns the sum of the two parameters.\nNot applicable ", "label": "def add(x, y): \n \"\"\"Returns the sum of x and y\"\"\"\n return x + y", "predict": "def add_two_numbers(a, b):\n return a + b\n\nprint(add_two_numbers(3, 4))"}
{"prompt": "Create a Python program to read an array of integers and calculate their sum.\n[1, 3, 5, 7] ", "label": "def calculate_sum(arr):\n  sum = 0\n\n  for i in arr:\n    sum += i\n\n  return sum\n\ninput_array = [1, 3, 5, 7]\n\nresult = calculate_sum(input_array)\n\nprint(result) # prints 16", "predict": "def calculate_sum(arr):\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum\n\narr = [1, 3, 5, 7]\nsum = calculate_sum(arr)\nprint(sum)"}
{"prompt": "Create a Python program that multiplies two input numbers and prints the result.\na = 3\nb = 4 ", "label": "def multiply(a, b):\n    result = a * b\n    print(result)\n\nmultiply(a, b)", "predict": "def multiply(a, b):\n    result = a * b\n    print(result)\n\nmultiply(3, 4)"}
{"prompt": "The code is a Python class called FileSystem that provides methods for saving, deleting, and finding task data. To use this class, import it and create an instance with a parameter dictionary that includes a 'taskDir' key specifying the directory where task data should be stored. Then call the methods on the instance as needed:\n\n- To save task data, call the save_task method with a dictionary containing the data. If the dictionary does not already include an 'id' key, one will be generated and added to the dictionary. The task data will be stored in a file in a subdirectory of the taskDir directory named after the task ID.\n- To delete task data, call the delete_task method with the ID of the task to delete. This will remove the subdirectory containing the task data.\n- To find task data by ID, call the find_by_id method with the ID of the task to find. This will return the task data as a dictionary.\n- To find task data for multiple IDs, call the find_by_ids method with a list of IDs. This will return a list of task data dictionaries.\n- To find all task data, call the all_", "label": "import os\nimport json\nimport logging\nimport fcntl\n\nfrom jsub.util  import safe_mkdir\nfrom jsub.util  import safe_rmdir\nfrom jsub.error import RepoReadError\nfrom jsub.error import TaskNotFoundError\n\nID_FILENAME = 'id'\n\nclass FileSystem(object):\n\tdef __init__(self, param):\n\t\tself.__jsub_dir = os.path.expanduser(param.get('taskDir', '~/jsub/'))\n#\t\tself.__id_file  = os.path.join(self.__jsub_dir, ID_FILENAME)\n\n\t\tself.__logger = logging.getLogger('JSUB')\n\n#\t\tself.__create_repo_dir()\n\n\t\tself.__json_format = param.get('format', 'compact')\n\n\tdef save_task(self, data):\n\t\tif 'id' not in data:\n\t\t\tsafe_mkdir(self.__jsub_dir)\n\t\t\tdata['id'] = self.__new_task_id()\n\t\tsafe_mkdir(os.path.join(self.__jsub_dir,str(data['id']),'taskInfo'))\n\t\ttask_path = os.path.join(self.__jsub_dir, str(data['id']),'taskInfo','repo')\n\n\t\tdata_str = self.__json_str(data)\n\t\twith open(task_path, 'a+') as f:\n\t\t\tfcntl.flock(f, fcntl.LOCK_EX)\n\t\t\tf.seek(0)\n\t\t\tf.truncate()\n\t\t\tf.write(data_str)\n\n\tdef delete_task(self, task_id):\n\t\tsafe_rmdir(os.path.join(self.__jsub_dir,str(task_id)))\n\n\tdef find_by_id(self, task_id):\n\t\treturn self.task_data(task_id)\n\n\tdef find_by_ids(self, task_ids):\n\t\tall_data = []\n\t\tfor task_id in task_ids:\n\t\t\ttry:\n\t\t\t\ttd = self.task_data(task_id)\n\t\t\t\tall_data.append(td)\n\t\t\texcept RepoReadError as e:\n\t\t\t\tself.__logger.debug(e)\n\t\treturn all_data\n\n\tdef all_task_data(self, order='asc'):\n\t\ttask_ids =[d for d in os.listdir(self.__jsub_dir) if os.path.isdir(os.path.join(self.__jsub_dir,d))]\n\t\ttask_ids.sort(key=int, reverse=(order=='desc'))\n\t\treturn self.find_by_ids(task_ids)\n\n\tdef task_data(self, task_id):\n\t\tsafe_mkdir(os.path.join(self.__jsub_dir,str(task_id),'taskInfo'))\n\t\ttask_path = os.path.join(self.__jsub_dir,str(task_id),'taskInfo','repo')\n\t\twith open(task_path, '", "predict": "tasks method. This will return a list of all task data dictionaries."}
{"prompt": "Create a visualization in Python using Matplotlib that displays the top 5 most popular programming languages.\nx_values = [\"Python\", \"Java\", \"C++\", \"Javascript\", \"C#\"]\ny_values = [45, 25, 15, 10, 5] ", "label": "import matplotlib.pyplot as plt\n\nx_values = [\"Python\", \"Java\", \"C++\", \"Javascript\", \"C#\"]\ny_values = [45, 25, 15, 10, 5]\n\nplt.bar(x_values, y_values)\n\nplt.title(\"Popular Programming Languages\")\nplt.ylabel(\"Percentage of Use\")\nplt.xlabel(\"Languages\")\n\nplt.show()", "predict": "import matplotlib.pyplot as plt\n\nx_values = [\"Python\", \"Java\", \"C++\", \"Javascript\", \"C#\"]\ny_values = [45, 25, 15, 10, 5]\n\n# create a plot\nplt.bar(x_values, y_values)\n\n# add a title\nplt.title(\"Top 5 Most Popular Programming Languages\")\n\n# add x and y axis labels\nplt.xlabel(\"Programming Language\")\nplt.ylabel(\"Popularity\")\n\n# add a legend\nplt.legend()\n\n# show the plot\nplt.show()"}
{"prompt": "Generate a single Python line to create a list that contains elements from another list.\ngiven_list = [1, 2, 3, 4, 5] ", "label": "new_list = [element for element in given_list]", "predict": "new_list = [element for element in given_list]"}
{"prompt": "Write a Python function to find the maximum of three numbers.\n3, 4, 5 ", "label": "def max_of_three(a, b, c):\n    if a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    else:\n        return c\n\nresult = max_of_three(3, 4, 5)\nprint(result)", "predict": "def find_max(x, y, z):\n    max_num = x\n    if y > max_num:\n        max_num = y\n    if z > max_num:\n        max_num = z\n    return max_num\n\nmax_num = find_max(3, 4, 5)\nprint(max_num)"}
{"prompt": "Write a Python program to scrape the table at the following URL and extract the planets information (name, mass, and distance from the sun).\nURL: https://en.wikipedia.org/wiki/List_of_gravitationally_rounded_objects_of_the_Solar_System ", "label": "import requests\nfrom bs4 import BeautifulSoup\n\npage = requests.get('https://en.wikipedia.org/wiki/List_of_gravitationally_rounded_objects_of_the_Solar_System')\nsoup = BeautifulSoup(page.content, 'lxml')\n\nplanets_table = soup.find('table', class_='wikitable sortable')\n\nplanets = []\nfor row in planets_table.find_all('tr'):\n if row.find('th'):\n continue\n cells = row.find_all('td')\n planets.append({\n 'name': cells[0].text,\n 'mass': cells[2].text,\n 'distance_from_sun': cells[5].text\n })\n\nprint(planets)", "predict": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://en.wikipedia.org/wiki/List_of_gravitationally_rounded_objects_of_the_Solar_System'\n\nr = requests.get(url)\nsoup = BeautifulSoup(r.text, 'html.parser')\n\nplanets_table = soup.find('table', {'class': 'wikitable sortable'})\n\nplanets = []\nfor row in planets_table.find_all('tr'):\n    cells = row.find_all('td')\n    planet = {\n        'name': cells[0].text,\n       'mass': cells[1].text,\n        'distance_from_sun': cells[2].text\n    }\n    planets.append(planet)\n\nprint(planets)"}
{"prompt": "Create a Python dictionary to store data about a student. ", "label": "student_data = {\n    'name': 'John Smith',\n    'year': 'Freshman',\n    'gpa': 3.25,\n    'courses': ['math', 'english', 'Computer Science', 'Statistics'],\n    'extracurricular': ['Chess Club', 'Student Government', 'Debate Team']\n}", "predict": "student = {\n    'name': '',\n    'age': 0,\n    'courses': [],\n    'grade': 0.0\n}"}
{"prompt": "Write a function in Python to remove duplicate entries from a list.\n[1,2,2,3,3,4] ", "label": "def removeDuplicates(input): \n    final_list = [] \n    for num in input: \n        if num not in final_list: \n            final_list.append(num) \n    return final_list \n\nlst = [1,2,2,3,3,4]\nprint(removeDuplicates(lst))", "predict": "def remove_duplicates(lst):\n  new_list = []\n  for item in lst:\n    if item not in new_list:\n      new_list.append(item)\n  return new_list\n\nresult = remove_duplicates([1,2,2,3,3,4])\nprint(result)"}
{"prompt": "Given the following array of numbers, write a Python program to find the maximum element.\nnumbers = [1, 43, 78, 3, 92, 42] ", "label": "#import max from the built-in library\nfrom max import max\n\n#initialize array of numbers\nnumbers = [1, 43, 78, 3, 92, 42]\n\n#find maximum element\nprint(max(numbers))\n\n#output\n92", "predict": "def find_max(numbers):\n    max_element = numbers[0]\n    for number in numbers:\n        if number > max_element:\n            max_element = number\n    return max_element\n\nmax_element = find_max(numbers)\nprint(max_element)"}
{"prompt": "Create a Python program to compress a given data sequence.\nData sequence: 9, -2, 6, 0, -7 ", "label": "def compress_sequence(nums):\n    output = []\n    temp = []\n\n    for i in range(1, len(nums)):\n        if nums[i-1] * nums[i] >= 0:\n            temp.append(nums[i-1])\n        else:\n            temp.append(nums[i-1])\n            output.append(temp)\n            temp = []\n    temp.append(nums[i])\n    output.append(temp)\n\n    return output\n\nprint(compress_sequence([9, -2, 6, 0, -7]))", "predict": "def compress_sequence(sequence):\n    result = []\n    current = 0\n    count = 1\n\n    for i in range(1, len(sequence)):\n        if sequence[i] == sequence[i - 1]:\n            count += 1\n        else:\n            result.append(sequence[current])\n            result.append(count)\n            current = i\n            count = 1\n    result.append(sequence[current])\n    result.append(count)\n\n    return result\n\nresult = compress_sequence([9, -2, 6, 0, -7])\nprint(result)"}
{"prompt": "Write a function in python to split an given array into two parts with equal sum.\n[1, 2, 3, 4] ", "label": "def split_equal_sum(arr):\n    n = len(arr) \n    leftsum = 0\n    rightsum = sum(arr)\n    \n    for i in range(n): \n        rightsum -= arr[i]\n        if leftsum == rightsum:\n            return True \n        leftsum += arr[i] \n    return False", "predict": "def split_array(arr):\n    n = len(arr)\n    total_sum = sum(arr)\n\n    # Create a dictionary to store the partial sums\n    partial_sums = {}\n    partial_sums[0] = 0\n\n    # Iterate through the array\n    for i in range(n):\n        # Compute the partial sum\n        partial_sum = partial_sums[i] + arr[i]\n        # Compute the required partial sum for the other part\n        other_part_sum = total_sum - partial_sum\n\n        # Check if the required partial sum is in the dictionary\n        if other_part_sum in partial_sums:\n            # Return the two parts\n            return partial_sums[other_part_sum], partial_sums[other_part_sum]\n\n        # Add the current partial sum to the dictionary\n        partial_sums[i+1] = partial_sum\n\n# Driver code\narr = [1, 2, 3, 4]\nresult = split_array(arr)\nprint(result)"}
{"prompt": "Create a for loop in Python to calculate the total sum of all elements in the given list.\ndata = [1, 9, 3, 5] ", "label": "total = 0\nfor element in data:\n    total = total + element\nprint(total)", "predict": "total = 0\nfor num in data:\n    total += num\nprint(total)"}
{"prompt": "Suppose you want to build an autocomplete feature for a text editor, develop a Python program to generate a list of suggestions based on a given prefix.\ndictionnary = [ \"dog\", \"deer\", \"deal\", \"dungeon\", \"dark\", \"dusk\" ]\nprefix = \"d\" ", "label": "def auto_complete(dictionary, prefix):\n    # list for words with the given prefix\n    prefix_words = []\n\n    # iterate through the dictionary\n    for word in dictionary:\n        # if the word starts with given prefix, \n        # add it to the list\n        if word.startswith(prefix):\n            prefix_words.append(word)\n\n    return prefix_words\n\n\ndictionary = [\"dog\", \"deer\", \"deal\", \"dungeon\", \"dark\", \"dusk\"]\nprefix = \"d\"\n\nprefix_words = auto_complete(dictionary, prefix)\nprint(prefix_words)\n\n# Output:\n# ['dog', 'deer', 'deal', 'dungeon', 'dark', 'dusk']", "predict": "def autocomplete(dictionary, prefix):\n    suggestions = []\n    for word in dictionary:\n        if word.startswith(prefix):\n            suggestions.append(word)\n    return suggestions\n\ndictionnary = [\"dog\", \"deer\", \"deal\", \"dungeon\", \"dark\", \"dusk\"]\nprefix = \"d\"\n\nsuggestions = autocomplete(dictionnary, prefix)\nprint(suggestions)"}
{"prompt": "Design a neural network in Python to predict a customer’s annual income based on their age and education level.\nNot applicable ", "label": "import numpy as np\nimport keras \nfrom keras.layers import Dense\nfrom keras.models import Sequential\n\n# Build model\nmodel = Sequential()\nmodel.add(Dense(64, input_dim = 2, activation = 'relu'))\nmodel.add(Dense( 1))\n\n# Compile the model\nmodel.compile(loss = 'mean_squared_error',\n              optimizer = 'adam')\n\n# Obtain some data - age (years), education level (high school, college, university)\nx_train = np.array([[25, 0], [30, 0], [35, 0], \n\t\t    [40, 0], [45, 1], [45, 2],\n\t\t    [50, 1], [50, 2], [55, 1],\n\t\t    [55, 2], [50, 3], [60, 3]])\n\n# Labels - annual income\ny_train = [15000, 20000, 25000, 30000,\n           40000, 45000, 50000, 60000, \n\t   65000, 70000, 80000, 90000]\n\n# Fit the model\nmodel.fit(x_train, y_train, epochs = 150, batch_size = 2)\n\n# Calculate the predicted annual income\nage = 50\neducation = 3\nannualIncome = model.predict(np.array([[age, education]]))\nprint(annualIncome)\n# output: [[80000]]", "predict": "import tensorflow as tf\n\n# Input layers\ninputs = tf.keras.Input(shape=(2,))\n\n# Hidden layers\nx = tf.keras.layers.Dense(64, activation='relu')(inputs)\nx = tf.keras.layers.Dense(64, activation='relu')(x)\n\n# Output layer\noutputs = tf.keras.layers.Dense(1)(x)\n\n# Build the model\nmodel = tf.keras.Model(inputs=inputs, outputs=outputs)\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='mean_squared_error',\n              metrics=['mae'])\n\n# Train the model\nmodel.fit(x_train, y_train, epochs=10, batch_size=32)\n\n# Evaluate the model\nmodel.evaluate(x_test, y_test)"}
{"prompt": "Create a python program to classify text documents into two classes: positive and negative.\npositiveText = \"This is a great movie!\"\nnegativeText = \"This movie was terrible\" ", "label": "import nltk\nfrom nltk.classify import NaiveBayesClassifier \n  \ndef label_words(words): \n    return dict([(word, True) for word in words]) \n\npositive_tokens = nltk.word_tokenize(positiveText) \nnegative_tokens = nltk.word_tokenize(negativeText)\n\npositive_data = [(label_words(positive_tokens), 'positive')] \nnegative_data = [(label_words(negative_tokens), 'negative')]\n \ntrain_data = positive_data + negative_data \nclassifier = NaiveBayesClassifier.train(train_data) \n  \n# classify \nclassifier.classify( \n\tlabel_words(nltk.word_tokenize(\"This movie was ok\")))", "predict": "import nltk\nfrom nltk.classify import NaiveBayesClassifier\n\npositiveText = \"This is a great movie!\"\nnegativeText = \"This movie was terrible\"\n\n# Train the Naive Bayes classifier\npos_features = nltk.word_tokenize(positiveText)\nneg_features = nltk.word_tokenize(negativeText)\n\ntraining_set = [(pos_features, 'positive'), (neg_features, 'negative')]\n\nclassifier = NaiveBayesClassifier.train(training_set)\n\n# Test the classifier\ntest_text = \"This movie was really boring\"\ntest_features = nltk.word_tokenize(test_text)\n\nprediction = classifier.classify(test_features)\n\nprint(\"The prediction is: \" + prediction)"}
{"prompt": "Design a Python program to filter out the odd numbers from a list.\nlist1 = [1, 2, 3, 4, 5, 6] ", "label": "def filter_odd_numbers(numbers):\n    filtered_list = []\n    for num in numbers:\n        if num % 2 != 0:\n            filtered_list.append(num)\n    return filtered_list\n\nlist1 = [1,2,3,4,5,6]\nfiltered_list = filter_odd_numbers(list1)\nprint(filtered_list)  # [1, 3, 5]", "predict": "def filter_odd(list1):\n    return [x for x in list1 if x % 2!= 0]"}
{"prompt": "Write a Python script to refresh a given table of data in a PostgreSQL database every 5 minutes.\nNot applicable ", "label": "import psycopg2\nfrom datetime import datetime, timedelta\nimport schedule\nimport time\n\nconn = psycopg2.connect(\n host=\"localhost\", \n database=\"db\", \n user=\"user\", \n password=\"password\"\n)\n\ndef refresh_data():\n cur = conn.cursor()\n query = 'REFRESH TABLE \"TableName\";'\n cur.execute(query)\n conn.commit()\n\n# run the refresh_data job every 5 minutes\nschedule.every(5).minutes.do(refresh_data)\n\nwhile True:\n schedule.run_pending()\n time.sleep(1)", "predict": "import psycopg2\nimport time\n\n# Connect to the PostgreSQL database\nconn = psycopg2.connect(\n host=\"localhost\",\n database=\"mydatabase\",\n user=\"myuser\",\n password=\"mypassword\"\n)\n\n# Get a cursor\ncur = conn.cursor()\n\n# Execute the query\ncur.execute(\"REFRESH TABLE mytable\")\n\n# Commit the changes\nconn.commit()\n\n# Wait for 5 minutes\ntime.sleep(300)\n\n# Repeat the process\nwhile True:\n cur.execute(\"REFRESH TABLE mytable\")\n conn.commit()\n time.sleep(300)"}
{"prompt": "Make the following Python code snippet more efficient.\ndef determine_commission_rate(gross_sales):\n    if gross_sales >= 10000:\n        commission_rate = 0.1\n    elif gross_sales >= 5000 and gross_sales < 10000:\n        commission_rate = 0.07\n    elif gross_sales < 5000:\n        commission_rate = 0.05\n    return commission_rate ", "label": "def determine_commission_rate(gross_sales):\n    if gross_sales >= 10000:\n        return 0.1\n    elif gross_sales >= 5000:\n        return 0.07\n    else:\n        return 0.05", "predict": "def determine_commission_rate(gross_sales):\n    if gross_sales >= 10000:\n        return 0.1\n    elif gross_sales >= 5000:\n        return 0.07\n    else:\n        return 0.05"}
{"prompt": "Construct a Python program that computes the area of a circle with the given radius.\nradius = 5 ", "label": "import math\n\ndef area_circle(radius):\n return math.pi * (radius ** 2)\n\narea = area_circle(radius)\nprint('The area of the circle is %.2f' % area)", "predict": "import math\n\ndef area_of_circle(radius):\n    area = math.pi * (radius ** 2)\n    return area\n\nif __name__ == '__main__':\n    radius = 5\n    area = area_of_circle(radius)\n    print(area)"}
{"prompt": "Implement a basic version control system in Python that keeps track of changes in the code. ", "label": "class VersionControl:\n    def __init__(self, lines):\n        self.lines = lines\n        self.mark = 0\n \n    def commit(self):\n        self.mark += 1\n        log_file = open(\"log_file.txt\", \"a+\")\n        log_file.write(str(self.mark) + \": \" + str(self.lines))\n        log_file.close()\n \n    def restore(self):\n        log_file = open(\"log_file.txt\", \"r\")\n        lines = log_file.readlines()\n        to_mark = self.mark-1\n \n        self.lines = lines[to_mark]\n        log_file.close()", "predict": "class VersionControl:\n    def __init__(self):\n        self.changes = []\n\n    def save_changes(self, changes):\n        self.changes.append(changes)\n\n    def revert_changes(self, changes):\n        self.changes.pop(changes)\n\n    def show_changes(self):\n        for change in self.changes:\n            print(change)"}
{"prompt": "Write a Python program to solve the Towers of Hanoi game.\nstarting = [(1, \"A\"), (4, \"A\"), (7, \"A\"), (2, \"A\"), (5, \"A\"), (8, \"A\"), (3, \"A\"), (6, \"A\")] ", "label": "def hanoi(n, source, spare, target):\n    if n == 1:\n        disk = source.pop(0)\n        print(\"Moving disk {0} from {1} to {2}\".format(disk[0], disk[1], target[1]))\n        target.insert(0, disk)\n    else:\n        hanoi(n-1, source, target, spare)\n        disk = source.pop(0)\n        print(\"Moving disk {0} from {1} to {2}\".format(disk[0], disk[1], target[1]))\n        target.insert(0, disk)\n        hanoi(n-1, spare, source, target)\n\nn = 8\nsource = [(i, \"A\") for i in range(1, n+1)]\ntarget = []\nspare = []\n\nhanoi(n, source, spare, target)", "predict": "def hanoi(disc, start, temp, end):\n    if disc > 0:\n        hanoi(disc - 1, start, end, temp)\n        end.append(start.pop())\n        hanoi(disc - 1, temp, start, end)\n\nhanoi(len(starting), starting, [], [])\nprint(ending)"}
{"prompt": "Analyze a dataset of customers and create a classification model in scikit-learn to determine customer churn.\nNot applicable ", "label": "# Python code\nimport pandas as pd\nimport numpy as np\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\n\n# Load the data set\ndata = pd.read_csv(\"customer_data.csv\")\n\n# Select features\nX = data.drop(['churn'], axis=1)\n\n# Select targets\ny = data['churn']\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Create the model\nmodel = RandomForestClassifier()\n\n# Train the model\nmodel.fit(X_train, y_train)\n\n# Make predictions and measure accuracy\npredictions = model.predict(X_test)\nprint(model.score(X_test, y_test))", "predict": "import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Read in the dataset\ndata = pd.read_csv('customer_data.csv')\n\n# Split the data into training and testing sets\nX = data.drop('churn', axis=1)\ny = data['churn']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train the model\nmodel = RandomForestClassifier(n_estimators=100, random_state=42)\nmodel.fit(X_train, y_train)\n\n# Make predictions\ny_pred = model.predict(X_test)\n\n# Evaluate the model\nfrom sklearn.metrics import accuracy_score\nprint(accuracy_score(y_test, y_pred))"}
{"prompt": "Create a Django application with a model that stores the name, address, and email of a user. ", "label": "# create Django app\ndjango-admin startproject myapp\n\n# create user model\nfrom django.db import models\n\nclass User(models.Model): \n    name = models.CharField(max_length=100) \n    address = models.CharField(max_length=100)\n    email = models.EmailField(max_length=100)\n\n# migrate models\npython manage.py makemigrations\npython manage.py migrate", "predict": "# Create a Django application\ndjango-admin startproject myproject\n\n# Create a model in models.py\nclass User(models.Model):\n    name = models.CharField(max_length=100)\n    address = models.CharField(max_length=100)\n    email = models.EmailField()\n\n# Migrate the model\npython manage.py makemigrations\npython manage.py migrate"}
{"prompt": "Create a function in Python to convert a given number into its Roman form.\nnumber = 15 ", "label": "def int_to_Roman(number): \n  \n    val = [ \n        1000, 900, 500, 400, \n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ] \n    syb = [ \n        \"M\", \"CM\", \"D\", \"CD\", \n        \"C\", \"XC\", \"L\", \"XL\", \n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ] \n    roman_num = '' \n    i = 0\n    while  number > 0:\n        for_val = number // val[i]\n        roman_num += syb[i] * for_val\n        number -= val[i] * for_val\n        i += 1\n    return roman_num", "predict": "def int_to_roman(number):\n    values = [1000, 500, 100, 50, 10, 5, 1]\n    symbols = ['M', 'D', 'C', 'L', 'X', 'V', 'I']\n    roman_number = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // values[i]):\n            roman_number += symbols[i]\n            number -= values[i]\n        i += 1\n    return roman_number\n\nprint(int_to_roman(number))"}
{"prompt": "Create a linked-list in Python that can traverse in both directions. ", "label": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n        self.prev = None\n\n\nclass DoubleLinkedList:\n    def __init__(self): \n        self.head = None\n \n    def append(self, new_data): \n        new_node = Node(new_data) \n        if self.head is None:\n            self.head =  new_node\n        else: \n            curr_node = self.head\n            while curr_node.next != None:\n                curr_node = curr_node.next\n            curr_node.next = new_node\n            new_node.prev = curr_node\n \n    def prepend(self, new_data):\n        new_node = Node(new_data) \n        if self.head is None: \n            self.head = new_node\n            return\n        new_node.next = self.head\n        self.head.prev = new_node \n        self.head = new_node\n\n    def reverse(self):\n        curr_node = self.head\n        while curr_node:\n            temp = curr_node.next\n            curr_node.next = curr_node.prev\n            curr_node.prev = temp\n            curr_node = curr_node.prev\n        if temp:\n            self.head = temp.prev", "predict": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n        self.prev = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n        self.tail = None\n\n    def append(self, data):\n        node = Node(data)\n        if self.tail is not None:\n            self.tail.next = node\n            node.prev = self.tail\n            self.tail = node\n        else:\n            self.head = node\n            self.tail = node\n\n    def prepend(self, data):\n        node = Node(data)\n        if self.head is not None:\n            self.head.prev = node\n            node.next = self.head\n            self.head = node\n        else:\n            self.tail = node\n            self.head = node\n\n    def traverse_forward(self):\n        node = self.head\n        while node is not None:\n            print(node.data)\n            node = node.next\n\n    def traverse_backward(self):\n        node = self.tail\n        while node is not None:\n            print(node.data)\n            node = node.prev"}
{"prompt": "Program a python code to convert Celsius to Fahrenheit. ", "label": "def celsiusToFahrenheit(temp):\n    return round((temp * 9/5) + 32, 2)", "predict": "def celsius_to_fahrenheit(celsius):\n    return (celsius * 9/5) + 32"}
{"prompt": "Create a machine learning algorithm in Python to categorize a dataset of records.\n[\n  {\"label\": \"apple\", \"features\": [1, 1, 0]}, \n  {\"label\": \"banana\", \"features\": [0, 1, 1]}, \n  {\"label\": \"lemon\", \"features\": [0, 0, 1]}, \n  {\"label\": \"orange\", \"features\": [1, 0, 0]}, \n  {\"label\": \"pear\", \"features\": [0, 1, 0]}, \n] ", "label": "import numpy as np\nfrom sklearn.svm import SVC \n\n# Dataset \ntraining_data = [\n {\"label\": \"apple\", \"features\": [1, 1, 0]}, \n {\"label\": \"banana\", \"features\": [0, 1, 1]}, \n {\"label\": \"lemon\", \"features\": [0, 0, 1]}, \n {\"label\": \"orange\", \"features\": [1, 0, 0]}, \n {\"label\": \"pear\", \"features\": [0, 1, 0]}, \n]\n\n# Feature extraction \nX = []\ny = []\nfor data in training_data:\n X.append(data['features'])\n y.append(data['label'])\n\n# Model \nclf = SVC()\nclf.fit(X, y) \n\n# Prediction \npredict_data = [1, 0, 1]\npredicted_label = clf.predict([predict_data])\n\nprint(predicted_label[0])", "predict": "import pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\n\n# Create the dataframe\ndata = [\n  {\"label\": \"apple\", \"features\": [1, 1, 0]}, \n  {\"label\": \"banana\", \"features\": [0, 1, 1]}, \n  {\"label\": \"lemon\", \"features\": [0, 0, 1]}, \n  {\"label\": \"orange\", \"features\": [1, 0, 0]}, \n  {\"label\": \"pear\", \"features\": [0, 1, 0]}, \n]\n\ndf = pd.DataFrame(data)\n\n# Create the features and labels\nX = df[['features']]\ny = df['label']\n\n# Create the decision tree classifier\nclf = DecisionTreeClassifier()\nclf.fit(X, y)\n\n# Make predictions\npredictions = clf.predict(X)\n\n# Check the accuracy\naccuracy = clf.score(X, y)\nprint(accuracy)"}
{"prompt": "Create an application in Python for encryption and decryption of strings. The application should take a string as input, and use a cipher text algorithm of choice to encrypt the string.\nNot applicable ", "label": "from Crypto.Cipher import AES\n\nkey = b'Sixteen byte key'\n\ndef encrypt(plaintext):\n    cipher = AES.new(key, AES.MODE_ECB)\n    return cipher.encrypt(plaintext)\n\ndef decrypt(ciphertext):\n    cipher = AES.new(key, AES.MODE_ECB)\n    return cipher.decrypt(ciphertext)", "predict": "from cryptography.fernet import Fernet\n\n# Generate a fernet key\nkey = Fernet.generate_key()\n\n# Create a fernet instance\nf = Fernet(key)\n\n# Encrypt a message\nmessage = 'This is a secret message'\nencrypted_message = f.encrypt(message.encode())\n\n# Decrypt the message\ndecrypted_message = f.decrypt(encrypted_message)\n\n# Print the messages\nprint(message)\nprint(decrypted_message)"}
{"prompt": "Suggest a valid Python syntax to calculate the sum of two variables using lambda\na = 3, b = 4 ", "label": "sum = lambda a, b : a + b\nprint(sum(3,4))", "predict": "sum = lambda a, b: a + b\nprint(sum(3, 4))"}
{"prompt": "Generate code for a Machine Learning model in Python which can recognize handwritten digits from 0 to 9\nNot applicable ", "label": "# Importing necessary libraries\n\nimport numpy as np\nimport pandas as pd\nfrom tensorflow.keras.datasets import mnist\nfrom tensorflow.keras.layers import Dense, Input, Dropout\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.utils import to_categorical\n\n# Loading data\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n\n# Defining the neural network model\n\n# Input layer\ninputs = Input(shape=(28,28,))\n\n# Hidden layer\nh1 = Dense(64, activation='relu')(inputs)\nh2 = Dropout(0.5)(h1)\n\n# Output layer\noutputs = Dense(10, activation='softmax')(h2)\n\n# Compiling the model\nmodel = Model(inputs=inputs, outputs=outputs)\nmodel.compile(loss='categorical_crossentropy',\n optimizer='adam',\n metrics=['accuracy'])\n\n# Data pre-processing\n\n# Reshape inputs from (60000, 28, 28) to (60000, 784)\nX_train = X_train.reshape(60000, 784)\nX_test = X_test.reshape(10000, 784)\n\n# Normalize pixel values\nX_train = X_train.astype('float32')\nX_train /= 255\nX_test = X_test.astype('float32')\nX_test /= 255\n\n# One-hot encode labels\ny_train = to_categorical(y_train, num_classes=10)\ny_test = to_categorical(y_test, num_classes=10)\n\n# Fitting the model\nmodel.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=5, batch_size=128)", "predict": "import numpy as np\nimport matplotlib.pyplot as plt\n\nfrom keras.datasets import mnist\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D\n\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\n\nx_train = x_train.reshape(60000, 28, 28, 1)\nx_test = x_test.reshape(10000, 28, 28, 1)\n\nx_train = x_train.astype('float32')\nx_test = x_test.astype('float32')\nx_train /= 255\nx_test /= 255\n\ny_train = np.eye(10)[y_train]\ny_test = np.eye(10)[y_test]\n\nmodel = Sequential()\nmodel.add(Conv2D(32, kernel_size=(3, 3),\n activation='relu',\n input_shape=(28, 28, 1)))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation='softmax'))\n\nmodel.compile(loss= 'categorical_crossentropy',\n optimizer= 'adam',\n metrics=['accuracy'])\n\nmodel.fit(x_train, y_train,\n batch_size=128,\n epochs=10,\n verbose=1,\n validation_data=(x_test, y_test))\n\nscore = model.evaluate(x_test, y_test,\n verbose=0)\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])"}
{"prompt": "Explain the difference between a ``list`` and a ``tuple`` in Python. ", "label": "The difference between a list and a tuple in Python is that a list is mutable, meaning its contents can be changed, while a tuple is immutable, meaning its contents cannot be changed. A list has square brackets around it, while a tuple has parentheses around it. Lists are used when the data needs to be changed, while tuples are used when the data is fixed and cannot be changed.", "predict": "A list is a mutable data structure in Python, meaning that its elements can be changed. It is defined by square brackets [] and elements can be added, removed, or modified. A tuple, on the other hand, is an immutable data structure, meaning that its elements cannot be changed. It is defined by parentheses () and elements cannot be added, removed, or modified."}
{"prompt": "Generate a Python program to calculate the Fibonacci number at a given position.\nn = 10 ", "label": "def fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nn = 10\nprint(fibonacci(n))", "predict": "def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \n\nprint(fibonacci(n))"}
{"prompt": "Create a program in Python to generate a Random Password of length 8 characters, which contains at least one of each character type (lowercase, uppercase, digits, special characters).\nNot applicable ", "label": "import string\nimport random\n\n# length of password\nlength = 8\n\n# special characters\nspecial_characters = \"!#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\"\n\n# generating password\npassword = random.choice(string.ascii_lowercase)\npassword += random.choice(string.ascii_uppercase)\npassword += random.choice(string.digits)\npassword += random.choice(special_characters)\n\nfor i in range(length):\n   password += random.choice(string.ascii_lowercase + string.ascii_uppercase + string.digits + special_characters)\n\npassword  = ''.join(random.sample(password,len(password)))\n\nprint (\"Password is: \", password)", "predict": "import random\nimport string\n\ndef generate_password():\n password_characters = string.ascii_letters + string.digits + string.punctuation\n password = ''.join(random.choice(password_characters) for i in range(8))\n return password\n\nprint(generate_password())"}
{"prompt": "Write a Python program to extract all the words starting with a specific letter\nThe letter is 's' ", "label": "\"\"\"\nExtract all the words starting with a specific letter\n\"\"\"\n\ndef extract_words(word, letter):\n    words_list = []\n    for w in word.split():\n        if w[0] == letter:\n            words_list.append(w)\n    return words_list\n\nif __name__ == '__main__':\n    words = 'This is a sample sentence to test the program'\n    letter = 's'\n    print(extract_words(words, letter))", "predict": "def extract_words(letter):\n    words = []\n    for word in words_list:\n        if word[0] == letter:\n            words.append(word)\n    return words\n\nwords_list = [\"apple\", \"banana\", \"carrot\", \"strawberry\", \"sausage\"]\n\nprint(extract_words('s'))"}
{"prompt": "Implement a hash table in Python that supports insert, delete and retrieve operations. ", "label": "class HashTable:\n    def __init__(self):\n        self.table = [[] for _ in range(256)]\n \n    def insert(self, key, value):\n        h = hash(key) % 256\n        for i, kv in enumerate(self.table[h]):\n            if kv[0] == key:\n                self.table[h][i] = (key, value)\n                return\n        self.table[h].append((key, value))\n \n    def retrieve(self, key):\n        h = hash(key) % 256\n        for kv in self.table[h]:\n            if kv[0] == key:\n                return kv[1]\n \n    def delete(self, key):\n        h = hash(key) % 256\n        for i, kv in enumerate(self.table[h]):\n            if kv[0] == key:\n                del self.table[h][i]", "predict": "class HashTable:\n    def __init__(self):\n        self.table = {}\n\n    def insert(self, key, value):\n        self.table[key] = value\n\n    def delete(self, key):\n        if key in self.table:\n            del self.table[key]\n\n    def retrieve(self, key):\n        return self.table.get(key)"}
{"prompt": "Create a search engine in Python to quickly search through a given array.\nArray: ['school', 'hospital', 'bookstore', 'mall', 'theatre'] ", "label": "# Define the array\narray = ['school', 'hospital', 'bookstore', 'mall', 'theatre']\n\n# Function to perform linear search\ndef linearSearch(search_item):\n    # Loop through array\n    for i in range(len(array)):\n        # If search item is found, return its position\n        if array[i] == search_item:\n            return i\n    # If item is not found, return -1\n    return -1\n\n# Input search item\ns = input(\"Enter the item to be searched: \")\n\n# Search the item\nresult = linearSearch(s)\n\n# Print result\nif result == -1:\n    print(\"Item not found.\")\nelse:\n    print(\"Item is found at position \"+str(result))", "predict": "def search_engine(array, query):\n    results = []\n    for item in array:\n        if query.lower() in item.lower():\n            results.append(item)\n    return results\n\narray = ['school', 'hospital', 'bookstore','mall', 'theatre']\nquery = 'book'\n\nresults = search_engine(array, query)\nprint(results) # Output: ['bookstore']"}
{"prompt": "Create a function in Python that prints out the largest value from a given list of numbers.\nlist = [2, 4, 1, 6] ", "label": "def get_max_value(numbers): \n    return max(numbers)\n\nprint(get_max_value(list))  # 6", "predict": "def print_largest(list):\n    largest = max(list)\n    print(largest)\n\nprint_largest(list)"}
{"prompt": "Write a python script that takes a list of numbers from 1 to 8  and prints its cubic values.\n[1, 2, 3, 4, 5, 6, 7, 8] ", "label": "list_numbers = [1, 2, 3, 4, 5, 6, 7, 8]\n\nfor num in list_numbers:\n    print(num**3)", "predict": "numbers = [1, 2, 3, 4, 5, 6, 7, 8]\n\nfor number in numbers:\n    print(number**3)"}
{"prompt": "Create a dictionary in Python with key-value pairs\nKey: \"FirstName\"\nvalue: \"John\" ", "label": "my_dict = {\n    \"FirstName\": \"John\"\n}", "predict": "my_dict = {\n    \"FirstName\": \"John\"\n}"}
{"prompt": "Write a Python code to find the number of unique paths from a given source to a destination. ", "label": "def num_unique_paths(m, n):\n    dp = [[0 for x in range(m)] for y in range(n)] \n  \n    # Count of paths to reach any\n    # cell in first column is 1  \n    for i in range(n): \n        dp[i][0] = 1\n  \n    # Count of paths to reach any\n    # cell in first column is 1  \n    for j in range(m): \n        dp[0][j] = 1\n  \n    # Calculate count of paths for other \n    # cells in bottom-up manner using\n    # the recursive solution \n    for i in range(1, n): \n        for j in range(1, m): \n  \n            # By uncommenting the last\n            # part the code calculatest he total\n            # possible paths if the diagonal \n            # Movements are allowed \n            dp[i][j] = dp[i-1][j] + dp[i][j-1]# + dp[i-1][j-1]\n  \n    return dp[n-1][m-1]", "predict": "def unique_paths(m, n):\n    dp = [[0 for _ in range(m)] for _ in range(n)]\n\n    for i in range(m):\n        dp[0][i] = 1\n    for j in range(n):\n        dp[j][0] = 1\n\n    for i in range(1, n):\n        for j in range(1, m):\n            dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n\n    return dp[n - 1][m - 1]"}
{"prompt": "Generate a Python program to display a Fibonacci sequence of first n numbers. ", "label": "def Fibonacci(n):\n    if n==1:\n        return 0\n    elif n==2:\n        return 1\n    else:\n        return Fibonacci(n-1)+Fibonacci(n-2)\n\nn = 10\nfor i in range(1, n):\n    print(Fibonacci(i))", "predict": "def fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==1: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==2: \n        return 1\n    else: \n        return fibonacci(n-1)+fibonacci(n-2) \n\n# Driver Program \nprint(fibonacci(10))"}
{"prompt": "This code is a Python script that provides a command-line interface to download subtitles for movies and TV shows. To use it, run the script and provide one or more release paths as arguments. You can also specify the language and subtitle site to use. The available commands are \"download\", \"exist\", \"test\", \"", "label": "#!/usr/bin/env python\n#-*- coding:utf-8 -*-\n########################################################\n# Name: Subtitles Client\n# Site: http://RealGame.co.il\n__author__ = 'RealGame (Tomer Zait)'\n__license__ = 'GPL v3'\n__version__ = '1.0'\n__email__ = 'realgam3@gmail.com'\n########################################################\n\nfrom os import path\nfrom sys import argv\nfrom docopt import docopt\n\nfrom engines.engine import SubtitleSite, SUBTITLE_SITE_LIST, DEFAULTS\n\n\n__doc__ = \\\n\"\"\"\nSubtitles Client\n\nUsage:\n  {prog} download <releases_path>... [--lang=<language> --engine=<subtitle_site>...]\n  {prog} exist <releases_path>... [--lang=<language> --engine=<subtitle_site>...]\n  {prog} test [<engines>...]\n  {prog} (-l | --list)\n  {prog} (-h | --help)\n  {prog} (-v | --version)\n\nOptions:\n  -l --list                 Show subtitles engine list.\n  -h --help                 Show this screen.\n  -v --version              Show version.\n  --lang=<language>         Subtitle language (alpha2) [default: {def_language}].\n  --engine=<subtitle_site>  Subtitle site              [default: {def_engine}].\n\"\"\".format(prog=path.basename(argv[0]),\n           def_language=DEFAULTS['subtitle_language'],\n           def_engine=DEFAULTS['subtitle_engine'])\n\n\ndef download_subtitles(releases, engines=[DEFAULTS['subtitle_engine']], lang=DEFAULTS['subtitle_language']):\n    if releases:\n        for release in releases:\n            for engine in engines:\n                subtitle_release = SubtitleSite.get_file_properties(release)['release_name']\n                print \"[{engine: ^15}] Trying To Download Subtitles For: '{release}'\".format(engine=engine,\n                                                                                             release=subtitle_release)\n                sub_obj = SubtitleSite.class_factory(engine)\n                subtitle_path = sub_obj.download_subtitle(release, lang)\n                if subtitle_path:\n                    print \"{0:17} Download Success: ({file_path}).\\n\".format(\"\", file_path=subtitle_path)\n                else:\n                    print \"{0:17} Subtitles Not Found.\\n\".format(\"\")\n\n\ndef is_subtitles_exist(releases, engines=[DEFAULTS['subtitle_engine']], lang=DEFAULTS['subtitle_language']):\n    if releases:\n        for release in releases:\n            for engine in engines:\n                subtitle_release = SubtitleSite.get_file_properties(release)['release_name']\n\n                sub_obj = SubtitleSite.class_factory(engine)\n                exist_flag = sub_obj.is_subtitle_exist(release, lang)\n                res = \"Exist\"\n                if not exist_flag:\n                    res = \"Does Not \" + res\n                print \"[{engine: ^15}] '{release}' - {res}.\".format(engine=engine,\n                                                                    release=subtitle_release,\n                                                                    res=res)\n\n\ndef test_engines(engines):\n    if not engines:\n        engines = SUBTITLE_SITE_LIST.keys()\n\n    for engine_key in engines:\n        t = SubtitleSite.class_factory(engine_key)\n        t.test_engine()\n\n\ndef main():\n    args = docopt(__doc__, help=True, version='Subtitles Client %s' % __version__)\n\n    if args['download']:\n        download_subtitles", "predict": "list\", \"list-all\", \"get-release\", \"get-subtitles\", \"get-language\", \"get-site\", \"get-release-url\", \"get-subtitle-url\", \"get-release-info\", \"get-subtitle-info\", \"get-subtitle-filename\", \"get-subtitle-language\", \"get-subtitle-site\", \"get-subtitle-info-all\", \"get-subtitle-info-all-all\", \"get-subtitle-filename-all\", \"get-subtitle-language-all\", \"get-subtitle-site-all\", \"get-subtitle-info-all-all-all\", \"get-subtitle-filename-all-all\", \"get-subtitle-language-all-all\", \"get-subtitle-site-all-all\", \"get-subtitle-info-all-all-all-all\", \"get-subtitle-filename-all-all-all\", \"get-subtitle-language-all-all-all\", \"get-subtitle-site-all-all-all\", \"get-subtitle-info-all-all-all-all-all\", \"get-subtitle-filename-all-all-all-all\", \"get-subtitle-language-all-all-all-all\", \"get-subtitle-site-all-all-all-all\", \"get-subtitle-info-all-all-all-all-all-all\", \"get-subtitle-filename-all-all-all-all-all\", \"get-subtitle-language-all-all-all-all-all\", \"get-subtitle-site-all-all-all-all-all\", \"get-subtitle-info-all-all-all-all-all-all-all\", \"get-subtitle-filename-all-all-all-all-all-all\", \"get-subtitle-language-all-all-all-all-all-all\", \"get-subtitle-site-all-all-all-all-all-all\", \"get-subtitle-info-all-all-all-all-all-all-all-all\", \"get-subtitle-filename-all-all-all-all-all-all-all\", \""}
{"prompt": "Optimize the following Python program to find the maximum number in a list.\nlist = [9, 2, 5, 6, 4, 1] ", "label": "def max_num(list):\n  max_num = list[0]\n\n  for num in list:\n    if num > max_num:\n      max_num = num\n  \n  return max_num", "predict": "def max_num(list):\n    max_num = list[0]\n    for num in list:\n        if num > max_num:\n            max_num = num\n    return max_num\n\nlist = [9, 2, 5, 6, 4, 1]\nprint(max_num(list))"}
{"prompt": "Develop an algorithm in Python that takes a list of strings as an input and sorts them alphabetically.\nList of Strings: [\"hello\", \"world\", \"good\", \"morning\", \"programming\"] ", "label": "def sortAlphabetically(strings): \n    strings.sort() \n    return strings \n\n#Test \nstrings = [\"hello\", \"world\", \"good\", \"morning\", \"programming\"]\nsorted_strings = sortAlphabetically(strings) \nprint(*sorted_strings)", "predict": "def sort_strings(string_list):\n    return sorted(string_list)\n\nstring_list = [\"hello\", \"world\", \"good\", \"morning\", \"programming\"]\nsorted_list = sort_strings(string_list)\n\nprint(sorted_list)"}
{"prompt": "Create a Python program to print a formatted table of grades for a given set of students.\nStudents = [\n    {\n    'name': \"John\",\n    'grade': 92\n    },\n    {\n    'name': \"Alice\",\n    'grade': 95\n    },\n    {\n    'name': \"Bob\",\n    'grade': 87\n    }\n] ", "label": "def print_grade_table(students):\n    max_name_length = max(len(student['name']) for student in students)\n    line_template = \"{{name:<{max_name_length}}}   {{grade}}\".format(max_name_length=max_name_length)\n    header = line_template.format(name='Name', grade='Grade')\n    sep = '-' * len(header)\n    print(header)\n    print(sep)\n    for student in students:\n        print(line_template.format(**student))", "predict": "def print_grades(students):\n    print(\"Name\\tGrade\")\n    print(\"-----\\t-----\")\n    for student in students:\n        print(f\"{student['name']}\\t{student['grade']}\")\n\nprint_grades(students)"}
{"prompt": "Design a Python code snippet that deletes all duplicates in a given list of numbers. ", "label": "def deleteDuplicates(list): \n    final_list = [] \n    for num in list: \n        if num not in final_list: \n            final_list.append(num) \n    return final_list", "predict": "def delete_duplicates(lst):\n    result = []\n    seen = set()\n    for num in lst:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result"}
{"prompt": "Write a Python program to visually summarize the Twitter data.\nTwitter data is a stream of tweets with data fields like : tweet author, date of tweet, text, number of likes, number of retweets. ", "label": "import matplotlib.pyplot as plt\n\n# Process the Twitter data to extract\n# the relevant data fields\n# ...\n\n# Plot the tweet authors\nplt.xlabel('Tweet Authors')\nplt.ylabel('Number of tweets')\nplt.title('Tweet Author Summary')\nplt.bar(authors, num_tweets)\nplt.show()\n\n# Plot the number of likes\nplt.xlabel('Tweets')\nplt.ylabel('Number of Likes')\nplt.title('Number of Likes Summary')\nplt.bar(tweets, num_likes)\nplt.show()\n\n# Plot the number of retweets\nplt.xlabel('Tweets')\nplt.ylabel('Number of Retweets')\nplt.title('Number of Retweets Summary')\nplt.bar(tweets, num_retweets)\nplt.show()", "predict": "import matplotlib.pyplot as plt\n\n# data to plot\nx = [tweet_author, date_of_tweet, number_of_likes, number_of_retweets]\ny = [text]\n\n# plotting the points\nplt.scatter(x, y)\n\n# adding labels\nplt.xlabel('Data Fields')\nplt.ylabel('Tweet Text')\n\n# title\nplt.title('Visual Summary of Twitter Data')\n\n# function to show the plot\nplt.show()"}
{"prompt": "Develop a function in Python that takes in a string of sentences and removes all the punctuations.\n\"This is a sample string!\" ", "label": "import string\n\ndef remove_punctuations(s):\n    return s.translate(str.maketrans('', '', string.punctuation))\n\nif __name__ == '__main__':\n    sentence = \"This is a sample string!\"\n    print(remove_punctuations(sentence))", "predict": "import string\n\ndef remove_punctuation(sentence):\n    translator = str.maketrans('', '', string.punctuation)\n    return sentence.translate(translator)\n\nprint(remove_punctuation(\"This is a sample string!\"))"}
{"prompt": "Create a model in Python using Linear Regression that can predict the housing prices given the living area and number of rooms.\ndata = [[2000, 3], [1600, 2.5], [2400, 3.5], [1400, 2], [3000, 4]] ", "label": "import numpy as np\nfrom sklearn import linear_model\n\nX = np.array([[2000, 3], [1600, 2.5], [2400, 3.5], [1400, 2], [3000, 4]])\ny = np.array([75000, 43000, 59000, 32000, 85000])\n\nmodel = linear_model.LinearRegression()\nmodel.fit(X, y)\n\nprediction = model.predict([[2200, 3]])", "predict": "import numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Create the X and y arrays\nX = np.array([[2000, 3], [1600, 2.5], [2400, 3.5], [1400, 2], [3000, 4]])\ny = np.array([100000, 120000, 160000, 80000, 200000])\n\n# Create the model\nmodel = LinearRegression()\n\n# Train the model\nmodel.fit(X, y)\n\n# Predict the housing price\npredicted_price = model.predict([[2500, 3.2]])\nprint(predicted_price) # Output: [172800.]"}
{"prompt": "Create a loop in Python that prints each item of the following list with a message:\nmy_list = ['A', 'B', 'C', 'D'] ", "label": "my_list = ['A', 'B', 'C', 'D']\n\nfor item in my_list:\n    print(\"The item is: {}\".format(item))", "predict": "for item in my_list:\n    print('Item:'+ item)"}
{"prompt": "Develop a regular expression in Python to match all numeric strings. ", "label": "import re \n  \n# Regular expression to match all numeric strings \npattern = '^[0-9]+$'\n  \n# Input string \nstring = '123456789'\n  \n# Matching a pattern \nresult = re.match(pattern, string) \nif result: \n    print(\"String is a valid numeric string\") \nelse: \n    print(\"String isn't a valid numeric string\")", "predict": "import re\n\npattern = re.compile(r'\\d+')\n\n# Match all numeric strings in a given string\nmatches = pattern.findall('12345 67890 12345')\nprint(matches) # ['12345', '67890', '12345']"}
{"prompt": "Create a BPMN diagram for FOMDES process 1 using Python and the bpmn_pgv library. The diagram should include clusters for Secretaría Ejecutiva, Presidencia, and Presupuesto/Administración, with specific tasks and edges defined within each cluster. Additionally, include nodes for SIGEFOMDES Administración and SISAC, and connect them to the appropriate clusters using dashed edges. Finally, save the diagram as a PNG file named \"proc4.png\" and a DOT file named \"proc4.dot\". ", "label": "#!/usr/bin/env python\n#  -*- coding: utf-8 -*-\n\n\"\"\"\nBPMN diagram for FOMDES process 1\n\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import unicode_literals\n\nfrom bpmn_pgv import *\nimport pygraphviz as pgv\n\n__author__ = 'mapologo'\n\nPROCESS_LABEL = \"Liquidación de Créditos\"\n# A graph for FOMDES processes\nF = pgv.AGraph(strict=False, directed=True)\n\nF.graph_attr.update(label=\"\", rankdir=\"TB\", splines=\"ortho\", labelloc=\"b\",\n                    size=\"8, 7.5\", forcelabels=\"true\", ranksep=\"0.25\", fontname=\"Liberation Sans Narrow Condensed\")\nF.node_attr.update(fontname=\"Liberation Sans Narrow Condensed\")\nF.edge_attr.update(fontname=\"Liberation Sans Narrow Condensed\", fontsize=\"10\")\n\nse_cluster = {\"se7\": (\"Recibir el documento protocolizado\", \"start\"),\n              \"se8\": (\"Revisar el documento protocolizado\", \"human\"),\n              \"se9\": (\"\", \"end\")}\n\nse_edges = {\"se7\": {\"se8\": {}},\n            \"se8\": {\"se9\": {\"style\": \"invis\"}}}\n\nSE = add_cluster(F, \"se\", \"Secretaría Ejecutiva\", se_cluster, se_edges)\n\np_cluster = {\"p1\": (\"Firma del cheque\", \"human\"),\n             \"p2\": (\"Entregar cheque a beneficiario\", \"message\")}\n\np_edges = {\"p1\":{\"p2\": {}}}\n\nP = add_cluster(F, \"p\", \"Presidencia\", p_cluster, p_edges)\n\npr_cluster = {\"pr2\": (\"Verificar documentación legal y elaborar certificación de disponibilidad\", \"human\"),\n              \"pr3\": (\"Crear las cuentas por cobrar\", \"human\"),\n              \"pr4\": (\"Generar tablas de amortización\", \"human\"),\n              \"pr5\": (\"Imprimir y firmar orden de liquidación y cheque\", \"human\")}\n\npr_edges = {\"pr2\": {\"pr3\": {}},\n            \"pr3\": {\"pr4\": {}},\n            \"pr4\": {\"pr5\": {}}}\n\nPR = add_cluster(F, \"pr\", \"Presupuesto/Administración\", pr_cluster, pr_edges)\n\nF.add_node(\"SIGEFOMDES Administración\", image=IMAGE_PATH + \"database.png\", shape=\"plaintext\", label=\"\", xlabel=\"SIGEFOMDES Administración\")\nF.add_node(\"SISAC\", image=IMAGE_PATH + \"database.png\", shape=\"plaintext\", label=\"\", xlabel=\"SISAC\")\n\nglobal_edges = {\"Beneficiario\":  {\"se7\": {\"style\": \"dashed\"}},\n                \"se8\": {\"pr2\": {\"style\": \"dashed\"}},\n                \"pr3\": {\"SIGEFOMDES Administración\": {\"style\": \"dashed\"}},\n                \"pr4\": {\"SISAC\": {\"style\": \"dashed\"}},\n                \"pr5\": {\"p1\": {\"style\": \"dashed\"}},\n                \"p2\": {\"se9\": {\"style\": \"dashed\"}, \"Beneficiario\": {\"style\": \"dashed\"}}}\n\nadd_edges(F, global_edges)\n\nF.draw(\"proc4.png\", prog='dot')\nF.write(\"proc4.dot\")\n", "predict": "import bpmn_pgv\n\n# Diagram\ndiagram = bpmn_pgv.Diagram(name=\"FOMDES Process 1\")\n\n# Clusters\nse_cluster = bpmn_pgv.Cluster(name=\"Secretaría Ejecutiva\")\npresidencia_cluster = bpmn_pgv.Cluster(name=\"Presidencia\")\npresupuesto_cluster = bpmn_pgv.Cluster(name=\"Presupuesto/Administración\")\n\n# Tasks\nse_tasks = [\n    bpmn_pgv.Task(name=\"Definición de la solicitud\"),\n    bpmn_pgv.Task(name=\"Análisis de la solicitud\"),\n    bpmn_pgv.Task(name=\"Análisis de la situación\"),\n    bpmn_pgv.Task(name=\"Análisis de la solicitud\"),\n    bpmn_pgv.Task(name=\"Definición de la respuesta\"),\n    bpmn_pgv.Task(name=\"Evaluación de la solicitud\"),\n    bpmn_pgv.Task(name=\"Evaluación de la solicitud\"),\n    bpmn_pgv.Task(name=\"Evaluación de la solicitud\"),\n    bpmn_pgv.Task(name=\"Evaluación de la solicitud\"),\n    bpmn_pgv.Task(name=\"Evaluación de la solicitud\"),\n    bpmn_pgv.Task(name=\"Evaluación de la solicitud\"),\n    bpmn_pgv.Task(name=\"Evaluación de la solicitud\"),\n    bpmn_pgv.Task(name=\"Evaluación de la solicitud\"),\n    bpmn_pgv.Task(name=\"Evaluación de la solicitud\"),\n    bpmn_pgv.Task(name=\"Evaluación de la solicitud\"),\n    bpmn_pgv.Task(name=\"Evaluación de la solicitud\"),\n    bpmn_pgv.Task(name=\"Evaluación de la solicitud\"),\n    bpmn_pgv.Task("}
{"prompt": "Write a python function to calculate an exponential series ", "label": "def exponential_series(x,n):\n    sum = 0\n    for i in range(n+1):\n        sum += x ** i\n    return sum", "predict": "def exponential_series(x, n):\n    sum = 0\n    for i in range(n):\n        sum += x**i\n    return sum"}
{"prompt": "Design an algorithm in Python to add two large numbers represented as strings.\nThe two numbers: \"111\" and \"1337\" ", "label": "def add_large_numbers(num1, num2):\n    num1 = num1[::-1]\n    num2 = num2[::-1] \n    carry = 0\n    result = \"\" \n   \n    # Iterate over the length of the length of larger string  \n    for i in range(max(len(num1), len(num2))): \n        if i < len(num1):\n            digit1 = int(num1[i])\n        else:\n            digit1 = 0\n\n        if i < len(num2):\n            digit2 = int(num2[i])\n        else:\n            digit2 = 0\n       \n        sum_total = digit1 + digit2 + carry  \n        carry = sum_total // 10  \n\n        result += str(sum_total % 10) \n\n    # Add remaining carry  \n    if carry > 0:  \n        result += str(carry) \n\n    return result[::-1]\n\nprint(add_large_numbers(\"111\", \"1337\"))\n# Output: 1448", "predict": "def add_large_numbers(num1, num2):\n    result = \"\"\n    carry = 0\n    for i in range(max(len(num1), len(num2))):\n        digit1 = int(num1[i]) if i < len(num1) else 0\n        digit2 = int(num2[i]) if i < len(num2) else 0\n        sum = digit1 + digit2 + carry\n        carry = sum // 10\n        result = str(sum % 10) + result\n    if carry > 0:\n        result = str(carry) + result\n    return result\n\nprint(add_large_numbers(\"111\", \"1337\"))"}
{"prompt": "Design an algorithm in Python, that takes an array and sort it in ascending order.\n[10, 3, 9, 1, 15, 2] ", "label": "def sort_ascending(array):\n  array.sort()\n  return array\n\nsort_ascending([10, 3, 9, 1, 15, 2])  # [1, 2, 3, 9, 10, 15]", "predict": "def sort_ascending(arr):\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n    return arr\n\narr = [10, 3, 9, 1, 15, 2]\nresult = sort_ascending(arr)\nprint(result)"}
{"prompt": "Complete the Python class below so that it can calculate the sum of two integers.\nclass Sum:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y ", "label": "class Sum:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n        \n    def add(self):\n        return self.x + self.y", "predict": "class Sum:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    \n    def calculate_sum(self):\n        return self.x + self.y"}
{"prompt": "Suggest a completion for the following Python code to check if a given number is an Armstrong number.\ndef is_armstrong_number(num): ", "label": "def is_armstrong_number(num):\n  order = len(str(num))\n  sum = 0\n  temp = num\n  while temp > 0:\n    digit = temp % 10\n    sum += digit ** order\n    temp //= 10\n  if num == sum:\n    return True  \n  else:\n    return False", "predict": "def is_armstrong_number(num):\n    order = len(str(num))\n    sum = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** order\n        temp //= 10\n    return num == sum"}
{"prompt": "Write an algorithm in Python that finds the maximum sum of an array of non-negative integers, given an upper limit value.\nlimit = 10\narray = [1, 3, 5, 4, 2, 6] ", "label": "def findMaxSum(limit, array):\n    maxSum = 0\n    for i in range(len(array)):\n        currentSum = 0\n        for j in range(i, len(array)):\n            currentSum += array[j]\n            if currentSum <= limit and currentSum > maxSum:\n                maxSum = currentSum\n    return maxSum", "predict": "def max_sum_limit(limit, array):\n max_sum = 0\n \n for i in range(len(array)):\n  for j in range(i+1, len(array)):\n   current_sum = 0\n   for k in range(i, j+1):\n    current_sum += array[k]\n    if current_sum > max_sum and current_sum <= limit:\n     max_sum = current_sum\n \n return max_sum"}
{"prompt": "Write a Python program to generate n-grams of the given text with a window size of 3.\nThe quick brown fox jumps over the lazy dog ", "label": "from collections import Counter\n\n\ndef generate_ngrams(text, window_size):\n    text = text.lower().split(' ')\n    ngrams = []\n    for n in range(window_size, len(text)+1):\n        for i in range(len(text)-n+1):\n            ngrams.append(' '.join(text[i:i+n]))\n    return Counter(ngrams)\n\n\ntext = \"The quick brown fox jumps over the lazy dog\"\nwindow_size = 3\n\nngrams_count = generate_ngrams(text, window_size)\n\nprint('\\nNGRAMS COUNT:',ngrams_count)\n\n# Output\n# NGRAMS COUNT: Counter({'the quick brown': 3,\n#            'quick brown fox': 2,\n#            'over the lazy': 1,\n#            'brown fox jumps': 1,\n#            'fox jumps over': 1,\n#            'the lazy dog': 1,\n#            'jumps over the': 1,\n#            'quick brown fox jumps': 1})", "predict": "import nltk\n\ndef generate_ngrams(text, window_size):\n    tokens = nltk.word_tokenize(text)\n    ngrams = nltk.ngrams(tokens, window_size)\n    return ngrams\n\nngrams = generate_ngrams(\"The quick brown fox jumps over the lazy dog\", 3)\nfor ngram in ngrams:\n    print(ngram)"}
{"prompt": "Output the Fibonacci sequence as a list of integers in Python ", "label": "def fibonacci_sequence(n): \n    # Creating list of length n \n    fib_list  = [0]*n \n      \n    # first and second terms \n    fib_list[0] = 0\n    fib_list[1] = 1\n      \n    # Application of the recursive algorithm \n    for i in range(2, n): \n        fib_list[i] = fib_list[i-1] + fib_list[i-2] \n      \n    return fib_list", "predict": "def fibonacci(n): \n  a = 0\n  b = 1\n  fib = [a] \n  for i in range(1,n): \n    c = a + b \n    a = b \n    b = c \n    fib.append(a) \n  return fib"}
{"prompt": "Develop a machine learning algorithm in Python to identify apples from bananas.\nNo Input ", "label": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.svm import SVC\n\n# Load data\nX = np.array([[1,2,3], [-1,2,5], [-1,2,7], [5,5,5], [3,3,3], [5,5,7]])\ny = np.array([0, 0, 0, 1, 0, 1])\n\n# Initialize classifier\nclf = SVC(kernel='linear')\n\n# Fit data\nclf.fit(X, y)\n\n# Test classifier\nx_test = np.array([[2,2,2], [4,4,4]])\n\nprediction = clf.predict(x_test)\nprint(prediction)", "predict": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Load the dataset\nX = np.array([[1,2],[3,4],[5,6],[7,8],[9,10]])\ny = np.array([1,1,0,0,0])\n\n# Split the dataset into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Build the model\nmodel = Sequential()\nmodel.add(Dense(2, input_dim=2, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n\n# Train the model\nmodel.fit(X_train, y_train, epochs=100, batch_size=5)\n\n# Test the model\nscore = model.evaluate(X_test, y_test, verbose=0)\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])"}
{"prompt": "Write a Python program to convert a list of lists into a dictionary where the first element of each list is the key and the rest of the elements are the values.\nlist1 = [\"apple\", \"red\", \"green\"]\nlist2 = [\"banana\", \"yellow\", \"green\"] ", "label": "dict1 = {}\nfor lst in [list1, list2]:\n key = lst[0]\n val = lst[1:]\n dict1[key] = val\n\nprint(dict1)\n# Output: {'apple': ['red', 'green'], 'banana': ['yellow', 'green']}", "predict": "def list_to_dict(lists):\n    dictionary = {}\n    for list in lists:\n        key = list[0]\n        values = list[1:]\n        dictionary[key] = values\n    return dictionary\n\nlist1 = [\"apple\", \"red\", \"green\"]\nlist2 = [\"banana\", \"yellow\", \"green\"]\n\ndictionary = list_to_dict([list1, list2])\nprint(dictionary)"}
{"prompt": "Generate a fuzzy search algorithm in Python that can match strings with near similarities. ", "label": "def find_matches(query, choices, threshold):\n    # Convert query and choices to lower case\n    query, choices = query.lower(), [choice.lower() for choice in choices]\n    # Initialize empty list to store matches\n    matches = []\n    \n    # Loop through each choice\n    for choice in choices:\n        # Calculate Levenshtein distance between query and choice\n        distance = levenshtein_distance(query, choice)\n        # If distance is less than threshold, append choice to matches\n        if distance <= threshold:\n            matches.append(choice)\n    \n    return matches", "predict": "def fuzzy_search(query, words):\n    # create a list of words that are similar to the query\n    similar_words = []\n    for word in words:\n        # calculate the edit distance between the query and the word\n        edit_distance = 0\n        for i in range(len(query)):\n            if query[i]!= word[i]:\n                edit_distance += 1\n        # if the edit distance is less than 3, add the word to the list\n        if edit_distance < 3:\n            similar_words.append(word)\n    # return the list of similar words\n    return similar_words"}
{"prompt": "Write a Python program to generate a random password. The program should generate a string of 8 characters (numbers, letters and special characters)\nNo input ", "label": "import random\nimport string\n\ndef generate_password():\n password_characters = string.ascii_letters + string.digits + string.punctuation\n password = ''.join(random.choice(password_characters) for i in range(8))\n print(password)\n\ngenerate_password()", "predict": "import random\nimport string\n\ndef generate_password():\n  chars = string.ascii_letters + string.digits + string.punctuation\n  return ''.join(random.choice(chars) for _ in range(8))\n\nprint(generate_password())"}
{"prompt": "Is it possible to create a HTML page that displays a table of contents from the data stored in a database? ", "label": "Yes, it is possible to create a HTML page that displays a table of contents from the data stored in a database. You can use HTML, CSS, and JavaScript to create the table and a server-side language such as PHP or Python to query the database and retrieve the relevant data. Once you have the data, you can use JavaScript to render the table within the HTML page.", "predict": "Yes, it is possible to create a HTML page that displays a table of contents from the data stored in a database. This can be done by using a programming language such as PHP or JavaScript to connect to the database and retrieve the data, and then using HTML and CSS to format the data into a table of contents."}
{"prompt": "Write a Python program to compute the average salary of people over a given range of numbers from the dataset 'salary.csv'.\nsalary.csv:\nname, salary\nJohn, 1000\nSara, 2000\nAlice, 3000 ", "label": "import csv\n\ndef get_average_salary(filename):\n  total = 0\n  count = 0\n\n  with open(filename, 'r') as csvfile:\n    csvreader = csv.reader(csvfile)\n    next(csvreader) # skip header\n\n    # loop through the CSV rows\n    for row in csvreader:\n      total += int(row[1])\n      count += 1\n  \n  return total/count\n\naverage_salary = get_average_salary('salary.csv')\nprint('Average Salary: ', average_salary)\n\n# Output: \n# Average Salary: 2000.0", "predict": "import csv\n\n# Open the csv file\nwith open('salary.csv', 'r') as csvfile:\n    # Read the csv file\n    reader = csv.reader(csvfile)\n    # Get the header row\n    header = next(reader)\n    # Get the salary data\n    salary_data = list(reader)\n\n# Calculate the total salary\ntotal_salary = 0\nfor row in salary_data:\n    total_salary += int(row[1])\n\n# Calculate the average salary\naverage_salary = total_salary / len(salary_data)\n\nprint('Average salary:', average_salary)"}
{"prompt": "Implement a supervised learning algorithm in Python for a classification task using the iris dataset.\nNot applicable ", "label": "# Import necessary libraries\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import confusion_matrix\n\n# Load and explore the data\ndataset = pd.read_csv('iris.csv')\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\n\n# Split the dataset into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n\n# Preprocess the data\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)\n\n# Define the model\nclf = KNeighborsClassifier(n_neighbors=5)\n\n# Fit the model to the training set\nclf.fit(X_train, y_train)\n\n# Make predictions on the test set\ny_pred = clf.predict(X_test)\n\n# Evaluate the model's performance\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)", "predict": "import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# Load the data\ndata = pd.read_csv('iris.csv')\n\n# Separate the features and labels\nX = data.drop('target', axis=1).values\ny = data['target'].values\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# Create and train the model\nmodel = KNeighborsClassifier(n_neighbors=3)\nmodel.fit(X_train, y_train)\n\n# Make predictions\ny_pred = model.predict(X_test)\n\n# Evaluate the model\nprint(\"Accuracy: \", model.score(X_test, y_test))"}
{"prompt": "Improve the following Python code to check if a number is in the range of 1 to 10 (inclusive).\ndef check_number(num):\nif num >= 1 and num <= 10:\n   return True ", "label": "def check_number(num):\n  if (num > 0 and num < 11):\n    return True\n  else:\n    return False", "predict": "def check_number(num):\n    if num < 1 or num > 10:\n        return False\n    else:\n        return True"}
{"prompt": "Create an algorithm in Python to generate the first n elements of the Sierpinski triangle.\nn = 6 ", "label": "def sierpinski_triangle(n): \n    # Drawing lines for first row \n    for i in range(2**n): \n        print(' ', end=\" \") \n    \n    # loop for printing n rows \n    for i in range(1, n+1): \n        # bit pattern for first and \n        # last line of each row \n        for j in range(2**(i-1), 2**i): \n            print('1', end=\" \") \n        print() \n        \n        # inner rows have opposite bit pattern \n        if i > 1: \n            for j in range(2**(i-1)+1, 2**i-1):  \n                print('0', end=\" \") \n            print() \n       \nsierpinski_triangle(6)", "predict": "def sierpinski_triangle(n):\n    # base case\n    if n == 1:\n        return [[1]]\n\n    # recursive case\n    triangle = sierpinski_triangle(n - 1)\n\n    # add the next row\n    new_row = []\n    for i in range(len(triangle[0]) + 1):\n        new_row.append(i + 1)\n    triangle.append(new_row)\n\n    # add the next columns\n    for i in range(len(triangle) - 1):\n        triangle[i].append(triangle[i + 1][0])\n\n    return triangle\n\n# print the result\nprint(sierpinski_triangle(n))"}
{"prompt": "Write a function in Python to count the number of vowels in a string. ", "label": "def count_vowels(string):\n    count = 0\n    vowels = set(\"aeiouAEIOU\")\n    for letter in string:\n        if letter in vowels:\n            count += 1\n    return count", "predict": "def count_vowels(string):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in string:\n        if char in vowels:\n            count += 1\n    return count"}
{"prompt": "Implement a function f() in Python that takes an argument n and prints the multiplication table of n ", "label": "def f(n):\n    for i in range(1, 11):\n        print(\"{} * {} = {}\".format(n, i, n*i))", "predict": "def f(n):\n    for i in range(1, 11):\n        print(f\"{n} x {i} = {n*i}\")"}
{"prompt": "Write a python program to optimize the given objective function. ", "label": "from scipy.optimize import minimize \n\ndef obj_func(x):\n    # objective function\n    # ...\n\ndef optimize(): \n    # set up optimization problem\n    x0 = [0.0, 0.0, 0.0] \n    res = minimize(obj_func, x0, method='nelder-mead', options={'xtol': 1e-8, 'disp': True}) \n    return res.x\n\nprint(optimize())", "predict": "import scipy.optimize\n\ndef optimize_objective(func, x0):\n    result = scipy.optimize.minimize(func, x0)\n    return result.x"}
{"prompt": "Create a Python generator that returns numbers from a given list.\n[1,3,5,7,9] ", "label": "def list_generator(input_list):\n    for item in input_list:\n        yield item\n\ngen = list_generator([1,3,5,7,9])\nfor item in gen:\n    print(item)", "predict": "def number_generator(numbers):\n    for num in numbers:\n        yield num\n\nnumbers = [1,3,5,7,9]\n\nfor num in number_generator(numbers):\n    print(num)"}
{"prompt": "Develop a Python program to create an autocomplete system that predicts words based on the input text. ", "label": "def autocomplete(input_text):\n    # Generate the word candidates\n    word_candidates = generate_candidates(input_text)\n    # Filter the word candidates \n    filtered_words = filter_candidates(word_candidates)\n    # Rank the words and return the top 5 \n    sorted_words = rank_words(filtered_words)\n    return sorted_words[:5]", "predict": "# Create an autocomplete system\n\n# Import libraries\nimport re\nimport nltk\n\n# Preprocess the text\ndef preprocess_text(text):\n    # Tokenize the text\n    tokens = nltk.word_tokenize(text)\n    # Remove punctuation\n    tokens = [token for token in tokens if re.match('[a-zA-Z]', token)]\n    # Lowercase the tokens\n    tokens = [token.lower() for token in tokens]\n    return tokens\n\n# Generate the autocomplete suggestions\ndef generate_suggestions(text, suggestions_limit):\n    # Preprocess the text\n    tokens = preprocess_text(text)\n    # Create a list to store the suggestions\n    suggestions = []\n    # Get all the words from the text\n    words = set(tokens)\n    # Generate the suggestions\n    for word in words:\n        if word in tokens:\n            # Add the word to the suggestions\n            suggestions.append(word)\n    # Get the top N suggestions\n    top_n = nltk.FreqDist(suggestions).keys()[:suggestions_limit]\n    # Return the top N suggestions\n    return top_n"}
{"prompt": "Write a Python code snippet to print the unique elements of a given list. ", "label": "def print_unique(my_list):\n    seen = set()\n    for x in my_list:\n        if x not in seen:\n            print(x)\n            seen.add(x)", "predict": "def unique_elements(list):\n    unique_list = []\n    for item in list:\n        if item not in unique_list:\n            unique_list.append(item)\n    return unique_list"}
{"prompt": "Create a Python program that convert a given string to a list of integers. ", "label": "def to_int_list(s):\n    return [int(x) for x in s.split(',')]", "predict": "def str_to_int_list(s):\n    return [int(x) for x in s.split()]"}
{"prompt": "Create a basic blockchain in Python using only the core modules\nNot applicable ", "label": "import hashlib\nimport json\n\nclass Blockchain:\n\n def __init__(self):\n self.chain = []\n self.transactions = []\n\n def create_block(self, nonce, previous_hash):\n block = {\n 'block_number': len(self.chain) + 1,\n 'timestamp': self._current_timestamp(),\n 'nonce': nonce,\n 'previous_hash': previous_hash\n }\n self.chain.append(block)\n return block\n\n def _current_timestamp(self):\n return round(time.time() * 1000)\n\n def hash_block(self, block):\n string_object = json.dumps(block, sort_keys=True)\n block_string = string_object.encode()\n raw_hash = hashlib.sha256(block_string)\n hex_hash = raw_hash.hexdigest()\n return hex_hash", "predict": "import hashlib\nimport json\n\nclass Blockchain:\n def __init__(self):\n self.chain = []\n self.transactions = []\n\n def create_block(self, nonce, previous_hash):\n block = {\n 'index': len(self.chain) + 1,\n 'timestamp': time.time(),\n 'data': self.transactions,\n 'nonce': nonce,\n 'previous_hash': previous_hash\n }\n self.chain.append(block)\n self.transactions = []\n\n def get_hash(self, block):\n return hashlib.sha256(\n json.dumps(block, sort_keys=True).encode('utf-8')\n ).hexdigest()\n\n def proof_of_work(self, previous_hash):\n nonce = 0\n check_nonce = False\n while check_nonce is False:\n hash_value = self.get_hash({\n 'previous_hash': previous_hash,\n 'nonce': nonce\n })\n if hash_value[:4] == '0000':\n check_nonce = True\n return nonce\n\ndef mine_block(self):\n previous_hash = self.get_hash(self.chain[-1])\n nonce = self.proof_of_work(previous_hash)\n self.create_block(nonce, previous_hash)"}
{"prompt": "Create a Python program to remove all duplicate elements from a list and preserving the original order.\n[1, 3, 3, 5, 5, 7] ", "label": "# Program to remove duplicate elements\n\ndef remove_duplicates(nums):\n new_list = []\n for num in nums:\n if num not in new_list:\n new_list.append(num)\n \nreturn new_list\n\n# Main program\nnums = [1, 3, 3, 5, 5, 7]\ndedup_nums = remove_duplicates(nums)\nprint(dedup_nums) # [1, 3, 5, 7]", "predict": "def remove_duplicates(lst):\n  result = []\n  for elem in lst:\n    if elem not in result:\n      result.append(elem)\n  return result\n\nprint(remove_duplicates([1, 3, 3, 5, 5, 7]))"}
{"prompt": "Generate a voltage signal with random noise using a Python script.\nA signal of frequency 250 Hz and amplitude 1 V. ", "label": "import numpy as np \n\nfreq = 250 \namplitude = 1 \n\nt= np.linspace(0, 1, 1000) \nvoltage_signal = np.sin(2*np.pi*freq*t) + np.random.normal(0, 0.1, 1000)", "predict": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Set parameters\nfreq = 250 # Hz\namplitude = 1 # V\n\n# Generate random noise\nnoise = np.random.normal(0, 1, 10000)\n\n# Generate signal\nsignal = amplitude * np.sin(2 * np.pi * freq * np.arange(10000)) + noise\n\n# Plot signal\nplt.plot(np.arange(10000), signal)\nplt.xlabel('Time (s)')\nplt.ylabel('Voltage (V)')\nplt.title('Voltage Signal with Random Noise')\nplt.show()"}
{"prompt": "Write a Python function that takes an array of numbers and returns an array with the greatest and smallest values.\n[3, 4, 2, 8, 15, 6] ", "label": "def min_max(arr):\n  min_val = min(arr)\n  max_val = max(arr)\n  return [min_val, max_val]\n\nresult = min_max([3, 4, 2, 8, 15, 6])\nprint(result)", "predict": "def min_max(arr):\n    min_val = min(arr)\n    max_val = max(arr)\n    return [min_val, max_val]\n\nresult = min_max([3, 4, 2, 8, 15, 6])\nprint(result)"}
{"prompt": "Construct a Python code that accepts a string as an input and returns the total number of vowels in the string ", "label": "def count_vowels(string): \n    vowels = \"aeiou\"\n    count = 0\n    for s in string:\n        if s.lower() in vowels:\n            count += 1\n    return count", "predict": "def count_vowels(string):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in string:\n        if char in vowels:\n            count += 1\n    return count"}
{"prompt": "Generate a Python program that prints out every number from 0 to 10, but with every number being multiplied by 2.\nNot applicable ", "label": "for i in range(11):\n print(i*2)", "predict": "for i in range(0, 11):\n print(i * 2)"}
{"prompt": "Create a Python program that takes a string and indicates whether it is a palindrome or not.\n\"racecar\" ", "label": "def is_palindrome(s):\n  s = s.lower()\n  left = 0\n  right = len(s) - 1\n  \n  while left < right:\n    if s[left] != s[right]:\n      return False\n    left += 1\n    right -= 1\n  return True\n  \nprint(is_palindrome(\"racecar\"))", "predict": "def is_palindrome(string):\n    reversed_string = string[::-1]\n    if string == reversed_string:\n        return True\n    else:\n        return False\n\nresult = is_palindrome(\"racecar\")\nprint(result)"}
{"prompt": "Generate a machine learning model in Python using scikit-learn for classifying digits in the MNIST dataset.\nmnist dataset ", "label": "# Import the necessary libraries \nfrom sklearn.datasets import fetch_openml\nimport numpy as np\nfrom sklearn.linear_model import LogisticRegression\n\n#Load the dataset\nmnist = fetch_openml('mnist_784')\n\n# Split into features and labels\nX = mnist.data\ny = mnist.target\n\n# Reshape data to be valid\nX = X.reshape((X.shape[0], -1))\nprint(X.shape, y.shape)\n\n# Create a Logistic Regression classifier \nclf = LogisticRegression()\n\n# Fit the model to the data \nclf.fit(X, y)", "predict": "import numpy as np\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# Load the data\nX_train, y_train = np.load(\"mnist_X_train.npy\"), np.load(\"mnist_y_train.npy\")\nX_test, y_test = np.load(\"mnist_X_test.npy\"), np.load(\"mnist_y_test.npy\")\n\n# Create and train the model\nmodel = KNeighborsClassifier(n_neighbors=3)\nmodel.fit(X_train, y_train)\n\n# Evaluate the model\nscore = model.score(X_test, y_test)\nprint(\"Model accuracy:\", score)"}
{"prompt": "Develop a Python script to generate an RSA public/private key pair.\nNot applicable ", "label": "from Crypto.PublicKey import RSA\n\ndef generate_key_pair():\n key = RSA.generate(2048)\n pub_key = key.publickey().export_key().decode()\n with open('public.pem', 'w') as file:\n  file.write(pub_key)\n \n priv_key = key.export_key().decode()\n with open('private.pem', 'w') as file:\n  file.write(priv_key)\n\ngenerate_key_pair()", "predict": "import rsa\n\n# Generate the public/private key pair\nkey = rsa.newkeys(2048)\n\n# Print the public key\nprint(\"Public Key:\")\nprint(\"\"\"\nn = {}\ne = {}\n\"\"\".format(key.n, key.e))\n\n# Print the private key\nprint(\"Private Key:\")\nprint(\"\"\"\nn = {}\nd = {}\np = {}\nq = {}\n\"\"\".format(key.n, key.d, key.p, key.q))"}
{"prompt": "Create a web application in Python using Flask that will take user input and generate an HTML page with the input.\nNot applicable ", "label": "from flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n@app.route('/', methods=['GET', 'POST'])\ndef home():\n    if request.method == 'POST':\n        input_text = request.form.get('input_text')\n        return render_template('result.html', input_text=input_text)\n    return render_template('index.html')\n\nif __name__ == '__main__':\n    app.run(debug=True)\n\n// result.html file\n<html>\n <body>\n  <h1>Your Input: </h1>\n  <p>{{input_text}}</p>\n </body>\n</html>", "predict": "from flask import Flask, request, render_template\n\napp = Flask(__name__)\n\n@app.route('/', methods=['GET', 'POST'])\ndef index():\n if request.method == 'POST':\n user_input = request.form.get('user_input')\n \n return render_template('index.html', user_input=user_input)\n\n if __name__ == '__main__':\n app.run(debug=True)\n\n# index.html\n<form method=\"post\">\n <input type=\"text\" name=\"user_input\" />\n <input type=\"submit\" value=\"Submit\" />\n</form>\n\n{% if user_input %}\n <p>{{ user_input }}</p>\n{% endif %}"}
{"prompt": "Implement a basic machine learning model in Python that performs binary classification on the given data.\n[\n [0.3, 0.2, 0.6],\n [0.3, 0.1, 0.4],\n [0.2, 0.3, 0.4],\n [0.7, 0.4, 0.2],\n [0.5, 0.2, 0.1]\n] ", "label": "from sklearn import linear_model\nfrom sklearn.metrics import accuracy_score\n\nX = [[0.3, 0.2, 0.6], [0.3, 0.1, 0.4], [0.2, 0.3, 0.4], [0.7, 0.4, 0.2], [0.5, 0.2, 0.1]]\ny = [1, 0, 0, 1, 0]\n\nmodel = linear_model.LogisticRegression()\nmodel.fit(X, y)\n\ny_pred = model.predict(X)\naccuracy = accuracy_score(y, y_pred)\n\nprint('Model accuracy:', accuracy)", "predict": "import numpy as np\nfrom sklearn.linear_model import LogisticRegression\n\n# Create the training data\nX = np.array([[0.3, 0.2, 0.6],\n              [0.3, 0.1, 0.4],\n              [0.2, 0.3, 0.4],\n              [0.7, 0.4, 0.2],\n              [0.5, 0.2, 0.1]])\ny = np.array([0, 0, 0, 1, 0])\n\n# Create the model\nmodel = LogisticRegression()\n\n# Train the model\nmodel.fit(X, y)\n\n# Make predictions\npredictions = model.predict(X)\n\n# Print the predictions\nprint(predictions)"}
{"prompt": "Design a machine learning algorithm in Python that can identify whether a given sentence is an 'affirmative' sentence or a 'negative' sentence. ", "label": "import re \nimport nltk\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords \n\n# Function to find the negation words\ndef findNegation(sentence):\n    # save all the negation words\n    negationwords = {'not', 'never', 'no', 'none', 'non', 'neither',\n                     'nobody', 'nowhere', 'cannot', 'couldnt', 'shouldnt', \n                     'wouldnt', 'dont', 'didnt', 'hasnt', 'havent', 'isnt', 'arent'} \n    words = nltk.word_tokenize(sentence)\n    neg = []\n    for word in words:\n        if word in negationwords:\n            neg.append(word)\n    return neg\n\n# Function to check if the sentence is affirmative or negative\ndef isAffirmativeorNegative(sentence):\n     negationwords = findNegation(sentence)\n    if len(negationwords)==0: \n        return \"Affirmative\" \n    else: \n        return \"Negative\"    \n\nsentence = \"He always comes late but I dont mind.\"\nresult = isAffirmativeorNegative(sentence) \nprint(result)  # prints Negative", "predict": "import nltk\nfrom nltk.tokenize import word_tokenize\n\ndef identify_sentiment(sentence):\n    tokens = word_tokenize(sentence)\n    words = [word for word in tokens if word.isalpha()]\n    words = [word.lower() for word in words]\n    sentiment = 0\n    for word in words:\n        if word in positive_words:\n            sentiment += 1\n        elif word in negative_words:\n            sentiment -= 1\n    if sentiment > 0:\n        return 'Affirmative'\n    elif sentiment == 0:\n        return 'Neutral'\n    else:\n        return 'Negative'"}
{"prompt": "Create an environment object that can execute and analyze Python code. The environment includes a set of predefined global variables and functions", "label": "import os\nimport ast\nimport traceback\nimport time\nimport sys\nimport types\nimport builtins\nimport collections\nimport astor\nimport weakref\nfrom .jsonify import jsonify, jsonify_print, jsonify_print_expr\nfrom .datalayer import Analysis, Execution, FileEdit\nfrom .router import send\nfrom . import stdlib\n\ndef now():\n    return int(time.time() * 1000)\n\nclass Environment:\n\n    extra_globals = {}\n\n    active = weakref.WeakSet()\n\n    def __init__(self, path):\n        self.path = path\n        self.globals = {\n            \"print\": jsonify_print,\n            \"print_expr\": jsonify_print_expr,\n            \"jsonify\": jsonify,\n            \"jsonify_print\": jsonify_print,\n            \"listdir\": stdlib.listdir,\n            \"__builtins__\": __builtins__,\n            \"FILES\": stdlib.FilesDict(self.path),\n        }\n        for name in stdlib.builtin_names:\n            self.globals[name] = getattr(stdlib, name)\n        self._cached_analysis = {}\n        self.active.add(self)\n\n    predefined_names = set([\"parsed\"])\n\n    def init_commands(self):\n        \"\"\"Returns a list of commands that represent the existing state of the\n        filesystem\"\"\"\n        for path in os.listdir(self.path):\n            if path.endswith(\".json\"):\n                continue\n            if not os.path.isfile(os.path.join(self.path, path)):\n                continue\n            try:\n                with open(os.path.join(self.path, path), \"r\") as fp:\n                    content = fp.read()\n                yield FileEdit(filename=path, content=content, external_edit=True)\n            except UnicodeDecodeError:\n                pass\n\n    def fixup_globals(self):\n        for name, value in self.extra_globals.items():\n            self.globals.setdefault(name, value)\n\n    def execute(self, filename, content, subexpressions=False):\n        print(\"Executing\", filename, subexpressions)\n        self.fixup_globals()\n        stdout = Stdout()\n        compiled = None\n        try:\n            parsed = ast.parse(content, filename, mode='exec')\n            RewriteExprToPrint(subexpressions).walk(parsed)\n            var_inspect = VariableInspector()\n            var_inspect.walk(parsed)\n            print(\"varsed used:\", sorted(var_inspect.used), \"set:\", sorted(var_inspect.set), \"imported:\", var_inspect.imports)\n            compiled = compile(parsed, filename, 'exec')\n        except:\n            stdout.write(traceback.format_exc())\n\n        def displayhook(value):\n            stdout.write_repr(value)\n\n        orig_displayhook = sys.displayhook\n        sys.displayhook = displayhook\n        orig_stdout = sys.stdout\n        orig_stderr = sys.stderr\n        sys.stdout = stdout\n        sys.stderr = stdout\n        self.globals[\"parsed\"] = parsed\n        self.globals[\"ast\"] = ast\n        globals_before = self.globals.copy()\n        start = time.time()\n        try:\n            try:\n                if compiled:\n                    exec(compiled, self.globals)\n            except:\n                traceback.print_exc()\n        finally:\n            end = time.time()\n            sys.dipslayhook = orig_displayhook\n            sys.stdout = orig_stdout\n            sys.stderr = orig_stderr\n        local_scope = dict(\n            (name, value)\n            for name, value in self.globals.items()\n            if name not in globals_before or globals_before[name] is not value)\n        defines = dict(\n            (key, {\n                \"json\": jsonify(local_scope[key]),\n                \"type\": str(type(local_scope[key])),\n            })\n            for key in local_scope", "predict": ".\n\n# Define a function to execute code in the environment\ndef execute_code(code):\n  # Create a global environment\n  global_env = {\n    'x': 10,\n    'y': 20,\n    'add': lambda a, b: a + b\n  }\n\n  # Execute the code in the environment\n  result = exec(code, global_env)\n\n  # Return the result\n  return result\n\n# Define a function to analyze code in the environment\ndef analyze_code(code):\n  # Create a global environment\n  global_env = {\n    'x': 10,\n    'y': 20,\n    'add': lambda a, b: a + b\n  }\n\n  # Execute the code in the environment\n  result = exec(code, global_env)\n\n  # Return the result\n  return result\n\n# Execute a code snippet\nresult = execute_code('x + y')\nprint(result)\n\n# Analyze a code snippet\nresult = analyze_code('x + y')\nprint(result)"}
{"prompt": "Write a Python class to modify the case of the string\nA String with the text: \"Hello World\" ", "label": "class StringCaseModifier:\n    def __init__(self, string):\n        self.string = string\n\n    def to_upper(self):\n        return self.string.upper()\n\n    def to_lower(self):\n        return self.string.lower()\n    \n    def to_title(self):\n        return self.string.title()\n\nif __name__ == '__main__':\n    test_string = 'Hello World'\n    string_modifier = StringCaseModifier(test_string)\n    print(string_modifier.to_upper())\n    print(string_modifier.to_lower())\n    print(string_modifier.to_title())", "predict": "class CaseModification:\n    def __init__(self, string):\n        self.string = string\n\n    def to_upper(self):\n        return self.string.upper()\n\n    def to_lower(self):\n        return self.string.lower()\n\n    def title(self):\n        return self.string.title()"}
{"prompt": "Generate a Python program to reverse the order of words in a given string. ", "label": "def reverse_words(str):\n    return \" \".join(str.split()[::-1])", "predict": "def reverse_words(string):\n    words = string.split(' ')\n    reversed_words = words[::-1]\n    return''.join(reversed_words)"}
{"prompt": "Write a Python program to replace a given string with another string.\nsentence = \"I love walking on the beach\"\nold_word = \"walking\"\nnew_word = \"swimming\" ", "label": "sentence = \"I love walking on the beach\"\nold_word = \"walking\"\nnew_word = \"swimming\"\n\nnew_sentence = sentence.replace(old_word, new_word)\n\nprint(\"The new sentence is: '{}'\".format(new_sentence))", "predict": "sentence = \"I love walking on the beach\"\nold_word = \"walking\"\nnew_word = \"swimming\"\n\nsentence = sentence.replace(old_word, new_word)\nprint(sentence)\n# Output: I love swimming on the beach"}
{"prompt": "Write a python program to merge two lists of integers into one sorted list without using the in-built sort function.\nlist1 = [3, 5, 9, 1, 8];\nlist2 = [4, 11, 7, 2]; ", "label": "def merge_sort(list1, list2): \n    merged_list = list1 + list2 \n    for i in range(len(merged_list)): \n        min_idx = i           \n        for j in range(i+1, len(merged_list)): \n            if merged_list[min_idx] > merged_list[j]: \n                min_idx = j \n        merged_list[i], merged_list[min_idx] = merged_list[min_idx], merged_list[i] \n    return merged_list \n  \nlist1 = [3, 5, 9, 1, 8] \nlist2 = [4, 11, 7, 2]\n  \nprint(merge_sort(list1, list2))", "predict": "def merge_lists(list1, list2):\n    merged_list = []\n    i = 0\n    j = 0\n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            merged_list.append(list1[i])\n            i += 1\n        else:\n            merged_list.append(list2[j])\n            j += 1\n    merged_list += list1[i:]\n    merged_list += list2[j:]\n    return merged_list"}
{"prompt": "Create a Python dictionary with three keys named \"Name\", \"Address\" and \"Phone\".\nName = 'John';\nAddress = '212 Smith Street';\nPhone = '732-123-4567'; ", "label": "info = {\n 'Name':Name,\n 'Address':Address,\n 'Phone':Phone\n}", "predict": "my_dict = {\n 'Name': Name,\n 'Address': Address,\n 'Phone': Phone\n}"}
{"prompt": "Implement a chatbot in Python that can provide customer support in a restaurant.\nrandom_user_question.txt\nWhat meals do you serve? ", "label": "import random\n\n# list of possible answers\npossible_responses = [\n 'We serve a variety of dishes - from salads to pizzas to steaks!',\n 'Check out our menu for a full list of options',\n 'We serve a variety of dishes, including traditional Italian, Mexican, and American fare. What would you like to try?',\n 'We have a great selection of meals! What kind of dish are you looking for?',\n 'We have a unique selection of meals - have you checked out our menu?'\n]\n\n# read the user's question\nwith open('random_user_question.txt') as user_question:\n    question = user_question.read()\n\n# choose a random response\nresponse = random.choice(possible_responses)\n\n# display the response to the user\nprint(response)", "predict": "import random\n\n# Define the responses for the chatbot\nresponses = {\n    \"What meals do you serve?\": \"We serve a variety of meals, including burgers, sandwiches, salads, and pasta dishes.\",\n    \"What drinks do you serve?\": \"We serve a variety of drinks, including sodas, juices, and alcoholic beverages.\",\n    \"What is your special of the day?\": \"Our special of the day is a grilled chicken sandwich with a side of fries.\"\n}\n\n# Read the user's question\nwith open('random_user_question.txt', 'r') as f:\n    user_question = f.readline()\n\n# Get the chatbot's response\nif user_question in responses:\n    response = responses[user_question]\nelse:\n    response = \"I'm sorry, I don't understand.\"\n\n# Print the chatbot's response\nprint(response)"}
{"prompt": "Design a Python program to simulate a simple ATM machine. ", "label": "# account class with the necessary functions \nclass Account:\n    def __init__(self, name, balance):\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, amount):\n        self.balance += amount\n\n    def withdrawal(self, amount):\n        self.balance -= amount\n\n# ATM class with the necessary functions\nclass ATM:\n    def __init__(self):\n        self.accounts = []\n\n    def createAccount(self, name, balance):\n        account = Account(name, balance)\n        self.accounts.append(account)\n\n    def deposit(self, name, amount):\n        for account in self.accounts:\n            if account.name == name:\n                account.deposit(amount)\n\n    def withdrawal(self, name, amount):\n        for account in self.accounts:\n            if account.name == name:\n                account.withdrawal(amount)\n\n    def printBalance(self, name):\n        for account in self.accounts:\n            if account.name == name:\n                print(name, \" Balance: \", account.balance)", "predict": "class ATM:\n    def __init__(self):\n        self.balance = 0\n    \n    def deposit(self, amount):\n        self.balance += amount\n        print(\"Amount successfully deposited.\")\n    \n    def withdraw(self, amount):\n        if self.balance >= amount:\n            self.balance -= amount\n            print(\"Amount successfully withdrawn.\")\n        else:\n            print(\"Insufficient funds.\")\n    \n    def check_balance(self):\n        print(\"Your current balance is:\", self.balance)"}
{"prompt": "Create a program in Python which will take in a list of strings, and print out the longest string in the list.\n['foo', 'test', 'longstring', 'bar'] ", "label": "def longest_string(str_list): \n    longest_str = '' \n    for str in str_list: \n        if len(str) > len(longest_str): \n            longest_str = str \n  \n    return longest_str \n\nstring_list = ['foo', 'test', 'longstring', 'bar'] \nlong_string = longest_string(string_list) \n\nprint(long_string)", "predict": "def find_longest_string(list_of_strings):\n longest_string = \"\"\n for string in list_of_strings:\n if len(string) > len(longest_string):\n longest_string = string\n return longest_string\n\nlist_of_strings = ['foo', 'test', 'longstring', 'bar']\nlongest_string = find_longest_string(list_of_strings)\nprint(longest_string) # prints 'longstring'"}
{"prompt": "Create a program in Python that will find the smallest number in a list of numbers.\n[5, 4, 12, 17, 9] ", "label": "def find_smallest_number(numbers):\n    smallest = numbers[0] \n    for num in numbers:\n        if num < smallest:\n            smallest = num\n    return smallest\n\nprint(find_smallest_number([5, 4, 12, 17, 9]))", "predict": "def find_smallest_number(numbers):\n    smallest = numbers[0]\n    for num in numbers:\n        if num < smallest:\n            smallest = num\n    return smallest\n\nsmallest = find_smallest_number([5, 4, 12, 17, 9])\nprint(smallest)"}
{"prompt": "Generate a Python code to compute the moving average of time-series data points.\nwindow = 3\ntime_series = [3, 5, 7, 2, 8, 10, 11, 65, 72, 81, 99, 100, 150] ", "label": "def moving_average(data_points, window):\n     moving_average = []\n     for index in range(len(data_points)):\n       start = 0 if index-window+1 < 0 else index-window+1\n       window_data = data_points[start:index+1]\n       average = sum(window_data)/len(window_data)\n       moving_average.append(average)\n \n     return moving_average\n \nwindow = 3\ntime_series = [3, 5, 7, 2, 8, 10, 11, 65, 72, 81, 99, 100, 150]\nmoving_average = moving_average(time_series, window)\nprint(moving_average)", "predict": "def moving_average(window, time_series):\n    window_sum = 0.0\n    window_count = 0\n\n    ma = []\n    for i in range(len(time_series)):\n        window_sum += time_series[i]\n        window_count += 1\n        if window_count < window:\n            continue\n        ma.append(window_sum / window)\n        window_sum = window_sum - time_series[i - window + 1]\n        window_count -= 1\n\n    return ma\n\nwindow = 3\ntime_series = [3, 5, 7, 2, 8, 10, 11, 65, 72, 81, 99, 100, 150]\n\nmoving_average = moving_average(window, time_series)\nprint(moving_average)"}
{"prompt": "Create a Python program to filter an array by a given criteria.\ncriteria = x % 5 == 0\narray = [1, 2, 5, 10, 15, 20, 25, 30] ", "label": "# Function to filter an array by a given criteria\ndef filter_array(array, criteria):\n # Create an empty list\n filtered_array = []\n # Iterate through the array\n for value in array:\n  # Check if it matches the criteria\n  if criteria(value):\n   # If it matches, add it to the list\n   filtered_array.append(value)\n\n # Return the filtered array\n return filtered_array\n\n# Input criteria\ndef criteria(x):\n return x % 5 == 0\n\nresult = filter_array(array, criteria)\nprint(result) # Outputs [5, 10, 15, 20, 25, 30]", "predict": "def filter_by_criteria(criteria, array):\n    filtered_array = []\n    for item in array:\n        if criteria(item):\n            filtered_array.append(item)\n    return filtered_array\n\ncriteria = lambda x: x % 5 == 0\narray = [1, 2, 5, 10, 15, 20, 25, 30]\n\nfiltered_array = filter_by_criteria(criteria, array)\nprint(filtered_array)"}
{"prompt": "Create a Python function to find the maximum number from a list of non-negative integers.\nlist = [1, 3, 12, 5, 8, 10] ", "label": "def find_max(list): \n  max_num = 0\n  for i in list: \n    if i > max_num: \n      max_num = i\n  \n  return max_num\n\nlist = [1, 3, 12, 5, 8, 10]\nmax_num = find_max(list)\nprint(\"Maximum number is:\", max_num)", "predict": "def find_max(list):\n    max_num = list[0]\n    for num in list:\n        if num > max_num:\n            max_num = num\n    return max_num\n\nlist = [1, 3, 12, 5, 8, 10]\nmax_num = find_max(list)\nprint(max_num)"}
{"prompt": "Write a Python function that takes a list of strings and returns the concatenation of all the elements with a separator/delimiter.\nstrings = [\"Sample\",\"Text\",\"Hello\"] ", "label": "def concatenate_strings(strings, separator):\n return separator.join(strings)", "predict": "def concatenate_with_delimiter(strings, delimiter):\n    return delimiter.join(strings)"}
{"prompt": "Come up with a code in Python to find the union of two lists.\nList 1: [1, 2, 3, 4, 5]\nList 2: [3, 4, 5, 6, 7] ", "label": "list1 = [1, 2, 3, 4, 5]\nlist2 = [3, 4, 5, 6, 7]\n\ndef unionList(list1, list2):\n    return set(list1 + list2)\n\nresult = unionList(list1, list2)\nprint(result)", "predict": "list1 = [1, 2, 3, 4, 5]\nlist2 = [3, 4, 5, 6, 7]\n\ndef union_list(list1, list2):\n    union_list = list1 + list2\n    return list(set(union_list))\n\nprint(union_list(list1, list2))"}
{"prompt": "Construct a python dictionary containing student names and marks as key-value pairs. ", "label": "student_marks = { \n    \"John\" : 90, \n    \"Levi\" : 85, \n    \"Jill\" : 95, \n    \"Sara\" : 75\n}", "predict": "student_marks = {\n    \"John\": 80,\n    \"Mary\": 75,\n    \"David\": 90,\n    \"Jane\": 85\n}"}
{"prompt": "Write a code snippet for a simple linear regression model in Python.\nNot applicable ", "label": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn import linear_model\n\n# Read data from CSV\ndata = pd.read_csv('data.csv')\n\n# Set X and Y\nX = data['X']\nY = data['Y']\n\n# Create linear regression model\nmodel = linear_model.LinearRegression()\n\n# Train the model\nmodel.fit(X, Y)\n\n# Make predictions\nY_pred = model.predict(X)\n\n# Visualize the results\nplt.scatter(X, Y)\nplt.plot(X, Y_pred, color='red')\nplt.show()", "predict": "import numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Create a simple linear regression model\nmodel = LinearRegression()\n\n# Train the model using the training sets\nmodel.fit(X_train, y_train)\n\n# Make predictions using the testing set\ny_pred = model.predict(X_test)"}
{"prompt": "Write code in Python to implement a linked list using classes. ", "label": "class Node:\n    \"\"\"Node class to represent the node in a linked list\"\"\"\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\n\nclass LinkedList:\n    \"\"\"LinkedList class to represent the entire linked list\"\"\"\n    def __init__(self):\n        self.head = None\n    \n    def print_list(self):\n        node = self.head\n        while(node):\n            print(node.data)\n            node = node.next\n\n# Creating a linked list \nlinked_list = LinkedList()\n\n# Creating the nodes\nnode1 = Node(1)\nnode2 = Node(2)\nnode3 = Node(3)\n\n# Linking the nodes\nlinked_list.head = node1\nnode1.next = node2\nnode2.next = node3\n\n# Printing the linked list\nlinked_list.print_list()", "predict": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def push(self, new_data):\n        new_node = Node(new_data)\n        new_node.next = self.head\n        self.head = new_node\n\n    def print_list(self):\n        temp = self.head\n        while temp:\n            print(temp.data)\n            temp = temp.next"}
{"prompt": "Construct an XML document using Python which contains the following data.\nItem1, Item2, Item3 ", "label": "import xml.etree.ElementTree as ET\n\n# creating the root element\ndata = ET.Element('data')\n\nitems = ['Item1', 'Item2', 'Item3']\n\n# loop over items\nfor item in items:\n    # creating sub elements\n    item_element = ET.SubElement(data, 'item')\n\n    # assign the value for the sub elements\n    item_element.text = item\n\n# write the XML Tree\ntree = ET.ElementTree(data)\ntree.write('data.xml')", "predict": "import xml.etree.ElementTree as ET\n\nroot = ET.Element('items')\nitem1 = ET.SubElement(root, 'item')\nitem1.text = 'Item1'\nitem2 = ET.SubElement(root, 'item')\nitem2.text = 'Item2'\nitem3 = ET.SubElement(root, 'item')\nitem3.text = 'Item3'\n\ntree = ET.ElementTree(root)\ntree.write('items.xml')"}
{"prompt": "Make a Python program generating numbers ", "label": "def generate_numbers():\n    numbers = []\n    for i in range(10):\n        numbers.append(random.randint(0,10))\n    return numbers", "predict": "def generate_numbers():\n    for i in range(10):\n        print(random.randint(0, 100))"}
{"prompt": "Convert this sql query into a python program\nSELECT * FROM orders\nWHERE YEAR(order_date) = 2020 ", "label": "import datetime, pyodbc\n\n# Establish a connection to the database\nconn = pyodbc.connect(\"<connection details>\")\ncursor = conn.cursor()\n\n# Get the year of the order date\nsql = \"SELECT * FROM orders\"\nquery_date = datetime.date.today().year\nwhere_clause = \"WHERE YEAR(order_date) = ?\"\n\n# Execute the query\ncursor.execute(sql + \" \" + where_clause, query_date)\nresults = cursor.fetchall()\n\n# Output the results\nfor result in results:\n    print(result)", "predict": "import sqlite3\n\nconn = sqlite3.connect('database.db')\ncursor = conn.cursor()\n\ncursor.execute(\"SELECT * FROM orders WHERE YEAR(order_date) = 2020\")\n\nresults = cursor.fetchall()\n\nfor result in results:\n    print(result)\n\nconn.close()"}
{"prompt": "This code loads a configuration file and libraries, imports necessary modules, defines two custom colormaps, loads a data file, performs cubic spline interpolation", "label": "# -*- coding: utf-8 -*-\n\nimport os, sys\nprint(\"CWD: \" + os.getcwd() )\n\n# Load configuration file before pyplot\nconfig_path = os.path.abspath('../matplotlib/')\nsys.path.append(config_path)\nimport configuration as config\n\n# Library path\nlib_path = os.path.abspath('../../lib')\nsys.path.append(lib_path)\nimport framemanager_python\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport scipy.interpolate\n\n\n# Color map\n# Define \"bds_highcontrast\" color map by Britton Smith <brittonsmith@gmail.com> from http://yt-project.org/ \ncdict = {'red':   ((0.0, 80/256., 80/256.),\n                   (0.2, 0.0, 0.0),\n                   (0.4, 0.0, 0.0),\n                   (0.6, 256/256., 256/256.),\n                   (0.95, 256/256., 256/256.),\n                   (1.0, 150/256., 150/256.)),\n         'green': ((0.0, 0/256., 0/256.),\n                   (0.2, 0/256., 0/256.),\n                   (0.4, 130/256., 130/256.),\n                   (0.6, 256/256., 256/256.),\n                   (1.0, 0.0, 0.0)),\n         'blue':  ((0.0, 80/256., 80/256.),\n                   (0.2, 220/256., 220/256.),\n                   (0.4, 0.0, 0.0),\n                   (0.6, 20/256., 20/256.),\n                   (1.0, 0.0, 0.0))}\n\nplt.register_cmap(name='bds_highcontrast', data=cdict) \n\n# Define YELLOW_RED colormap: each row consists of (x, y0, y1) where the x must increase from 0 to 1\n#row i:    x  y0  y1\n#               /\n#              /\n#row i+1:  x  y0  y1\ncdict = {'red':   ((0.0, 0.9, 0.9),\n                   (1.0, 0.9, 0.9)),\n         'green': ((0.0, 0.9, 0.9),\n                   (1.0, 0.0, 0.0)),\n         'blue':  ((0.0, 0.0, 0.0),\n                   (1.0, 0.0, 0.0))}\nplt.register_cmap(name='YELLOW_RED', data=cdict) \n#cmap=plt.get_cmap('YELLOW_RED')\n#cmap=plt.get_cmap('autumn')\n#cmap=plt.get_cmap('gist_heat')\n#cmap=plt.get_cmap('Spectral_r')\n#cmap.set_under([0.0, 0.0, 0.0])\n\n\n\n# Load profile\nprofileName = os.path.abspath(\"foam_ball_short.dsa\")\nframeID = 230\n\nframeManager = framemanager_python.FrameManagerWrapper()\nframeManager.load_profile(profileName);\nnumTSFrames = frameManager.get_tsframe_count();\n\nmatrixID = 1\n\n# Load single frame\ntsframe = np", "predict": ", and defines two custom functions to compute the velocity and acceleration. \"\"\"\n    Copyright (c) 2013-2014 J. R. Smith\n    Copyright (c) 2013-2014 M. C. Merrill\n    Copyright (c) 2013-2014 C. A. Parnell\n    Copyright (c) 2013-2014 J. L. Hester\n    Copyright (c) 2013-2014 M. A. Kemp\n    Copyright (c) 2013-2014 N. A. H. Dulaimi\n    Copyright (c) 2013-2014 M. A. R. Kemp\n    Copyright (c) 2013-2014 J. A. T. Williams\n    Copyright (c) 2013-2014 C. A. J. Williams\n    Copyright (c) 2013-2014 J. A. L. R. Hester\n    Copyright (c) 2013-2014 A. M. M. M. M. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R. R."}
{"prompt": "Write a function to generate a set of random numbers in Python. ", "label": "import random\n\ndef generate_randoms(n):\n  # generate a set of n random numbers\n  rands = []\n  for _ in range(n):\n    rands.append(random.randint(1,100))\n  return rands\n\ngenerate_randoms(10)", "predict": "import random\n\ndef generate_random_numbers(n):\n    random_numbers = []\n    for i in range(n):\n        random_numbers.append(random.randint(0, 100))\n    return random_numbers"}
{"prompt": "Write a python program to check if a given string contains any numbers ", "label": "def string_contains_number(string):\n    pattern = re.compile(\"[0-9]\") \n    return pattern.search(string) != None", "predict": "def has_numbers(string):\n    return any(char.isdigit() for char in string)"}
{"prompt": "Design a class in Python for storing movie information including the name, year of release, genre and rating. ", "label": "class Movie:\n    def __init__(self, name, release_year, genre, rating):\n        self.name = name\n        self.release_year = release_year\n        self.genre = genre\n        self.rating = rating\n\nmovie = Movie(\"Interstellar\", 2014, \"Sci-Fi\", 8.4)\nprint(movie.name, movie.release_year, movie.genre, movie.rating)", "predict": "class Movie:\n    def __init__(self, name, year, genre, rating):\n        self.name = name\n        self.year = year\n        self.genre = genre\n        self.rating = rating"}
{"prompt": "Given an input string, write a Python program to count the occurrence of each character in the string.\n\"Hello, World!\" ", "label": "def char_occurrences(a_string):\n char_count = {}\n for char in a_string:\n if char in char_count:\n char_count[char] += 1\n else:\n char_count[char] = 1\n return char_count\n\nstring = \"Hello, World!\"\nprint(char_occurrences(string))\n\n# Output\n# {'H': 1, 'e': 1, 'l': 3, 'o': 2, ', ': 1, 'W': 1, 'r': 1, 'd': 1, '!': 1}", "predict": "def count_characters(s):\n    counts = {}\n    for c in s:\n        if c in counts:\n            counts[c] += 1\n        else:\n            counts[c] = 1\n    return counts\n\nresult = count_characters(\"Hello, World!\")\nprint(result)"}
{"prompt": "Create a Python program to generate a random password. Specify a minimum length of 8 characters and it should contain at least one number and one special character.\nNot applicable ", "label": "import string\nimport random\n\ndef generate_password():\n length = 8\n chars = string.ascii_letters + string.digits + string.punctuation\n password = \"\".join(random.choice(chars) for i in range(length))\n \n return password\n\npassword = generate_password()\nprint(password)", "predict": "import random\nimport string\n\ndef generate_password():\n    length = 8\n    chars = string.ascii_letters + string.digits + string.punctuation\n    return ''.join(random.choice(chars) for _ in range(length))\n\nprint(generate_password())"}
{"prompt": "Write a Python function to generate an even number between 10 and 200 that is divisible by 5.\nNot applicable ", "label": "def generate_even_number():\n# Generate a random number between 10 and 200\n num = random.randint(10, 200)\n# Check if the number is even\n if num % 2 == 0:\n# Check if the number is divisible by 5\n  if num % 5 == 0:\n   return num\n# If number not divisible by 5, increment number\n  else:\n   return generate_even_number(num+1)\n# If number not even, increment number\n else:\n   return generate_even_number(num+1)", "predict": "def generate_even_number():\n    number = random.randint(10, 200)\n    while number % 5!= 0 or number % 2!= 0:\n        number = random.randint(10, 200)\n    return number"}
{"prompt": "Create a Python function to find the closest value to a given number in a given array.\n[5, 4, 8, 7], 5 ", "label": "def closest_num(arr, num):\n    arr.sort()\n    n = len(arr)\n    left = 0\n    right = n - 1\n \n    if arr[right] <= num:\n        return arr[right]\n    elif arr[left] >= num:\n        return arr[left]\n    while right-left > 1:\n        mid = (right+left)//2\n        if arr[mid] == num:\n            return arr[mid]\n        elif arr[mid] > num:\n            right = mid\n        else:\n            left = mid\n    return sorted([arr[right], arr[left]])[0]\n\narr = [5, 4, 8, 7]\nnum = 5\nclosest = closest_num(arr, num)\nprint(closest)", "predict": "def closest_value(arr, num):\n  min_diff = float('inf')\n  closest_val = 0\n  for val in arr:\n    diff = abs(num - val)\n    if diff < min_diff:\n      min_diff = diff\n      closest_val = val\n  return closest_val\n\narr = [5, 4, 8, 7]\nnum = 5\n\nclosest_val = closest_value(arr, num)\nprint(closest_val)"}
{"prompt": "Write a Python code to store and print the multiplication table of a given number.\nnum = 5 ", "label": "# Function to print the multiplication table\ndef print_multiplication_table(num):\n    # Iterate over numbers from 1 to 10\n    for i in range(1, 11):\n        print('{0} x {1} = {2}'.format(num, i, num*i))\n\nprint_multiplication_table(5)", "predict": "# Store the multiplication table in a dictionary\nmultiplication_table = {i: num * i for i in range(1, 11)}\n\n# Print the multiplication table\nprint(multiplication_table)"}
{"prompt": "Found and fix any bugs with the following python code.\ndef sum_list(list):\n    sum_list = 0\n    for num in list:\n        sum_list += num\n    return sum ", "label": "def sum_list(list):\n    sum_list = 0\n    for num in list:\n        sum_list += num\n    return sum_list", "predict": "def sum_list(list):\n    sum_list = 0\n    for num in list:\n        sum_list += num\n    return sum_list"}
{"prompt": "Generate a function in Python that takes two parameters: ‘x’ and ‘y’ and prints the output as “x is greater than y” when x is greater than y, otherwise “y is greater than or equal to x”.\nNot applicable ", "label": "def print_comparison(x, y):\n if x > y:\n print(f'{x} is greater than {y}')\n else:\n print(f'{y} is greater than or equal to {x}')", "predict": "def compare_values(x, y):\n if x > y:\n print(f\"{x} is greater than {y}\")\n else:\n print(f\"{y} is greater than or equal to {x}\")"}
{"prompt": "Create a Python program to take an array of integers and calculate the sum of squares of all numbers provided in the array.\n[2, 3, 4] ", "label": "def sum_squares(arr):\n    total = 0\n    for num in arr:\n        total += num ** 2\n    return total\n\narr = [2, 3, 4]\n\ntotal = sum_squares(arr)\nprint(total) # 29", "predict": "def sum_of_squares(arr):\n    result = 0\n    for i in arr:\n        result += i**2\n    return result\n\narr = [2, 3, 4]\nprint(sum_of_squares(arr))"}
{"prompt": "Design an algorithm in Python for finding out the factorial of a given number.\n7 ", "label": "def factorial(n):\n fact = 1\n for i in range(2,n+1):\n  fact = fact * i\n return fact", "predict": "def factorial(n): \n    if n == 0: \n        return 1\n    else: \n        return n * factorial(n-1) \n\nnum = 7\nprint(factorial(num))"}
{"prompt": "Construct a class in Python which implements two methods to add two numbers. ", "label": "class Calculator:\n def __init__(self):\n   pass\n    \n def add_two_numbers(self, a, b):\n   return a + b\n\n def add(self, a, b, c):\n   return a + b + c\n\ncalculator = Calculator()\nresult = calculator.add_two_numbers(1, 2)\nprint(result)", "predict": "class Addition:\n    def __init__(self, num1, num2):\n        self.num1 = num1\n        self.num2 = num2\n\n    def add_int(self):\n        return self.num1 + self.num2\n\n    def add_float(self):\n        return float(self.num1) + float(self.num2)"}
{"prompt": "Create a Python program that takes in a positive integer, then uses a while loop to output the numbers counting down to 1.\n6 ", "label": "num = int(input(\"Enter a positive integer: \"))\n\nwhile num > 0:\n    print(num)\n    num -= 1\n\nprint(\"Done!\")", "predict": "n = int(input(\"Enter a positive integer: \"))\n\nwhile n > 0:\n    print(n)\n    n -= 1\n\nprint(\"Done!\")"}
{"prompt": "Develop an AI Tic-Tac-Toe game using Python.\nNot appliccable ", "label": "import random \n  \n# printing the board  \ndef drawBoard(board): \n  \n    print(\"---------------\") \n    print(\" \"+board[1]+\" | \"+board[2]+\" | \"+board[3]+\" \") \n    print(\"___|___|___\") \n    print(\" \"+board[4]+\" | \"+board[5]+\" | \"+board[6]+\" \") \n    print(\"___|___|___\") \n    print(\" \"+board[7]+\" | \"+board[8]+\" | \"+board[9]+\" \") \n    print(\"   |   |   \") \n  \n# defining the part of the game  \ndef checkWin(board, player): \n    return ( \n        (board[1] == board[2] == board[3] == player) or\n        (board[5] == board[4] == board[6] == player) or \n        (board[7] == board[8] == board[9] == player) or \n        (board[1] == board[5] == board[9] == player) or \n        (board[3] == board[5] == board[7] == player) or \n        (board[1] == board[4] == board[7] == player) or \n        (board[2] == board[5] == board[8] == player) or \n        (board[3] == board[6] == board[9] == player))  \n       \ndef getComputerSpot(board,player): \n    openSpots = [] \n    indices = [i for i, spot in enumerate(board) if spot == '-'] \n    \n    for i in indices: \n        board[i] = player  \n          \n        if checkWin(board, player):  \n            board[i] = '-'  \n            return i  \n        board[i] = '-'  \n          \n    for i in indices: \n        openSpots.append(i) \n    if len(openSpots): \n        return random.choice(openSpots) \n    else: \n        return None \n      \n                \ndef playGame(): \n    board = ['-' for x in range(10)] \n    won = False\n    turn = -1\n    while not won: \n        if turn == -1: \n            # human turn   \n            humanSpot = int(input(\"Enter your spot: \"))\n            if board[humanSpot] == '-': \n                board[humanSpot] = 'X' \n            else: \n                print(\"the spot is already filled!\") \n                continue\n            turn *= -1\n       \n        if checkWin(board,'X'): \n            drawBoard(board) \n            print(\"You won!\") \n            won = True\n            break\n          \n        if turn == 1: \n            # computer turn  \n            computerSpot = getComputerSpot(board,'O') \n            if computerSpot == None: \n                drawBoard(board) \n                print(\"The game is drawn!\")\n                break\n            else: \n                board[computerSpot] = 'O' \n            turn *= -1\n              \n        drawBoard(board) \n          \nplayGame()", "predict": "import random\n\n# Function to draw the board\ndef draw_board(board):\n print('\\n')\n print('---------')\n print('| {} | {} | {} |'.format(board[0], board[1], board[2]))\n print('---------')\n print('| {} | {} | {} |'.format(board[3], board[4], board[5]))\n print('---------')\n print('| {} | {} | {} |'.format(board[6], board[7], board[8]))\n print('---------')\n\n# Function to check if the game is over\ndef check_game_over(board, player):\n # Check if there is a winner\n for i in range(3):\n  if board[i] == board[i+3] == board[i+6] == player:\n   return True\n \n  if board[i] == board[i+1] == board[i+2] == player:\n   return True\n \n  if board[0] == board[4] == board[8] == player:\n   return True\n \n  if board[2] == board[4] == board[6] == player:\n   return True\n\n # Check if the board is full\n if board[0]!='' and board[1]!='' and board[2]!='' and board[3]!='' and board[4]!='' and board[5]!='' and board[6]!='' and board[7]!='' and board[8]!='':\n  return True\n\n return False\n\n# Function to get the player's move\ndef get_player_move(player):\n while True:\n  move = input('{}'s turn! Enter your move (1-9): '.format(player))\n  if move.isdigit() and int(move) in range(1,10):\n   return int(move)\n  else:\n   print('Invalid move!')\n\n# Function to make a move\ndef make_move(board, player, move):\n board[move-1] = player\n\n# Function to check if the game is a draw\ndef check_draw(board):\n if'' in board:\n  return False\n else:\n"}
{"prompt": "Create a Python program to calculate the sum of series 1 + ½ + ⅓ + ... + 1/n.\nn = 5 ", "label": "def seriesSum(n):\n    # set the initial sum to 0\n    total = 0\n\n    # loop over the range\n    for i in range(1, n+1):\n        total += 1 / i\n\n    return total\n\nprint(seriesSum(5))", "predict": "def series_sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum\n\nresult = series_sum(5)\nprint(result)"}
{"prompt": "Develop a decision tree classifier in Python to predict a fourth feature from three other features.\nFeatures: A, B, C ", "label": "import pandas as pd\n\n#importing the dataset \ndataset = pd.read_csv('data.csv')\n\n#splitting the dataset into features and labels \nX = dataset.iloc[:, :-1].values \ny = dataset.iloc[:, 3].values\n\n#importing DecisionTreeClassifier \nfrom sklearn.tree import DecisionTreeClassifier\n\nclassifier = DecisionTreeClassifier(criterion = 'entropy')\n\n#fitting the classifier to the dataset\nclassifier.fit(X,y)", "predict": "import pandas as pd\nfrom sklearn import tree\n\n# Load the data\ndata = pd.read_csv('data.csv')\n\n# Create the feature matrix\nX = data[['A', 'B', 'C']]\ny = data['D']\n\n# Train the decision tree\nclf = tree.DecisionTreeClassifier()\nclf = clf.fit(X, y)"}
{"prompt": "Implement a function in Python that takes a string argument and returns the characters of the string in reverse order. ", "label": "def reverse_string(input_string):\n    reversed_string = ''\n    for i in range(len(input_string)-1, -1, -1):\n        reversed_string += input_string[i]\n    return reversed_string", "predict": "def reverse_string(string):\n    reversed_string = \"\"\n    for char in string:\n        reversed_string = char + reversed_string\n    return reversed_string"}
{"prompt": "Once the user has provided a list of numbers and a target number, suggest a Python function to check if any two numbers from the list sum up to the target. ", "label": "def check_sum(numbers, target):\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False", "predict": "def check_sum(numbers, target):\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return True\n    return False"}
{"prompt": "Write a Python Program to print out the first n prime numbers. ", "label": "def sieve_of_eratosthenes(n):\n    primes = [True] * (n+1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(n**0.5)+1):\n        if primes[i]:\n            for j in range(i*i, n+1, i):\n                primes[j] = False\n\n    prime_numbers = []\n    for i in range(len(primes)):\n        if primes[i]:\n            prime_numbers.append(i) \n    return prime_numbers", "predict": "def n_prime_numbers(n):\n    prime_numbers = []\n    num = 2\n    while len(prime_numbers) < n:\n        is_prime = True\n        for i in prime_numbers:\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_numbers.append(num)\n        num += 1\n    return prime_numbers"}
{"prompt": "Generate a Python function that takes a dictionary as an argument and returns an inverted dictionary.\nNot applicable ", "label": "def invert_dictionary(d):\n inverted_d = {}\n\n for key, value in d.items():\n if value not in inverted_d:\n inverted_d[value] = []\n inverted_d[value].append(key)\n\n return inverted_d", "predict": "def invert_dictionary(d):\n    inverted_d = {}\n    for key, value in d.items():\n        if value not in inverted_d:\n            inverted_d[value] = [key]\n        else:\n            inverted_d[value].append(key)\n    return inverted_d"}
{"prompt": "Write a Python code to implement Gradient Descent Algorithm. ", "label": "\"\"\"\nImplement gradient descent algorithm in Python\n\"\"\"\nimport numpy as np\n\ndef gradient_descent(x,y,learning_rate=0.01,iterations=100): \n    m_curr = b_curr = 0\n    n = len(x)\n    for i in range(iterations):\n        y_predicted = m_curr * x + b_curr\n        cost = (1/n) * sum([val**2 for val in (y-y_predicted)])\n        md = -(2/n)*sum(x*(y-y_predicted))\n        bd = -(2/n)*sum(y-y_predicted)\n        m_curr = m_curr - learning_rate * md\n        b_curr = b_curr - learning_rate * bd\n        print (\"m {}, b {}, cost {} iteration {}\".format(m_curr,b_curr,cost, i))\n    return m_curr, b_curr", "predict": "def gradient_descent(x, y, learning_rate):\n    n = len(x)\n    weights = [0.0] * n\n    weights_change = [0.0] * n\n    weights_change_sum = 0\n    weights_change_sum_squared = 0\n    weights_sum = 0\n    weights_sum_squared = 0\n    y_sum = 0\n    y_sum_squared = 0\n    for i in range(n):\n        weights[i] = weights[i] + weights_change[i]\n        weights_change_sum = weights_change_sum + weights_change[i]\n        weights_change_sum_squared = weights_change_sum_squared + weights_change[i]**2\n        weights_sum = weights_sum + weights[i]\n        weights_sum_squared = weights_sum_squared + weights[i]**2\n        y_sum = y_sum + y[i]\n        y_sum_squared = y_sum_squared + y[i]**2\n    m = weights_change_sum / n\n    b = weights_sum / n\n    y_mean = y_sum / n\n    y_variance = y_sum_squared / n - y_mean**2\n    for i in range(n):\n        weights_change[i] = m * (x[i] - y_mean) + b\n    for i in range(n):\n        weights_change[i] = weights_change[i] * learning_rate\n    for i in range(n):\n        weights[i] = weights[i] + weights_change[i]\n    return weights"}
{"prompt": "Binary search is an efficient algorithm for finding an item in a sorted list of items. Develop an efficient algorithm using Python that implements a binary search.\nnums = [3, 4, 5, 6, 7, 8, 9]\nval = 8 ", "label": "def binary_search(nums, val):\n    low = 0\n    high = len(nums) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if nums[mid] == val:\n            return mid\n        elif nums[mid] > val:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1", "predict": "def binary_search(nums, val):\n    low = 0\n    high = len(nums) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if nums[mid] == val:\n            return mid\n        elif nums[mid] < val:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\nnums = [3, 4, 5, 6, 7, 8, 9]\nval = 8\n\nprint(binary_search(nums, val))"}
{"prompt": "Construct a nested loop in Python to print out the following elements in a new line.\n[1,2,3], [4,5,6], [7,8,9] ", "label": "for x in [1,2,3]:\n  for y in [4,5,6]:\n      for z in [7,8,9]:\n          print(x,y,z)", "predict": "for i in range(3):\n    for j in range(3):\n        print(i+1, j+1)"}
{"prompt": "Create a machine learning program in Python that will classify text data into 3 different categories.\nNot applicable ", "label": "import pandas as pd\nimport numpy as np\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import classification_report\n\n# Load the data\ndata = pd.read_csv(\"data.csv\")\n\n# Vectorize the text\ncv = CountVectorizer()\nX = cv.fit_transform(data[\"text\"])\n\n# Convert target labels to numerical values\ny = np.array([1 if label == \"category1\" else 2 if label == \"category2\" else 3 for label in data[\"category\"]])\n\n# Split into train and test data\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1)\n\n# Train the model\nnb = MultinomialNB()\nnb.fit(X_train, y_train)\n\n# Test the model\ny_pred = nb.predict(X_test)\n\n# Print out the results\nprint(classification_report(y_test, y_pred))", "predict": "import numpy as np\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Load the data\ntext_data =...\nlabels =...\n\n# Create the feature vector\nvectorizer = CountVectorizer()\nX = vectorizer.fit_transform(text_data)\n\n# Train the model\nmodel = MultinomialNB()\nmodel.fit(X, labels)\n\n# Make predictions\npredictions = model.predict(X)"}
{"prompt": "Create a Python function that takes in a list and prints a dictionary with the elements and the product of each element.\nlist = [7, 8, 5] ", "label": "def product_of_list(list):\n    output = {}\n    for element in list:\n        output[element] = element * element\n    return output\n\nprint(product_of_list([7, 8, 5]))", "predict": "def product_dictionary(lst):\n    product_dict = {}\n    for i in lst:\n        product_dict[i] = i * i\n    return product_dict\n\nproduct_dict = product_dictionary(list)\nprint(product_dict)"}
{"prompt": "Write a function in Python to print the Fibonacci series. ", "label": "def printFibonacciSeries(n): \n  \n    # Taking 1st two fibonacci nubers as 0 and 1 \n    f1 = 0\n    f2 = 1\n    print(f1, f2, end = \" \") \n  \n    for i in range(2, n): \n        next = f1 + f2 \n        print(next, end = \" \") \n  \n        # update values \n        f1 = f2 \n        f2 = next", "predict": "def fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \n\n# Driver Program \nprint(fibonacci(9))"}
{"prompt": "Design an algorithm in Python to find the longest common substring in two strings. ", "label": "def longestCommonSubstring(string1, string2):\n    n1=len(string1)\n    n2=len(string2)\n    \n    L=[[0 for _ in range(n2+1)]for _ in range(n1+1)]\n    longestSubstring=\"\"\n    longestSubstringLength=0\n    for i in range(1, n1+1):\n        for j in range(1, n2+1):\n            if string1[i-1]==string2[j-1]:\n                L[i][j]=L[i-1][j-1]+1\n                if L[i][j]>longestSubstringLength:\n                    longestSubstringLength=L[i][j]\n                    longestSubstring=string1[i-1-longestSubstringLength+1:i]\n            else:\n                L[i][j]=0\n    return longestSubstring", "predict": "def longest_common_substring(s1, s2):\n    dp = [[0] * (1 + len(s2)) for i in range(1 + len(s1))]\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)):\n        for y in range(1, 1 + len(s2)):\n            if s1[x - 1] == s2[y - 1]:\n                dp[x][y] = dp[x - 1][y - 1] + 1\n                if dp[x][y] > longest:\n                    longest = dp[x][y]\n                    x_longest = x\n            else:\n                dp[x][y] = 0\n    return s1[x_longest - longest: x_longest]"}
{"prompt": "Create a Python function to shuffle a list of numbers.\n[1, 2, 3, 4, 5] ", "label": "import random\n\ndef shuffle_list(nums):\n random.shuffle(nums)\n return nums\n\nshuffled_list = shuffle_list([1, 2, 3, 4, 5])\nprint(shuffled_list) #[3, 5, 2, 4, 1]", "predict": "import random\n\ndef shuffle_list(list):\n    random.shuffle(list)\n    return list\n\nresult = shuffle_list([1, 2, 3, 4, 5])\nprint(result)"}
{"prompt": "What Python code can you write that takes two strings and returns whether they are anagrams?\nstr1 = \"abcd\"\nstr2 = \"cbda\" ", "label": "def is_anagram(str1, str2):\n    if len(str1) != len(str2):\n        return False\n\n    str1_counts = collections.Counter(str1)\n    str2_counts = collections.Counter(str2)\n    \n    for char in str1_counts:\n        if str1_counts[char] != str2_counts[char]:\n            return False\n    return True", "predict": "def is_anagram(str1, str2):\n    str1 = str1.lower()\n    str2 = str2.lower()\n    if len(str1)!= len(str2):\n        return False\n    str1_count = {}\n    for char in str1:\n        if char in str1_count:\n            str1_count[char] += 1\n        else:\n            str1_count[char] = 1\n    for char in str2:\n        if char in str1_count:\n            str1_count[char] -= 1\n        else:\n            str1_count[char] = 1\n    for count in str1_count.values():\n        if count!= 0:\n            return False\n    return True\n\nstr1 = \"abcd\"\nstr2 = \"cbda\"\nprint(is_anagram(str1, str2))"}
{"prompt": "Create a basic Python script that computes the sum of two variables and stores the result in a third variable.\nx = 5\ny = 8 ", "label": "# compute the sum of x and y\nresult = x + y\n\n# store the result in a third variable\nz = result\n\n#print the result\nprint(z) # Output: 13", "predict": "x = 5\ny = 8\n\nz = x + y\n\nprint(z) # Outputs 13"}
{"prompt": "Generate a set of unique random numbers in the range 0-10 using Python. ", "label": "import random\nrandom_numbers = set()\nwhile len(random_numbers) < 10:\n    random_numbers.add(random.randint(0, 10))\n\nprint(random_numbers)", "predict": "import random\n\nrandom_numbers = set()\nwhile len(random_numbers) < 10:\n    random_numbers.add(random.randint(0, 10))\n\nprint(random_numbers)"}
{"prompt": "Write a function in Python to search for a given word in a large document. The function should return the line number of the document where the word is found.\nlargeDocument = 'This is the first line of the document.\\nThis is the second line of the document.\\nThis is the third line of the document.';\nword = 'second' ", "label": "def findWord(document, word):\n lines = document.split('\\n')\n line_number = -1\n for i, line in enumerate(lines):\n if word in line:\n line_number = (i + 1)\n break\n return line_number\n\nfindWord(largeDocument, word) # 2", "predict": "def search_word(largeDocument, word):\n lines = largeDocument.split('\\n')\n for i, line in enumerate(lines):\n if word in line:\n return i + 1\n return -1\n\nprint(search_word(largeDocument, word)) # 2"}
{"prompt": "Design a script in Python to scrape photos and captions from a given website. ", "label": "\"\"\"\nScript to scrape photos and captions from a given website\n\"\"\"\n\nfrom bs4 import BeautifulSoup\nimport requests\n\n# Get the HTML source code\nurl = 'https://example.com/webpage'\nreq = requests.get(url)\nhtml = req.text\n\n# Parse HTML source and extract photo and caption\nsoup = BeautifulSoup(html, features='lxml')\nimage_divs = soup.find_all('div', {'class': 'image-gallery__image'})\n\nfor image_div in image_divs:\n    figure = image_div.find('figure')\n    src = figure.find('img')['src']\n    caption = figure.find('figcaption')\n    print('Photo: ', src)\n    if caption:\n        print('Caption: ', caption.text)\n    else:\n        print('No caption')\n    print('\\n')", "predict": "import requests\nfrom bs4 import BeautifulSoup\n\n# Define the URL to scrape\nurl = 'http://example.com/photos'\n\n# Send a request to the URL\nr = requests.get(url)\n\n# Parse the response\nsoup = BeautifulSoup(r.text, 'html.parser')\n\n# Scrape the photos and captions\nphotos = soup.find_all('img')\ncaptions = soup.find_all('p')\n\n# Print the photos and captions\nfor photo, caption in zip(photos, captions):\n    print(photo['src'], caption.text)"}
{"prompt": "Create a python program that prints \"Hello World!\" five times. ", "label": "for x in range(5):\n    print(\"Hello World!\")", "predict": "for i in range(5):\n    print(\"Hello World!\")"}
{"prompt": "Write a Python program to find the common elements between two given lists.\n[1, 2, 3], [2, 3, 4] ", "label": "def find_common_elements(list1, list2):\n    common = [x for x in list1 if x in list2]\n    return common", "predict": "def common_elements(list1, list2):\n    common_list = []\n    for i in list1:\n        if i in list2:\n            common_list.append(i)\n    return common_list\n\nlist1 = [1, 2, 3]\nlist2 = [2, 3, 4]\nprint(common_elements(list1, list2))"}
{"prompt": "Generate a list of all numbers from 0 to 50 in Python, that are divisible by both 3 and 5. ", "label": "my_list = [x for x in range(0, 51) if x % 3 == 0 and x % 5 == 0]", "predict": "divisible_by_3_and_5 = [x for x in range(0, 51) if x % 3 == 0 and x % 5 == 0]"}
{"prompt": "Create a class to create a linked list in python nodes. ", "label": "class ListNode:\n    def __init__(self, data):\n        self.data = data\n        self.next = None", "predict": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n    \n    def push(self, new_data):\n        new_node = Node(new_data)\n        new_node.next = self.head\n        self.head = new_node"}
{"prompt": "Design a web server in Python using the Flask framework that would serve a json object containing the current temperature for a city based on the city name given in the request.\nNot applicable ", "label": "import requests\nimport json\n\nfrom flask import Flask, request\n\napp = Flask(name)\n\n@app.route('/getTemp', methods=['POST'])\ndef get_temp():\n city = request.json['city']\n url = 'http://api.openweathermap.org/data/2.5/weather?q={}&APPID=xxxxxx'\n r = requests.get(url.format(city))\n weather = json.loads(r.text)\n return {'temperature': weather['main']['temp']}\n\nif name == 'main':\n app.run(debug=True)", "predict": "from flask import Flask, request, jsonify\nimport requests\n\napp = Flask(__name__)\n\n@app.route('/weather', methods=['GET'])\ndef get_weather():\n city = request.args.get('city')\n url = 'http://api.openweathermap.org/data/2.5/weather?q={}&APPID=XXXXXX'.format(city)\n r = requests.get(url)\n data = r.json()\n return jsonify(data)\n\nif __name__ == '__main__':\n app.run(debug=True)"}
{"prompt": "Improve the following Python program to reduce its time complexity.\ndef find_max_sum(arr):\n    max_sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)): \n            max_sum = max(max_sum, arr[i] + arr[j])\n    return max_sum ", "label": "def find_max_sum(arr):\n    max_sum = 0\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        if arr[left] + arr[right] > max_sum:\n            max_sum = arr[left] + arr[right]\n        if arr[left] > arr[right]:\n            right -= 1\n        else:\n            left += 1\n    return max_sum", "predict": "def find_max_sum(arr):\n    max_sum = 0\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        if arr[left] + arr[right] > max_sum:\n            max_sum = arr[left] + arr[right]\n        if arr[left] > arr[right]:\n            right -= 1\n        else:\n            left += 1\n    return max_sum"}
{"prompt": "Write a Python program to format a given piece of text (input) with different options for font-style, size, and color.\nGiven text:\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Integer ut lectus vel nisi consequat bibendum ac a erat. Aliquam non velit sit amet arcu placerat vulputate a ut nibh. ", "label": "def format_text(text, font=\"Times New Roman\", size='14px', color='#000000'):\n  return \"<span style='font-family: {} font-size: {} color: {}'>{}</span>\".format(font, size, color, text)\n\nprint(format_text('Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer ut lectus vel nisi consequat bibendum ac a erat. Aliquam non velit sit amet arcu placerat vulputate a ut nibh.'))", "predict": "text = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer ut lectus vel nisi consequat bibendum ac a erat. Aliquam non velit sit amet arcu placerat vulputate a ut nibh.\"\n\nformatted_text = \"<span style='font-style: italic; font-size: 18px; color: blue;'>{}</span>\".format(text)\n\nprint(formatted_text)"}
{"prompt": "Write a Python script that takes a list of integers, and returns a list of tuples that contain the index and square of each number in the original list.\nnums = [1, 2, 3, 4, 5] ", "label": "def square_index(nums):\n    return [(index, num ** 2) for index, num in enumerate(nums)]\n\nsquare_index(nums)\n# Output: [(0, 1), (1, 4), (2, 9), (3, 16), (4, 25)]", "predict": "def square_index(nums):\n    return [(i, n**2) for i, n in enumerate(nums)]\n\nprint(square_index(nums))"}
{"prompt": "Using Python, create a function that takes two numbers as input, and generates a random number between them.\n2 and 5 ", "label": "def random_number_generator(min, max):\n    return random.randint(min, max)", "predict": "import random\n\ndef random_number(min, max):\n    return random.randint(min, max)\n\nrandom_number(2, 5) # Outputs a random number between 2 and 5"}
{"prompt": "Generate a Python program to demonstrate a sorting algorithm. ", "label": "def sort_list(mylist):\n for i in range(len(mylist)):\n \n min_index = i\n temp = mylist[i]\n \n for j in range(i + 1, len(mylist)):\n \n  if mylist[min_index] > mylist[j]:\n   min_index = j\n \n mylist[i] = mylist[min_index]\n mylist[min_index] = temp\n \n return mylist\n \nmylist = [1, 5, 7, 8, 4, 10, 2]\n \nprint(\"Sorted list is:\")\nprint(sort_list(mylist))", "predict": "def selection_sort(array):\n    for i in range(len(array)):\n        min_index = i\n        for j in range(i+1, len(array)):\n            if array[min_index] > array[j]:\n                min_index = j\n        array[i], array[min_index] = array[min_index], array[i]\n    return array"}
{"prompt": "Write a code to delete a certain element from a linked list. ", "label": "# Python program to delete a node from Linked List  \n  \n# Node class  \nclass Node:  \n  \n    # Function to initialize the node object  \n    def __init__(self, data):  \n        self.data = data  # Assign data  \n        self.next = None  # Initialize next as null  \n  \n  \n# Linked List class contains a Node object  \nclass LinkedList:  \n  \n    # Function to initialize head  \n    def __init__(self):  \n        self.head = None\n  \n    # Function to delete a node  \n    def deleteNode(self, node): \n  \n        # Store head node  \n        temp = self.head  \n  \n        # If head node itself holds the key to be deleted  \n        if (temp is not None):  \n            if (temp == node):  \n                self.head = temp.next\n                temp = None\n                return\n  \n        # Search for the key to be deleted, keep track of the  \n        # previous node as we need to change 'prev.next'  \n        while(temp is not None):  \n            if temp == node:  \n                break\n            prev = temp  \n            temp = temp.next \n  \n        # if key is not present in linked list  \n        if(temp == None):  \n            return\n  \n        # Unlink the node from linked list  \n        prev.next = temp.next\n  \n        temp = None", "predict": "# Python program to delete a node \nclass Node: \n    # Function to initialise the node object \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n  \n  \n# Linked List class contains a Node object \nclass LinkedList: \n  \n    # Function to initialize head \n    def __init__(self): \n        self.head = None\n  \n    # This function prints contents of linked list \n    # starting from head \n    def printList(self): \n        temp = self.head \n        while temp: \n            print temp.data, \n            temp = temp.next\n  \n    # This function deletes a node at a given position \n    # in linked list \n    def deleteNode(self, position): \n        temp = self.head \n        if temp is None: \n            return\n        if position == 0: \n            self.head = temp.next\n            temp = None\n            return\n        i = 0\n        while temp is not None and i < position - 1: \n            temp = temp.next\n            i = i + 1\n        if temp is None: \n            return\n        if temp.next is None: \n            return\n        next = temp.next.next\n        temp.next = None\n        temp.next = next"}
{"prompt": "Create a Python program to determine the total sum of all elements of a list.\n[1, 2, 3, 4] ", "label": "def calculate_sum_of_list(arr):\n    total_sum = 0\n    for item in arr:\n        total_sum += item\n    return total_sum\n\nlist1 = [1, 2, 3, 4]\nsum_of_list = calculate_sum_of_list(list1)\nprint(sum_of_list)", "predict": "def sum_list(list):\n    total = 0\n    for num in list:\n        total += num\n    return total\n\ntotal = sum_list([1, 2, 3, 4])\nprint(total)"}
{"prompt": "Write a script in Python to compete in a Kaggle competition.\nNot applicable ", "label": "# Load the necessary libraries\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\n# Read in the data\ntrain_data = pd.read_csv(\"data.csv\")\n\n# Split the data into X (predictors) and y (response)\nX = train_data.drop('response', axis=1)\ny = train_data['response']\n\n# Split into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)\n\n# Define the model and fit it\nmodel = ...\nmodel.fit(X_train, y_train)\n\n# Make predictions on the test set\ny_pred = model.predict(X_test)\n\n# Score the prediction\nscore = accuracy_score(y_test, y_pred)\n\n# Submit the prediction to Kaggle\n# ...", "predict": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\n# Load the data\ndata = pd.read_csv('data.csv')\n\n# Split into features and labels\nX = data.drop('label', axis=1)\ny = data['label']\n\n# Split into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Create the model\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\n# Make predictions\npredictions = model.predict(X_test)\n\n# Evaluate the model\nscore = model.score(X_test, y_test)\n\n# Submit the predictions to Kaggle\nsubmission = pd.DataFrame({'ID': data['ID'], 'label': predictions})\nsubmission.to_csv('submission.csv', index=False)"}
{"prompt": "Given a list of integers and an integer k, can you write a Python program to find the consecutive integers whose sum is equal to the given integer k?\nlst = [1,3,5,7,9]\nk = 10 ", "label": "def find_consecutive_integers(lst, k):\n    # Edge cases\n    if k > sum(lst) or k < 0:\n        return -1\n \n    # Create a window and move it's boundaries\n    l, h, curr_sum = 0, 0, 0\n    while h < len(lst):\n        # Sum of current window\n        curr_sum += lst[h] \n \n        # See if the window sum equals k\n        while curr_sum > k and l <= h:\n            curr_sum -= lst[l]\n            l += 1\n \n        # When window sum is equal to k, print the winow\n        if curr_sum == k:\n            return lst[l:h+1]\n \n        # Move the window one step at a time\n        h += 1\n \n    # If window size reaches last element and no window is \n    # found\n    return -1\n \nlst = [1,3,5,7,9]\nk = 10\nprint(find_consecutive_integers(lst, k)) # Output: [3,5,7]", "predict": "def find_consecutive_sum(lst, k):\n    for i in range(len(lst)-1):\n        if lst[i] + lst[i+1] == k:\n            return [lst[i], lst[i+1]]\n    return []"}
{"prompt": "Design a basic chatbot in Python for responding to casual inquiries. ", "label": "import random\n\n#list of possible answers \nanswers = [\"That's a great question!\", \n    \"I'm not sure, but I'll try to find out!\", \n    \"That sounds interesting, tell me more!\", \n    \"I have no idea, sorry!\"]\n\ndef chatbot_response(user_input): \n    # get a random response from answers\n    response = random.choice(answers)\n    return response\n\n# simple loop to keep the conversation going\nwhile True:\n    user_input = input('You: ')\n    if user_input == 'Goodbye':\n        print('Chatbot: Goodbye!')\n        break\n    else:\n        print('Chatbot: ', chatbot_response(user_input))", "predict": "import random\n\ndef chatbot_response(message):\n    if message == 'hi':\n        return random.choice(['Hi there!', 'Hey, what's up?', 'Hey, how are you?'])\n    elif message == 'how are you':\n        return random.choice(['I am doing well, thank you!', 'I am feeling good!', 'I am doing great!'])\n    elif message == 'bye':\n        return random.choice(['Goodbye!', 'See you later!', 'Take care!'])\n    else:\n        return 'I am sorry, I don\\'t understand.'"}
{"prompt": "Write a Python program to print the top 5 most frequent words in a given sentence.\n\"Python is an interpreted, high-level, general-purpose programming language.\" ", "label": "import collections\n \nsentence = \"Python is an interpreted, high-level, general-purpose programming language.\"\n \n# Split sentence into words\nwords = sentence.split()\n \n# Set the counter for words\ncounter = collections.Counter(words)\n \n# Find top 5 most frequent words\nresult = counter.most_common(5)\nprint(result)", "predict": "from collections import Counter\n\nsentence = \"Python is an interpreted, high-level, general-purpose programming language.\"\nwords = sentence.split()\n\nword_count = Counter(words)\n\nfor word, count in word_count.most_common(5):\n    print(word, count)"}
{"prompt": "Make a program in Python to print a staircase of height 'n', where n is an integer.\n5 ", "label": "def staircase(n): \n    for i in range(0, n): \n        for j in range(0, n - i - 1): \n            print(end=\" \") \n        for j in range(0, i + 1): \n            print(\"#\", end=\"\") \n        print(\"\\r\") \n  \n# Driver code \nn = 5\nstaircase(n)", "predict": "def staircase(n):\n    for i in range(n):\n        for j in range(n-i-1):\n            print(' ', end='')\n        for j in range(i+1):\n            print('#', end='')\n        print()\n\nn = 5\nstaircase(n)"}
{"prompt": "Write python code to return the maximum number in a list.\nnums = [1, 15, 20, 6] ", "label": "def find_max(nums):\n    '''Returns the maximum number in the list.'''\n    max_val = nums[0]\n    for num in nums:\n        if num > max_val:\n            max_val = num\n    \n    return max_val", "predict": "def get_max(nums):\n    max_num = nums[0]\n    for num in nums:\n        if num > max_num:\n            max_num = num\n    return max_num\n\nnums = [1, 15, 20, 6]\nmax_num = get_max(nums)\nprint(max_num)"}
{"prompt": "Compose a python program to identify the characters in a given alphabet\nalphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' ", "label": "alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\ndef identify_characters(alphabet):\n    char_list = []\n    for c in alphabet:\n        char_list.append(c)\n    return char_list", "predict": "def identify_characters(alphabet):\n    characters = []\n    for char in alphabet:\n        characters.append(char)\n    return characters\n\nif __name__ == '__main__':\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(identify_characters(alphabet))"}
{"prompt": "Optimize a Flask application for efficient performance.\nNot applicable ", "label": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/api/<endpoint>', methods=['GET', 'POST'])\ndef process_request(endpoint):\n    # Performance optimization\n    # Use Redis for caching session and query performance\n    # Use uWSGI for Python applications\n    # Use gunicorn as WSGI server\n    # Use Flask-Compress extension for compression\n    # Use global variables where applicable\n    # Don't use sql queries directly, always use model methods\n    # Use query parameter in URLs instead of plain parameters\n    # Use thread-local objects for performance\n\n    # Your code here", "predict": "import flask\n\napp = flask.Flask(__name__)\n\n# Enable Flask-Caching\nfrom flask_caching import Cache\ncache = Cache(app, config={'CACHE_TYPE':'simple'})\n\n# Enable Flask-SQLAlchemy\nfrom flask_sqlalchemy import SQLAlchemy\ndb = SQLAlchemy(app)\n\n# Enable Flask-Session\nfrom flask_session import Session\napp.secret_key ='secret_key'\nSession(app)\n\n# Configure the application\napp.config.from_object('config')\n\n# Register blueprints\nfrom app.main import main as main_blueprint\napp.register_blueprint(main_blueprint)\n\nif __name__ == '__main__':\n app.run(debug=True)"}
{"prompt": "Design a Python program to take a list of integers and return the sum of the even numbers in the list.\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10] ", "label": "def sum_even_numbers(numbers):\n \n result = 0\n \n for number in numbers:\n  if number % 2 == 0:\n   result += number\n \n return result\n \nprint(sum_even_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))", "predict": "def sum_even(numbers):\n    sum = 0\n    for number in numbers:\n        if number % 2 == 0:\n            sum += number\n    return sum\n\nprint(sum_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"}
{"prompt": "Write a Python program to print the maximum number from a given list.\n[5, 4, 2, 7, 12] ", "label": "def max_num(nums):\n    max = nums[0]\n    for num in nums[1:]:\n        if num > max:\n            max = num\n    return max\n\nnums = [5, 4, 2, 7, 12]\nprint(max_num(nums))", "predict": "def find_max(nums):\n    max_num = nums[0]\n    for num in nums:\n        if num > max_num:\n            max_num = num\n    return max_num\n\nprint(find_max([5, 4, 2, 7, 12]))"}
{"prompt": "Write a Python program to sort a list of dictionaries by a key in each dictionary.\nmy_list = [{'name': 'Tom', 'age': 25}, {'name': 'John', 'age': 21}, {'name': 'Adam', 'age': 26}] ", "label": "def sort_list_of_dicts_by_key(my_list, key):\n    return sorted(my_list, key=lambda k: k[key])", "predict": "def sort_dicts(my_list, key):\n return sorted(my_list, key=lambda k: k[key])\n\nmy_list = [{'name': 'Tom', 'age': 25}, {'name': 'John', 'age': 21}, {'name': 'Adam', 'age': 26}]\nsorted_list = sort_dicts(my_list, 'age')\nprint(sorted_list)"}
{"prompt": "Create a Python program to remove all occurrences of the given element in a given array.\narr = [2, 4, 5, 7, 4, 2], element = 4 ", "label": "def remove_element(arr, element):\n    arr = [x for x in arr if x != element]\n    return arr", "predict": "def remove_element(arr, element):\n    new_arr = []\n    for num in arr:\n        if num!= element:\n            new_arr.append(num)\n    return new_arr\n\nresult = remove_element(arr, element)\nprint(result)"}
{"prompt": "Create a Python program to optimize a given multivariate function. ", "label": "import scipy.optimize as opt \n  \ndef optimize_function(function, initial_guess): \n    result = opt.minimize(function, initial_guess) \n    return result.x", "predict": "import numpy as np\nfrom scipy.optimize import minimize\n\ndef objective(x):\n    return np.sum(x**2)\n\nx0 = np.array([1, 2])\n\nresult = minimize(objective, x0)\nprint(result.x)"}
{"prompt": "Build a Python class to identify if a provided number is prime or composite.\n10 ", "label": "class PrimeNumber:\n    def __init__(self, num):\n        self.num = num\n\n    def is_prime(self):\n        for i in range(2, self.num):\n            if(self.num % i == 0):\n                return False\n        return True\n\nnum = 10\nobj = PrimeNumber(num)\n\nif obj.is_prime():\n    print(\"Number is Prime\")\nelse:\n    print(\"Number is Composite\")", "predict": "class PrimeNumber:\n    def __init__(self, num):\n        self.num = num\n    \n    def is_prime(self):\n        if self.num == 1:\n            return False\n        elif self.num == 2:\n            return True\n        elif self.num > 2:\n            for i in range(2, self.num):\n                if self.num % i == 0:\n                    return False\n            return True\n\nnum = 10\n\np = PrimeNumber(num)\nprint(p.is_prime())"}
{"prompt": "Write a Python function to format a two-dimensional array as a table.\n[[1, 2, 3], [4, 5, 6], [7, 8, 9]] ", "label": "def printTable(array):\n    # find the longest string in each of the inner lists\n    # so we can format the output\n    col_width = [max(len(str(x)) for x in col) for col in array]\n    for row in array:\n        print(\"  \".join(str(x).ljust(col_width[i]) for i, x in enumerate(row)))\n\narray = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprintTable(array)\n\n# Output: \n# 1   2   3\n# 4   5   6\n# 7   8   9", "predict": "def format_table(arr):\n    result = \"\"\n    for row in arr:\n        result += \"|\" + \" | \".join(str(i) for i in row) + \"|\\n\"\n    return result"}
{"prompt": "Develop a program in Python to check whether a string contains only digits.\n\"0123\" ", "label": "def is_digit_only(string):\n    for char in string:\n        if not char.isdigit():\n            return False\n    return True\n\nprint(is_digit_only(\"0123\"))", "predict": "def is_digit_string(string):\n    for char in string:\n        if char.isdigit() == False:\n            return False\n    return True\n\nresult = is_digit_string(\"0123\")\nprint(result)"}
{"prompt": "Implement a function to remove all the duplicates from a linked list in Python.\nlist_nodes = [7, 14, 28, 28, 28, 35, 49] ", "label": "class Node: \n    # Function to initialise the node object \n    def __init__(self, data): \n        self.data = data # Assign data \n        self.next = None # Initialize next as null \n  \n  \n# Linked List class contains a Node object \nclass LinkedList: \n    # Function to initialize head \n    def __init__(self): \n        self.head = None\n\n    def remove_duplicates(self, list_nodes):\n        curr_node= self.head \n        new_list=[]\n        while curr_node != None: \n            if curr_node.data not in new_list: \n                new_list.append(curr_node.data) \n            curr_node = curr_node.next\n                \n        # creating a linked list from the unique elements of list_nodes  \n        self.head=None\n        for i in new_list:\n            self.insert_node(i)\n    \n    def insert_node(self, data): \n    # Create a new node \n        new_node = Node(data) \n        # Check if list is empty\n        if self.head is None: \n            self.head = new_node \n            return\n        # Otherwise, traverse to the end of list before \n        # inserting the new Node \n        last = self.head \n        while (last.next): \n            last = last.next\n        last.next =  new_node", "predict": "def remove_duplicates(list_nodes):\n    seen = set()\n    result = []\n    for node in list_nodes:\n        if node not in seen:\n            seen.add(node)\n            result.append(node)\n    return result"}
{"prompt": "Generate a Python program to calculate the maximum, minimum, and average values from a given sequence of numbers. ", "label": "# Function to calculate the maximum, minimum, and average values\ndef calculate_metrics(list):\n    # Calculate the maximum value\n    maximum = max(list)\n    \n    # Calculate the minimum value\n    minimum = min(list)\n   \n    # Calculate the average\n    n = len(list)\n    total = 0\n    for num in list:\n        total += num\n    average = total/n\n    \n    return maximum, minimum, average\n\n# Main Program \nlist = [3, 4, 5, 6, 21, 8]\n\nmaximum, minimum, average = calculate_metrics(list)\n\nprint(\"Maximum value:\", maximum)\nprint(\"Minimum value:\", minimum)\nprint(\"Average value:\", average)", "predict": "def calc_stats(numbers):\n    max_val = max(numbers)\n    min_val = min(numbers)\n    avg_val = sum(numbers) / len(numbers)\n    return max_val, min_val, avg_val"}
{"prompt": "Create a Deep Learning Program in Python to Predict Stock Price. ", "label": "from keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\nfrom keras.layers import Dropout\nimport numpy as np\n\n# define constants\ntime_steps = 60\nbatch_size = 32\n\n# build the model\nmodel = Sequential()\nmodel.add(LSTM(units=50, return_sequences=True, input_shape=(time_steps, 1)))\nmodel.add(Dropout(0.2))\n\nmodel.add(LSTM(units=50, return_sequences=True))\nmodel.add(Dropout(0.2))\n\nmodel.add(LSTM(units=50))\nmodel.add(Dropout(0.2))\n\nmodel.add(Dense(units=1))\n\nmodel.compile(optimizer='adam', loss='mean_squared_error')\n\n# read the data \ndataset = np.loadtxt('data.csv', delimiter=',')\n\ndata = dataset[:, 0:1]\n\n# create train and test data\nx_train = data[:int(len(data)*0.8)]\nx_test = data[int(len(data)*0.8):]\n\n# reshape the data for input format\nx_train = np.reshape(x_train, (x_train.shape[0], time_steps, 1))\nx_test = np.reshape(x_test, (x_test.shape[0], time_steps, 1))\n\n# train the model\nmodel.fit(x_train, x_train, epochs=50, batch_size=batch_size, validation_data=(x_test, x_test))", "predict": "import pandas as pd\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense, Dropout, Flatten\nfrom tensorflow.keras.models import Sequential\n\n# Read the data\ndf = pd.read_csv('stock_data.csv')\n\n# Preprocess the data\nX = df.iloc[:, :-1].values\ny = df.iloc[:, -1].values\n\n# Split the data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Create the model\nmodel = Sequential()\nmodel.add(Dense(32, input_dim=X_train.shape[1], activation='relu'))\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dense(1))\n\n# Compile the model\nmodel.compile(loss='mean_squared_error', optimizer='adam')\n\n# Train the model\nmodel.fit(X_train, y_train, epochs=50, batch_size=32, validation_data=(X_test, y_test))\n\n# Evaluate the model\nmodel.evaluate(X_test, y_test)"}
{"prompt": "Generate a Python program that performs an edit distance calculation using dynamic programming. ", "label": "def edit_distance(str1, str2):\n    m = len(str1)\n    n = len(str2)\n    edit_table = [[0 for x in range(n+1)] for x in range(m+1)] \n  \n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0: \n                edit_table[i][j] = j\n            elif j == 0: \n                edit_table[i][j] = i\n            elif str1[i-1] == str2[j-1]: \n                edit_table[i][j] = edit_table[i-1][j-1] \n            else: \n                edit_table[i][j] = 1 + min(edit_table[i][j-1], edit_table[i-1][j], edit_table[i-1][j-1]) \n  \n    return edit_table[m][n]", "predict": "def edit_distance(str1, str2):\n    m = len(str1)\n    n = len(str2)\n    dp = [[0 for x in range(n+1)] for x in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            elif str1[i-1] == str2[j-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = 1 + min(dp[i][j-1], dp[i-1][j], dp[i-1][j-1])\n    return dp[m][n]"}
{"prompt": "Create an algorithm in python that calculates the sum of squares of all the numbers from 1 to N.\nN = 10 ", "label": "def sum_of_squares(n):\n    result = 0\n    for i in range(n+1):\n        result += i**2\n    return result", "predict": "def sum_of_squares(n):\n    total = 0\n    for i in range(1, n+1):\n        total += i*i\n    return total\n\nprint(sum_of_squares(10))"}
{"prompt": "Generate a Python program that takes a string and capitalizes the first character of each word.\n\"this is an example\" ", "label": "def capitalize_string(str):\n    words = str.split(' ')\n    capitalized_words = [word.capitalize() for word in words]\n    return \" \".join(capitalized_words)\n\ncapitalized_string = capitalize_string(\"this is an example\")\nprint(capitalized_string)", "predict": "def capitalize_words(string):\n    words = string.split(' ')\n    capitalized_words = [word.capitalize() for word in words]\n    return''.join(capitalized_words)\n\nresult = capitalize_words(\"this is an example\")\nprint(result)"}
{"prompt": "Construct a python program which takes in input the size of a jagged array and prints it(no values).\n<noInpit> ", "label": "def print_jagged_array(array_size):    \n    # Initialize a jagged array with the given size\n    array = [None] * array_size\n    \n    # Populate the array with empty arrays\n    for i in range(array_size):\n        array[i] = []\n    \n    # Print the output array\n    print(array)\n\nif __name__ == \"__main__\":\n    array_size = 4\n    print_jagged_array(array_size)", "predict": "def print_jagged_array(size):\n    array = [[0 for row in range(size[i])] for i in range(len(size))]\n    print(array)"}
{"prompt": "Create a simple chatbot using Python and Dialogflow, which can answer questions about the current days of the week.\nNot applicable ", "label": "from flask import Flask\nfrom flask_restful import Resource, Api\nfrom dialogflow import detect_intent_texts\n\napp = Flask(__name__)\napi = Api(app)\n\n\n@app.route('/', methods=['GET', 'POST'])\ndef detect_intent_text():\n    IF session_id NOT present\n        PLEASE create session_id\n    request = detect_intent_texts(session_id, text)\n    response = request.fulfillment_text\n    return response\n\n\nif __name__ == '__main__':\n    app.run()", "predict": "from flask import Flask, request\nfrom dialogflow import detect_intent_texts\n\napp = Flask(__name__)\n\n@app.route('/', methods=['POST'])\ndef webhook():\n req = request.get_json(silent=True, force=True)\n\n if req is None:\n  return 'Webhook called with an empty request'\n\n result = detect_intent_texts(req)\n\n fulfilment_text = None\n\n if result.query_result.intent.display_name == 'days_of_the_week':\n  fulfilment_text = 'Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday'\n\n if fulfilment_text is not None:\n  fulfillment_messages = [\n   {\n    'text': {\n     'text': [fulfilment_text],\n     'language_code': 'en-US'\n    },\n    'platform': 'facebook'\n   }\n  ]\n  return {\n   'fulfillment_messages': fulfillment_messages,\n  'score': 0.9\n  }\n else:\n  return 'Webhook called, but no fulfillment text was generated. This can happen when the user asks a question unrelated to the intended goal of the application.'\n\nif __name__ == '__main__':\n port = int(os.getenv('PORT', 5000))\n app.run(debug=False, port=port, host='0.0.0.0')"}
{"prompt": "Create a python program for constructing a decision tree algorithm for predicting the value of a stock.\nA csv file containing stock data from the last 3 months. ", "label": "# Load libraries\nimport pandas as pd\nimport numpy as np\n\n# Load data\ndata = pd.read_csv(\"stockdata.csv\")\n\n# Split data\nX = data.iloc[:, :-1].values\ny = data.iloc[:, -1].values\n\n# Train/Test Split\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# Decision Tree Model\nfrom sklearn.tree import DecisionTreeClassifier\nclf = DecisionTreeClassifier(criterion='entropy', random_state=0)\nclf.fit(X_train, y_train)\n\n# Model Accuracy\ny_pred = clf.predict(X_test)\nprint('Model accuracy: ',clf.score(X_test, y_test))", "predict": "import pandas as pd\nfrom sklearn import tree\n\n# Read in the data\ndata = pd.read_csv('stock_data.csv')\n\n# Create the feature and target variables\nX = data[['date', 'open', 'high', 'low', 'close', 'volume']]\ny = data['adj_close']\n\n# Train the decision tree\nclf = tree.DecisionTreeRegressor()\nclf.fit(X, y)"}
{"prompt": "Create a Python class with the given attributes and functions.\nAttributes: name (string), age (integer), email address (string)\nFunction: toString() - return a string with the formatted attributes ", "label": "class Person:\n    \n    def __init__(self, name, age, email):\n        self.name = name\n        self.age = age\n        self.email = email\n    \n    def toString(self):\n        return f\"Name: {self.name}, Age: {self.age}, Email: {self.email}\"", "predict": "class Person:\n    def __init__(self, name, age, email):\n        self.name = name\n        self.age = age\n        self.email = email\n\n    def toString(self):\n        return f\"Name: {self.name}, Age: {self.age}, Email: {self.email}\""}
{"prompt": "How would you create a class in Python to store and process data in a Car object? ", "label": "class Car:\n    def __init__(self, make, model, color, mileage):\n        self.make = make\n        self.model = model\n        self.color = color\n        self.mileage = mileage\n\n    def accelerate(self, speed):\n        self.speed = speed\n\n    def decelerate(self, speed):\n        self.speed = speed", "predict": "class Car:\n    def __init__(self, make, model, year, mileage):\n        self.make = make\n        self.model = model\n        self.year = year\n        self.mileage = mileage\n\n    def get_make(self):\n        return self.make\n\n    def get_model(self):\n        return self.model\n\n    def get_year(self):\n        return self.year\n\n    def get_mileage(self):\n        return self.mileage\n\n    def set_mileage(self, mileage):\n        self.mileage = mileage"}
{"prompt": "Write a Python program to print out the Fibonacci series up to n numbers where n is a user input.\nUser input n = 10 ", "label": "# Python Program to print the Fibonacci series up to n numbers\n\nn = int(input(\"Enter the value of 'n': \"))\n\n# first two numbers\na = 0\nb = 1\n\nprint(\"Fibonacci Series:\") \nprint(a, b, end=\" \") \n  \nfor i in range(2,n):\n               \n    c = a + b\n    a = b\n    b = c\n    print(c, end = \" \")\n    \nprint()", "predict": "def fibonacci(n):\n a, b = 0, 1\n fib = []\n while a < n:\n fib.append(a)\n a, b = b, a + b\n return fib\n\nn = int(input(\"Enter a number: \"))\nprint(fibonacci(n))"}
{"prompt": "Edit the following Python program to return true if the following string contains the word \"Hello\".\ndef check_hello(s): ", "label": "def check_hello(s):\n    return 'Hello' in s", "predict": "def check_hello(s):\n    words = s.split(' ')\n    for word in words:\n        if word == 'Hello':\n            return True\n    return False"}
{"prompt": "Given a list of integers, write a Python program to find the index of the largest number.\n[5, 10, 20, 6, 8] ", "label": "nums = [5, 10, 20, 6, 8]\nmax_num = max(nums)\nmax_index = nums.index(max_num)\n\nprint(max_index)", "predict": "def find_largest_number_index(nums):\n    largest_num = nums[0]\n    largest_num_index = 0\n\n    for i in range(1, len(nums)):\n        if nums[i] > largest_num:\n            largest_num = nums[i]\n            largest_num_index = i\n    \n    return largest_num_index\n\nnums = [5, 10, 20, 6, 8]\nlargest_number_index = find_largest_number_index(nums)\nprint(largest_number_index) # 2"}
{"prompt": "Design a python program to handle an array with the following rules:\nIf the element is divisible by 3, the element should be replaced with \"Fizz\".\nIf the element is divisible by 5, the element should be replaced with \"Buzz\".\nIf the element is divisible by 3 and 5, the element should be replaced with \"FizzBuzz\".\narr = [2, 3, 4, 5, 6, 15] ", "label": "def fizz_buzz(arr):\n    new_arr = []\n    for element in arr:\n        if element % 3 == 0 and element % 5 == 0:\n            new_arr.append(\"FizzBuzz\")\n        elif element % 3 == 0:\n            new_arr.append(\"Fizz\")\n        elif element % 5 == 0:\n            new_arr.append(\"Buzz\")\n        else:\n            new_arr.append(element)\n    return new_arr\n\nprint(fizz_buzz([2, 3, 4, 5, 6, 15]))", "predict": "def fizzbuzz(arr):\n    result = []\n    for element in arr:\n        if element % 3 == 0 and element % 5 == 0:\n            result.append(\"FizzBuzz\")\n        elif element % 3 == 0:\n            result.append(\"Fizz\")\n        elif element % 5 == 0:\n            result.append(\"Buzz\")\n        else:\n            result.append(element)\n    return result\n\nprint(fizzbuzz(arr))"}
{"prompt": "Write a Python function that takes two strings as arguments and returns the longest common sub-string between them.\nstr_1 = \"abcdabcdabde\"\nstr_2 = \"defabcdabcd\" ", "label": "def longest_substring(str_1, str_2):\n    len_1 = len(str_1)\n    len_2 = len(str_2)\n    longest_substring = ''\n    for x in range(len_1):\n        for y in range(len_2):\n            if str_1[x] == str_2[y]:\n                cur_substring = str_1[x]\n                while (x + 1 < len_1 and y + 1 < len_2 and\n                       str_1[x + 1] == str_2[y + 1]):\n                    cur_substring += str_1[x + 1]\n                    x += 1\n                    y += 1\n                    if len(cur_substring) > len(longest_substring):\n                        longest_substring = cur_substring\n    return longest_substring\n\nlongest_sub = longest_substring(str_1, str_2)\nprint(longest_sub)", "predict": "def longest_common_substring(str_1, str_2):\n    # create a 2D array to store the results of subproblems\n    dp = [[0] * (len(str_2) + 1) for _ in range(len(str_1) + 1)]\n\n    # populate the first row and column\n    for i, ch1 in enumerate(str_1):\n        for j, ch2 in enumerate(str_2):\n            if ch1 == ch2:\n                dp[i + 1][j + 1] = dp[i][j] + 1\n            else:\n                dp[i + 1][j + 1] = 0\n\n    # traverse the 2D array and find the longest substring\n    longest_length = 0\n    for i in range(len(dp)):\n        for j in range(len(dp[0])):\n            if dp[i][j] > longest_length:\n                longest_length = dp[i][j]\n\n    # return the longest substring\n    return str_1[:longest_length]"}
{"prompt": "Design a program to reverse a given string.\nPython ", "label": "def reverse_string(input_string):\n    reversed_string = \"\"\n    for i in range(len(input_string)-1, -1, -1):\n        reversed_string += input_string[i]\n    return reversed_string\n\ninput_string = \"Python\"\n\nprint(reverse_string(input_string))", "predict": "def reverse_string(string):\n    reversed_string = \"\"\n    for char in string:\n        reversed_string = char + reversed_string\n    return reversed_string"}
{"prompt": "Generate a python program to calculate the minimum and maximum values in an array ", "label": "def min_max(array):\n    min = array[0]\n    max = array[0]\n\n    for val in array[1:]:\n        if val > max:\n            max = val\n        if val < min:\n            min = val\n    return min, max", "predict": "def min_max(arr):\n    min_val = arr[0]\n    max_val = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < min_val:\n            min_val = arr[i]\n        if arr[i] > max_val:\n            max_val = arr[i]\n    return min_val, max_val"}
{"prompt": "Create a function in Python that takes a list of strings, converts it to camelCase, and returns a new list with the converted strings.\nlist = [\"this\", \"is\", \"an\", \"example\"] ", "label": "def convertToCamelCase(list):\n    camelCaseList = []\n\n    for string in list:\n        string = string.capitalize()\n        camelCaseList.append(string)\n\n    return ''.join(camelCaseList)", "predict": "def to_camel_case(list):\n    camel_case_list = []\n    for string in list:\n        camel_case_list.append(string.capitalize())\n    return ''.join(camel_case_list)"}
{"prompt": "Write a Python algorithm that finds the longest contiguous sequence of increasing numbers within an array.\n[3, 2, 1, 4, 5, 6, 7, 8] ", "label": "def find_longest_increasing_sequence(arr):\n longest_start = 0\n longest_length = 0\n\n current_start = 0\n current_length = 0\n\n for i in range(1, len(arr)):\n prev_val = arr[i - 1]\n curr_val = arr[i]\n\n if curr_val > prev_val:\n current_length += 1\n else:\n current_start = i\n current_length = 1\n\n if current_length > longest_length:\n longest_start = current_start\n longest_length = current_length\n\n longest_sequence = arr[longest_start:longest_start + longest_length]\n return longest_sequence\n\narr = [3, 2, 1, 4, 5, 6, 7, 8]\nlongest_seq = find_longest_increasing_sequence(arr)\nprint(longest_seq) // Output: [4, 5, 6, 7, 8]", "predict": "def longest_increasing_sequence(arr):\n    max_length = 0\n    current_length = 0\n\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 0\n\n    max_length = max(max_length, current_length)\n    return max_length\n\nprint(longest_increasing_sequence([3, 2, 1, 4, 5, 6, 7, 8])) # 4"}
{"prompt": "Generate a Python function to parse a JSON data structure.\ndata = {\n \"name\": \"John\",\n \"age\": 18,\n \"occupation\": \"Software Engineer\"\n} ", "label": "import json\n\ndef parse_json(data):\n data = json.loads(data)\n return data['name'], data['age'], data['occupation']\n\nname, age, occupation = parse_json(data)\nprint(name, age, occupation)\n# Output: John 18 Software Engineer", "predict": "def parse_json(data):\n name = data['name']\n age = data['age']\n occupation = data['occupation']\n return name, age, occupation\n\nname, age, occupation = parse_json(data)\nprint(name, age, occupation)"}
{"prompt": "Suggest an improvement for the following python code for finding the sum of elements of a list\ndef sum_elements(arr):\n    sum_value = 0\n    for num in arr:\n        sum_value += num\n    return sum_value ", "label": "def sum_elements(arr):\n    return sum(arr) # return sum of elements of arr with one line of code.", "predict": "def sum_elements(arr):\n    return sum(arr)"}
{"prompt": "Generate a Python class to represent a 3-dimensional vector. ", "label": "class Vector3D:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n    \n    def length(self):\n        return (self.x**2 + self.y**2 + self.z**2)**0.5", "predict": "class Vector3D:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n    \n    def __str__(self):\n        return \"({}, {}, {})\".format(self.x, self.y, self.z)\n    \n    def __add__(self, other):\n        x = self.x + other.x\n        y = self.y + other.y\n        z = self.z + other.z\n        return Vector3D(x, y, z)\n    \n    def __sub__(self, other):\n        x = self.x - other.x\n        y = self.y - other.y\n        z = self.z - other.z\n        return Vector3D(x, y, z)"}
{"prompt": "Work out a solution to the Towers of Hanoi game using Python.\nThe game consists of 3 rods and 4 disks. ", "label": "def TowersOfHanoi(n, fromRod, toRod, auxRod): \n    if n == 1: \n        print(\"Move disk 1 from rod\",fromRod,\"to rod\",toRod) \n        return\n    TowersOfHanoi(n-1, fromRod, auxRod, toRod) \n    print(\"Move disk\", n, \"from rod\", fromRod, \"to rod\", toRod) \n    TowersOfHanoi(n-1, auxRod, toRod, fromRod) \n\nn = 4\nTowersOfHanoi(n, 'A', 'C', 'B')", "predict": "def hanoi(n, source, auxiliary, target):\n    if n == 1:\n        print(\"Move disk 1 from {} to {}\".format(source, target))\n        return\n    hanoi(n-1, source, target, auxiliary)\n    print(\"Move disk {} from {} to {}\".format(n, source, target))\n    hanoi(n-1, auxiliary, source, target)\n\nhanoi(4, 'A', 'B', 'C')"}
{"prompt": "Develop an algorithm using Python to calculate the Euclidean distance between 2 points. ", "label": "def euclidean_distance(point1, point2): \n    sum_squared_distance = 0\n\n    for i in range(len(point1)): \n        sum_squared_distance += (point1[i] - point2[i])**2 \n    return sum_squared_distance**0.5", "predict": "def euclidean_distance(point1, point2):\n    x1, y1 = point1\n    x2, y2 = point2\n    return ((x2 - x1)**2 + (y2 - y1)**2)**0.5"}
{"prompt": "Create a Python script to print the absolute difference between two given numbers.\n9, 5 ", "label": "def absolute_difference(A, B): \n    return abs(A - B) \n  \n# Driver Code \nA = 9\nB = 5\nprint(absolute_difference(A, B))", "predict": "def diff(a, b):\n    return abs(a - b)\n\nprint(diff(9, 5))"}
{"prompt": "Create a recommendation system in Python using Pandas to recommend new products to customers based on past purchases.\nNot applicable ", "label": "import pandas as pd\nfrom sklearn.neighbors import NearestNeighbors\n\n# Read in data\ndata = pd.read_csv('product_data.csv')\n\n# Create an item-based collaborative filter\ncf = NearestNeighbors(metric='cosine', algorithm='brute')\ncf.fit(data)\n\n# Make recommendations\ndistances, indices = cf.kneighbors(data, n_neighbors=3)\n\n# Print results \nfor i in range(len(data)):\n print('Recommendations for item {}:'.format(i), indices[i])", "predict": "import pandas as pd\n\n# Read in data\ndf = pd.read_csv('past_purchases.csv')\n\n# Create a recommendation system\nrecommendations = df.groupby('customer_id')['product_id'].apply(lambda x: x.value_counts().index[:5]).reset_index()\n\n# Print out the recommendations\nprint(recommendations)"}
{"prompt": "Generate a Python program to filter out a list of numbers and keep only those that are prime\nnums = [2, 3, 4, 5, 6, 7, 8, 9, 10] ", "label": "def filter_prime(nums):\n    # Keep track of the prime numbers\n    primes = []\n    \n    # Iterate through each number\n    for num in nums:\n        is_prime = True\n        # Check if the number is divisible by any number from 2 to itself\n        for i in range(2, num):\n            # If so, the number is not prime\n            if num % i == 0:\n                is_prime = False\n                break\n        # Add the number to the list of primes if it is prime\n        if is_prime:\n            primes.append(num)\n            \n    # Return the updated list\n    return primes", "predict": "def filter_primes(nums):\n    result = []\n    for num in nums:\n        if is_prime(num):\n            result.append(num)\n    return result\n\ndef is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"}
{"prompt": "Write a Python program to store a list of books in a dictionary. Each book should include title, author, and number of pages.\n['The Hobbit', 'J.R.R. Tolkien', 295], ['The Catcher in the Rye', 'J.D. Salinger', 223] ", "label": "book_list = [\n  {'title': 'The Hobbit', 'author': 'J.R.R. Tolkien', 'pages': 295},\n  {'title': 'The Catcher in the Rye', 'author': 'J.D. Salinger', 'pages': 223},\n]", "predict": "books = {\n 'The Hobbit': {\n 'author': 'J.R.R. Tolkien',\n 'pages': 295\n },\n 'The Catcher in the Rye': {\n 'author': 'J.D. Salinger',\n 'pages': 223\n }\n}"}
{"prompt": "Assume that you have a web application which stores data in three different databases: MySQL, MongoDB, and PostgreSQL. Write a python program using the libraries for all three databases to query and display the data on the web page.\nNot applicable ", "label": "import pymysql\nfrom pymongo import MongoClient\nimport psycopg2\n\n# connect to MySQL\nconnection_mysql = pymysql.connect(host='localhost', user='root', password='password', database='db_name')\n\n# connect to MongoDB\nclient = MongoClient('mongodb://localhost:27017')\n\n# connect to PostgreSQL\nconnection_postgresql = psycopg2.connect(host='localhost', user='postgres', password='password', dbname='db_name')\n\n# define a query for each database\nquery_mysql = 'SELECT * FROM table_name'\nquery_mongodb = {'name': 'John Doe'}\nquery_postgresql =  'SELECT * FROM table_name WHERE age > 18'\n\n# execute the query and fetch the results\nresult_mysql = connection_mysql.execute(query_mysql)\nresult_mongodb = client.db_name.collection_name.find(query_mongodb)\nresult_postgresql = connection_postgresql.execute(query_postgresql)\n\n# close the connections\nconnection_mysql.close()\nclient.close() \nconnection_postgresql.close()\n\n# render the results on webpage\ndef render_page(request):\n    return render(request, 'template.html', {\n        'data_mysql': result_mysql, \n        'data_mongodb': result_mongodb,\n        'data_postgresql': result_postgresql\n    })", "predict": "import mysql.connector\nimport pymongo\nimport psycopg2\n\n# Connect to MySQL database\nmydb = mysql.connector.connect(\n host=\"localhost\",\n user=\"user\",\n passwd=\"password\",\n database=\"mydatabase\"\n)\n\n# Connect to MongoDB database\nclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\ndb = client[\"mydatabase\"]\n\n# Connect to PostgreSQL database\nconn = psycopg2.connect(\n host=\"localhost\",\n database=\"mydatabase\",\n user=\"user\",\n password=\"password\"\n)\n\n# Query data from all three databases\nmycursor = mydb.cursor()\nmycursor.execute(\"SELECT * FROM mytable\")\nresult_mysql = mycursor.fetchall()\n\ncollection = db[\"mytable\"]\nresult_mongo = collection.find({})\n\ncursor = conn.cursor()\ncursor.execute(\"SELECT * FROM mytable\")\nresult_postgres = cursor.fetchall()\n\n# Display the data on the web page\nfor row in result_mysql:\n print(row)\n\nfor row in result_mongo:\n print(row)\n\nfor row in result_postgres:\n print(row)"}
{"prompt": "Create a class in Python to represent a complex number. ", "label": "class ComplexNumber:\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n\n    def __str__(self):\n        return \"({0} + {1}i)\".format(self.real, self.imaginary)", "predict": "class ComplexNumber:\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n    \n    def __str__(self):\n        return f'{self.real} + {self.imaginary}i'\n    \n    def __add__(self, other):\n        real = self.real + other.real\n        imaginary = self.imaginary + other.imaginary\n        return ComplexNumber(real, imaginary)"}
{"prompt": "Create an\nPython program that takes a list of integers and returns the sublist consisting of the prime numbers from the list.\n[2, 8, 3, 6, 10, 7, 14, 11, 17, 15] ", "label": "def is_prime(num):\n for i in range(2, num // 2 + 1):\n if num % i == 0:\n return False\n return True\n\ndef prime_list(lst):\n prime_lst = []\n for num in lst:\n if is_prime(num):\n prime_lst.append(num)\n return prime_lst\n\nlst = [2, 8, 3, 6, 10, 7, 14, 11, 17, 15]\nprime_lst = prime_list(lst)\nprint(prime_lst) # Output: [2, 3, 7, 11, 17]", "predict": "def find_primes(lst):\n    prime_list = []\n    for num in lst:\n        if is_prime(num):\n            prime_list.append(num)\n    return prime_list\n\ndef is_prime(num):\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nlst = [2, 8, 3, 6, 10, 7, 14, 11, 17, 15]\n\nprime_list = find_primes(lst)\nprint(prime_list)"}
{"prompt": "Write a Python program to find the most efficient path for a robot to take from its current location to the destination\nstart = (4, 2) \nend = (9, 9) ", "label": "# Function to find the most efficient path\ndef find_path(start, end):\n    # Current location of the robot\n    x = start[0]\n    y = start[1] \n    # Destination coordinates\n    goal_x = end[0] \n    goal_y = end[1] \n    # set to record the cells already visited\n    visited = set() \n    # define a queue to store the tuple of current position and the path\n    queue = [([x, y], [])] \n    # define a neighbor list \n    neighbor = [[1, 0], [0, 1], [-1, 0], [0, -1]] \n    # define a maximum tries\n    max_tries = 100 \n    # define a while loop\n    while queue:\n        # get current position and current path\n        position, path = queue.pop(0) \n        # check if the goal is reached\n        if position[0] == goal_x and position[1] == goal_y:\n            return path + [position]\n        # check if the current position is out of maximum tries and not visited before\n        if position not in visited and max_tries > 0:\n            visited.add(position)\n            max_tries = max_tries - 1 \n            #get all neighbors of the current position\n            for neighbor_x, neighbor_y in neighbor:\n                next_x = position[0] + neighbor_x\n                next_y = position[1] + neighbor_y\n                # add to the queue\n                queue.append(([next_x, next_y], path + [position]))\n    return None\n \nstart = (4, 2) \nend = (9, 9) \n# most efficient path from start to end\npath = find_path(start, end) \nprint(path)", "predict": "def find_path(start, end):\n    # Create a grid of the environment\n    grid = [[0 for x in range(10)] for y in range(10)]\n\n    # Set the start and end points\n    grid[start[0]][start[1]] = 1\n    grid[end[0]][end[1]] = 2\n\n    # Create a queue to store the path\n    queue = []\n\n    # Add the start point to the queue\n    queue.append(start)\n\n    # Create a list to store the path\n    path = []\n\n    # Set the direction\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    while queue:\n        # Get the next point\n        point = queue.pop(0)\n\n        # Check if the point is the destination\n        if point == end:\n            path.append(point)\n            break\n\n        # Iterate through the directions\n        for dx, dy in directions:\n            # Get the next point\n            next_point = (point[0] + dx, point[1] + dy)\n\n            # Check if the point is in the grid\n            if next_point[0] >= 0 and next_point[0] < 10 and next_point[1] >= 0 and next_point[1] < 10:\n                # Check if the point is unvisited\n                if grid[next_point[0]][next_point[1]] == 0:\n                    # Set the point to visited\n                    grid[next_point[0]][next_point[1]] = 1\n                    # Add the point to the queue\n                    queue.append(next_point)\n                    # Add the point to the path\n                    path.append(next_point)\n\n    # Return the path\n    return path\n\n# Test\nprint(find_path((4, 2), (9, 9)))\n# Output: [(4, 2), (5, 2), (6, 2), (7, 2), (8, 2), (9, 2), (9, 3), ("}
{"prompt": "Edit this python code to be more efficient.\ndata = [1, 2, 3, 4]\nresult = []\nfor x in data:\n if x > 2:\n result.append(x) ", "label": "data = [1, 2, 3, 4]\n\nresult = [x for x in data if x > 2]", "predict": "data = [1, 2, 3, 4]\nresult = [x for x in data if x > 2]"}
{"prompt": "Debug the following Python code\ndef f1 (x):\n y = x + 1\ndef f2(x):\n return f1(x)*f1(x)\n\nf2(2) ", "label": "# define f1 #\ndef f1(x):\n    return x + 1\n\n# define f2 #\ndef f2(x):\n    return f1(x) * f1(x)\n\n# call f2 #\nprint(f2(2)) #Output: 9", "predict": "def f1(x):\n    return x + 1\n\ndef f2(x):\n    return f1(x) * f1(x)\n\nf2(2)"}
{"prompt": "Debug the following Python program which raises a SyntaxError. ", "label": "def func(a, b): \n  c = a + b \n  return c \n\na = 4 \nb = 5 \n\nres = func(a, b) \nprint(res)", "predict": "def add(x, y):\n    return x + y\n\ndef subtract(x, y):\n    return x - y\n\ndef multiply(x, y):\n    return x * y\n\ndef divide(x, y):\n    return x / y\n\n# raise SyntaxError\nadd(5, 10)\nsubtract(5, 10)\nmultiply(5, 10)\ndivide(5, 10)"}
{"prompt": "Set up GPIO pins, import necessary modules, define operating modes, prompt for password and mode selection, check license validity and user registration, calculate BAC, open", "label": "# bin/usr/python\n\n# Setting up GPIO pins\nfrom time import sleep\nimport RPi.GPIO as GPIO\n\nGPIO.setmode(GPIO.BOARD) # Identifies the pin numbers to the pi\nGPIO.setwarnings(False)\n\nGPIO.setup(3, GPIO.OUT) # Should sets pin #3 as an output...but doesnt work yet\nGPIO.setup(3, GPIO.LOW) # Turns initial output for pin 3 off\n\nimport time\ntimestr = time.strftime(\"%Y%m%d %H%M%S\")\n\n# Import functions to analyze license validity from CheckLicense.py\nfrom CheckLicense import check_license, calc_BAC\n\n                                 \nimport getpass\nimport sys\nimport re\n\n# Operating modes\nwhile True:\n    #try:\n    mode_req=raw_input(\"Enter Mode(normal, party, barkeep): \")\n\n    if mode_req==\"party\":\n         passwd=getpass.getpass(\"Enter password: \")\n         if passwd==\"admin\":\n                 mode=\"party\"\n                 \n    if mode_req==\"normal\":\n         passwd=getpass.getpass(\"Enter password: \")\n         if passwd==\"admin\":\n                 mode=\"normal\"\n\n    if mode_req==\"barkeep\":\n         passwd=getpass.getpass(\"Enter password: \")\n         if passwd==\"admin\":\n                 mode=\"barkeep\"\n\n            \n#Normal mode operations--------------------------------------------------------------------------------------------\n    while mode=='normal':\n            #try:\n        print '{0} mode!' .format(mode)\n\n        raw_text=getpass.getpass('Swipe card now:   ').strip() \n\n        check_license_out=check_license(raw_text)\n            \n        valid_license=check_license_out[0] \n        first_name=check_license_out[1]\n        last_name=check_license_out[2]\n        DL_num=check_license_out[3]\n        \n# Check to see if person is registered user\n\n        users=open(\"users_list.txt\", 'r')\n        hit=0\n        print DL_num\n        \n        if valid_license=='Yes':\n              for line in users:\n                      if re.search(DL_num, line, re.IGNORECASE):\n                              hit=hit+1\n              if hit>=1:\n                      valid_license='Yes'\n              else: \n                      print 'Not registered user'\n                      valid_license='No'\n# Calculating the BAC\n    \n        BAC=calc_BAC(raw_text)\n        print BAC\n\n    # Opening the solenoid \n        if valid_license=='Yes':\n              GPIO.setup(3, GPIO.HIGH)\n              print 'Beer time!'\n              sleep(2);\n              GPIO.setup(3, GPIO.LOW)\n              with open(\"swipes.txt\", \"a\") as myfile:\n                      myfile.write(last_name+\",\"+first_name+\" \")\n                      myfile.write(DL_num+\" \")\n                      myfile.write(mode+\" \")\n                      myfile.write(time.strftime(\"%Y-%m-%d\")+\" \")\n                      myfile.write(str(time.time())+\"\\n\")\n\n       # except (NameError, IndexError, ValueError):\n        #    print \"error\"\n        #    continue\n\n    #Party mode operations--------------------------------------------------------------------------------------------\n                                     \n    while mode==\"party\":\n        try:\n         print '{0} mode!' .format(mode)\n\n         raw_license_text=getpass.getpass('Swipe card now:   ').strip()\n         check_license_out=check_license(raw_license_text) \n\n         valid_license=check_license_out[0] \n         first_name=check_license_out[1]\n         last_name=check_license_out[2] \n\n\n        # Opening the solenoid \n\n         if valid_license=='Yes':\n                 GPIO.setup(3, GPIO.HIGH)\n                 print", "predict": "serial port and configure GPIO\n\nimport RPi.GPIO as GPIO\nimport time\nimport math\nimport serial\nimport random\nimport sys\nimport signal\nimport os\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"prompt": "Using Python, create a program to print a random element from a list.\n[\"apple\", \"banana\", \"mango\", \"pear\", \"grape\"] ", "label": "import random\n\n# list of fruits\nfruits = [\"apple\", \"banana\", \"mango\", \"pear\", \"grape\"]\n\n# generate a random index\nrandomIndex = random.randint(0, len(fruits)-1)\n\n# select and print the random fruit\nrandomFruit = fruits[randomIndex]\nprint(\"Random fruit: \" + randomFruit)", "predict": "import random\n\nlist = [\"apple\", \"banana\", \"mango\", \"pear\", \"grape\"]\n\nrandom_element = random.choice(list)\n\nprint(random_element)"}
{"prompt": "Develop an interactive text-based RPG game in Python that gives the player options to move around in an environment and battle monsters.\nNot applicable ", "label": "# Player class\nclass Player(object):\n def __init__(self):\n self.health = 100\n self.location = 'room one'\n self.monsters_killed = 0\n\n# Room class\nclass Room(object):\n def __init__(self):\n self.name = ''\n self.description = ''\n self.monsters = []\n\n def add_monster(self, monster):\n self.monsters.append(monster)\n\n# Monster class\nclass Monster(object):\n def __init__(self):\n self.name = ''\n self.health = 100\n\n def attack(self, player):\n player.health -= 10\n\n# Function to start the game\ndef start_game():\n # Create player, rooms and monsters\n player = Player()\n\n# Main game loop\nwhile True:\n # Show the current room;\n print(f'You are in {player.location}.')\n # Display available actions\n print('Available actions: move, fight')\n # Get user's action\n response = input('What would you like to do? ').lower()\n\n # Moving to a new room\n if response == 'move':\n # Get the list of available rooms\n # Get the user's destination\n # Move the player to the chosen room\n\n# Fighting a monster\n if response == 'fight':\n # Get all monsters in the current room\n # Get the user's chosen monster\n # Initiate a battle between the player and the monster\n\n# End of the game\n if player.health <= 0:\n print ('You have been defeated!')\n break\n\nif __name__ == '__main__':\n start_game()", "predict": "import random\n\nclass Game:\n def __init__(self):\n self.player = Player()\n self.rooms = [Room1(), Room2(), Room3()]\n self.monsters = [Monster1(), Monster2(), Monster3()]\n\ndef play(self):\n while True:\n print(\"You are in the starting room.\")\n print(\"What do you want to do?\")\n print(\"1. Move to the next room.\")\n print(\"2. Fight a monster.\")\n choice = input()\n \n if choice == \"1\":\n self.player.move_to_next_room()\n \n elif choice == \"2\":\n self.player.fight_monster(random.choice(self.monsters))\n \nelse:\n print(\"Invalid choice. Please try again.\")\n\nclass Player:\n def __init__(self):\n self.health = 10\n self.weapon = None\n \n def move_to_next_room(self):\n self.room = self.room.next\n \nclass Room:\n def __init__(self):\n self.next = None\n \nclass Monster:\n def __init__(self):\n self.health = 10\n self.attack = 5\n \ndef fight_monster(self, monster):\n print(\"You are fighting a monster!\")\n while self.health > 0 and monster.health > 0:\n self.health -= monster.attack\n monster.health -= self.weapon.damage\n \n if self.health <= 0:\n print(\"You have been defeated!\")\n \n elif monster.health <= 0:\n print(\"You have defeated the monster!\")\n \n# Create the game\ngame = Game()\n \n# Play the game\ngame.play()"}
{"prompt": "Create a Text-to-Speech Python application to read out a simple sentence. ", "label": "import pyttsx3\n\ndef text_to_speech(sentence):\n    engine = pyttsx3.init()\n    engine.say(sentence)\n    engine.runAndWait()\n    \ntext_to_speech(\"Hello, this is a simple sentence\")", "predict": "import pyttsx3\n\nengine = pyttsx3.init()\n\ndef speak(text):\n    engine.say(text)\n    engine.runAndWait()\n\nspeak(\"Hello, this is a simple sentence\")"}
{"prompt": "Create an application with a Python backend and a React frontend that allows a user to create a list of tasks.\nNot applicable ", "label": "# Python Backend\n# Web server setup\napp = Flask(__name__)\n\n# Database setup\ndb = SQLAlchemy(app)\n\n# Model for tasks\nclass Task(db.Model):\n  id = db.Column(db.Integer, primary_key=True)\n  title = db.Column(db.String(80), unique=True, nullable=False)\n  is_completed = db.Column(db.Boolean, default=False)\n\n  def __repr__(self):\n    return f'<Task {self.id}: {self.title}>'\n\n# API Endpoint\n@app.route('/tasks', methods=['POST'])\ndef create_task():\n  request_data = request.get_json()\n  title = request_data.get('title')\n  if not title:\n    return jsonify({'error': 'Title must be provided.'}), 400\n\n  task = Task(title=title)\n  db.session.add(task)\n  db.session.commit()\n\n  return jsonify(task.serialize())\n\n# React Frontend\nimport React, { useState, useEffect } from 'react'\nimport axios from 'axios'\n\nexport const TaskList = () => {\n  const [tasks, setTasks] = useState([])\n\n  useEffect(() => {\n    getTasks()\n  }, [])\n\n  const getTasks = async () => {\n    const response = await axios.get('http://localhost:3000/tasks')\n    setTasks(response.data)\n  }\n\n  return (\n    <div>\n      {tasks.map(task => (\n        <div key={task.id}>\n          <input type=\"checkbox\" checked={task.is_complete} />\n          <label>{task.title}</label>\n        </div>\n      ))}\n    </div>\n  )\n}", "predict": "# Backend\n\nimport flask\nfrom flask import request, jsonify\n\napp = flask.Flask(__name__)\n\ntasks = []\n\n@app.route('/tasks', methods=['POST'])\ndef create_task():\n data = request.get_json()\n new_task = {\n 'id': len(tasks) + 1,\n 'text': data['text'],\n 'done': False\n }\n tasks.append(new_task)\n return jsonify(new_task)\n\n# Frontend\n\nimport React, { useState, useEffect } from'react';\nimport axios from 'axios';\n\nconst App = () => {\n const [tasks, setTasks] = useState([]);\n\n useEffect(() => {\n axios.get('/tasks')\n.then(res => setTasks(res.data))\n.catch(err => console.log(err));\n }, []);\n\n const createTask = (text) => {\n axios.post('/tasks', { text })\n.then(res => setTasks([...tasks, res.data]))\n.catch(err => console.log(err));\n }\n\n return (\n <div>\n <h1>Tasks</h1>\n <button onClick={() => createTask('Test Task')}>Create Task</button>\n <ul>\n {tasks.map(task => (\n <li>{task.text}</li>\n ))}\n </ul>\n </div>\n );\n}\n\nexport default App;"}
{"prompt": "Write a Python program to combine two dictionaries of similar structure together, such that the entries in the two dictionaries are merged into a single dictionary.\ndict_a = {'a':1, 'b':2, 'c':3}\ndict_b = {'d':4, 'e':5, 'f':6} ", "label": "def merge_dict(dict_a, dict_b):\n    merged_dict = {**dict_a, **dict_b}\n    return merged_dict", "predict": "dict_c = dict_a.copy()\ndict_c.update(dict_b)\n\nprint(dict_c)\n# Output: {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}"}
{"prompt": "Generate a Python program to read a list of integers and print its elements in reversed order.\nThe input should include a sample list of integers for testing the program, for example: [1, 3, 6, 8, 10] ", "label": "list_of_ints = [1, 3, 6, 8, 10]\n\nlist_of_ints.reverse()\n\nprint(list_of_ints) # [10, 8, 6, 3, 1]", "predict": "# Read the list of integers\nnumbers = [1, 3, 6, 8, 10]\n\n# Reverse the list\nnumbers.reverse()\n\n# Print the reversed list\nprint(numbers)\n\n# Output\n[10, 8, 6, 3, 1]"}
{"prompt": "Given a binary tree, write a Python program to determine the sum of all elements in the tree. ", "label": "def sum_tree(root):\n    if root is None:\n        return 0\n\n    return root.val + sum_tree(root.left) + sum_tree(root.right)", "predict": "def sum_tree(root):\n    if root is None:\n        return 0\n    return root.val + sum_tree(root.left) + sum_tree(root.right)"}
{"prompt": "Create an API using flask and python which takes a list or array of integers and returns their minimum and maximum values.\n[12, 4, 9, 24, -5] ", "label": "from flask import Flask, request\napp = Flask(name)\n\n@app.route('/minmax', methods=['POST'])\ndef minmax():\n data = request.get_json()\n nums = data['nums']\n minVal = min(nums)\n maxVal = max(nums)\n return {'min': minVal, 'max': maxVal}\n\nif name == 'main':\n app.run()", "predict": "from flask import Flask, jsonify\n\napp = Flask(__name__)\n\n@app.route('/min_max', methods=['POST'])\ndef min_max():\n data = request.get_json()\n numbers = data['numbers']\n min_val = min(numbers)\n max_val = max(numbers)\n return jsonify({'min': min_val,'max': max_val})\n\nif __name__ == '__main__':\n app.run()"}
{"prompt": "Design a python class to represent a 3-dimensional vector with methods to support vector addition and subtraction. ", "label": "# Defining a class for 3-dimensional vectors \n \nclass Vector: \n  \n    # defining constructor \n    def __init__(self, x, y, z): \n        self.x = x \n        self.y = y \n        self.z = z \n  \n    # Defining function to print vector\n    def printVec(self):\n        print(self.x, self.y, self.z) \n  \n    # Defining function to add two vectors \n    def addVec(self, V):\n        return Vector(self.x+V.x, self.y+V.y, self.z+V.z) \n  \n    # Defining function to subtract two vectors \n    def subVec(self, V): \n        return Vector(self.x-V.x, self.y-V.y, self.z-V.z) \n\n# Driver code \nv1= Vector(1, 2, 3)\nv2= Vector(5, 3, 2) \n\nprint(\"Vector 1: \")\nv1.printVec() \nprint(\"Vector 2: \")\nv2.printVec()\n\nv3 = v1.addVec(v2)\nprint(\"sum of vector 1 and vector 2: \")\nv3.printVec()\n\nv4 = v1.subVec(v2) \nprint(\"difference of vector 1 and vector 2: \")\nv4.printVec()", "predict": "class Vector3D:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __add__(self, other):\n        return Vector3D(self.x + other.x, self.y + other.y, self.z + other.z)\n\n    def __sub__(self, other):\n        return Vector3D(self.x - other.x, self.y - other.y, self.z - other.z)"}
{"prompt": "Write a string slicing function in Python that takes a string and start and end index, and return the slice.\nstring = \"This is a slicing test\"\nstart = 8\nend = 15 ", "label": "def slicing(string, start, end):\n    return string[start:end]\n    \nprint(slicing(string, start, end))", "predict": "def slice_string(string, start, end):\n    return string[start:end]\n\nresult = slice_string(string, start, end)\nprint(result)"}
{"prompt": "Write a python program to tokenize a given text\nText='Python is an interpreted, high-level, general-purpose programming language.' ", "label": "import nltk \nfrom nltk.tokenize import word_tokenize \n  \n# input text  \ntext = 'Python is an interpreted, high-level, general-purpose programming language.'\n  \n# converting the text into tokens \ntoken = word_tokenize(text) \n  \nprint(token)", "predict": "import re\n\ndef tokenize(text):\n    tokens = re.findall(r'\\w+', text)\n    return tokens\n\ntext = 'Python is an interpreted, high-level, general-purpose programming language.'\ntokens = tokenize(text)\nprint(tokens)"}
{"prompt": "Generate a Python code for an algorithm to find the shortest path between two points in a matrix\nmatrix = [[2, 3, 5], [1, 7, 6], [3, 0, 9]]\nstart = (0, 0)\nend = (2, 2) ", "label": "def shortest_path(matrix, start, end):\n  queue = []\n  min_len = math.inf\n  queue.append([start])\n  while queue:\n    path = queue.pop(0)\n    x, y = path[-1]\n    if (x, y) == end:\n      if len(path) < min_len:\n        min_len = len(path)\n    for dx, dy in [[-1, 0], [1, 0], [0, -1], [0, 1]]:\n      new_x, new_y = x + dx, y + dy\n      if 0 <= new_x < len(matrix) and 0 <= new_y < len(matrix[0]):\n        if matrix[new_x][new_y] == 0:\n          queue.append(path + [(new_x, new_y)])\n  return min_len", "predict": "def find_shortest_path(matrix, start, end):\n    # Create a visited array to keep track of visited cells\n    visited = [[False for _ in range(len(matrix[0]))] for _ in range(len(matrix))]\n\n    # Initialize the queue\n    queue = [start]\n\n    # Loop until the queue is empty\n    while queue:\n        # Get the current cell\n        x, y = queue.pop(0)\n\n        # If the current cell is the end, return the path\n        if x == end[0] and y == end[1]:\n            path = [(x, y)]\n            while (x, y)!= start:\n                x, y = path[-2]\n                path.append((x, y))\n            return path[::-1]\n\n        # Mark the current cell as visited\n        visited[x][y] = True\n\n        # Check the 4 neighbors\n        for i in range(-1, 2):\n            for j in range(-1, 2):\n                if i == 0 and j == 0:\n                    continue\n                xx, yy = x + i, y + j\n                if 0 <= xx < len(matrix) and 0 <= yy < len(matrix[0]) and not visited[xx][yy]:\n                    queue.append((xx, yy))\n\n    # If the end is not reached, return None\n    return None"}
{"prompt": "Create a basic Python algorithm that searches a given sorted array for a value using binary search.\nsortedArray = [1, 2, 3, 4, 5, 6, 7]\nvalue = 5 ", "label": "# Array to search\nsortedArray = [1, 2, 3, 4, 5, 6, 7]\n\n# Target value\nvalue = 5\n\n# Binary search function\ndef binarySearch(array, target):\n # Find the middle of the array\n mid = len(array) // 2\n \n # Check if the target is equal to the middle value \n if array[mid] == target:\n  return True\n \n # If the target is less than the middle value, search the left half\n elif target < array[mid]:\n  return binarySearch(array[:mid], target)\n  \n # If the target is greater than the middle value, search the right half\n elif target > array[mid]:\n  return binarySearch(array[mid+1:], target)\n \n # If the target is not found\n else:\n  return False\n  \n# Check if the value is in the array\nif binarySearch(sortedArray, value):\n print('Value found!')\nelse:\n print('Value not found!')", "predict": "def binarySearch(sortedArray, value):\n    start = 0\n    end = len(sortedArray) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if sortedArray[mid] == value:\n            return mid\n        elif sortedArray[mid] > value:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return -1\n\nsortedArray = [1, 2, 3, 4, 5, 6, 7]\nvalue = 5\n\nindex = binarySearch(sortedArray, value)\nif index!= -1:\n    print(\"Element is present at index\", index)\nelse:\n    print(\"Element is not present in array\")"}
{"prompt": "Write a Python program that takes the following dictionary as an argument and returns the count of each item\n{\"apples\": 5, \"oranges\": 6, \"bananas\": 7} ", "label": "def item_counts(fruits):\n    counts = {}\n    for k, v in fruits.items():\n        counts[k] = v\n    return counts", "predict": "def count_items(items):\n    item_counts = {}\n    for item, count in items.items():\n        item_counts[item] = count\n    return item_counts"}
{"prompt": "Generate a Python class to read in a textfile and count the frequency of each word. ", "label": "class WordCounter:\n    def __init__(self, filename):\n        self.word_counts = {}\n        self.filename = filename\n        self.process_file()\n\n    def process_file(self):\n        with open(self.filename) as f:\n            for line in f:\n                words = line.split()\n                for word in words:\n                    if word in self.word_counts:\n                        self.word_counts[word] += 1\n                    else:\n                        self.word_counts[word] = 1\n\n    def get_word_counts(self):\n        return self.word_counts", "predict": "class WordCounter:\n    def __init__(self, filename):\n        self.filename = filename\n        self.word_count = {}\n\n    def count_words(self):\n        with open(self.filename, 'r') as f:\n            for line in f:\n                for word in line.split():\n                    if word in self.word_count:\n                        self.word_count[word] += 1\n                    else:\n                        self.word_count[word] = 1\n\n    def get_word_count(self):\n        return self.word_count"}
{"prompt": "Is it possible to create a Python program that converts a given string to a different case? ", "label": "def convert_string_case(string):\n    new_string = string.swapcase()\n    return new_string\n\nstring = \"this Is A TeST\"\nnew_string = convert_string_case(string)\nprint(new_string)", "predict": "def convert_string_case(string):\n    \"\"\"This function will convert a given string to a different case.\"\"\"\n    # convert string to lowercase\n    string_lower = string.lower()\n    \n    # convert string to uppercase\n    string_upper = string.upper()\n    \n    # return both lowercase and uppercase strings\n    return string_lower, string_upper"}
{"prompt": "Create a translation field for storing a string in multiple languages in a Django model. Use the TransCharField or TransTextField subclass of TransField depending on the widget needed. Use the TransDbValue class to store the translations in a dictionary format and implement the get_in_language and set_in_language", "label": "from django.db import models\nfrom django.conf import settings\nfrom django.utils.translation import get_language\nfrom django.utils.translation import ugettext as _\nfrom django.utils.encoding import force_unicode, smart_str, smart_unicode\nfrom django.forms.fields import Field\nfrom django.forms import ValidationError\nfrom widgets import TransCharWidget, TransTextWidget\n\ndef get_default_language_name():\n    '''\n    Get language from default language specified by LANGUAGE_CODE in settings\n    Used in error messages\n    '''\n    lang_name = ''\n    for lang in settings.LANGUAGES:\n        if lang[0] == settings.LANGUAGE_CODE:\n            lang_name = lang[1]\n            break\n    return force_unicode(lang_name)\n\nclass TransDbValue(unicode):\n    '''\n    This class implements a unicode string, but with a hidden attribute raw_data.\n    When used as a string it returns the translation of the current language\n    raw_data attribute stores a dictionary with all translations\n    Also implements a method \"get_in_language(language)\" that returns the translation on any available language\n    '''\n    raw_data = {}\n\n    def get_in_language(self, language):\n        if self.raw_data and self.raw_data.has_key(language):\n            return self.raw_data[language]\n        else:\n            return u''\n\n    def set_in_language(self, language, value):\n        self.raw_data[language] = value\n\nclass TransFormField(Field):\n    '''\n    forms field, used when ModelForm (or deprecated form_for_model/form_form_instance) is called\n    Also implements form validation in admin\n    '''\n    def clean(self, value):\n        if isinstance(value, dict) and self.required:\n            filled_value = [ v for v in value.values() if bool(v) ]\n            if not filled_value:\n                raise ValidationError, _(\"This field is required.\")\n        return super(TransFormField, self).clean(value)\n\nclass TransField(models.Field):\n    '''\n    Model field to be subclassed\n    Used for storing a string in many languages at database (with python's dictionary format)\n    pickle module could be used, but wouldn't alow search on fields?\n    '''\n    def get_internal_type(self):\n        return 'TextField'\n\n    def to_python(self, value):\n        if isinstance(value, TransDbValue):\n            return value\n\n        if isinstance(value, dict): # formfield method makes this function be called with value as a dict\n            python_value = value\n        else:\n            try:\n                python_value = eval(value)\n                for k,v in python_value.items():\n                    python_value[k] = smart_unicode(v)\n            except Exception:\n                python_value = None\n        if isinstance(python_value, dict):\n            if python_value.has_key(get_language()) and python_value[get_language()]:\n                result = TransDbValue(python_value[get_language()])\n            elif python_value.has_key(settings.LANGUAGE_CODE) and python_value[settings.LANGUAGE_CODE]:\n                result = TransDbValue(python_value[settings.LANGUAGE_CODE])\n            else:\n                val = \"bal\"\n                for item in python_value.items():\n                    try:\n                        val = item[1]\n                    except:\n                        pass\n                    if val: break\n\n                result = TransDbValue(python_value.items()[0][1])\n            result.raw_data = python_value\n        else:\n            result = TransDbValue(value)\n            result.raw_data = {settings.LANGUAGE_CODE: value}\n        return result\n\n    def get_db_prep_save(self, value):\n        if not isinstance(value, TransDbValue", "predict": "methods."}
{"prompt": "Create a python script that displays the information of three different cities.\nEdinburgh: Scotland, 54.6°N, UK\nParis: France, 48.86°N, Europe\nDhaka: Bangladesh, 23.78°N, Asia ", "label": "def get_city_info(city, country, latitude, continent):\n   print(\"City: {}, Country: {}, Latitude: {}, Continent: {}\".format(\n        city, country, latitude, continent))\n \nget_city_info('Edinburgh', 'Scotland', '54.6°N', 'UK')\nget_city_info('Paris', 'France', '48.86°N', 'Europe')\nget_city_info('Dhaka', 'Bangladesh', '23.78°N', 'Asia')", "predict": "def display_city_info(city_info):\n    city_name = city_info[0]\n    country = city_info[1]\n    latitude = city_info[2]\n    continent = city_info[3]\n    print(\"City: {}, Country: {}, Latitude: {}, Continent: {}\".format(city_name, country, latitude, continent))\n\ncity_info_1 = ['Edinburgh', 'Scotland', '54.6°N', 'UK']\ncity_info_2 = ['Paris', 'France', '48.86°N', 'Europe']\ncity_info_3 = ['Dhaka', 'Bangladesh', '23.78°N', 'Asia']\n\ndisplay_city_info(city_info_1)\ndisplay_city_info(city_info_2)\ndisplay_city_info(city_info_3)"}
{"prompt": "Write a Python program to remove duplicate characters of a given string.\n\"bufferoverflow\" ", "label": "def remove_duplicate_characters(string):\n    result = \"\"\n    seen = set()\n    for char in string:\n        if char not in seen:\n            seen.add(char)\n            result += char\n    return result\n\nprint(remove_duplicate_characters(\"bufferoverflow\"))", "predict": "def remove_duplicates(string):\n    result = \"\"\n    for char in string:\n        if char not in result:\n            result += char\n    return result\n\nprint(remove_duplicates(\"bufferoverflow\"))"}
{"prompt": "Produce a Python program that takes a list of numbers as an input and prints the result of finding the sum of the list. ", "label": "def sum_list(arr):\n    \"\"\"Finds the sum of a given list of numbers.\n    \n    Args:\n        arr (list): List of numbers.\n        \n    Returns:\n        int: Sum of list elements.\n    \"\"\"\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum", "predict": "def sum_list(numbers):\n    sum = 0\n    for num in numbers:\n        sum += num\n    return sum\n\nlist_of_numbers = [1, 2, 3, 4, 5]\n\nprint(sum_list(list_of_numbers))"}
{"prompt": "Create a function in Python to calculate the distance between two points.\npoint1 (x1, y1): (2, 7)\npoint2 (x2, y2): (4, 9) ", "label": "import math\n\ndef distance_between_points(x1, y1, x2, y2):\n    return math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n    \n# Call the function\ndistance = distance_between_points(2, 7, 4, 9)\nprint(\"The distance between the two points is\", distance)", "predict": "def calculate_distance(x1, y1, x2, y2):\n    return ((x2-x1)**2 + (y2-y1)**2)**0.5\n\ndist = calculate_distance(2, 7, 4, 9)\nprint(dist)"}
{"prompt": "Create an AI program that recognizes handwritten letters and digits using Python.\nNot applicable ", "label": "# imports\nimport tensorflow as tf\nfrom tensorflow import keras\n\n# load the MNIST dataset\nmnist = keras.datasets.mnist\n# Split the dataset into training and testing sets\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\n# Preprocess the data\nx_train, x_test = x_train / 255.0, x_test / 255.0\n\n# create a model\nmodel = keras.Sequential()\n# add a convolution layer\nmodel.add(keras.layers.Conv2D(28, kernel_size=(3,3), input_shape=(28, 28, 1)))\n# add a max pooling layer\nmodel.add(keras.layers.MaxPool2D(pool_size=(2, 2)))\n# add a flatten layer\nmodel.add(keras.layers.Flatten())\n# add a dense layer\nmodel.add(keras.layers.Dense(128, activation='relu'))\n# add an output layer\nmodel.add(keras.layers.Dense(10, activation='softmax'))\n\n# compile the model\nmodel.compile(optimizer='adam', \n loss='sparse_categorical_crossentropy',\n metrics=['accuracy'])\n\n# train the model\nmodel.fit(x_train, y_train, epochs=5)\n\n# evaluate the model\nmodel.evaluate(x_test, y_test)", "predict": "import tensorflow as tf\nfrom tensorflow.keras.datasets import mnist\nfrom tensorflow.keras.layers import Dense, Flatten\nfrom tensorflow.keras.models import Sequential\n\n# Load the data\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\n\n# Preprocess the data\nx_train, x_test = x_train / 255.0, x_test / 255.0\n\n# Build the model\nmodel = Sequential([\n Flatten(input_shape=(28, 28)),\n Dense(128, activation='relu'),\n Dense(10, activation='softmax')\n])\n\n# Compile the model\nmodel.compile(optimizer='adam',\n loss='sparse_categorical_crossentropy',\n metrics=['accuracy'])\n\n# Train the model\nmodel.fit(x_train, y_train, epochs=5)\n\n# Evaluate the model\nmodel.evaluate(x_test, y_test)"}
{"prompt": "Given a list of numbers, write a Python function to find out if any two numbers add up to a given number. ", "label": "def two_sum(numbers, given):\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == given:\n                return True\n    return False", "predict": "def two_sum(nums, target):\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False"}
{"prompt": "Write a Python program to generate a random number between the given input numbers. ", "label": "import random\n\ndef random_num(start, stop):\n    return random.randint(start, stop)\n\n\n# Example\nnum = random_num(0, 10)\nprint(num)", "predict": "import random\n\ndef random_number(min_num, max_num):\n    return random.randint(min_num, max_num)"}
{"prompt": "Create a python program to include a web-page rendering feature. ", "label": "import webbrowser\n\nurl = \"www.example.com\"\nwebbrowser.open(url)", "predict": "from selenium import webdriver\n\n# Initialize the webdriver\ndriver = webdriver.Chrome()\n\n# Load the webpage\ndriver.get('https://www.example.com')\n\n# Render the webpage\ndriver.execute_script(\"window.print()\")\n\n# Close the webdriver\ndriver.close()"}
{"prompt": "Create a Python dictionary from two given lists.\nlist1 = ['a', 'b', 'c'] \nlist2 = [1, 2, 3] ", "label": "dict1 = dict(zip(list1, list2)) \nprint(dict1)", "predict": "dictionary = dict(zip(list1, list2))"}
{"prompt": "Construct a code snippet for Python to check whether a number is even or odd. ", "label": "def is_even(n):\n    if n % 2 == 0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")\n\nis_even(4)", "predict": "def is_even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False"}
{"prompt": "Develop a reinforcement learning environment that plays tic-tac-toe in Python ", "label": "import random\n\n# Create class for environment\nclass TicTacToeEnv():\n    # Define initializer\n    def __init__(self):\n        self.state = [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']\n        self.player = 'X'\n        self.player_turn = 0\n    \n    # Define a reset method to set initial state\n    def reset(self):\n        self.state = [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']\n        self.player = 'X'\n        self.player_turn = 0\n        return self.state\n        \n    # Define step function\n    def step(self, action):\n        # Set player mark\n        self.state[action] = self.player\n        # Check for winner\n        winner = self.check_winner()\n        done = False\n        if winner == 'X' or winner == 'O':\n            reward = 1\n            done = True\n        else:\n            reward = 0\n        # Switch players\n        if self.player == 'X':\n            self.player = 'O'\n        else:\n            self.player = 'X'\n        # Check for draw and switch player turn\n        if self.player_turn == 8:\n            done = True\n            reward = 0.5\n        self.player_turn += 1\n        # Return state, reward, done, info\n        return self.state, reward, done, None\n        \n    # Define a method to check if someone has won\n    def check_winner(self):\n        win_state = [[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6]]\n        for i in win_state:\n            if self.state[i[0]] == self.state[i[1]] == self.state[i[2]] == 'X':\n                return 'X'\n            if self.state[i[0]] == self.state[i[1]] == self.state[i[2]] == 'O':\n                return 'O'\n        return None\n\n# Play a game\nenv = TicTacToeEnv()\nenv.reset()\ndone = False\nwhile not done:\n    action = random.randint(0, 8)\n    state, reward, done, _ = env.step(action)\n    print(env.state)\n    if reward == 1 or reward == 0.5:\n        print(\"Winner: \"+str(reward))", "predict": "import gym\n\n# Create a Tic-Tac-Toe environment\nenv = gym.make('TicTacToe-v0')\n\n# Set the number of episodes\nnum_episodes = 1000\n\n# Set the maximum number of steps per episode\nmax_steps = 100\n\n# Set the discount factor\ngamma = 0.95\n\n# Set the learning rate\nlr = 0.01\n\n# Set the epsilon decay rate\nepsilon_decay = 0.9995\n\n# Set the minimum epsilon\nepsilon_min = 0.01\n\n# Set the number of actions\nnum_actions = 9\n\n# Set the size of the state space\nstate_space_size = 3**3\n\n# Initialize the Q-table\nQ = np.zeros([state_space_size, num_actions])\n\n# Initialize the epsilon\nepsilon = 1.0\n\n# Iterate over the number of episodes\nfor i_episode in range(num_episodes):\n    # Reset the environment\n    state = env.reset()\n\n    # Set the total reward\n    total_reward = 0\n\n    # Iterate over the number of steps\n    for t in range(max_steps):\n        # Choose an action according to epsilon-greedy\n        if np.random.uniform(0, 1) < epsilon:\n            action = np.argmax(Q[state, :])\n        else:\n            action = np.random.choice(num_actions)\n\n        # Take the action and get the next state and reward\n        next_state, reward, done, _ = env.step(action)\n\n        # Update the Q-table\n        Q[state, action] = Q[state, action] + lr * (reward + gamma * np.max(Q[next_state, :]) - Q[state, action])\n\n        # Update the state\n        state = next_state\n\n        # Update the total reward\n        total_reward += reward\n\n        # If the episode is done, break the loop\n        if done:\n            break\n\n    # Decay epsilon\n    epsilon"}
{"prompt": "Create a Python program to convert a list of strings to a dictionary. The dictionary keys should be the characters of the strings and the values should be the lengths of the strings.\nstrings = ['hello', 'world', 'computer'] ", "label": "strings = ['hello', 'world', 'computer']\n\ndictionary = {}\n\nfor string in strings:\n for char in string:\n  dictionary[char] = len(string)\n\nprint(dictionary)  # {'h': 5, 'e': 5, 'l': 5, 'o': 5, 'w': 5, 'r': 5, 'd': 5, 'c': 8, 'm': 8, 'u': 8, 't': 8, 'p': 8, 'e': 8, 'r': 8}", "predict": "def string_to_dict(strings):\n    output_dict = {}\n    for string in strings:\n        for char in string:\n            if char in output_dict:\n                output_dict[char].append(len(string))\n            else:\n                output_dict[char] = [len(string)]\n    return output_dict"}
{"prompt": "Develop a Python script to sort a given list of names alphabetically.\n[John, Harry, Robert] ", "label": "def sort_names(names):\n    names.sort()\n    return names\n\nnames = [\"John\", \"Harry\", \"Robert\"]\nresult = sort_names(names)\nprint(result)", "predict": "names = [\"John\", \"Harry\", \"Robert\"]\n\n# Sort the list alphabetically\nnames.sort()\n\n# Print the sorted list\nprint(names)"}
{"prompt": "Create a Python script to connect to a domain and fetch the contents of its homepage ", "label": "import requests\n\nurl = \"https://www.example.com/\" \nresponse = requests.get(url) \n\nif response.status_code == 200: \n    print(response.content) \nelse:\n    print(\"Error fetching the page\")", "predict": "import requests\n\nurl = 'http://example.com/'\n\nresponse = requests.get(url)\nif response.status_code == 200:\n    print(response.text)"}
{"prompt": "What function will you use to count the number of words in a string?\n'Hello world, this is a sentence.' ", "label": "There are 5 words in the given string. \n\nTo count the number of words in a string, you can use the `len()` or `count()` functions in Python. \n\nFor example: \n```\nnum_words = len(string.split())\n```\nor \n```\nnum_words = string.count(\" \") + 1\n```", "predict": "function countWords(str) {\n    // Split the string into an array of words\n    let words = str.split(' ');\n\n    // Return the length of the array\n    return words.length;\n}\n\nlet str = 'Hello world, this is a sentence.';\nlet count = countWords(str);\nconsole.log(count); // 5"}
{"prompt": "Create a Python program that shuffles an array of integers.\n[1, 5, 9, 4, 2] ", "label": "import random\n\ndef shuffle(arr):\n    random.shuffle(arr)\n    return arr \n\nmy_arr = [1, 5, 9, 4, 2]\n\nprint(shuffle(my_arr))", "predict": "import random\n\narr = [1, 5, 9, 4, 2]\nrandom.shuffle(arr)\n\nprint(arr)"}
{"prompt": "Write a Python program that calculates the greatest common divisor of two numbers and displays the result.\n10 and 20 ", "label": "def gcd(a, b):\n    if b == 0: \n        return a \n    return gcd(b, a % b) \n  \nnum1 = 10\nnum2 = 20\n\ngcd_value = gcd(num1, num2)\n\nprint(f'The greatest common divisor of {num1} and {num2} is {gcd_value}')", "predict": "def gcd(a, b): \n    if a == 0: \n        return b \n    return gcd(b % a, a) \n\nnum1 = 10\nnum2 = 20\n\nprint(\"The GCD of\", num1, \"and\", num2, \"is\", gcd(num1, num2))"}
{"prompt": "Develop a python program to convert a given temperature value from Fahrenheit to Celsius. ", "label": "def fahrenheit_to_celsius(temp):\n    celsius = (temp - 32) * 5/9 \n    return round(celsius, 2)", "predict": "def fahrenheit_to_celsius(temp_fahrenheit):\n    temp_celsius = (temp_fahrenheit - 32) * 5/9\n    return temp_celsius"}
{"prompt": "Write a Python program to generate a random password for a user with length of 8 characters, containing at least one uppercase letter, one lowercase letter, one digit, and one special character.\nNot applicable ", "label": "import string\nimport random\n\ndef generate_password():\n   up_alphabet = string.ascii_uppercase\n   low_alphabet = string.ascii_lowercase\n   digits = string.digits\n   symbols = string.punctuation\n   length = 8\n   pass_characters = up_alphabet + low_alphabet + digits + symbols\n   password =  ''.join(random.sample(pass_characters, length))\n   return password\n\nprint(generate_password())", "predict": "import random\nimport string\n\ndef generate_password():\n    chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(chars) for _ in range(8))\n    if any(c.isupper() for c in password) and any(c.islower() for c in password) and any(c.isdigit() for c in password) and any(c in string.punctuation for c in password):\n        return password\n    else:\n        return generate_password()\n\npassword = generate_password()\nprint(password)"}
{"prompt": "Implement a logistic regression classifier in python to classify handwritten digits from the MNIST dataset.\nMNIST dataset ", "label": "import numpy as np\nimport matplotlib.pyplot as plt\nimport gzip\nimport pickle\n\n# load training data\nwith gzip.open('./mnist_dataset/mnist.pkl.gz', 'rb') as f:\n    train_data,valid_data,test_data  = pickle.load(f, encoding='latin1')\n\n# prepare logistic regression\nX_train, y_train = train_data[0], train_data[1]\nX_valid, y_valid = valid_data[0], valid_data[1]\nX_test, y_test = test_data[0], test_data[1]\n\nX_train = np.hstack([np.ones([X_train.shape[0],1]), X_train])\nX_valid = np.hstack([np.ones([X_valid.shape[0],1]), X_valid])\nX_test = np.hstack([np.ones([X_test.shape[0],1]), X_test])\n\ndef sigmoid(z):\n    return 1.0/(1.0+np.exp(-z))\n\ndef LogisticRegression(X, y, max_iter, alpha):\n    m, n = X.shape\n    weights = np.zeros(n)\n    \n    for _ in range(max_iter):\n        weights = weights - alpha * (1/m) * (X.T @ (sigmoid(X @ weights) - y))\n\n    return weights\n\nweights = LogisticRegression(X_train, y_train, 1000, 0.001)\n\n# accuracy on training set\npredictions = np.round(sigmoid(X_train @ weights))\ntrain_accuracy = np.mean(predictions == y_train)\n\n# accuracy on validation set\npredictions = np.round(sigmoid(X_valid @ weights))\nvalid_accuracy = np.mean(predictions == y_valid)\n\n# accuracy on test set\npredictions = np.round(sigmoid(X_test @ weights))\ntest_accuracy = np.mean(predictions == y_test)\n\nprint('Train accuracy = ', train_accuracy)\nprint('Validation accuracy = ', valid_accuracy)\nprint('Test accuracy = ', test_accuracy)", "predict": "import numpy as np\nfrom sklearn.datasets import fetch_openml\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\n# Load the dataset\nmnist = fetch_openml('mnist_784')\nX = mnist.data\ny = mnist.target\n\n# Split into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# Create the model\nmodel = LogisticRegression()\n\n# Train the model\nmodel.fit(X_train, y_train)\n\n# Make predictions\ny_pred = model.predict(X_test)\n\n# Evaluate the model\naccuracy = np.mean(y_pred == y_test)\nprint('Accuracy: {:.2f}'.format(accuracy))"}
{"prompt": "Develop a design algorithm in Python that randomly generates a unique snowflake pattern. ", "label": "import random\n\ndef generate_snowflake():\n  # Generate random numbers between 0 and 1\n  a = random.random()\n  b = random.random()\n  c = random.random()\n\n  # Generate the snowflake\n  snowflake = [] \n  snowflake.append((a**2 + b**2 + c**2)**0.5 * math.cos(a * math.pi * 2))\n  snowflake.append((a**2 + b**2 + c**2)**0.5 * math.sin(b * math.pi * 2))\n  snowflake.append((a**2 + b**2 + c**2)**0.5 * math.sin(c * math.pi * 2))\n\n  return snowflake", "predict": "import random\n\ndef generate_snowflake():\n    # Define the snowflake's pattern\n    pattern = [\n        [0, 0, 0, 0, 0],\n        [0, 1, 1, 1, 0],\n        [0, 1, 0, 1, 0],\n        [0, 1, 1, 1, 0],\n        [0, 0, 0, 0, 0]\n    ]\n\n    # Randomly generate the snowflake\n    for row in pattern:\n        for col in row:\n            if random.random() > 0.5:\n                col = 1 - col\n\n    # Print the snowflake\n    for row in pattern:\n        print(row)\n\ngenerate_snowflake()"}
{"prompt": "Use Python to build a random number generator in the range [0, 10). ", "label": "import random\n \nx = random.randint(0, 9)\nprint(x)", "predict": "import random\n\ndef random_number():\n    return random.randint(0, 10)"}
{"prompt": "Create a Python class called Employee that represents an employee in an organization. The Employee class should have instance attributes for the employee’s name, job title, and job number.\nNot applicable ", "label": "class Employee:\n    def __init__(self, name, job_title, job_number):\n        self.name = name\n        self.job_title = job_title\n        self.job_number = job_number", "predict": "class Employee:\n def __init__(self, name, job_title, job_number):\n  self.name = name\n  self.job_title = job_title\n  self.job_number = job_number\n\ndef get_name(self):\n return self.name\n\ndef get_job_title(self):\n return self.job_title\n\ndef get_job_number(self):\n return self.job_number"}
{"prompt": "Develop a system that finds similarities between given strings. ", "label": "def get_jaccard_similarity(str1, str2):\n    a = set(str1.split()) \n    b = set(str2.split())\n    c = a.intersection(b)\n    return float(len(c)) / (len(a) + len(b) - len(c))\n\n# Driver code \nstr1 = \"python programming\"\nstr2 = \"java programming\"\nprint(get_jaccard_similarity(str1, str2))", "predict": "# Python program to find similarities between given strings \ndef similarity(str1, str2): \n    # create a dictionary to store the counts \n    counts = {} \n    # calculate the counts for the given strings \n    for i in str1: \n        if i in counts: \n            counts[i] += 1\n        else: \n            counts[i] = 1\n    for i in str2: \n        if i in counts: \n            counts[i] += 1\n        else: \n            counts[i] = 1\n  \n    # calculate the similarity \n    similarity = 0\n    for i in counts: \n        similarity += (counts[i] / max(len(str1), len(str2))) \n    similarity = round(similarity * 100, 2) \n    return similarity \n  \n# Driver code \nstr1 = \"Hello\"\nstr2 = \"Hi\"\n  \n# print the similarity \nprint(similarity(str1, str2))"}
{"prompt": "Write a python program that selects five random elements from a list and prints them.\nmy_list = [1, 3, 5, 8, 7, 2, 10, 4, 6, 9] ", "label": "import random\n\nmy_list = [1, 3, 5, 8, 7, 2, 10, 4, 6, 9]\nrandom.shuffle(my_list)\n\nfor i in range(5):\n    print(my_list[i])", "predict": "import random\n\nmy_list = [1, 3, 5, 8, 7, 2, 10, 4, 6, 9]\n\nrandom.shuffle(my_list)\n\nfor i in range(5):\n    print(my_list[i])"}
{"prompt": "Devolop a Python code to remove the duplicates from a given list and sort them in ascending order.\n[2, 8, 5, 2, 6, 3, 4] ", "label": "my_list = [2, 8, 5, 2, 6, 3, 4]\nmy_list = list(dict.fromkeys(my_list))\nmy_list.sort()\nprint(my_list) # [2, 3, 4, 5, 6, 8]", "predict": "def remove_duplicates(lst):\n    new_list = []\n    for item in lst:\n        if item not in new_list:\n            new_list.append(item)\n    new_list.sort()\n    return new_list"}
{"prompt": "Create a function in Python that takes two numbers as input and returns a dictionary with all the prime numbers between them.\n8 and 20 ", "label": "def prime_numbers(x, y):\n \n prime_nums = {}\n \n for i in range(x, y+1):\n if(i > 1):\n for j in range(2, i):\n if(i % j == 0):\n break\n else:\n prime_nums[i] = i\n \n return prime_nums\n \nprint(prime_numbers(8, 20))\n# { 8: 8, 11: 11, 13: 13, 17: 17, 19: 19 }", "predict": "def prime_numbers(start, end):\n \n primes = []\n \n for i in range(start, end + 1):\n \n if i > 1:\n for j in range(2, i):\n if (i % j) == 0:\n break\n else:\n primes.append(i)\n \n return primes\n \n# Usage example\nstart = 8\nend = 20\n\nprint(prime_numbers(start, end))\n# Output: [11, 13, 17, 19]"}
{"prompt": "Develop a Python script to print the first 10 cubes of natural numbers. ", "label": "for i in range(1, 11):\n    print(i**3)", "predict": "for i in range(1, 11):\n    print(i**3)"}
{"prompt": "Create a python function that takes in two strings and output their combined length.\nstring_1 = \"Hello\"\nstring_2 = \"World\" ", "label": "def get_string_length(string_1, string_2):\n    return len(string_1 + string_2)", "predict": "def get_string_length(string_1, string_2):\n    return len(string_1 + string_2)"}
{"prompt": "Develop a function in Python to randomly select one element from a given array.\n[1, 2, 3, 4] ", "label": "import random\n\ndef randomElement(arr):\n    return random.choice(arr)", "predict": "import random\n\ndef random_element(arr):\n    return random.choice(arr)\n\narr = [1, 2, 3, 4]\nresult = random_element(arr)\nprint(result)"}
{"prompt": "Develop a Python script to train a multi-layer perceptron to identify MNIST handwritten digits.\nNot applicable ", "label": "# import libraries \nfrom keras.models import Sequential \nfrom keras.layers import Dense, Dropout \nimport numpy \n\n# load the dataset \ndataset = numpy.loadtxt(\"mnist.csv\", delimiter=\",\") \n\n# split into input (X) and output (Y) variables \nX = dataset[:,0:784] \nY = dataset[:,784] \n\n# Create model\nmodel = Sequential() \nmodel.add(Dense(784, input_dim=784, activation='relu'))\nmodel.add(Dense(256, activation='relu')) \nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(10, activation='softmax'))\n\n# Compile model \nmodel.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy']) \n\n# Fit the model \nmodel.fit(X, Y, epochs=10, batch_size=128, verbose=2)\n\n# Evaluate the model \nscores = model.evaluate(X, Y) \nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))", "predict": "import tensorflow as tf\nfrom tensorflow.examples.tutorials.mnist import input_data\n\n# Load the data\nmnist = input_data.read_data_sets('MNIST_data', one_hot=True)\n\n# Create a neural network\nmodel = tf.keras.models.Sequential()\nmodel.add(tf.keras.layers.Dense(64, activation='relu', input_shape=(784,)))\nmodel.add(tf.keras.layers.Dense(64, activation='relu'))\nmodel.add(tf.keras.layers.Dense(10, activation='softmax'))\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\n# Train the model\nmodel.fit(mnist.train.images, mnist.train.labels, epochs=5)\n\n# Test the model\ntest_loss, test_acc = model.evaluate(mnist.test.images, mnist.test.labels)\n\nprint('Test accuracy:', test_acc)"}
{"prompt": "Sort a list of dictionaries in Python by a given key.\n[{'food': 'apple', 'color': 'red'}, {'food': 'banana', 'color': 'yellow'}, {'food': 'pear', 'color': 'green'}] ", "label": "list_of_dicts = [{'food': 'apple', 'color': 'red'}, {'food': 'banana', 'color': 'yellow'}, {'food': 'pear', 'color': 'green'}]\n\n# Sort list by given key\nsorted_list = sorted(list_of_dicts, key=lambda item:item['color'])\n\nprint(sorted_list)", "predict": "def sort_dict_list_by_key(dict_list, key):\n    return sorted(dict_list, key=lambda k: k[key])"}
{"prompt": "Create a Python script to scrape tweets with a particular hashtag from Twitter.\n\"#100DaysOfCode\" ", "label": "import tweepy\n\n# Replace the API_KEY and API_SECRET with your application's key and secret.\nauth = tweepy.AppAuthHandler(API_KEY, API_SECRET)\n\napi = tweepy.API(auth, wait_on_rate_limit=True,\n wait_on_rate_limit_notify=True)\n\n# Replace the hashtag with your hashtag of interest.\nhashtag = '#100DaysOfCode'\n\n# Fetch the tweets\ntweets = tweepy.Cursor(api.search, q=hashtag, lang=\"en\").items()\n\n# Print out the tweets\nfor tweet in tweets:\n print(tweet.text)", "predict": "import tweepy\n\n# authentication\nconsumer_key = '<Your Consumer Key>'\nconsumer_secret = '<Your Consumer Secret>'\n\naccess_token = '<Your Access Token>'\naccess_token_secret = '<Your Access Token Secret>'\n\n# authentication of consumer key and secret\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\n\n# create API object\napi = tweepy.API(auth)\n\n# fetching tweets with hashtag\ntweets = api.search(q='#100DaysOfCode', count=100)\n\n# printing the tweets\nfor tweet in tweets:\n    print(tweet.text)"}
{"prompt": "Design an algorithm in Python to find the number of occurrences of a given string in another string.\nhaystack = \"Hello World\"\nneedle = \"l\" ", "label": "def count_occurrences(haystack, needle):\n    count = 0\n    for char in haystack:\n        if char == needle:\n            count += 1\n    return count", "predict": "def count_occurrences(haystack, needle):\n    count = 0\n    for i in range(len(haystack)):\n        if haystack[i] == needle:\n            count += 1\n    return count\n\nhaystack = \"Hello World\"\nneedle = \"l\"\n\nprint(count_occurrences(haystack, needle)) # 2"}
{"prompt": "Generate Python code to print the sum of two user-defined variables.\nvar1 = 3 \nvar2 = 7 ", "label": "var1 = 3\nvar2 = 7\n\nsum = var1 + var2\nprint('The sum of var1 and var2 is ' + str(sum)) # prints 'The sum of var1 and var2 is 10'", "predict": "var1 = 3\nvar2 = 7\n\nprint(var1 + var2)"}
{"prompt": "Create a Python program to calculate the 10th Fibonacci number. The program should use a recursive approach to calculate the Fibonacci number.\nNot applicable ", "label": "def fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return fibonacci(n-1)+fibonacci(n-2) \n  \n# Driver Program \n    print(fibonacci(10))", "predict": "def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \n  \nprint(Fibonacci(10))"}
{"prompt": "Create a web application using Django and Python. This application should allow users to register and login to view a list of quotes.\nNot applicable ", "label": "# projects/quotes/models.py\n\nclass Quote(models.Model):\n    author = models.CharField(max_length=255)\n    quote_text = models.TextField()\n\n\nclass UserQuote(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    quote = models.ForeignKey(Quote, on_delete=models.CASCADE)\n\n# projects/quotes/views.py\n\ndef index(request):\n    if not request.user.is_authenticated:\n        return redirect('login')\n    quotes = request.user.userquote_set.all()\n    return render(request, 'quotes/index.html', {'quotes': quotes})\n\ndef login(request):\n    if request.user.is_authenticated:\n        return redirect('index')\n\n    if request.method == 'POST':\n        form = AuthenticationForm(request.POST)\n        if form.is_valid():\n            user = form.get_user()\n            django_login(request, user)\n            return redirect('index')\n    else:\n        form = AuthenticationForm()\n    return render(request, 'quotes/login.html', {'form': form})", "predict": "# quotes/models.py\nfrom django.db import models\n\nclass Quote(models.Model):\n    quote_text = models.CharField(max_length=255)\n    author = models.CharField(max_length=255)\n\n# quotes/views.py\nfrom django.shortcuts import render\nfrom.models import Quote\n\ndef index(request):\n    quotes = Quote.objects.all()\n    return render(request, 'quotes/index.html', {'quotes': quotes})\n\n# quotes/urls.py\nfrom django.urls import path\nfrom. import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n]\n\n# quotes/templates/quotes/index.html\n<h1>Quotes</h1>\n<ul>\n{% for quote in quotes %}\n    <li>{{ quote.quote_text }} - {{ quote.author }}</li>\n{% endfor %}\n</ul>"}
{"prompt": "Create a program in Python 3 to simulate the rolling of two dice. ", "label": "import random\n\ndef roll_dice():\n    '''This function simulates rolling two dice.'''\n    die_1 = random.randint(1, 6)\n    die_2 = random.randint(1, 6)\n    print(\"Die 1: {}\".format(die_1))\n    print(\"Die 2: {}\".format(die_2))\n    return (die_1, die_2)", "predict": "import random\n\ndef roll_dice():\n    dice1 = random.randint(1,6)\n    dice2 = random.randint(1,6)\n    return dice1, dice2\n\nif __name__ == '__main__':\n    dice1, dice2 = roll_dice()\n    print('You rolled a {} and a {}'.format(dice1, dice2))"}
{"prompt": "Create a Python script to format the following string with proper new lines and indentation.\n'{ \"name\":\"John\", \"age\":30, \"city\":\"New York\"}' ", "label": "formatted = '{\\n  \"name\":\"John\",\\n  \"age\":30,\\n  \"city\":\"New York\"\\n}'", "predict": "formatted_string = '{\\n  \"name\":\"John\",\\n  \"age\":30,\\n  \"city\":\"New York\"\\n}'"}
{"prompt": "Implement a Python function to generate the Fibonacci sequence of a given length.\n6 ", "label": "def generate_fibonacci(length):\n    # Initialize\n    n1, n2 = 0, 1\n\n    # Check if length is valid\n    if length <= 0:\n        print('Invalid length. Positive numbers only.')\n    elif length == 1:\n        print(n1)\n    else:\n        print(n1, n2, end=' ')\n    \n    # Generate sequence\n    for i in range(2, length):\n        n3 = n1 + n2\n        print(n3, end=' ')\n        n1 = n2\n        n2 = n3\n\n# Show output\ngenerate_fibonacci(6)\n# Output: 0 1 1 2 3 5", "predict": "def generate_fibonacci(length):\n    a = 0\n    b = 1\n    result = [a, b]\n    for _ in range(2, length):\n        c = a + b\n        a = b\n        b = c\n        result.append(c)\n    return result\n\nfibonacci_sequence = generate_fibonacci(6)\nprint(fibonacci_sequence)"}
{"prompt": "Create a python program to calculate the sum of odd numbers within a given range.\nrange(1, 10) ", "label": "total = 0\nfor i in range(1, 10):\n    if i % 2 != 0:\n        total += i\nprint(total)", "predict": "def sum_odd_numbers(start, end):\n    sum = 0\n    for i in range(start, end+1):\n        if i % 2!= 0:\n            sum += i\n    return sum\n\nprint(sum_odd_numbers(1, 10))"}
{"prompt": "Optimize a function written in Python that calculates the mean of a given sequence of numbers\nimport numpy as np\nsequence = np.array([1, 4, 6, 5, 9], dtype=np.float64)\ndef calculate_mean(sequence):\n    sum = 0\n    for number in sequence:\n        sum += number\n    return sum / len(sequence) ", "label": "import numpy as np\nsequence = np.array([1, 4, 6, 5, 9], dtype=np.float64)\ndef calculate_mean(sequence):\n    return np.mean(sequence)", "predict": "import numpy as np\nsequence = np.array([1, 4, 6, 5, 9], dtype=np.float64)\ndef calculate_mean(sequence):\n    return np.mean(sequence)"}
{"prompt": "Write a Python program to create a dictionary mapping letters to numbers and numbers to letters. ", "label": "letters_numbers = {\n 'a': 1, 'b': 2, 'c': 3,  'd': 4, 'e': 5,\n 'f': 6, 'g': 7, 'h': 8,  'i': 9, 'j': 10,\n 'k': 11, 'l': 12, 'm': 13, 'n': 14, 'o': 15,\n 'p': 16, 'q': 17, 'r': 18, 's': 19, 't': 20,\n 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26\n}\nnumbers_letters = dict(zip(letters_numbers.values(), letters_numbers.keys()))\nprint(numbers_letters)", "predict": "letters_numbers = {\n    'A': 1, 'B': 2, 'C': 3, 'D': 4, 'E': 5, 'F': 6, 'G': 7, 'H': 8, 'I': 9, 'J': 10,\n    'K': 11, 'L': 12, 'M': 13, 'N': 14, 'O': 15, 'P': 16, 'Q': 17, 'R': 18, 'S': 19, 'T': 20,\n    'U': 21, 'V': 22, 'W': 23, 'X': 24, 'Y': 25, 'Z': 26\n}\n\nnumbers_letters = {v: k for k, v in letters_numbers.items()}"}
{"prompt": "Develop a script in Python to find the longest common subsequence of two given strings.\nAGGTAB\nGXTXAYB ", "label": "def lcs(X, Y, m, n):\n    if m == 0 or n == 0:\n        return 0\n    elif X[m-1] == Y[n-1]:\n        return 1 + lcs(X, Y, m-1, n-1)\n    else:\n        return max(lcs(X, Y, m, n-1), lcs(X, Y, m-1, n))\n\nX = \"AGGTAB\"\nY = \"GXTXAYB\"\nm = len(X)\nn = len(Y)\nprint(\"The length of LCS is \" + lcs(X, Y, m, n))", "predict": "def lcs(X, Y): \n    m = len(X) \n    n = len(Y) \n    L = [[None]*(n+1) for i in range(m+1)] \n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0 or j == 0 : \n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]: \n                L[i][j] = L[i-1][j-1]+1\n            else: \n                L[i][j] = max(L[i-1][j], L[i][j-1]) \n    index = L[m][n] \n    C = [None]*(index+1) \n    C[index] = None\n    i = m \n    j = n \n    while i > 0 and j > 0: \n        if X[i-1] == Y[j-1]: \n            C[index-1] = X[i-1] \n            i-=1\n            j-=1\n            index-=1\n        elif L[i-1][j] > L[i][j-1]: \n            i-=1\n        else: \n            j-=1\n    return C"}
{"prompt": "Create a function in Python that takes the input of two sorted lists and outputs a merged list of sorted elements.\nlist1 = [2, 3, 5, 8]\nlist2 = [4, 6, 7] ", "label": "def merge_sorted_lists(list1, list2):\n    new_list = []\n\n    i1 = 0\n    i2 = 0\n    while i1 < len(list1) and i2 < len(list2):\n        if list1[i1] < list2[i2]:\n            new_list.append(list1[i1])\n            i1 += 1\n        else:\n            new_list.append(list2[i2])\n            i2 += 1\n    \n    while i1 < len(list1):\n        new_list.append(list1[i1])\n        i1 += 1\n    \n    while i2 < len(list2):\n        new_list.append(list2[i2])\n        i2 += 1\n\n    return new_list\n\nlist1 = [2, 3, 5, 8]\nlist2 = [4, 6, 7]\n\nmerged = merge_sorted_lists(list1, list2)\nprint(merged)", "predict": "def merge_sorted_lists(list1, list2):\n    merged_list = []\n    i = 0\n    j = 0\n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            merged_list.append(list1[i])\n            i += 1\n        else:\n            merged_list.append(list2[j])\n            j += 1\n    merged_list += list1[i:]\n    merged_list += list2[j:]\n    return merged_list"}
{"prompt": "Find the 5 most frequent words in the given text.\nText: Python is a high-level programming language. ", "label": "from collections import Counter\n\ntext = \" Python is a high-level programming language.\"\nwords = text.split()\n\nfrequencies = Counter(words)\n\n# printing five most frequent words \nfrequent_words = frequencies.most_common(5)\n\nprint(frequent_words)", "predict": "import collections\n\ntext = 'Python is a high-level programming language.'\nwords = text.split()\n\n# Create a Counter object\nwords_counter = collections.Counter(words)\n\n# Print the 5 most frequent words\nprint(words_counter.most_common(5))"}
{"prompt": "Design a python program that calculates a person's BMI (body mass index). ", "label": "def calculate_bmi(weight, height):\n    bmi = weight/(height**2)\n    return bmi", "predict": "def calculate_bmi(height, weight):\n    bmi = weight / (height * height)\n    return bmi"}
{"prompt": "Generate Python code to print the smallest number in a given list of numbers.\n[24, 14, 67, 89, 34, 52] ", "label": "list_of_numbers = [24, 14, 67, 89, 34, 52]\nprint(min(list_of_numbers))", "predict": "def print_smallest_number(numbers):\n    smallest = min(numbers)\n    print(smallest)\n\nprint_smallest_number([24, 14, 67, 89, 34, 52])"}
{"prompt": "Write a Python program to quickly search for a substring in a larger string.\nstring = \"hello world\" substring = \"or\" ", "label": "def search_substring(string, substring):\n    index = string.find(substring)\n    return index \n\nresult = search_substring(\"hello world\", \"or\")\nprint(result)", "predict": "def search_substring(string, substring):\n    \"\"\"Function to quickly search for a substring in a larger string.\"\"\"\n    index = string.find(substring)\n    if index == -1:\n        print(\"Substring not found\")\n    else:\n        print(\"Substring found at index\", index)\n\nsearch_substring(string, substring)"}
{"prompt": "Develop a Python program to fetch the website users of an online store.\nWebsite URL: www.example.com ", "label": "import requests\n\nurl = 'https://www.example.com/users'\nresponse = requests.get(url)\ndata = response.json()\n\nfor user in data:\n    print(user['name'])", "predict": "import requests\n\nurl = 'https://www.example.com/users'\n\n# Fetch the website users\nr = requests.get(url)\ndata = r.json()\n\n# Print the fetched users\nfor user in data:\n    print(user)"}
{"prompt": "Write a python program that will generate a password containing numbers and letters from an entered string.\nHello ", "label": "def generate_password(word):\n      # initialize variables \n    password = \"\"\n    letters = \"\"\n    numbers = \"\"\n\n    # create new password\n    for i in range(0, len(word)):\n      letters += word[i]\n      numbers += str(i)\n\n    password = letters + numbers\n    return password\n\nprint(generate_password(\"Hello\"))", "predict": "import random\n\ndef generate_password(string):\n    password = ''\n    for char in string:\n        if char.isdigit():\n            password += chr(ord(char) + 1)\n        else:\n            password += chr(ord(char) - 1)\n    return password\n\nprint(generate_password('Hello'))"}
{"prompt": "Generate a Python program to delete an item from a given list.\nItem: 5 \nList: [8, 4, 5, 9, 2] ", "label": "def remove_item(item, list): \n    list.remove(item) \n    return list\n  \nlist_org = [8, 4, 5, 9, 2]\n  \nresult = remove_item(5, list_org)\nprint(result)", "predict": "def delete_item(item, lst):\n    lst.remove(item)\n    return lst\n\nlst = [8, 4, 5, 9, 2]\n\nprint(delete_item(5, lst))"}
{"prompt": "Write a Python code snippet that takes a list of numbers as argument and prints the average.\n[2, 3, 4, 5, 6] ", "label": "def average(numbers: list):\n    if numbers:\n        return sum(numbers) / len(numbers)\n    else:\n        return 0\n    \nnumbers = [2, 3, 4, 5, 6]\nprint(f\"Average of {numbers} is {average(numbers)}\")", "predict": "def avg(nums):\n    total = 0\n    for num in nums:\n        total += num\n    return total/len(nums)\n\nprint(avg([2, 3, 4, 5, 6]))"}
{"prompt": "Write a Python program to check whether a number is in a given range ", "label": "def is_in_range(n, lower, upper):\n    return lower <= n <= upper", "predict": "def is_in_range(n, start, end):\n    return start <= n <= end"}
{"prompt": "Design and implement a function in Python that takes a list of numbers as input and checks if any of the numbers are prime.\n[2, 3, 5, 7, 8, 11, 13, 15] ", "label": "def is_prime(list_of_numbers):\n    # Iterate over the list of numbers\n    for num in list_of_numbers:\n        # Check if the number is divisible by any number\n        # other than 1 and the number itself\n        for divisor in range(2, num):\n            if num % divisor == 0:\n                # If there is any divisor, the\n                # number is not a prime number\n                return False\n    # All the numbers in the list are prime numbers\n    return True\n\nlist_of_numbers = [2, 3, 5, 7, 8, 11, 13, 15]\noutcome = is_prime(list_of_numbers)\nprint(outcome)", "predict": "def is_prime(num):\n    if num == 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef check_prime(numbers):\n    for num in numbers:\n        if is_prime(num):\n            print(num, 'is prime')\n\ncheck_prime([2, 3, 5, 7, 8, 11, 13, 15])"}
{"prompt": "Create an algorithm in Python to sort an array of 1000 randomly generated numbers between 0 and 10,000 using the quicksort algorithm.\nlist = [735, 422, 662, 310, 536, 721, 705, 129, 156, 799] ", "label": "def quicksort(arr):\n    if len(arr) < 2:\n        return arr\n    else:\n        pivot = arr[0]\n        less = [i for i in arr[1:] if i <= pivot]\n        greater = [i for i in arr[1:] if i > pivot]\n        return quicksort(less) + [pivot] + quicksort(greater)\n\nlist = [735, 422, 662, 310, 536, 721, 705, 129, 156, 799]    \nprint(quicksort(list))\n\n# Output: [129, 156, 310, 422, 536, 662, 705, 721, 735, 799]", "predict": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    else:\n        pivot = arr[len(arr) // 2]\n        left = [x for x in arr if x < pivot]\n        middle = [x for x in arr if x == pivot]\n        right = [x for x in arr if x > pivot]\n        return quicksort(left) + middle + quicksort(right)\n\nlist = [735, 422, 662, 310, 536, 721, 705, 129, 156, 799]\nsorted_list = quicksort(list)\nprint(sorted_list)"}
{"prompt": "Write a script in Python to detect the sentiment of a given text. ", "label": "import textblob\n\ndef detect_sentiment(text):\n    analysis = textblob.TextBlob(text)\n    if analysis.sentiment.polarity > 0:\n        return 'positive'\n    elif analysis.sentiment.polarity == 0:\n        return 'neutral'\n    else:\n        return 'negative'", "predict": "import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ndef sentiment_analyzer(text):\n    analyzer = SentimentIntensityAnalyzer()\n    sentiment_scores = analyzer.polarity_scores(text)\n    if sentiment_scores['compound'] >= 0.05:\n        sentiment = 'positive'\n    elif sentiment_scores['compound'] <= -0.05:\n        sentiment = 'negative'\n    else:\n        sentiment = 'neutral'\n    return sentiment\n\nsentiment = sentiment_analyzer('This is a great movie!')\nprint(sentiment)"}
{"prompt": "Write a Python program to check if a given number is divisible by 3 and 5 or not.\n10 ", "label": "def check_divisible_3and5(num):\n    if (num % 3 == 0 and num % 5 == 0):\n        return True\n    else:\n        return False\n\n# test given number\nnum = 10\nif check_divisible_3and5(num):\n    print(\"%d is divisible by 3 and 5\" %num)\nelse:\n    print(\"%d is not divisible by 3 and 5\" %num)", "predict": "def divisible_by_3_5(num):\n    if num % 3 == 0 and num % 5 == 0:\n        return True\n    else:\n        return False\n\nresult = divisible_by_3_5(10)\nprint(result)"}
{"prompt": "Design a Python program to stop a loop after some specific iterations ", "label": "for i in range(100):\n    if (i > 10):\n        break\n    print(i)", "predict": "for i in range(10):\n    if i == 5:\n        break"}
{"prompt": "Create a REST API in Python Flask for the following model.\nclass User:\n    def __init__(self, name, email):\n        self.name = name\n        self.email = email ", "label": "from flask import Flask, jsonify, request\n\n# Class\nclass User:\n    def __init__(self, name, email):\n        self.name = name\n        self.email = email\n\n# Create the application instance\napp = Flask(__name__)\n\n# Create a URL route in our application for \"/\"\n@app.route('/', methods=['GET', 'POST'])\ndef index():\n\n    # POST request\n    if request.method == 'POST':\n        json_data = request.get_json(force=True)\n        if not json_data:\n            return jsonify({'message': 'No input data provided'}), 400\n        user_name = json_data['name']\n        user_email = json_data['email']\n        user = User(name=user_name, email=user_email)\n\n        return jsonify({\n            'name': user.name,\n            'email': user.email\n        })\n    \n    # GET request\n    if request.method == 'GET':\n        # Get user list\n        users = [user.__dict__ for user in users]\n        return jsonify({'users': users}), 200\n\n# Run the application\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=8080, debug=True)", "predict": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/users', methods=['GET'])\ndef get_users():\n    users = []\n    for user in User.query.all():\n        users.append({'name': user.name, 'email': user.email})\n    return jsonify(users)\n\n@app.route('/users/<int:id>', methods=['GET'])\ndef get_user(id):\n    user = User.query.get(id)\n    return jsonify({'name': user.name, 'email': user.email})\n\n@app.route('/users', methods=['POST'])\ndef create_user():\n    name = request.json['name']\n    email = request.json['email']\n    user = User(name, email)\n    db.session.add(user)\n    db.session.commit()\n    return jsonify({'name': user.name, 'email': user.email})\n\n@app.route('/users/<int:id>', methods=['PUT'])\ndef update_user(id):\n    user = User.query.get(id)\n    user.name = request.json['name']\n    user.email = request.json['email']\n    db.session.commit()\n    return jsonify({'name': user.name, 'email': user.email})\n\n@app.route('/users/<int:id>', methods=['DELETE'])\ndef delete_user(id):\n    user = User.query.get(id)\n    db.session.delete(user)\n    db.session.commit()\n    return jsonify({'message': 'User deleted'})"}
{"prompt": "Create a neural network with two hidden layers in Python. ", "label": "import numpy as np #importing the libraries \nfrom sklearn.neural_network import MLPClassifier #importing the neural network classifier\n\n#defining the input values\nX = np.array([[0,0],[0,1],[1,0],[1,1]])\ny = np.array([[0],[1],[1],[0]])\n\n#Creating the model\nmodel = MLPClassifier(hidden_layer_sizes = (2,2)) #creating the neural network with two hidden layers.\nmodel.fit(X,y)\n\n#Testing the model with a new input\ntest_data = np.array([[1,1]])\nprediction = model.predict(test_data) \nprint(\"The model predicts the output as:\",prediction[0])", "predict": "import numpy as np\nimport tensorflow as tf\n\n# Create the model\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Dense(16, activation='relu', input_dim=10),\n    tf.keras.layers.Dense(8, activation='relu'),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])"}
{"prompt": "Create a Python program that takes a positive integer as an input and prints all its prime factors. ", "label": "def prime_factors(num):\n prime_list = []\n i = 2\n while i * i <= num:\n if num % i:\n i += 1\n else:\n num //= i\n prime_list.append(i)\n if num > 1:\n prime_list.append(num)\n return prime_list\n\nn = int(input('Enter a positive integer: '))\nprint(prime_factors(n))", "predict": "def prime_factors(n):\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\nn = int(input('Enter a positive integer: '))\nprint(prime_factors(n))"}
{"prompt": "Write an algorithm to implement a trie data structure in Python. ", "label": "\"\"\"\nWrite an algorithm to implement a trie data structure in Python\n\"\"\"\n\nclass TrieNode(object):\n    \"\"\"Trie node class\"\"\"\n    def __init__(self):\n        \"\"\"Constructor for trie node\"\"\"\n        self.children = {}\n        self.end_of_word = False\n\nclass Trie(object):\n    \"\"\"Trie class\"\"\"\n\n    def __init__(self):\n        \"\"\"Constructor for Trie\"\"\"\n        self.root = TrieNode()\n\n    def insert(self, word):\n        \"\"\"Inserts the given word into the trie\"\"\"\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n\n        node.end_of_word = True\n\n    def search(self, word):\n        \"\"\"Searches if the given word is present in the trie\"\"\"\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                return False\n            node = node.children[char]\n        return node.end_of_word\n\n# Test code\ntrie = Trie() \nwords = [\"apple\", \"application\", \"hi\"]\n\n# Insert words into the trie\nfor word in words:\n    trie.insert(word)\n\n# Test search\nif trie.search(\"apple\"):\n    print(\"Word Found\")\nelse:\n    print(\"Word Not Found\")", "predict": "class TrieNode:\n    def __init__(self):\n        self.children = dict()\n        self.is_end_of_word = False\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, word):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.is_end_of_word = True"}
{"prompt": "Create a test suite in Python to verify the correctness of a function that takes two numbers as inputs and returns their sum. ", "label": "import unittest\n\ndef add(a, b):\n    return a + b\n\nclass myTests(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(add(2, 3), 5)\n        self.assertEqual(add(-1, 7), 6)\n\n    def test_type(self):\n        self.assertRaises(TypeError, add, 'a', 'b')\n\nif __name__ == '__main__':\n    unittest.main()", "predict": "import unittest\n\ndef add(a, b):\n    return a + b\n\nclass TestAdd(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(add(1, 2), 3)\n        self.assertEqual(add(4, 5), 9)\n        self.assertEqual(add(10, 10), 20)\n\nif __name__ == '__main__':\n    unittest.main()"}
{"prompt": "Write a Python program to sort a list of tuples by their second element.\n[(1, 3), (3, 2), (4, 1), (2, 4)] ", "label": "def sortBySecondElement(lst):\n    # Sort the list of tuples by their second elements\n    return sorted(lst, key=lambda x : x[1])\n\n# Testing\nlst = [(1, 3), (3, 2), (4, 1), (2, 4)]\n\nsortedLst = sortBySecondElement(lst)\n\nprint(sortedLst)\n\n# Output\n# [(4, 1), (3, 2), (1, 3), (2, 4)]", "predict": "sorted_list = sorted([(1, 3), (3, 2), (4, 1), (2, 4)], key=lambda x: x[1])\nprint(sorted_list)"}
{"prompt": "Create a Python module for a contact book application. This module should include classes for User (with fields for name, age, address, and email) and Contact (with fields for name, age, phone number).\nNot applicable ", "label": "class User:\n \"\"\"A class representing a user.\"\"\"\n def __init__(self, name, age, address, email):\n self.name = name\n self.age = age\n self.address = address\n self.email = email\n\nclass Contact:\n \"\"\"A class representing a contact.\"\"\"\n def __init__(self, name, age, phone_number):\n self.name = name\n self.age = age\n self.phone_number = phone_number", "predict": "class User:\n def __init__(self, name, age, address, email):\n self.name = name\n self.age = age\n self.address = address\n self.email = email\n\nclass Contact:\n def __init__(self, name, age, phone_number):\n self.name = name\n self.age = age\n self.phone_number = phone_number\n\n# Create a User\nuser1 = User('John Doe', 30, '123 Main St', 'john@example.com')\n\n# Create a Contact\ncontact1 = Contact('John Doe', 30, '555-555-5555')"}
{"prompt": "Generate Python classes from the given JSON.\n{\n\"name\": \"Employee\",\n\"attributes\": {\n\"emp_id\": {\n\"type\": \"int\"\n},\n\"name\": {\n\"type\": \"string\"\n},\n\"department\": {\n\"type\": \"string\"\n},\n\"salary\": {\n\"type\": \"float\"\n}\n}\n} ", "label": "class Employee:\n    def __init__(self, emp_id, name, department, salary):\n        self.emp_id = emp_id\n        self.name = name\n        self.department = department\n        self.salary = salary", "predict": "class Employee:\n def __init__(self, emp_id, name, department, salary):\n self.emp_id = emp_id\n self.name = name\n self.department = department\n self.salary = salary\n\nclass EmployeeAttributes:\n def __init__(self, emp_id, name, department, salary):\n self.emp_id = emp_id\n self.name = name\n self.department = department\n self.salary = salary\n\n self.emp_id = None\n self.name = None\n self.department = None\n self.salary = None"}
{"prompt": "Given two strings S and T. Generate a Python program to count the number of distinct substrings of T in S. ", "label": "def count_substring(S, T):\n  count = 0\n  for i in range(len(S)):\n    for j in range(len(T)):\n      if(S[i:i+j+1] == T):\n        count += 1\n  return count", "predict": "def count_distinct_substrings(s, t):\n    count = 0\n    for i in range(len(s) - len(t) + 1):\n        substring = s[i:i+len(t)]\n        if substring == t:\n            count += 1\n    return count"}
{"prompt": "Develop a Python script that can query a SQL database and return the total number of entries in all the tables\nSQL database ", "label": "import sqlite3\n\nconn = sqlite3.connect(\"example.db\")\ncur = conn.cursor()\n\nsql = \"SELECT name FROM sqlite_master WHERE type='table';\"\ncur.execute(sql)\ntables = cur.fetchall()\n\ncount = 0\nfor table in tables:\n    sql = f\"SELECT COUNT(*) FROM {table[0]};\"\n    cur.execute(sql)\n    count += cur.fetchone()[0]\n\nprint(f\"Number of entries: {count}\")", "predict": "import sqlite3\n\nconn = sqlite3.connect('database.db')\ncur = conn.cursor()\n\ncur.execute('SELECT name FROM sqlite_master WHERE type = \"table\"')\ntables = cur.fetchall()\n\ntotal_entries = 0\nfor table in tables:\n    cur.execute(f'SELECT COUNT(*) FROM {table[0]}')\n    total_entries += cur.fetchone()[0]\n\nprint(f'Total entries: {total_entries}')"}
{"prompt": "Write a Python program to filter out strings from a list of strings containing specific characters.\nlist_of_strings = [\"Hello\", \"World\", \"1\", \"0\", \"This is a string.\"] ", "label": "def filter_strings(list_of_strings):\n    return list(filter(lambda x: x.isalpha(), list_of_strings))\n\nprint (filter_strings(list_of_strings)) # Output: ['Hello', 'World', 'This is a string.']", "predict": "def filter_strings(list_of_strings):\n    filtered_list = []\n    for string in list_of_strings:\n        if string.isalpha():\n            filtered_list.append(string)\n    return filtered_list\n\nlist_of_strings = [\"Hello\", \"World\", \"1\", \"0\", \"This is a string.\"]\nfiltered_list = filter_strings(list_of_strings)\nprint(filtered_list)"}
{"prompt": "Create a function in Python to calculate the sum of the cubes of the first n positive integers.\nn = 4 ", "label": "def sum_cubes(n): \n    sum = 0\n    for i in range(1,n+1): \n        sum += i**3 \n    return sum", "predict": "def cube_sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum\n\nprint(cube_sum(4))"}
{"prompt": "Write a Python function that takes a string as input and checks if it is a palindrome or not.\nNot applicable ", "label": "def is_palindrome(string):\n   # reverse the string\n   rev_string = string[::-1] \n   \n   # check if the string is equal to its reverse\n   if (string == rev_string): \n     return True\n   return False\n\n# Example usage:\n\nresult = is_palindrome('racecar')\n# result = True", "predict": "def is_palindrome(string):\n reversed_string = string[::-1]\n return string == reversed_string\n\nprint(is_palindrome('malayalam')) # True"}
{"prompt": "Create a Python script that pulls data from an API and stores it in a database.\nNot applicable ", "label": "import requests\nimport json\nimport sqlite3\n\n# Make a GET request to the API\nresponse = requests.get(url)\ndata = response.json()\n\n# Save the data to a database\nconn = sqlite3.connect('data.db')\nc = conn.cursor()\nfor item in data:\n    c.execute(\"INSERT INTO items VALUES (?, ?)\", (item['id'], item['name']))\nconn.commit()\nconn.close()", "predict": "import requests\nimport sqlite3\n\n# Connect to the database\nconn = sqlite3.connect('data.db')\nc = conn.cursor()\n\n# Make a request to the API\nr = requests.get('https://api.example.com/data')\n\n# Store the data in the database\nc.execute('INSERT INTO data (data) VALUES (?)', (r.text,))\n\n# Commit the changes\nconn.commit()\n\n# Close the connection\nconn.close()"}
{"prompt": "Generate a Python program to iterate over a list of numbers and print out only the even numbers.\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10] ", "label": "for num in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]:\n if num % 2 == 0:\n print(num)", "predict": "my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nfor num in my_list:\n    if num % 2 == 0:\n        print(num)"}
{"prompt": "Modify the following Python code to use a loop instead of recursion.\ndef GCD(x, y):\nif y == 0:\n return x\n else:\n return GCD(y, x%y) ", "label": "def GCD(x, y):\n    while(y != 0):\n        temp = y\n        y = x % y\n        x = temp\n    return x", "predict": "def GCD(x, y):\n while y!= 0:\n temp = y\n y = x % y\n x = temp\n return x"}
{"prompt": "Write a Python function to transpose a given matrix of size (m x n).\n[[1, 2], \n [3, 4], \n [5, 6]] ", "label": "def transposeMatrix(matrix): \n m = len(matrix) \n n = len(matrix[0]) \n  \n # Create a new matrix \n transpose = [[0 for x in range(m)] for y in range(n)] \n  \n # Iterate through the original matrix \n for i in range(m): \n for j in range(n): \n transpose[j][i] = matrix[i][j] \n return transpose", "predict": "def transpose_matrix(matrix):\n    # create an empty matrix\n    matrix_transpose = [[0 for i in range(len(matrix))] for j in range(len(matrix[0]))] \n\n    # iterate through the original matrix and populate the transpose matrix\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            matrix_transpose[j][i] = matrix[i][j]\n\n    return matrix_transpose"}
{"prompt": "Generate a python program that multiplies two matrices. ", "label": "def matrix_multi(A, B):\n    rows_A = len(A)\n    cols_A = len(A[0])\n    rows_B = len(B)\n    cols_B = len(B[0])\n\n    if cols_A != rows_B:\n        print(\"Cannot multiply the given matrices.\")\n        return\n\n    C = [[0 for row in range(cols_B)] for col in range(rows_A)]\n\n    for i in range(rows_A):\n        for j in range(cols_B):\n            for k in range(cols_A):\n                C[i][j] += A[i][k] * B[k][j]\n\n    return C", "predict": "def multiply_matrices(matrix1, matrix2):\n    result = [[0 for i in range(len(matrix2[0]))] for j in range(len(matrix1))]\n    for i in range(len(matrix1)):\n        for j in range(len(matrix2[0])):\n            for k in range(len(matrix2)):\n                result[i][j] += matrix1[i][k] * matrix2[k][j]\n    return result"}
{"prompt": "Create a basic calculator in Python ", "label": "def calculator():\n  while True:\n    try:\n      userInput = input('Input equation (type \"quit\" to exit): ')\n\n      if userInput == \"quit\":\n        break\n        \n      result = eval(userInput)\n      print(result)\n\n    except:\n      print('Invalid equation')\n\ncalculator()", "predict": "def calculator():\n    while True:\n        print(\"Options:\")\n        print(\"1. Add\")\n        print(\"2. Subtract\")\n        print(\"3. Multiply\")\n        print(\"4. Divide\")\n        print(\"5. Exit\")\n        user_input = int(input(\"What would you like to do? \"))\n        if user_input == 1:\n            num1 = float(input(\"Enter first number: \"))\n            num2 = float(input(\"Enter second number: \"))\n            print(\"Result: \" + str(num1 + num2))\n        elif user_input == 2:\n            num1 = float(input(\"Enter first number: \"))\n            num2 = float(input(\"Enter second number: \"))\n            print(\"Result: \" + str(num1 - num2))\n        elif user_input == 3:\n            num1 = float(input(\"Enter first number: \"))\n            num2 = float(input(\"Enter second number: \"))\n            print(\"Result: \" + str(num1 * num2))\n        elif user_input == 4:\n            num1 = float(input(\"Enter first number: \"))\n            num2 = float(input(\"Enter second number: \"))\n            print(\"Result: \" + str(num1 / num2))\n        elif user_input == 5:\n            break\n        else:\n            print(\"Invalid input\")"}
{"prompt": "Design a solution in Python for determining the frequency of characters in a given string.\n\"A quick brown fox jumps over the lazy dog.\" ", "label": "text = \"A quick brown fox jumps over the lazy dog.\"\n\ncount = {} \nfor character in text: \n    if character in count: \n            count[character] += 1\n    else: \n            count[character] = 1\n  \nfor key in count: \n    print('%s appears %d times' % (key, count[key]))", "predict": "def char_frequency(string):\n    frequency = {}\n    for character in string:\n        if character in frequency:\n            frequency[character] += 1\n        else:\n            frequency[character] = 1\n    return frequency\n\nstring = \"A quick brown fox jumps over the lazy dog.\"\nprint(char_frequency(string))"}
{"prompt": "Write a Python program to create a class for managing a linked list. ", "label": "\"\"\"\nWrite a Python program to create a class for managing a linked list.\n\"\"\"\n\n# Create the Node class\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n    \n# Create the LinkedList class\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n        \n    def addNode(self, data):\n        node = Node(data)\n        if self.head == None:\n            self.head = node\n        else:\n            curr = self.head\n            while curr.next != None:\n                curr = curr.next\n            curr.next = node\n            \n    def printList(self):\n        curr = self.head\n        while curr != None:\n            print(curr.data)\n            curr = curr.next", "predict": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def push(self, new_data):\n        new_node = Node(new_data)\n        new_node.next = self.head\n        self.head = new_node\n\n    def print_list(self):\n        temp = self.head\n        while temp is not None:\n            print(temp.data)\n            temp = temp.next"}
{"prompt": "Write a Python function to remove all consecutive duplicates of a given number.\n[1,1,2,3,3,3,4,4,4,4] ", "label": "def remove_duplicates(lst):\n  result = []\n  curr = lst[0]\n\n  for num in lst:\n    if num != curr:\n      result.append(num)\n      curr = num\n  return result", "predict": "def remove_duplicates(nums):\n  result = []\n  curr = nums[0]\n  for n in nums:\n    if n!= curr:\n      result.append(n)\n      curr = n\n  return result\n\nprint(remove_duplicates([1,1,2,3,3,3,4,4,4,4]))"}
{"prompt": "Create a command-line tool in Python with a single argument --number. The tool should prompt for a number, then calculate and print the factorial of the number.\nNot applicable ", "label": "import sys\n\ndef factorial(n):\n if n == 1 or n == 0:\n return 1\n else:\n return n * factorial(n-1)\n\nif __name__ == '__main__':\n if len(sys.argv) > 1 and sys.argv[1] == '--number':\n try:\n number = int(input('Please enter a number: '))\n print(f'{number}! = {factorial(number)}')\n except ValueError:\n print('Please enter a valid number.')\nelse:\n print('Please provide a single argument --number')", "predict": "import sys\n\ndef factorial(n):\n if n == 0:\n return 1\n else:\n return n * factorial(n-1)\n\nif __name__ == '__main__':\n if len(sys.argv) > 1 and sys.argv[1] == '--number':\n num = int(input('Please enter a number: '))\n print(f'The factorial of {num} is {factorial(num)}')\n else:\n print('Usage: python factorial.py --number')"}
{"prompt": "Implement the PageRank algorithm in Python.\nNot applicable ", "label": "import networkx as nx\n\ndef page_rank(G, alpha=0.85, personalization=None, \n max_iter=100, tol=1.0e-6, nstart=None, weight='weight', \n dangling=None):\n\n\"\"\"\nReturn the PageRank of the nodes in the graph. \n\nG: graph\nalpha: damping parameter for PageRank, default=0.85\npersonalization: \n    dict, optional \n    The \"personalization vector\" consists of a dictionary with a \n    key for every graph node and nonzero personalization value for each node. \nmax_iter: \n    int, optional \n    Maximum number of iterations in power method eigensolve.\ntol: float, optional\n    Error tolerance used to check convergence in power method eigensolve.\nnstart: \n    dict, optional \n    Starting value of PageRank iteration for each node.\nweight: \n    key, optional \n    Edge data key to use as weight. \ndangling: \n    dict, optional \n    The outedges to be assigned to any \"dangling\" nodes, i.e., nodes without any outedges. \n\nReturns:\n    Dictionary of nodes with PageRank as value.\n\"\"\"\n\n# Initialize results vector with (1-alpha)/N, \n# where N is the number of nodes in the graph.\nN = G.number_of_nodes()\nx = dict.fromkeys(G, (1 - alpha) / N)\n\n# Check if personalization vector was passed in; if so, update results vector\nif personalization is None:\n    p = dict.fromkeys(G, 1 / N)\nelse:\n    missing = set(G) - set(personalization)\n    if missing:\n        raise NetworkXError('Personalization dictionary '\n                            'must have a value for every node. '\n                            'Missing nodes %s' % missing)\n    p = personalization\n   p = p.copy()\n    s = float(sum(p.values()))\n    for k in p:\n        x[k] = p[k] / s\n        p[k] = p[k] / s\n\nif dangling is None:\n    # Use personalization vector if dangling vector not specified\n    dangling_weights = p\nelse:\n    # Dangling nodes are nodes with no outedges.\n    # Use personalization vector if dangling vector is specified but\n    # doesn't have an entry for every node\n    missing = set(G) - set(dangling)\n    if missing:\n        raise NetworkXError('Dangling node dictionary '\n                            'must have a value for every node. '\n                            'Missing nodes %s' % missing)\n    s = float(sum(dangling.values()))\n    for k in dangling:\n        dangling[k] /= s\n    dangling_weights = dangling\n\n# power iteration: make up to max_iter iterations\nfor _ in range(max_iter):\n    xlast = x\n    x = dict.fromkeys(xlast.keys(), 0)\n    danglesum = alpha * sum(xlast[n] for n in dangling_weights)\n    for n in x:\n\n# this matrix multiply looks odd because it is\n# doing a left multiply x^T=xlast^T*W\n        for nbr in G[n]:\n            x[nbr] += alpha * xlast[n] * G[n][nbr].get(weight, 1)\n        x[n] += danglesum * dangling_weights.get(n, 0) + (1.0 - alpha) * p.get(n, 0)\n\n# check convergence\nerr = sum([abs(x[n] - xlast[n]) for n in x])\nif err < N*tol:\n    return x\nreturn x", "predict": "import networkx as nx\n\ndef pagerank(graph, alpha=0.85):\n    n = len(graph)\n    ranks = [1.0/n]*n\n    for _ in range(100):\n        for node in range(n):\n            ranks[node] = alpha * sum(graph[node]) + (1-alpha) * ranks[node]\n    return ranks\n\nG = nx.DiGraph()\nG.add_edges_from([(0,1), (1,2), (2,0), (2,1)])\nprint(pagerank(G))"}
{"prompt": "Generate a Python function to calculate the area of a triangle given the three sides. ", "label": "def triangle_area(side1, side2, side3):\n    s = (side1 + side2 + side3) / 2\n    area = (s * (s - side1) * (s - side2) * (s - side3)) ** 0.5\n    return area", "predict": "def triangle_area(a, b, c):\n    s = (a + b + c) / 2\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    return area"}
{"prompt": "Code a python function to combine two lists into a single list of tuples. ", "label": "def combine_lists(list1, list2):\n    combined_list = [(list1[i], list2[i]) for i in range(len(list1))]\n    return combined_list", "predict": "def combine_lists(list1, list2):\n    combined_list = list(zip(list1, list2))\n    return combined_list"}
{"prompt": "Generate an AI algorithm in Python to predict tomorrow's Bitcoin price given a dataset of today's prices.\n[8882.17, 8889.11, 8890.52, 8892.11, 8895.42, 8893.94, 8899.01] ", "label": "import numpy as np\nimport pandas as pd\n\ndef bitcoinPricePrediction(data):\n# convert data to numpy array\ndata = np.array(data)\n\n# define the model\nmodel = keras.Sequential([\nkeras.layers.Dense(64, activation='relu'),\nkeras.layers.Dense(64, activation='relu'),\nkeras.layers.Dense(64, activation='relu'),\nkeras.layers.Dense(1)])\n\n# compile and train the model\nmodel.compile(optimizer='adam', loss='mean_squared_error')\nmodel.fit(data, epochs=50, verbose=1)\n\n# predict the tomorrow's bitcoin price\nprediction = model.predict(data)[0][0]\n\nreturn prediction", "predict": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n# Read the dataset\ndata = pd.read_csv('bitcoin_data.csv')\n\n# Separate features and labels\nX = data.iloc[:, :-1].values\ny = data.iloc[:, -1].values\n\n# Train the model\nregressor = LinearRegression()\nregressor.fit(X, y)\n\n# Predict tomorrow's price\ntomorrow_price = regressor.predict([X[-1]])\n\nprint('Tomorrow\\'s Bitcoin price is:', tomorrow_price[0])"}
{"prompt": "Code a Python program that takes two integers and checks if they are co-prime numbers.\nnum1 = 34\nnum2 = 21 ", "label": "def is_coprime(num1, num2):\n        while num1 != 0 and num2 != 0: \n            if(num1 > num2): \n                num1 %= num2 \n            else: \n                num2 %= num1\n                  \n        if(num1 == 0): \n            gcd = num2 \n        else: \n            gcd = num1 \n        if(gcd == 1):\n            return True\n        else:\n            return False\n\nif __name__ == \"__main__\":\n    num1 = 34\n    num2 = 21\n    result = is_coprime(num1, num2)\n    print(result)", "predict": "def is_coprime(num1, num2):\n    # Calculate the greatest common denominator\n    gcd = find_gcd(num1, num2)\n    # Check if the gcd is 1\n    if gcd == 1:\n        return True\n    else:\n        return False\n\ndef find_gcd(num1, num2):\n    if num2 == 0:\n        return num1\n    return find_gcd(num2, num1 % num2)"}
{"prompt": "Compose a Python class that creates a list of unique elements in the input.\n['a','b','b','c','a','c'] ", "label": "class ListUnique:\n    \n    def __init__(self,list1):\n        # set up empty list\n        self.list1 = []\n        \n        # loop through input list\n        for x in list1:\n            # add element to list if it is not already in the list\n            if x not in self.list1:\n                self.list1.append(x)\n                \n    # returns the modified list\n    def get_list(self):\n        return self.list1\n\nlist1 = ['a','b','b','c','a','c']\n\n# create instance of ListUnique\nlu = ListUnique(list1)\n\n# print the modified list\nprint(lu.get_list()) # prints ['a', 'b', 'c']", "predict": "class UniqueList:\n    def __init__(self, input_list):\n        self.input_list = input_list\n        self.unique_list = []\n    \n    def get_unique_list(self):\n        for element in self.input_list:\n            if element not in self.unique_list:\n                self.unique_list.append(element)\n        return self.unique_list\n\nunique_list = UniqueList(['a','b','b','c','a','c'])\nprint(unique_list.get_unique_list())"}
{"prompt": "Develop a code to sort the following  Python dictionary by its values from low to high.\nstudents = {\n    'Jacob': 95.5, \n    'Leah': 91.8,\n    'Sebastian': 98.4,\n    'David': 95.1,\n    'Joseph': 90.4\n} ", "label": "def sort_dict_by_values(students):\n    sorted_students = sorted(students, key=students.get)\n    return [sorted_students, [students[key] for key in sorted_students]]\n\nprint(sort_dict_by_values(students))", "predict": "sorted_students = sorted(students.items(), key=lambda x: x[1])\nprint(sorted_students)"}
{"prompt": "Construct a machine learning model in Python for predicting the prices of apartments in your city. ", "label": "#Import Data\nimport pandas as pd\ndata = pd.read_csv(‘data.csv’)\n\n#Prepare Data\nX = data[['size', 'location', 'bedrooms']]\ny = data['price']\n\n#Train Model\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(X,y)\n\n#Test Model\ntest_X = [[1500, 'downtown', 3]]\ntest_y = model.predict(test_X)\nprint(test_y)", "predict": "import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\n# Load the data\ndata = pd.read_csv('apartment_data.csv')\n\n# Separate features and target\nX = data.drop('price', axis=1)\ny = data['price']\n\n# Split into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train the model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Make predictions\ny_pred = model.predict(X_test)\n\n# Evaluate the model\nscore = model.score(X_test, y_test)\nprint('Model score:', score)"}
{"prompt": "Generate a code to print the stack trace in Python when an exception occurs. ", "label": "import traceback\n\ntry:\n    # some code that might generate exceptions\n    pass\nexcept Exception as e:\n    print(traceback.format_exc())", "predict": "import traceback\n\ntry:\n    # some code that may raise an exception\nexcept Exception as e:\n    print(traceback.format_exc())"}
{"prompt": "Create a Python program to read a list of strings and display the same strings in a reverse order.\n[\"Apple\", \"Banana\", \"Mango\", \"Orange\"] ", "label": "def reverse_strings(string_list):\n reversed_string_list = []\n for string in string_list:\n reversed_string_list.insert(0, string)\n return reversed_string_list\n\nstring_list = [\"Apple\", \"Banana\", \"Mango\", \"Orange\"]\nprint(reverse_strings(string_list))", "predict": "def reverse_list(list_of_strings):\n    reversed_list = list_of_strings[::-1]\n    return reversed_list\n\nlist_of_strings = [\"Apple\", \"Banana\", \"Mango\", \"Orange\"]\nprint(reverse_list(list_of_strings))\n# Output: [\"Orange\", \"Mango\", \"Banana\", \"Apple\"]"}
{"prompt": "Devise an algorithm in Python to determine if a given number is even or odd. ", "label": "def is_even(num):\n    if num % 2 == 0:\n        return True\n    else:\n        return False", "predict": "def is_even(num):\n    if num % 2 == 0:\n        return True\n    else:\n        return False"}
{"prompt": "Create a machine learning model to classify text documents into two different categories.\nProvide a sample dataset contains text from two different categories. ", "label": "from sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Sample dataset\ndocs = [\n \"The sky is blue.\",\n \"Violets are red.\",\n \"I love programming.\",\n \"JavaScript is fun.\"\n \"Python is great!\"\n]\n\nlabels = [0, 0, 1, 1, 1]\n\n# Create the vectorizer\nvectorizer = CountVectorizer()\n\n# Vectorize the documents\nX = vectorizer.fit_transform(docs).toarray()\n\n# Create a Naive Bayes model\nmodel = MultinomialNB()\n\n# Fit the model to the dataset\nmodel.fit(X, labels)\n\n# Make a prediction\nprediction = model.predict([X[3]])\n\n# Print the prediction\nprint(prediction) # prints [1]", "predict": "import pandas as pd\nimport numpy as np\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Read the data\ndata = pd.read_csv('data.csv')\n\n# Create the feature matrix\nvectorizer = CountVectorizer()\nX = vectorizer.fit_transform(data['text'])\n\n# Split the data into train and test sets\ny = data['category']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Create the model\nmodel = MultinomialNB()\nmodel.fit(X_train, y_train)\n\n# Evaluate the model\nscore = model.score(X_test, y_test)\nprint('Model score:', score)"}
{"prompt": "Train a model to classify spam emails using Python. ", "label": "import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\n\n# loading dataset\ndf = pd.read_csv(\"spam_classification.csv\")\n\n# splitting dataset\nX = df[\"Message\"]\ny = df[\"Label\"]\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1)\n\n# creating a model\nmodel = MultinomialNB()\nmodel.fit(X_train, y_train)\n\n# evaluating the model\nscore = model.score(X_test, y_test)\nprint(\"Model score: {}\".format(score))", "predict": "import pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Load the data\ndata = pd.read_csv('spam_data.csv')\n\n# Create feature vectors\nvectorizer = CountVectorizer()\nfeatures = vectorizer.fit_transform(data['message'])\n\n# Create labels\nlabels = data['label']\n\n# Split the data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(features, labels, test_size=0.2, random_state=42)\n\n# Train the model\nmodel = MultinomialNB()\nmodel.fit(X_train, y_train)\n\n# Test the model\nscore = model.score(X_test, y_test)\nprint(score)"}
{"prompt": "Design a web application in Django that fetches tweets with the #python hashtag.\nNot applicable ", "label": "import os\nimport tweepy\nfrom django.shortcuts import render\n\n# Create your views here.\ndef index(request):\n    consumer_key = os.environ['TWITTER_CONSUMER_KEY']\n    consumer_secret = os.environ['TWITTER_CONSUMER_SECRET']\n    access_key = os.environ['TWITTER_ACCESS_KEY']\n    access_secret = os.environ['TWITTER_ACCESS_SECRET']\n \n    auth = tweepy.OAuthHandler(consumer_key, consumer_secret)\n    auth.set_access_token(access_key, access_secret)\n    api = tweepy.API(auth)\n \n    hashtags = [\"#python\"]\n    tweets = api.search(q=hashtags, lang='en')\n \n    args = {'tweets': tweets}\n    return render(request, 'index.html', args)", "predict": "# python manage.py startproject myproject\n\n# create a new Django app\npython manage.py startapp tweets\n\n# add the new app to the INSTALLED_APPS list in settings.py\nINSTALLED_APPS = [\n    'tweets',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\n\n# create a model to store tweets\nfrom django.db import models\n\nclass Tweet(models.Model):\n    text = models.CharField(max_length=140)\n    created_at = models.DateTimeField()\n\n# create a view to fetch tweets\nfrom django.shortcuts import render\nimport tweepy\n\ndef fetch_tweets(request):\n    # authentication\n    auth = tweepy.OAuthHandler(consumer_key, consumer_secret)\n    auth.set_access_token(access_token, access_token_secret)\n\n    # create API object\n    api = tweepy.API(auth)\n\n    # fetch tweets\n    tweets = api.search(q='#python', rpp=100)\n\n    # store fetched tweets in database\n    for tweet in tweets:\n        Tweet.objects.create(text=tweet.text, created_at=tweet.created_at)\n\n    # render template\n    return render(request, 'tweets.html')"}
{"prompt": "Design an object-oriented program in Python for playing a game of tic-tac-toe.\nNo Input ", "label": "class Game:\n    def __init__(self):\n        self.board = [[\"-\", \"-\", \"-\"], \n                      [\"-\", \"-\", \"-\"], \n                      [\"-\", \"-\", \"-\"]]\n        self.current_player = \"X\"\n\n    def display_board(self):\n        for i in range(len(self.board)):\n            for j in range(len(self.board[i])):\n                print(self.board[i][j], end=\" \")\n            print()\n\n    def move(self, current_player, row, col):\n        if self.board[row][col] == \"-\": \n            self.board[row][col] = current_player\n        else:\n            print(\"invalid move, row and col has already been taken\")\n\n    def check_winner(self):\n        winner = None\n        for row in self.board:\n            if row[0] == row[1] == row[2]:\n                winner = row[0]\n                break\n        for col in range(len(self.board[0])):\n            if self.board[0][col] == self.board[1][col] == self.board[2][col]:\n                winner = self.board[0][col]\n                break\n        if self.board[0][0] == self.board[1][1] == self.board[2][2]:\n            winner = self.board[0][0]\n        if self.board[0][2] == self.board[1][1] == self.board[2][0]:\n            winner = self.board[0][2]\n\n        if winner == None:\n            return False\n        else:\n            return winner", "predict": "class TicTacToe:\n    def __init__(self):\n        self.board = [[0, 0, 0],\n                      [0, 0, 0],\n                      [0, 0, 0]]\n        self.player = 1\n\n    def display_board(self):\n        for row in self.board:\n            print(row[0], row[1], row[2])\n\n    def is_valid_move(self, row, col):\n        if self.board[row][col] == 0:\n            return True\n        return False\n\n    def make_move(self, row, col):\n        if self.is_valid_move(row, col):\n            self.board[row][col] = self.player\n            if self.player == 1:\n                self.player = 2\n            else:\n                self.player = 1\n\n    def check_for_win(self):\n        # code to check for a win\n        pass"}
{"prompt": "Implement an algorithm in Python to reverse a given string. ", "label": "def reverse_string(string): \n    return string[::-1]", "predict": "def reverse_string(string):\n    reversed_string = \"\"\n    for char in string:\n        reversed_string = char + reversed_string\n    return reversed_string"}
{"prompt": "Compare two strings using Python and output the similarity score between them.\nString 1: hello world \nString 2: hey world ", "label": "import difflib\n\ndef compare_strings(str1, str2):\n score = difflib.SequenceMatcher(None, str1, str2).ratio() \n print(\"Similarity score is:\", score)\n\ncompare_strings(\"hello world\", \"hey world\") # Output: Similarity score is: 0.909", "predict": "def compare_strings(str1, str2):\n    # Create a list of words from both strings\n    words1 = str1.split(' ')\n    words2 = str2.split(' ')\n    \n    # Calculate the length of each list\n    length1 = len(words1)\n    length2 = len(words2)\n    \n    # Calculate the similarity score\n    score = 0\n    for i in range(length1):\n        if words1[i] in words2:\n            score += 1\n    similarity_score = score/length1\n    \n    return similarity_score\n\nstr1 = \"hello world\"\nstr2 = \"hey world\"\nsimilarity_score = compare_strings(str1, str2)\nprint(\"Similarity score:\", similarity_score)"}
{"prompt": "Write a function in Python to create a dictionary from two lists, one of keys and the other one of values.\nkeys = [1,2,3]\nvalues = ['a','b','c'] ", "label": "def createDict(keys, values):\n  dict = {}\n  for i in range(len(keys)):\n    dict[keys[i]] = values[i]\n  return dict", "predict": "def create_dict(keys, values):\n    \"\"\"Create a dictionary from two lists.\"\"\"\n    dictionary = {}\n    for key, value in zip(keys, values):\n        dictionary[key] = value\n    return dictionary"}
{"prompt": "Creat a Python program to find the sum of the digits of an arbitrary number.\n345 ", "label": "def sum_of_digits(num):\n    total = 0\n    while num > 0:\n        total += num % 10\n        num = num // 10\n    return total\n\ntotal = sum_of_digits(345)\nprint(f'Sum of the digits of the number is {total}')", "predict": "def sum_digits(n):\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum\n\nprint(sum_digits(345))"}
{"prompt": "Write a Python function that takes a list of integers as an argument and returns a list of the squares of all the elements in the input list.\n[1, 2, 3, 4, 5] ", "label": "def squareList(inputList): \n\t# Returns a list of the squares of all the elements in inputList\n\tsquaredList = [] \n\n\tfor num in inputList:\n\t\tsquaredList.append(num ** 2) \n\n\treturn squaredList\n\n# Example \ninputList = [1, 2, 3, 4, 5] \n\nsquaredList = squareList(inputList) \n\nprint(squaredList)\n\n# Output: [1, 4, 9, 16, 25]", "predict": "def square_list(list):\n    squared_list = []\n    for num in list:\n        squared_list.append(num ** 2)\n    return squared_list\n\nlist = [1, 2, 3, 4, 5]\nsquared_list = square_list(list)\nprint(squared_list) # [1, 4, 9, 16, 25]"}
{"prompt": "Write a Python script to parse a JSON string and convert it into a dictionary.\n'{\"name\": \"GPT\", \"type\": \"AI\"}' ", "label": "import json\n\njson_str = '{\"name\": \"GPT\", \"type\": \"AI\"}'\n\ndict_x = json.loads(json_str)\nprint(dict_x)", "predict": "import json\n\njson_string = '{\"name\": \"GPT\", \"type\": \"AI\"}'\n\ndict_object = json.loads(json_string)\n\nprint(dict_object) # Output: {'name': 'GPT', 'type': 'AI'}"}
{"prompt": "Come up with a solution to parse an HTML document using Python. ", "label": "Using the BeautifulSoup library in Python, we can parse an HTML document. First, we need to import the BeautifulSoup module:\n\nfrom bs4 import BeautifulSoup\n\nThen, we can create a BeautifulSoup object with the contents of the HTML document:\n\nsoup = BeautifulSoup(html, 'html.parser')\n\nWe can then use various methods provided by the library to parse the document, such as find(), findAll(), select() etc. For example, soup.find('div') will return the first <div> element in the document.", "predict": "import lxml.html as lh\n\ndef parse_html(html_doc):\n    root = lh.fromstring(html_doc)\n    # Parse the HTML document\n    return root"}
{"prompt": "Write an API endpoint in Python which takes a JSON object as an input and returns a modified version of the same object.\n{\"name\": \"John\", \"age\": 30} ", "label": "@app.route('/api', methods=['POST'])\ndef api():\n data = request.get_json()\n data['age'] = data['age'] + 2\n return jsonify(data)", "predict": "@app.route('/api', methods=['POST'])\ndef api():\n data = request.get_json()\n data['age'] = data['age'] + 1\n return jsonify(data)"}
{"prompt": "Write a python program that sorts the list using insertion sort algorithm.\nunsorted_list = [10, 2, 6, 8, 5, 4, 9, 7, 3, 1] ", "label": "def insertion_sort(input_list):\n    # creating a copy of input list so that the original list is not modified\n    sorted_list = input_list.copy()\n    # Iterating through input list and inserting elements in the right place in the sorted list\n    for i in range(1, len(sorted_list)):\n        j = i-1\n        key = sorted_list[i] \n        while sorted_list[j] > key and j >= 0:\n            sorted_list[j+1] = sorted_list[j]\n            j -= 1\n        sorted_list[j+1] = key\n\n    return sorted_list\n\nsorted_list = insertion_sort(unsorted_list)", "predict": "def insertion_sort(unsorted_list):\n    for i in range(1, len(unsorted_list)):\n        key = unsorted_list[i]\n        j = i - 1\n        while j >= 0 and unsorted_list[j] > key:\n            unsorted_list[j + 1] = unsorted_list[j]\n            j -= 1\n        unsorted_list[j + 1] = key\n    return unsorted_list\n\nprint(insertion_sort(unsorted_list))"}
{"prompt": "Create an algorithm in Python to separate numbers below 10 and above 5.\narray = [4, 7, 10, 8, 12, 6] ", "label": "below_ten = [] # Separated numbers\nabove_five = [] # Separated numbers\n\n# Iterate over array\nfor n in array:\n    if n > 5:\n        above_five.append(n)\n    else:\n        below_ten.append(n)\n\n# Print results\nprint(\"Below 10: \", below_ten)\nprint(\"Above 5: \", above_five)", "predict": "def separate_numbers(array):\n    below_5 = []\n    above_5 = []\n\n    for num in array:\n        if num <= 5:\n            below_5.append(num)\n        else:\n            above_5.append(num)\n\n    return below_5, above_5"}
{"prompt": "Write a Python function to check if a given list contains any duplicate elements. ", "label": "def check_duplicates(A):\n    seen = set()\n    for elem in A:\n        if elem in seen:\n            return True\n        seen.add(elem)\n    return False", "predict": "def contains_duplicates(list):\n    return len(list)!= len(set(list))"}
{"prompt": "Make a Python program that reads a 3x3 matrix and prints the sum of all elements.\n[[1, 2, 3], [4, 5, 6], [7, 8, 9]] ", "label": "matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\ntotal = 0\n\nfor i in range(len(matrix)):\n    for j in range(len(matrix[i])):\n        total += matrix[i][j]\n\nprint(total)", "predict": "matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nsum = 0\n\nfor row in matrix:\n for col in row:\n  sum += col\n\nprint(sum) # 45"}
{"prompt": "Can you create a Python script to extract email addresses from a raw text?\n\"John Doe john@example.com, Jane Doe jane@example.com, Kevin Smith kevin@example.com\" ", "label": "import re\n\ntext = \"John Doe john@example.com, Jane Doe jane@example.com, Kevin Smith kevin@example.com\"\n\nemails = re.findall(r\"[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+\",\n                    text)\n\nprint(emails) # ['john@example.com', 'jane@example.com', 'kevin@example.com']", "predict": "import re\n\ntext = \"John Doe john@example.com, Jane Doe jane@example.com, Kevin Smith kevin@example.com\"\n\nemails = re.findall(r'[\\w\\.-]+@[\\w\\.-]+\\.\\w+', text)\n\nprint(emails)\n# Output: ['john@example.com', 'jane@example.com', 'kevin@example.com']"}
{"prompt": "Write a class in Python that will allow users to input their name and will return different sentences depending on the length of the name. ", "label": "class NameGame:\n    def __init__(self, name):\n        self.name = name\n\n    def play_game(self):\n        if len(self.name) == 0:\n            return \"Are you playing games with me ?\"\n        elif len(self.name) == 1:\n            return \"Is that all you are ?\"\n        elif len(self.name) == 2:\n            return \"That's quite a name !\"\n        else:\n            return \"What an interesting name !\"", "predict": "class NameLength:\n    def __init__(self, name):\n        self.name = name\n    \n    def get_sentence(self):\n        if len(self.name) == 0:\n            return \"Please enter your name.\"\n        elif len(self.name) == 1:\n            return \"Hello! What's your name?\"\n        else:\n            return \"Hello, \"+self.name+\"!\""}
{"prompt": "Create a basic Twitter bot using Python and Tweepy for publishing tweets.\nNot applicable ", "label": "import tweepy\n\n# authentication\nconsumer_key = 'YOUR_CONSUMER_KEY'\nconsumer_secret = 'YOUR_CONSUMER_SECRET'\naccess_token = 'YOUR_ACCESS_TOKEN'\naccess_token_secret = 'YOUR_ACCESS_TOKEN_SECRET'\n\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\napi = tweepy.API(auth)\n\n# Tweeting\ntext = 'Hello, world!'\napi.update_status(text)", "predict": "import tweepy\n\nconsumer_key = 'your_consumer_key'\nconsumer_secret = 'your_consumer_secret'\naccess_token = 'your_access_token'\naccess_token_secret = 'your_access_token_secret'\n\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n\ndef post_tweet(message):\n api.update_status(message)\n\npost_tweet('Hello, world!')"}
{"prompt": "Implement a queue data structure in python ", "label": "class Queue(object):\n\n    def __init__(self):\n        self.queue = []\n \n    def enqueue(self, item):\n        self.queue.insert(0, item)\n \n    def dequeue(self):\n        if len(self.queue)>0:\n            return self.queue.pop()\n        else:\n            return None\n \n    def size(self):\n        return len(self.queue)", "predict": "class Queue:\n    def __init__(self):\n        self.items = []\n\n    def isEmpty(self):\n        return self.items == []\n\n    def enqueue(self, item):\n        self.items.insert(0, item)\n\n    def dequeue(self):\n        return self.items.pop()\n\n    def size(self):\n        return len(self.items)"}
{"prompt": "Generate a program in Python to compare two strings and output true if one string is a permutation of another.\nString 1: abc\nString 2: cba ", "label": "def is_permutation(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    else:\n        dict_str1 = {}\n        dict_str2 = {}\n        for i in range(len(str1)):\n            if str1[i] not in dict_str1:\n                dict_str1[str1[i]] = 1\n            else:\n                dict_str1[str1[i]] += 1\n            if str2[i] not in dict_str2:\n                dict_str2[str2[i]] = 1\n            else:\n                dict_str2[str2[i]] += 1\n        return dict_str1 == dict_str2\n\nprint(is_permutation(str1, str2))", "predict": "def is_permutation(str1, str2):\n    # Check if the strings are of equal length\n    if len(str1)!= len(str2):\n        return False\n    \n    # Create a dictionary to store the count of characters\n    char_count = {}\n    # Iterate through the characters of the first string\n    for char in str1:\n        # Check if the character is present in the dictionary\n        if char in char_count:\n            # Increment the count\n            char_count[char] += 1\n        else:\n            # Add the character to the dictionary\n            char_count[char] = 1\n    \n    # Iterate through the characters of the second string\n    for char in str2:\n        # Check if the character is present in the dictionary\n        if char in char_count:\n            # Decrement the count\n            char_count[char] -= 1\n        else:\n            # Return false\n            return False\n    \n    # Check if all the counts are 0\n    for char in char_count:\n        if char_count[char]!= 0:\n            return False\n    return True\n\n# Driver code\nstr1 = 'abc'\nstr2 = 'cba'\nprint(is_permutation(str1, str2))"}
{"prompt": "Use the NumPy library to generate a 3x3 identity matrix in Python.\nNot applicable ", "label": "import numpy as np\n\nidentity_matrix = np.identity(3)\nprint(identity_matrix)", "predict": "import numpy as np\n\nidentity_matrix = np.identity(3)\nprint(identity_matrix)"}
{"prompt": "Develop an algorithm in Python, that prints out the Fibonacci sequence up to the number N. ", "label": "def Fibonacci(n): \n    a, b = 0, 1\n    while a < n: \n        print(a, end = ' ') \n        a, b = b, a + b\n    print() \n  \nn = 10\nFibonacci(n) \n\nOutput: 0 1 1 2 3 5 8", "predict": "def fibonacci(n):\n    a = 0\n    b = 1\n    print(\"Fibonacci sequence:\")\n    print(a)\n    print(b)\n    for i in range(2,n):\n        c = a + b\n        a = b\n        b = c\n        print(c)\n\nfibonacci(10)"}
{"prompt": "Gather the information about all Python library released by the Mozilla foundation ", "label": "The Mozilla Foundation has released multiple open source Python libraries over the years. Some of these libraries include mozmill, an automation tool for web application testing; Mozbase, a set of base libraries for Firefox-related testing; Mozhttpserver, a library for testing HTTP servers; and Mozilla Telemetry, a library for gathering large amounts of data from users. These libraries can be found on their GitHub page.", "predict": "Mozilla has released several Python libraries, including Mozilla/GeckoDriver, Mozilla/python-mochiweb, Mozilla/py-js-ctypes, Mozilla/python-xulrunner, Mozilla/python-js-ctypes, Mozilla/python-js-ctypes-mozilla, Mozilla/python-js-ctypes-mozilla-nightly, Mozilla/python-js-ctypes-mozilla-beta, Mozilla/python-js-ctypes-mozilla-aurora, Mozilla/python-js-ctypes-mozilla-esr, Mozilla/python-js-ctypes-mozilla-beta-esr, Mozilla/python-js-ctypes-mozilla-aurora-esr, Mozilla/python-js-ctypes-mozilla-nightly-esr."}
{"prompt": "Configure a web-server in Python using Flask. ", "label": "from flask import Flask\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello():\n    return \"Hello World!\"\n\napp.run()", "predict": "from flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello():\n    return 'Hello World!'\n\nif __name__ == '__main__':\n    app.run()"}
{"prompt": "Create a graphical user interface using Tkinter in Python that allows the user to input numbers and calculate the sum. ", "label": "# Create the window\nwindow = tk.Tk()\n\n# Create two entry fields in the window\nentry1 = tk.Entry(window)\nentry2 = tk.Entry(window)\n\n# Create a function to get inputs from the entry fields and calculate sum\ndef get_sum():\n    num1 = entry1.get()\n    num2 = entry2.get()\n    sum = int(num1) + int(num2)\n    label.config(text=\"Sum is \" + str(sum))\n\n# Create a button to execute the function\nbutton = tk.Button(window, text=\"Calculate\", command=get_sum)\n\n# Create a label to display the result\nlabel = tk.Label(window)\n\n# Pack all widgets\nentry1.pack()\nentry2.pack()\nbutton.pack()\nlabel.pack()\n\n# Main loop\nwindow.mainloop()", "predict": "import tkinter\n\n# Create the root window\nroot = tkinter.Tk()\n\n# Create a frame\nframe = tkinter.Frame(root)\nframe.pack()\n\n# Create a label\nlabel = tkinter.Label(frame, text=\"Enter numbers separated by a space:\")\nlabel.pack()\n\n# Create an entry field\nentry = tkinter.Entry(frame)\nentry.pack()\n\n# Create a button\nbutton = tkinter.Button(frame, text=\"Calculate Sum\", command=lambda: sum_numbers(entry.get()))\nbutton.pack()\n\n# Function to calculate the sum of the numbers\ndef sum_numbers(numbers):\n    # Split the string into a list of numbers\n    nums = numbers.split(' ')\n    # Calculate the sum\n    total = 0\n    for num in nums:\n        total += int(num)\n    # Print the sum\n    print(total)\n\n# Run the root window\nroot.mainloop()"}
{"prompt": "Compute the product of two matrices using Python.\nMatrix A:\n[2 3]\n[4 7]\nMatrix B:\n[6 5]\n[1 4] ", "label": "# Matrix multiplication in Python\n\nmatrix_A = [[2, 3], [4, 7]] \nmatrix_B = [[6, 5], [1, 4]] \n  \n# result matrix\nresult = [[0, 0], [0, 0]] \n  \n# iterating by row of Matrix A \nfor i in range(len(matrix_A)): \n  \n    # iterating by coloum of Matrix B  \n    for j in range(len(matrix_B[0])): \n  \n        # iterating by rows of Matrix B \n        for k in range(len(matrix_B)): \n            result[i][j] += matrix_A[i][k] * matrix_B[k][j] \n  \nfor r in result: \n    print(r)", "predict": "def matrix_multiply(A, B):\n    result = [[0, 0], [0, 0]]\n    for i in range(len(A)):\n        for j in range(len(B[0])):\n            for k in range(len(B)):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n\nA = [[2, 3], [4, 7]]\nB = [[6, 5], [1, 4]]\n\nprint(matrix_multiply(A, B))\n# Output: [[14, 10], [30, 20]]"}
{"prompt": "Develop a Python Program to determine if two given strings are an anagram or not.\nstring1 = \"abcd\"\nstring2 = \"cbad\" ", "label": "def is_anagram(string1, string2):\n    # check if strings have equal length \n    if len(string1) != len(string2): \n        return False \n    sorted1 = sorted(string1); \n    sorted2 = sorted(string2); \n    # check if sorted strings are the same \n    if sorted1 == sorted2:\n        return True \n    return False", "predict": "def is_anagram(string1, string2):\n    if len(string1)!= len(string2):\n        return False\n\n    count = [0] * 26\n    for i in range(len(string1)):\n        count[ord(string1[i]) - ord('a')] += 1\n        count[ord(string2[i]) - ord('a')] -= 1\n\n    for i in range(26):\n        if count[i]!= 0:\n            return False\n\n    return True"}
{"prompt": "Develop a Python script to extract the specific keyword from the given URL.\nURL: https://www.test.com/where-is-the-key\nKeyword: key ", "label": "import re\n\nurl = \"https://www.test.com/where-is-the-key\"\nkeyword = \"key\"\n\nmatch = re.search(f'{keyword}', url)\nif match:\n    print(f'{keyword} found at starting index: {match.start()}')\nelse:\n    print(f'{keyword} not found')", "predict": "import re\n\nurl = \"https://www.test.com/where-is-the-key\"\nkeyword = \"key\"\n\npattern = r'(\\b' + keyword + r'\\b)'\nmatch = re.search(pattern, url)\n\nif match:\n print('Keyword found:', match.group())"}
{"prompt": "Optimize an existing Bitcoin mining algorithm written in Python to use multiple threads so the program runs faster.\nimport threading\nimport time\n\ndef mining(difficulty, start):\n    nonce = start\n\n    # Main mining loop\n    while True:\n        hash = generate_hash(nonce)\n \n        # Check if the hash meets the difficulty\n        if hash[:difficulty] == '0' * difficulty:\n            print('Hash found!')\n            return nonce\n \n        nonce = nonce + 1 ", "label": "import threading\nimport time\n\ndef mining(difficulty, start):\n    threads = []\n    nonce = start\n\n    # Create threads\n    for _ in range(10):\n        t = threading.Thread(target=mining_thread,\n        args=(difficulty, nonce))\n        threads.append(t)\n        nonce = nonce + 100\n\n    # Start threads\n    for thread in threads:\n        thread.start()\n  \n    # Join threads\n    for thread in threads:\n        thread.join()\n\n    # Main mining loop\ndef mining_thread(difficulty, start):\n    nonce = start\n    while True:\n        hash = generate_hash(nonce)\n  \n        # Check if the hash meets the difficulty\n        if hash[:difficulty] == '0' * difficulty:\n            print('Hash found!')\n            return nonce\n  \n        nonce = nonce + 1", "predict": "import threading\nimport time\nimport hashlib\n\ndef mining(difficulty, start):\n    nonce = start\n    thread_local = threading.local()\n\n    # Main mining loop\n    while True:\n        hash = generate_hash(nonce)\n \n        # Check if the hash meets the difficulty\n        if hash[:difficulty] == '0' * difficulty:\n            print('Hash found!')\n            thread_local.nonce = nonce\n            return\n \n        nonce = nonce + 1\n\ndef generate_hash(nonce):\n    return hashlib.sha256(str(nonce).encode() +'some_salt').hexdigest()\n\n# Thread function\ndef thread_function():\n    mining(difficulty, start)\n\n# Create multiple threads\nfor i in range(10):\n    thread = threading.Thread(target=thread_function)\n    thread.start()\n\n# Wait for threads to finish\nfor i in range(10):\n    thread.join()"}
{"prompt": "Provide an algorithm in Python to merge two sorted arrays into a single sorted array.\n[3, 8, 11] and [1, 4, 9] ", "label": "def merge_arrays(arr1, arr2):\n    merged_arr = []\n    # Make copies of arrays\n    arr1_copy = arr1[:]\n    arr2_copy = arr2[:]\n    \n    # add elements from both array in sorted order\n    while arr1_copy and arr2_copy:\n        if arr1_copy[0] <= arr2_copy[0]:\n            merged_arr.append(arr1_copy.pop(0))\n        else:\n            merged_arr.append(arr2_copy.pop(0))\n            \n    # add remaining elements of array\n    if arr1_copy:\n        merged_arr.extend(arr1_copy)\n    else:\n        merged_arr.extend(arr2_copy)\n    \n    # return merged array\n    return merged_arr\n\narr1 = [3, 8, 11]\narr2 = [1, 4, 9]\n\nprint(merge_arrays(arr1, arr2))", "predict": "def merge(arr1, arr2):\n    arr3 = []\n    i = 0\n    j = 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            arr3.append(arr1[i])\n            i += 1\n        else:\n            arr3.append(arr2[j])\n            j += 1\n\n    while i < len(arr1):\n        arr3.append(arr1[i])\n        i += 1\n\n    while j < len(arr2):\n        arr3.append(arr2[j])\n        j += 1\n\n    return arr3\n\narr1 = [3, 8, 11]\narr2 = [1, 4, 9]\n\nprint(merge(arr1, arr2))"}
{"prompt": "Create a Python script that takes an array with n elements and shuffles it.\nn = 10 ", "label": "import random\n\ndef shuffle(lst):\n    random.shuffle(lst)\n    return lst\n\narr = [i for i in range(10)]\nprint(shuffle(arr))", "predict": "import random\n\ndef shuffle_array(arr):\n    for i in range(len(arr)):\n        random_index = random.randint(0, len(arr)-1)\n        arr[i], arr[random_index] = arr[random_index], arr[i]\n    return arr\n\narr = [i for i in range(10)]\nshuffled_arr = shuffle_array(arr)\nprint(shuffled_arr)"}
{"prompt": "Write a Python class that implements a binary search tree. It should have methods for adding nodes to the tree, searching the tree, and obtaining the size of the tree.\nNot applicable ", "label": "class BinarySearchTree:\n\n def __init__(self):\n  self.root = None\n\n def add_node(self, value):\n  if not self.root:\n   self.root = Node(value)\n  else: \n   self._add_node(self.root, value)\n\n def _add_node(self, node, value):\n  if value <= node.value:\n   if node.left:\n    self._add_node(node.left, value)\n   else:\n    node.left = Node(value)\n  else:\n   if node.right:\n    self._add_node(node.right, value)\n   else:\n    node.right = Node(value)\n\n def search(self, value):\n  return self._search(self.root, value)\n\n def _search(self, node, value):\n  if node is None:\n   return False\n  if node.value == value:\n   return True\n  else:\n   if value <= node.value:\n    return self._search(node.left, value)\n   else: \n    return self._search(node.right, value)\n\n def get_size(self):\n  return self._get_size(self.root)\n\n def _get_size(self, node):\n  if not node:\n   return 0\n  return self._get_size(node.left) + 1 + self._get_size(node.right)", "predict": "class Node:\n def __init__(self, data):\n  self.data = data\n  self.left = None\n  self.right = None\n\nclass BinarySearchTree:\n def __init__(self):\n  self.root = None\n\n def add(self, data):\n  node = Node(data)\n  if self.root is None:\n   self.root = node\n  else:\n   self._add_node(self.root, node)\n\n def _add_node(self, current, node):\n  if node.data < current.data:\n   if current.left is None:\n    current.left = node\n   else:\n    self._add_node(current.left, node)\n  else:\n   if current.right is None:\n    current.right = node\n   else:\n    self._add_node(current.right, node)\n\n def search(self, data):\n  return self._search(self.root, data)\n\n def _search(self, current, data):\n  if current is None:\n   return False\n  if data == current.data:\n   return True\n  elif data < current.data:\n   return self._search(current.left, data)\n  else:\n   return self._search(current.right, data)\n\n def size(self):\n  return self._size(self.root)\n\n def _size(self, current):\n  if current is None:\n   return 0\n  return 1 + self._size(current.left) + self._size(current.right)"}
{"prompt": "Given a list of strings, write a Python program to sort the strings according to the length of each string.\nstrings = ['abc', 'def', 'ghi', 'jkl', 'mno'] ", "label": "def sort_strings_by_length(strings):\n  return sorted(strings, key=len)", "predict": "def sort_by_length(strings):\n    return sorted(strings, key=len)\n\nprint(sort_by_length(strings))\n# Output: ['abc', 'def', 'ghi', 'jkl','mno']"}
{"prompt": "Write a Python program to construct a spam filter using Naïve Bayes.\nNot applicable ", "label": "from sklearn.naive_bayes import MultinomialNB\nimport pandas as pd\n\n# Read the data into a dataframe\ndf = pd.read_csv('spam.csv', header=None)\n\n#Split data into features and target\nX = df[df.columns[:-1]]\ny = df[df.columns[-1]]\n\n# Create a multinomial naive bayes classifier\nmodel = MultinomialNB()\n\n#Train the model\nmodel.fit(X,y)\n\n# Use the trained model to predict the class for the new data\npredicted_classes = model.predict(X)\n\n# Calculate the accuracy of the model\nprint(\"Accuracy:\", model.score(X,y))", "predict": "import pandas as pd\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Load the data\ndata = pd.read_csv('spam_data.csv')\n\n# Split the data into features and labels\nX = data['text']\ny = data['label']\n\n# Train the model\nmodel = MultinomialNB()\nmodel.fit(X, y)\n\n# Make predictions\npredictions = model.predict(X)\n\n# Evaluate the model\naccuracy = model.score(X, y)\nprint('Accuracy:', accuracy)"}
{"prompt": "Design an algorithm in Python that checks if a given number is even or odd. ", "label": "def is_even(n):\n   if n % 2 == 0:\n    return True\n   else:\n    return False", "predict": "def is_even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False"}
{"prompt": "Create a text-based adventure game in Python\nNot applicable ", "label": "import textwrap \n\nclass TextGame(object):\n    def __init__(self):\n        self.level = 1\n        self.is_playing = True\n\n    def start_game(self):\n        self.print_intro()\n        while self.is_playing:\n            self.level_one()\n\n    def print_intro(self):\n        # Introduction text\n        intro = textwrap.dedent('''\n            You awaken in a strange place, and it seems you have no memory of how you got there.\n            You can feel cold dampness of the stone walls and ground beneath your feet.\n            It appears to be a dungeon of some sort. You can see a light ahead. You decide to move\n            towards it.\n        ''')\n        print(intro)\n\n    def level_one(self):\n        # Level one text\n        level_one = textwrap.dedent('''\n            As you make your way towards the light, you come across a fork in the path.\n            You hear a soft whisper coming from the left path.\n        ''')\n        print(level_one)\n\n        action = raw_input('''Do you choose to take the left or right path? ''')\n        if action.upper() == \"LEFT\":\n            self.level_two_left()\n        elif action.upper() == \"RIGHT\":\n            self.level_two_right()\n        else:\n            self.level_one()\n\n    def level_two_left(self):\n        # Level two left text\n        level_two_left = textwrap.dedent('''\n            The whisper gets louder as you take the left path. Eventually, you reach a small room.\n            In the center of the room is a hooded figure standing in front of a pedestal.\n            There is a strange looking artifact on the pedestal.\n        ''')\n        print(level_two_left)\n\n        action = raw_input('''Do you 'approach' the figure or 'flee'? ''')\n        if action.upper() == \"APPROACH\":\n            print(\"You approach the figure and it removes its hood to reveal a face you recognize\")\n        elif action.upper() == \"FLEE\":\n            print(\"You turn and run, taking the right path\")\n            self.level_two_right()\n        else:\n            self.level_two_left()\n\n# Create instance and start the game. \ngame = TextGame()\ngame.start_game()", "predict": "import random\n\n# Room class\nclass Room:\n    def __init__(self, description):\n        self.description = description\n        self.exits = {}\n\n    # add exit\n    def add_exit(self, direction, destination):\n        self.exits[direction] = destination\n\n    # go in a direction\n    def go(self, direction):\n        return self.exits[direction]\n\n# Game class\nclass Game:\n    def __init__(self):\n        self.player = None\n        self.rooms = {}\n\n    # define a room\n    def define_room(self, room_number, room):\n        self.rooms[room_number] = room\n\n    # move the player\n    def move_player(self, direction):\n        current_room = self.player.room\n        next_room = current_room.go(direction)\n        self.player.room = next_room\n\n# Gameplay\ngame = Game()\n\n# Define rooms\ngame.define_room(1, Room(\"You are in a forest.\"))\ngame.define_room(2, Room(\"You are in a cave.\"))\n\n# Set the player\ngame.player = Player()\ngame.player.room = game.rooms[1]\n\n# Start the game\nwhile True:\n    print(\"What do you want to do?\")\n    action = input()\n\n    if action == \"go north\":\n        game.move_player(\"north\")\n    elif action == \"go south\":\n        game.move_player(\"south\")\n    elif action == \"quit\":\n        break"}
{"prompt": "Write a function in Python that takes an input list, multiplies each item in the list by two, and returns the resulting list. ", "label": "def double_list(lst):\n    return [x * 2 for x in lst]", "predict": "def double_list(lst):\n    return [x*2 for x in lst]"}
{"prompt": "Write a python program to which given a list of numbers, will calculate the mean value ", "label": "def mean(nums):\n    total = 0\n    for num in nums:\n        total += num\n    # Return the mean by dividing by the number of elements \n    return total / len(nums)", "predict": "def calculate_mean(numbers):\n    sum = 0\n    for number in numbers:\n        sum += number\n    return sum / len(numbers)"}
{"prompt": "Write a Python program to sort the values of a dictionary by its keys in alphabetical order.\ndictionary = {\"c\": 3, \"a\": 1, \"b\": 2} ", "label": "def sort_dictionary_by_keys(dictionary):\n    result = {}\n    for key in sorted(dictionary.keys()):\n        result[key] = dictionary[key]\n    return result\n\ndictionary = {\"c\": 3, \"a\": 1, \"b\": 2}\nsorted_dictionary = sort_dictionary_by_keys(dictionary)\n\nprint(sorted_dictionary)", "predict": "dictionary = {\"c\": 3, \"a\": 1, \"b\": 2}\n\nsorted_dictionary = dict(sorted(dictionary.items(), key=lambda x: x[0]))\n\nprint(sorted_dictionary)"}
{"prompt": "Create a Tic Tac Toe game in Python. ", "label": "# define the game board\nboard = [\"_\" for i in range(9)]\n\n# define the player and computer symbols\nplayer = \"X\"\ncomputer = \"O\"\n\ndef display_board():\n    row1 = \"| {} | {} | {} |\".format(board[0], board[1], board[2])\n    row2 = \"| {} | {} | {} |\".format(board[3], board[4], board[5])\n    row3 = \"| {} | {} | {} |\".format(board[6], board[7], board[8])\n\n    print()\n    print(row1)\n    print(row2)\n    print(row3)\n    print()\n\n# check for a win\ndef check_win():\n    # check rows\n    row1 = board[0] == board[1] == board[2] != \"_\"\n    row2 = board[3] == board[4] == board[5] != \"_\"\n    row3 = board[6] == board[7] == board[8] != \"_\"\n    # if any row does have a match, flag that there is a win\n    if row1 or row2 or row3:\n        game_over = True\n    # check columns\n    col1 = board[0] == board[3] == board[6] != \"_\"\n    col2 = board[1] == board[4] == board[7] != \"_\"\n    col3 = board[2] == board[5] == board[8] != \"_\"\n    # if any column does have a match, flag that there is a win\n    if col1 or col2 or col3:\n        game_over = True\n    # check diagonals\n    diag1 = board[0] == board[4] == board[8] != \"_\"\n    diag2 = board[2] == board[4] == board[6] != \"_\"\n    # if any diagonal does have a match, flag that there is a win\n    if diag1 or diag2:\n        game_over = True\n    # if any condition is true, there is a win\n    if row1 or row2 or row3 or col1 or col2 or col3 or diag1 or diag2:\n        winner = player\n    else:\n        game_over = False\n    return game_over, winner\n\n# play the game\nwhile True:\n    # display the game board\n    display_board()\n    # get player input\n    while True:\n        try:\n            player_choice = int(input(\"Pick a number between 1-9: \"))\n            if player_choice >= 1 and player_choice <= 9:\n                if board[player_choice - 1] == \"_\":\n                    board[player_choice - 1] = player\n                    break\n            else:\n                print(\"Sorry, please try again\")\n        except:\n            print(\"Sorry, please try again\")\n\n    # check for a win\n    game_over, winner = check_win()\n    if game_over:\n        display_board()\n        print(\"Congratulations! You win! \")\n        break\n    # check for a tie\n    if \"_\" not in board:\n        print(\"It's a tie\")\n        break", "predict": "import random\n\nboard = [''for i in range(9)]\n\ndef print_board(board):\n    for i in range(3):\n        print(''+ board[i] +'|'+ board[i+3] +'|'+ board[i+6] +'')\n        if i!= 2:\n            print('---------')\n\ndef check_win(player):\n    if (player[0] == player[1] == player[2]!='') or (player[3] == player[4] == player[5]!='') or (player[6] == player[7] == player[8]!='') or (player[0] == player[3] == player[6]!='') or (player[1] == player[4] == player[7]!='') or (player[2] == player[5] == player[8]!='') or (player[0] == player[4] == player[8]!='') or (player[2] == player[4] == player[6]!=''):\n        return True\n    else:\n        return False\n\ndef check_full(board):\n    if'' in board:\n        return False\n    else:\n        return True\n\ndef make_move(player, board, move):\n    board[move] = player\n    print_board(board)\n\ndef get_random_move(board):\n    while True:\n        move = random.randint(0, 8)\n        if board[move] =='':\n            return move\n\ndef get_player_move(board):\n    move = -1\n    while move not in range(9) or board[move]!='':\n        move = int(input('Make a move: '))\n    return move\n\nplayer1 = 'X'\nplayer2 = 'O'\n\nwhile True:\n    move = get_random_move(board)\n    make_move(player2, board, move)\n    if check_win(board[move]):\n        print('Player 2 wins!')\n        break\n    elif check_full(board):\n        print('Draw!')\n        break\n    else:\n        move ="}
{"prompt": "Design a program in Python that takes a list of strings and returns a list containing the length of each of the strings.\n['hello', 'world'] ", "label": "def string_lengths(arr):\n    lengths = [len(s) for s in arr]\n    return lengths\n\nresult = string_lengths(['hello', 'world'])\nprint(result)", "predict": "def get_string_lengths(strings):\n    lengths = []\n    for string in strings:\n        lengths.append(len(string))\n    return lengths\n\nlengths = get_string_lengths(['hello', 'world'])\nprint(lengths)"}
{"prompt": "Write a Python script that takes as input a list of random numbers and returns only the even numbers from the list\nA list of 20 random numbers: [1,6, 3,2 ,8,7, 0, 4, 9, 11, 22, 18, 33, 28, 26, 55, 49, 37, 63, 59] ", "label": "\"\"\"Generate a python script that takes a list of random numbers as input and return only the even numbers from the list\"\"\"\n\n# Take a list as input\nlst = [1,6, 3,2 ,8,7, 0, 4, 9, 11, 22, 18, 33, 28, 26, 55, 49, 37, 63, 59]\n\n# Create a new list that will contain only the even numbers from the input list\neven_numbers = []\n\n# Iterate through input list and append only even numbers to the new list \nfor num in lst:\n    if num % 2 == 0:\n        even_numbers.append(num)\n        \n# Print out the new list containing only even numbers\nprint(even_numbers)", "predict": "def filter_even_numbers(numbers):\n    even_numbers = []\n    for num in numbers:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers\n\nnumbers = [1,6, 3,2,8,7, 0, 4, 9, 11, 22, 18, 33, 28, 26, 55, 49, 37, 63, 59]\nprint(filter_even_numbers(numbers))\n\n# Output: [2, 8, 0, 4, 22, 18, 28, 55, 49, 37]"}
{"prompt": "Generate a Python function that takes an matrix as input and raises each element of it to the power of 3.\n[[1,2,3], [4,5,6], [7,8,9]] ", "label": "def power_of_3(matrix):\n    for i in range(len(matrix)):\n       for j in range(len(matrix[0])): \n            matrix[i][j] = matrix[i][j] ** 3\n    return matrix", "predict": "def power_3(matrix):\n    result = []\n    for row in matrix:\n        result_row = []\n        for element in row:\n            result_row.append(element**3)\n        result.append(result_row)\n    return result"}
{"prompt": "Create a Python program to find the total number of elements in a stack.\nStack: [1, 2, 3, 4, 5] ", "label": "def findNumOfElements(stack): \n    return len(stack)", "predict": "def find_stack_total(stack):\n    total = 0\n    while stack:\n        total += len(stack)\n        stack.pop()\n    return total"}
{"prompt": "Write a Python program to create a dataframe from a given dictionary of lists.\ndata = {\n    'name': ['John', 'Mark', 'Tom'],\n    'age': [21, 18, 20]\n} ", "label": "import pandas as pd\n\ndata_df = pd.DataFrame(data)\n\nprint(data_df)", "predict": "import pandas as pd\n\ndf = pd.DataFrame(data)"}
{"prompt": "Generate a Python program to output the most frequently occurring word in a given string.\nsentence = \"Code Generation is an important task in the AI research\" ", "label": "import collections\n\ndef most_frequent_word(string): \n counts = collections.Counter(string.split()) \n   \n max_count = max(counts.values()) \n   \n most_frequent = [word for word, count in counts.items() \n     if count == max_count] \n   \n print(most_frequent) \n   \nif __name__ == \"__main__\": \n    sentence = \"Code Generation is an important task in the AI research\"\n    most_frequent_word(sentence) \n  \n# Output\n# ['Generation']", "predict": "def most_frequent_word(sentence):\n    words = sentence.split()\n    word_freq = {}\n    for word in words:\n        if word in word_freq:\n            word_freq[word] += 1\n        else:\n            word_freq[word] = 1\n    max_freq = 0\n    max_word = ''\n    for word, freq in word_freq.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_word = word\n    return max_word\n\nsentence = \"Code Generation is an important task in the AI research\"\nmost_frequent_word(sentence)"}
{"prompt": "Construct a function in Python to calculate the volume of a sphere. ", "label": "def sphere_volume(radius): \n    return (4/3) * 3.14 * (radius*radius*radius) \n\n# Program to test above function\nradius = 3\nvolume = sphere_volume(radius)\nprint(\"Volume of a sphere with radius %d = %.2f\" %(radius, volume))", "predict": "def sphere_volume(radius):\n    return (4/3) * math.pi * radius**3"}
{"prompt": "Generate a python program to find the shortest path between two given nodes ", "label": "def find_path(start, end, graph):\n    # Initialize an empty list to store path\n    path = []\n    # Initialize a queue with start node\n    q = [start]\n    # Initialize a visited list\n    visited = set()\n\n    # Iterate until we get to the end node\n    while q:\n        node = q.pop(0)\n        if node == end:\n            path.append(node)\n            return path\n        elif node not in visited:\n            visited.add(node)\n            for neighbour in graph[node]:\n                q.append(neighbour)\n                path.append(node)\n    return path", "predict": "def find_shortest_path(graph, start, end):\n    visited = set()\n    queue = [(start, 0)]\n    while queue:\n        node, dist = queue.pop(0)\n        if node in visited:\n            continue\n        visited.add(node)\n        if node == end:\n            return dist\n        for neighbor, weight in graph[node].items():\n            queue.append((neighbor, dist + weight))\n    return None"}
{"prompt": "Write a python program to clean up a string by removing punctuation, non-alphanumeric regions  or converting to lowercase.\nexample_string = \"This i$n't a siMPle StrinG\" ", "label": "import string\n\nexample_string = \"This i$n't a siMPle StrinG\"\nnew_string = example_string.translate(str.maketrans('', '', string.punctuation)).replace(' ', '').lower()\nprint(new_string)\n\nOutput:\nthisisntasimplestring", "predict": "import string\n\ndef clean_string(example_string):\n cleaned_string = example_string.translate(str.maketrans('', '', string.punctuation)).replace(' ', '').lower()\n return cleaned_string"}
{"prompt": "Generate a Python code to calculate the value of the nth Fibonacci number.\n6 ", "label": "def fib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\nprint(\"The requested Fibonacci number is: \" + str(fib(6)))", "predict": "def fibonacci(n):\n if n == 0:\n  return 0\n elif n == 1:\n  return 1\n else:\n  return fibonacci(n-1) + fibonacci(n-2)\n\nprint(fibonacci(6))"}
{"prompt": "Build a Python script for deleting all characters from a string\nstring = \"Hello world!\" ", "label": "newString = string.replace(\"\", \"\")\nprint(newString)", "predict": "def remove_characters(string):\n    return ''.join(c for c in string if c.isalnum())\n\nresult = remove_characters(string)\nprint(result)"}
{"prompt": "Create a Python function that takes the words in the string and returns the frequency of each word. ", "label": "def count_words(string):\n    words = string.split()\n    count_words = {}\n    for word in words:\n        if word in count_words:\n            count_words[word] += 1\n        else:\n            count_words[word] = 1\n\n    return count_words", "predict": "def word_frequency(string):\n    # Split the string into words\n    words = string.split()\n\n    # Create an empty dictionary to store the frequencies\n    word_freq = {}\n\n    # Iterate over the words and store their frequencies\n    for word in words:\n        if word in word_freq:\n            word_freq[word] += 1\n        else:\n            word_freq[word] = 1\n\n    return word_freq"}
{"prompt": "Write a machine learning model in Python to detect the sentiment of a text document.\nThe text document is \"This movie was horrible and I never want to watch it again.\" ", "label": "def sentiment_model(text):\n pred = model.predict([text])\n \n if pred == 0:\n  sentiment = 'Positive'\n elif pred == 1:\n  sentiment = 'Negative'\n \n return sentiment\n\nsentiment = sentiment_model(\"This movie was horrible and I never want to watch it again.\")\nprint(sentiment) # Output: Negative", "predict": "import pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\n# Load the data\ndata = pd.read_csv('data.csv')\n\n# Create a count vectorizer\nvectorizer = CountVectorizer()\n\n# Create a bag of words\nbag_of_words = vectorizer.fit_transform(data['text'])\n\n# Create training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(bag_of_words, data['sentiment'], test_size=0.2)\n\n# Train the model\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\n# Test the model\ntest_doc = 'This movie was horrible and I never want to watch it again.'\ntest_bag_of_words = vectorizer.transform([test_doc])\nprediction = model.predict(test_bag_of_words)\n\nif prediction == [1]:\n print('The sentiment of the document is negative.')\nelse:\n print('The sentiment of the document is positive.')"}
{"prompt": "Write a Python program to generate an SQL query from a given set of parameters.\nTable Name: users\n\nFields: id, name, age\n\nFilter: age > 18 ", "label": "def generate_sql_query(table_name, fields, filter_clause):\n query = \"SELECT \"\n for i in range(len(fields)-1):\n query += fields[i] + \", \"\n query += fields[-1]\n query += \" FROM \" + table_name + \" WHERE \" + filter_clause\n return query", "predict": "SELECT * FROM users WHERE age > 18"}
{"prompt": "Create a Python script to generate a random 4-digit number (from 1000-9999) and display it on the screen.\nNot applicable ", "label": "import random\n\nprint(random.randint(1000,9999))", "predict": "import random\n\nrand_num = random.randint(1000, 9999)\nprint(rand_num)"}
{"prompt": "Define a Python class to model an appointment. ", "label": "class Appointment:\n    def __init__(self, title, time, location):\n        self.title = title\n        self.time = time\n        self.location = location\n\n    def get_title(self):\n        return self.title\n    \n    def get_time(self):\n        return self.time\n    \n    def get_location(self):\n        return self.location", "predict": "class Appointment:\n    def __init__(self, date, time, description):\n        self.date = date\n        self.time = time\n        self.description = description\n    \n    def get_date(self):\n        return self.date\n    \n    def get_time(self):\n        return self.time\n    \n    def get_description(self):\n        return self.description"}
{"prompt": "Automate the process of pulling data from a website using Python.\nWebsite URL: http://www.example.com ", "label": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'http://www.example.com'\n\n# Use requests to get website HTML\nresp = requests.get(url)\n\n# Parse the HTML using BeautifulSoup\nsoup = BeautifulSoup(resp.text, 'lxml')\n\n# Extract data from HTML\ndata = []\nfor item in soup.find_all('div'):\n data.append(item.text)\n\n# Print the data\nfor d in data:\n print(d)", "predict": "import requests\n\nurl = 'http://www.example.com'\n\nresponse = requests.get(url)\ndata = response.json()\n\n# process the data here"}
{"prompt": "Create a Google Cloud Function in Python to parse an incoming JSON object and extract its values\nNot applicable ", "label": "import json\n\ndef parse_json_object(request):\n # Parse the incoming JSON object\n data = json.loads(request.data)\n \n # Extract the values\n param1 = data['param1']\n param2 = data['param2']\n \n return 'Parameters extracted: param1={}, param2={}'.format(param1,param2)", "predict": "import json\n\ndef parse_json(request):\n    # Parse the incoming JSON object\n    data = json.loads(request.data)\n\n    # Extract the values\n    value1 = data['value1']\n    value2 = data['value2']\n\n    # Return the values\n    return value1, value2"}
{"prompt": "Write a function in Python that takes two arrays of the same size and performs elementwise addition.\narr1 = [1, 2, 3]\narr2 = [3, 4, 5] ", "label": "def add_arrays(arr1, arr2):\n if len(arr1) != len(arr2):\n  raise Exception(\"Arrays are not of the same size!\")\n return [x + y for x, y in zip(arr1, arr2)]\n\nadd_arrays(arr1, arr2)  # [4, 6, 8]", "predict": "def add_arrays(arr1, arr2):\n  result = []\n  for i in range(len(arr1)):\n    result.append(arr1[i] + arr2[i])\n  return result\n\narr1 = [1, 2, 3]\narr2 = [3, 4, 5]\n\nresult = add_arrays(arr1, arr2)\nprint(result) # [4, 6, 8]"}
{"prompt": "Create a Python program to retrieve and list all the books in a given category in an online book store.\nCategory = \"Computer Science\" ", "label": "# define category variable\ncategory = \"Computer Science\"\n# import JSON library for retrieving the data\nimport json\n# import HTTP library for fetching the data\nimport urllib.request\n\n# create the target url\nurl = \"https://www.example.com/books/category/\" + category\n\n# fetch the data\nresponse = urllib.request.urlopen(url)\n# read the data\ndata = json.loads(response.read())\n\n# print the books\nfor book in data:\n print(book['title'])", "predict": "import requests\n\n# Make a GET request to the API\nresponse = requests.get('http://example.com/books/category/Computer Science')\n\n# Get the list of books\nbooks = response.json()\n\n# Print the list of books\nfor book in books:\n print(book['title'])"}
{"prompt": "Create a class in Python that manages a student database. It should have several methods including one to add a new student into the database, one to delete a student from the database, and one to update the student's information in the database.\nNot applicable ", "label": "import sqlite3\n\nclass StudentDatabase:\n def __init__(self, db):\n  self.conn = sqlite3.connect(db)\n  self.cur = self.conn.cursor()\n  self.cur.execute(\"CREATE TABLE IF NOT EXISTS students (id INTEGER PRIMARY KEY, name TEXT, email TEXT, age INTEGER)\")\n  self.conn.commit()\n  \n def add_student(self, name, email, age):\n  self.cur.execute(\"INSERT INTO students VALUES (NULL, ?, ?, ?)\", (name, email, age))\n  self.conn.commit()\n  \n def delete_student(self, id):\n  self.cur.execute(\"DELETE FROM students WHERE id=?\", (id,))\n  self.conn.commit()\n  \n def update_student(self, id, name, email, age):\n  self.cur.execute(\"UPDATE students SET name=?, email=?, age=? WHERE id=?\", (name, email, age, id))\n  self.conn.commit()\n  \n def list_students(self):\n  self.cur.execute(\"SELECT * FROM students\")\n  rows = self.cur.fetchall()\n  return rows\n  \ndef main():\n db = StudentDatabase('students.db')\n db.add_student('John Doe', 'john@doe.com', 30)\n db.add_student('Adam Smith', 'adam@smith.com', 25)\n db.delete_student(2)\n db.update_student(1, 'John Smith', 'john@smith.com', 40)\n print(db.list_students())\n \nif __name__ == '__main__':\n main()", "predict": "class StudentDatabase:\n def __init__(self):\n  self.students = []\n\n def add_student(self, student):\n  self.students.append(student)\n\n def delete_student(self, student):\n  self.students.remove(student)\n\n def update_student(self, student, new_info):\n  student.update(new_info)"}
{"prompt": "Write a Python program to delete a node from a linked list\nhead = 5 -> 2 -> 1 -> 4 -> 3 ", "label": "# Node class\nclass Node: \n    # Function to initialize the node object \n    def __init__(self, data): \n        self.data = data # Assign data \n        self.next = None # Initialize next as null \n  \n  \n# Linked List class\nclass LinkedList: \n  \n    # Function to initialize the Linked  \n    # List object \n    def __init__(self):  \n        self.head = None\n  \n    # Deletes the node at position n\n    def deleteNode(self, position): \n  \n        # If linked list is empty \n        if self.head == None: \n            return \n  \n        # Store headnode \n        temp = self.head \n  \n        # If head needs to be removed \n        if position == 0: \n            self.head = temp.next\n            temp = None\n            return \n  \n        # Find previous node of the node to be deleted \n        for i in range(position-1): \n            temp = temp.next\n            if temp is None: \n                break\n  \n        # If position is more than number of nodes \n        if temp is None: \n            return \n        if temp.next is None: \n            return \n  \n        # Node temp.next is the node to be deleted \n        # store pointer to the next of node to be deleted \n        next = temp.next.next\n  \n        # Unlink the node from linked list \n        temp.next = None\n  \n        temp.next = next", "predict": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\ndef delete_node(head, key):\n    if head is None:\n        return head\n    if head.data == key:\n        return head.next\n    temp = head\n    while temp.next is not None:\n        if temp.next.data == key:\n            temp.next = temp.next.next\n            return head\n        temp = temp.next\n    return head"}
{"prompt": "Create a Python script to format a string containing email addresses. The script should remove special characters and extra spaces, and format the email addresses according to their domain.\nList of email addresses with special characters [ \"Mike@example.co    m\" , \"Jane#gmail.com\", \"Mason*yahoo.com\"] ", "label": "import re\n\nemails = [ \"Mike@example.co    m\" , \"Jane#gmail.com\", \"Mason*yahoo.com\"]\nresult = []\n\nfor email in emails:\n email = re.sub('[^A-Za-z0-9@.+-_]', '', email)\n email = email.replace(' ', '')\n if 'gmail' in email:\n email = email.replace('gmail', 'google')\n elif 'yahoo' in email:\n email = email.replace('yahoo', 'ymail')\n result.append(email)\n\nprint(result)", "predict": "import re\n\nemail_list = [\"Mike@example.co    m\", \"Jane#gmail.com\", \"Mason*yahoo.com\"]\n\nfor email in email_list:\n email = re.sub(r'[^\\w\\s@.]', '', email)\n email = email.strip()\n\n if 'example' in email:\n domain = 'example.com'\n elif 'gmail' in email:\n domain = 'gmail.com'\n elif 'yahoo' in email:\n domain = 'yahoo.com'\n else:\n domain = ''\n\n formatted_email = email + '@' + domain\n\n print(formatted_email)\n\n# Output:\nMike@example.com\nJane@gmail.com\nMason@yahoo.com"}
{"prompt": "Create a function in Python to extract all words from a sentence that are greater than 3 chars in length.\nThis is a sample sentence ", "label": "def extract_long_words(s):\n words = s.split()\n filtered = [w for w in words if len(w) > 3]\n return filtered", "predict": "def extract_long_words(sentence):\n    words = sentence.split(' ')\n    long_words = []\n    for word in words:\n        if len(word) > 3:\n            long_words.append(word)\n    return long_words\n\nlong_words = extract_long_words('This is a sample sentence')\nprint(long_words)"}
{"prompt": "Create a Python function to remove all the characters of a specified string that appear more than once. ", "label": "def remove_duplicates(string):\n    result = \"\"\n    for char in string:\n        if string.count(char) == 1:\n            result += char\n    return result", "predict": "def remove_duplicates(s):\n    result = \"\"\n    for c in s:\n        if s.count(c) == 1:\n            result += c\n    return result"}
{"prompt": "Create an optimized sorting alogirthm in Python.\nunsorted_list = [5, 2, 3, 1, 4] ", "label": "def optimized_sort(unsorted_list):\n    length = len(unsorted_list)\n    for i in range(length):\n        min_index = i\n        for j in range(i+1, length):\n            if unsorted_list[j] < unsorted_list[min_index]: \n                min_index = j\n                \n        unsorted_list[i], unsorted_list[min_index] = unsorted_list[min_index], unsorted_list[i] \n    \n    return unsorted_list\n\nsorted_list = optimized_sort(unsorted_list)\nprint(sorted_list)", "predict": "def optimized_sort(lst):\n    # Bubble sort algorithm\n    for i in range(len(lst)-1):\n        for j in range(i+1, len(lst)):\n            if lst[i] > lst[j]:\n                lst[i], lst[j] = lst[j], lst[i]\n    return lst\n\n# Example\nunsorted_list = [5, 2, 3, 1, 4]\nsorted_list = optimized_sort(unsorted_list)\nprint(sorted_list)"}
{"prompt": "Create a Python program to compute the primes between 1 and n\nn = 15 ", "label": "import math\n \ndef primes(n):\n    if n < 2:\n        return []\n    \n    size = int(math.sqrt(n)) + 1\n    sieve = bytearray([True]) * size\n    for i in range(2, size):\n        if sieve[i]:\n            for j in range(i*i, size, i):\n                sieve[j] = False\n  \n    primes = [i for i in range(2, size) if sieve[i]]\n    return [p for p in primes if p <= n]\n \nif __name__ == '__main__':\n    n = 15\n    print(primes(n))\n\n# Output: [2, 3, 5, 7, 11, 13]", "predict": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef get_primes(n):\n    result = []\n    for i in range(2, n + 1):\n        if is_prime(i):\n            result.append(i)\n    return result\n\nresult = get_primes(15)\nprint(result)"}
{"prompt": "Create a function in Python that takes a string, removes all non-alphanumeric characters, and prints the result to console.\nNot applicable ", "label": "def clean_string(s):\n clean_s = ''.join(c for c in s if c.isalnum())\n print(clean_s)", "predict": "def clean_string(string):\n cleaned_string = ''.join(c for c in string if c.isalnum())\n print(cleaned_string)\n\nclean_string('Hello World!') # Output: HelloWorld"}
{"prompt": "Develop an algorithm in Python to generate a Fibonacci series up to the nth value.\nn = 10 ", "label": "# Program to generate a Fibonacci series using an algorithm\n\n# function to generate Fibonacci series\ndef generate_fibonacci_series(n):\n    a, b = 0, 1 \n    result = [] \n    while b < n:\n        result.append(b)\n        a, b = b, a + b \n    return result\n\n# Driver code \nn = 10\nresult = generate_fibonacci_series(n)\nprint(\"The Fibonacci number up to\", n, \"is\", result)", "predict": "def Fibonacci(n): \n  if n<0: \n    print(\"Incorrect input\") \n  elif n==1: \n    return 0\n  elif n==2: \n    return 1\n  else: \n    return Fibonacci(n-1)+Fibonacci(n-2) \n\nprint(Fibonacci(10))"}
{"prompt": "Develop a program to implement a linear search in Python.\n[7, -3, 10, 13, -6], -3 ", "label": "def linear_search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1\n\narr = [7, -3, 10, 13, -6]\ntarget = -3\nprint(\"Index of\", target, \" is \", linear_search(arr, target)) # 1", "predict": "def linear_search(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1\n\narr = [7, -3, 10, 13, -6]\nx = -3\n\nresult = linear_search(arr, x)\n\nif result!= -1:\n    print(\"Element is present at index\", result)\nelse:\n    print(\"Element is not present in the array\")"}
{"prompt": "Write a Python script that will take an array of numbers and output the distinct elements.\n[1, 1, 3, 4, 5, 6, 6, 7, 8, 9, 9] ", "label": "my_list = [1, 1, 3, 4, 5, 6, 6, 7, 8, 9, 9]\nnew_list = []\n\nfor item in my_list:\n if item not in new_list:\n new_list.append(item)\n\nprint(new_list)\n# Output: [1, 3, 4, 5, 6, 7, 8, 9]", "predict": "distinct_elements = []\n\nfor num in [1, 1, 3, 4, 5, 6, 6, 7, 8, 9, 9]:\n    if num not in distinct_elements:\n        distinct_elements.append(num)\n\nprint(distinct_elements)"}
{"prompt": "Design a function in Python that takes in a list and returns its reverse.\n[1, 2, 3, 4] ", "label": "def reverse_list(list):\n    return list[::-1]\n\nresult = reverse_list([1,2,3,4])\nprint(result)", "predict": "def reverse_list(lst):\n    return lst[::-1]"}
{"prompt": "Create a class in Python that models a contact with details such as singlename, lastname, email, address, and phone number. ", "label": "class Contact:\n    def __init__(self, single_name, last_name, email, address, phone_number):\n        \"\"\"\n        This is the constructor for the contact class.\n        \"\"\"\n        self.single_name = single_name\n        self.last_name = last_name\n        self.email = email\n        self.address = address\n        self.phone_number = phone_number\n\n    def get_full_name(self):\n        \"\"\"\n        This method returns the full name of the contact.\n        \"\"\"\n        return self.last_name + \", \" + self.single_name\n\n    def get_email(self):\n        \"\"\"\n        This method returns the email of the contact.\n        \"\"\"\n        return self.email\n\n    def get_address(self):\n        \"\"\"\n       This method returns the address of the contact.\n        \"\"\"\n        return self.address\n\n    def get_phone_number(self):\n        \"\"\"\n        This method returns the phone number of the contact.\n        \"\"\"\n        return self.phone_number", "predict": "class Contact:\n    def __init__(self, singlename, lastname, email, address, phone):\n        self.singlename = singlename\n        self.lastname = lastname\n        self.email = email\n        self.address = address\n        self.phone = phone"}
{"prompt": "Implement a function in Python that takes as input an integer and prints out the Fibonacci sequence up to the entered value.\n10 ", "label": "def fibonacci(n):\n    arr = [0, 1]\n    for i in range(2, n+1):\n        arr.append(arr[i-2] + arr[i-1])\n    return arr[:n+1]\n\nprint(fibonacci(10))", "predict": "def fibonacci(n):\n  a, b = 0, 1\n  while a < n:\n    print(a, end=' ')\n    a, b = b, a+b\n\nfibonacci(10)"}
{"prompt": "Write code in Python to define a class to represent a linked list node. The class should have a data property, a pointer to the next node, and a 'add' method to append a node to the list.\nNot applicable ", "label": "class Node:\n  def __init__(self, data):\n   self.data = data\n   self.next = None\n\n  def add(self, new_node):\n   self.next = new_node", "predict": "class Node:\n def __init__(self, data):\n self.data = data\n self.next = None\n\n def add(self, node):\n if self.next is None:\n self.next = node\n else:\n self.next.add(node)"}
{"prompt": "Create a Python script to generate a n by n multiplication table.\n3 ", "label": "# Function to generate multiplication table  \ndef multiplication_table(n): \n    # set the initial value and iters\n    num = 1\n    iters = n + 1\n      \n    # outer loop\n    for i in range(1, iters): \n          \n        # inner loop \n        for j in range(1, iters): \n              \n            # print statement \n            print(num, end = \" \") \n              \n            num = num + 1\n        print()\n  \n# Driver code\nn = 3\nmultiplication_table(n)", "predict": "def generate_multiplication_table(n):\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            print(i*j, end=\"\\t\")\n        print()\n\ngenerate_multiplication_table(3)"}
{"prompt": "Create a web crawler in Python to automatically scrape data from a given web page.\nurl = \"http://www.example.com\" ", "label": "import requests\nfrom bs4 import BeautifulSoup\n\n# URL to be scraped\nurl = \"http://www.example.com\"\n\n# Make a GET request to fetch the raw HTML content\nhtml_content = requests.get(url).text\n\n# Parse the html content\nsoup = BeautifulSoup(html_content, \"lxml\")\n\n# Scrape data from the HTML using beautiful soup\ndata = soup.find_all('p')\n\n# Print the scraped data\nfor item in data:\n print(item.text)", "predict": "import requests\nfrom bs4 import BeautifulSoup\n\n# make a GET request to fetch the raw HTML content\nhtml_content = requests.get(url).text\n\n# parse the html content\nsoup = BeautifulSoup(html_content, \"lxml\")\n\n# scrape the data\ndata = soup.find_all(\"div\", {\"class\": \"example-class\"})\n\n# print the scraped data\nfor item in data:\n print(item.text)"}
{"prompt": "Write a code snippet in Python to print out the contents of a given dictionary.\n{\"apple\": 1, \"banana\": 2, \"carrot\": 3} ", "label": "dictionary = {\"apple\": 1, \"banana\": 2, \"carrot\": 3}\n\nfor item in dictionary:\n  print(\"{}: {}\".format(item, dictionary[item]))", "predict": "my_dict = {\"apple\": 1, \"banana\": 2, \"carrot\": 3}\n\nfor key, value in my_dict.items():\n    print(f\"{key}: {value}\")"}
{"prompt": "This code defines an abstract class called `Domain` that represents an abstract domain. The class has various attributes and methods, including `from_expr`, `to_expr`, `convert_from`, `convert`, `unify`, `poly_ring`, and `frac_", "label": "\"\"\"Implementation of :class:`Domain` class.\"\"\"\n\nimport abc\nimport inspect\n\nfrom ..core import Expr\nfrom ..core.compatibility import HAS_GMPY\nfrom ..polys.orderings import lex\nfrom ..polys.polyerrors import CoercionFailed, UnificationFailed\nfrom ..polys.polyutils import _unify_gens\nfrom ..printing.defaults import DefaultPrinting\nfrom .domainelement import DomainElement\n\n\nclass Domain(DefaultPrinting, abc.ABC):\n    \"\"\"Represents an abstract domain.\"\"\"\n\n    is_Ring = False\n    is_Field = False\n\n    has_assoc_Ring = False\n\n    is_FiniteField = False\n    is_IntegerRing = False\n    is_RationalField = False\n    is_RealField = False\n    is_ComplexField = False\n    is_AlgebraicField = False\n    is_RealAlgebraicField = False\n    is_ComplexAlgebraicField = False\n    is_PolynomialRing = False\n    is_FractionField = False\n    is_ExpressionDomain = False\n\n    is_Exact = True\n    is_Numerical = False\n\n    def __hash__(self):\n        return hash((self.__class__.__name__, self.dtype))\n\n    def __call__(self, *args):\n        \"\"\"Construct an element of ``self`` domain from ``args``.\"\"\"\n        return self.dtype(*args)\n\n    def __getstate__(self):\n        return {}\n\n    @abc.abstractmethod\n    def from_expr(self, expr):\n        \"\"\"Convert Diofant's expression ``expr`` to ``dtype``.\"\"\"\n        raise NotImplementedError\n\n    @abc.abstractmethod\n    def to_expr(self, element):\n        \"\"\"Convert domain ``element`` to Diofant expression.\"\"\"\n        raise NotImplementedError\n\n    def convert_from(self, element, base):\n        \"\"\"Convert ``element`` to ``self.dtype`` given the base domain.\"\"\"\n        for superclass in inspect.getmro(base.__class__):\n            method = '_from_' + superclass.__name__\n\n            convert = getattr(self, method, None)\n\n            if convert:\n                result = convert(element, base)\n\n                if result is not None:\n                    return result\n\n        raise CoercionFailed(f\"can't convert {element} of type {type(element)} \"\n                             f'from {base} to {self}')\n\n    def convert(self, element, base=None):\n        \"\"\"Convert ``element`` to ``self.dtype``.\"\"\"\n        if base is not None:\n            return self.convert_from(element, base)\n\n        if isinstance(element, self.dtype):\n            return element\n\n        from . import ComplexField, PythonRational, RealField\n        from .expressiondomain import ExpressionDomain\n        from .integerring import GMPYIntegerRing, PythonIntegerRing\n        from .rationalfield import GMPYRationalField, PythonRationalField\n\n        if isinstance(element, int):\n            return self.convert_from(element, PythonIntegerRing())\n\n        if isinstance(element, PythonRational):\n            return self.convert_from(element, PythonRationalField())\n\n        if HAS_GMPY:\n            integers = GMPYIntegerRing()\n            if isinstance(element, integers.dtype):\n                return self.convert_from(element, integers)\n\n            rationals = GMPYRationalField()\n            if isinstance(element, rationals.dtype):\n                return self.convert_from(element, rationals)\n\n        if isinstance(element, float):\n            parent = RealField(tol=False)\n            return self.convert_from(parent(element), parent)\n\n        if isinstance(element, complex):\n            parent = ComplexField(tol=False)\n            return self.convert_from(parent(element), parent)\n\n        if isinstance(element, DomainElement):\n            return self.convert_from(element, element.parent)\n\n        if", "predict": "ring`. The class also has an `__init__` method that initializes the domain. The `Domain` class also has a `__str__` method that returns a string representation of the domain."}
{"prompt": "Given a set of data, develop a Python program to classify the data into two categories: low and high.\n[8, 5, 9, 1, 3, 10] ", "label": "# Define the threshold\nthreshold = 5\n\ndef classify(data):\n  result = []\n  for item in data:\n    if item <= threshold:\n      result.append('low')\n    else:\n      result.append('high')\n  return result\n\nprint(classify([8, 5, 9, 1, 3, 10]))\n# Output: ['high', 'low', 'high', 'low', 'low', 'high']", "predict": "def classify_data(data):\n    classified_data = []\n    for item in data:\n        if item < 5:\n            classified_data.append('low')\n        else:\n            classified_data.append('high')\n    return classified_data\n\ndata = [8, 5, 9, 1, 3, 10]\nclassified_data = classify_data(data)\nprint(classified_data)"}
{"prompt": "Create an HTML page that displays a table containing a list of books with their ISBN and title.\n[{\"ISBN\": \"978-0134813071\", \"title\": \"Python Programming\" }, \n{\"ISBN\": \"978-1590595377\", \"title\": \"Advanced Python\" },\n {\"ISBN\": \"978-0302005945\", \"title\": \"PHP Programming\" }] ", "label": "<html>\n<head>\n  <title>Book List</title>\n</head>\n<body>\n  <h1>Book List</h1>\n  <table>\n    <thead>\n      <tr>\n        <th>ISBN</th>\n        <th>Title</th>\n      </tr>\n      <tbody>\n        <tr>\n          <td>978-0134813071</td>\n          <td>Python Programming</td>\n        </tr>\n        <tr>\n          <td>978-1590595377</td>\n          <td>Advanced Python</td>\n        </tr>\n        <tr>\n          <td>978-0302005945</td>\n          <td>PHP Programming</td>\n        </tr>\n    </thead>\n    <tbody>\n  </table>\n</body>\n</html>", "predict": "<!DOCTYPE html>\n<html>\n<head>\n <title>Book List</title>\n</head>\n<body>\n <h1>Book List</h1>\n <table>\n <thead>\n <tr>\n <th>ISBN</th>\n <th>Title</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td>978-0134813071</td>\n <td>Python Programming</td>\n </tr>\n <tr>\n <td>978-1590595377</td>\n <td>Advanced Python</td>\n </tr>\n <tr>\n <td>978-0302005945</td>\n <td>PHP Programming</td>\n </tr>\n </tbody>\n </table>\n</body>\n</html>"}
{"prompt": "Edit the following Python program to accept a list of numbers as input and find the second largest number from the list.\n[12, 23, 45, 22, 50] ", "label": "# Find the second largest number from a given list\n\nnumbers = [12, 23, 45, 22, 50]\n\n# Sort the list in ascending order\nnumbers.sort()\n\n# Get the second largest number\nsecond_largest_num = numbers[-2]\n\nprint('The second largest number in the list is:', second_largest_num)", "predict": "def second_largest(nums):\n    nums.sort()\n    return nums[-2]\n\nprint(second_largest([12, 23, 45, 22, 50]))"}
{"prompt": "Write a Python class that implements a binary search tree. The class should include methods to insert a node, delete a node, and traverse the tree.\nNot applicable ", "label": "class Node:\n def __init__(self, val):\n self.val = val\n self.left = None\n self.right = None\n \nclass BinarySearchTree:\n def __init__(self):\n self.root = None\n \n def insert(self, val):\n newNode = Node(val)\n if self.root == None:\n self.root = newNode\n else:\n curr = self.root\n while curr:\n if val < curr.val:\n if curr.left == None:\n curr.left = newNode\n break\n else:\n curr = curr.left\n else:\n if curr.right == None:\n curr.right = newNode\n break\n else:\n curr = curr.right\n \n def delete(self, val):\n curr = self.root\n parent = None\n isLeftChild = True\n \n while curr.val != val:\n parent = curr\n if val < curr.val:\n curr = curr.left\n isLeftChild = True\n else:\n curr = curr.right\n isLeftChild = False\n \n if curr == None:\n return\n \n # if node has no children\n if curr.left == None and curr.right == None:\n if isLeftChild:\n parent.left = None\n else:\n parent.right = None\n \n # if node has one child\n elif curr.left == None:\n if isLeftChild:\n parent.left = curr.right\n else:\n parent.right = curr.right\n \nelif curr.right == None:\n if isLeftChild:\n parent.left = curr.left\n else:\n parent.right = curr.left\n \n # if node has two children\n else:\n succParent = curr\n succ = curr.right\n \n while succ.left != None:\n succParent = succ\n succ = succ.left\n \n # if successor is a direct right child\n if succParent == curr:\n succParent.right = succ.right\n else:\n succParent.left = succ.right\n \n curr.val = succ.val\n \n def traverse(self):\n if self.root is None:\n return\n curr = self.root\n self.traverseInOrder(curr)\n \n def traverseInOrder(self, curr):\n if curr.left != None:\n self.traverseInOrder(curr.left)\n print(curr.val)\n if curr.right != None:\n self.traverseInOrder(curr.right)", "predict": "class Node:\n def __init__(self, data):\n self.data = data\n self.left = None\n self.right = None\n\nclass BinarySearchTree:\n def __init__(self):\n self.root = None\n\n def insert(self, data):\n new_node = Node(data)\n if self.root is None:\n self.root = new_node\n else:\n current = self.root\n while True:\n if data < current.data:\n if current.left is None:\n current.left = new_node\n break\n else:\n current = current.left\n else:\n if current.right is None:\n current.right = new_node\n break\n else:\n current = current.right\n\n def delete(self, data):\n current = self.root\n parent = None\n while current is not None:\n if data < current.data:\n parent = current\n current = current.left\n else:\n if data > current.data:\n parent = current\n current = current.right\n else:\n if current.left is None and current.right is None:\n if parent is None:\n self.root = None\n else:\n if parent.left is None:\n parent.left = None\n else:\n parent.right = None\n break\n elif current.right is None:\n if parent is None:\n self.root = current.left\n else:\n if parent.left is None:\n parent.left = current.left\n else:\n parent.right = current.left\n break\n elif current.left is None:\n if parent is None:\n self.root = current.right\n else:\n if parent.left is None:\n parent.left = current.right\n else:\n parent.right = current.right\n break\n else:\n successor = self.find_successor(current.right)\n current.data = successor.data\n self.delete(successor.data)\n break\n\n def find_successor(self, node):\n successor = node\n while successor.left is not None:\n successor = successor.left\n return successor\n\n def traverse(self):\n if self.root is None:\n return\n self._traverse(self.root)\n\n def _traverse(self, node):\n if"}
{"prompt": "Create a Python program for sorting a list of numbers in increasing order.\n[3, 1, 8, 5, 7] ", "label": "def sort_list(list):\n for _ in range(len(list)):\n for j in range(len(list)-1):\n if list[j] > list[j+1]:\n list[j], list[j+1] = list[j+1], list[j]\n return list\n\n# Testing the function\nexample_list = [3, 1, 8, 5, 7]\nsorted_list = sort_list(example_list)\n\nprint(sorted_list)\n# Output: [1, 3, 5, 7, 8]", "predict": "def sort_list(lst):\n    lst.sort()\n    return lst\n\nsorted_list = sort_list([3, 1, 8, 5, 7])\nprint(sorted_list)"}
{"prompt": "Write a function to create a JSON object from a given Python list. ", "label": "import json\n\ndef list_to_json(data):\n    return json.dumps(data)", "predict": "def list_to_json(list):\n    return json.dumps(list)"}
{"prompt": "Create a Python script to generate a password that meets the following criteria: length of 8 characters, includes at least one uppercase, one lowercase and one numeric character. ", "label": "import string\nimport random\n\ndef generate_password():\n    lowercase = string.ascii_lowercase\n    uppercase = string.ascii_uppercase \n    digits = string.digits\n\n    characters = lowercase + uppercase + digits\n    password = ''.join(random.sample(characters,8))\n    return password\n\nprint(generate_password())", "predict": "import random\n\ndef generate_password():\n    chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n    password = \"\"\n    for i in range(8):\n        password += random.choice(chars)\n    if not any(c.isupper() for c in password):\n        password = password[:-1] + random.choice(chr(97+ord(password[-1])+1) for c in password)\n    if not any(c.islower() for c in password):\n        password = password[:-1] + random.choice(chr(97+ord(password[-1])+1) for c in password)\n    if not any(c.isdigit() for c in password):\n        password = password[:-1] + random.choice(chr(97+ord(password[-1])+1) for c in password)\n    return password\n\nprint(generate_password())"}
{"prompt": "Determine the performance of a given Python function by seeing how long it takes to run.\ndef count_words(text):\n    words = text.split(' ')\n    return len(words) ", "label": "import time\n\ndef count_words(text):\n    start_time = time.time()\n    words = text.split(' ')\n    result = len(words)\n    end_time = time.time()\n    duration = end_time - start_time\n    return result, duration\n\nif __name__ == '__main__':\n    text = 'This sentence has five words'\n    result, duration = count_words(text)\n    print(f'The result is {result} and it took {duration} seconds!')", "predict": "import time\n\nstart_time = time.time()\ncount = count_words('This is a test sentence')\nend_time = time.time()\n\nelapsed_time = end_time - start_time\nprint('Function took', elapsed_time,'seconds to run.')"}
{"prompt": "Write a Python program to filter a list of words by their length.\nword_list = [\"apple\", \"banana\", \"pear\", \"grape\", \"mango\"] ", "label": "def filter_by_length(word_list, length):\n    filtered_list = []\n    for word in word_list:\n        if len(word) == length:\n            filtered_list.append(word)\n    return filtered_list\n\nresult = filter_by_length(word_list, 5)\nprint(result)", "predict": "def filter_by_length(word_list, length):\n    filtered_list = []\n    for word in word_list:\n        if len(word) == length:\n            filtered_list.append(word)\n    return filtered_list"}
{"prompt": "Create a Python program to parse a sentence and identify all named entities mentioned in the sentence.\nThe founder of Apple Steve Jobs passed away. ", "label": "import nltk\nfrom nltk import word_tokenize\n\nsentence = \"The founder of Apple Steve Jobs passed away.\"\n\ntokenized_text = word_tokenize(sentence)\n\ntagged = nltk.pos_tag(tokenized_text)\n\nnamedEnt = nltk.ne_chunk(tagged, binary=False)\n\nfor ne in namedEnt:\n if type(ne) == nltk.tree.Tree:  \n    entity_name = ' '.join(c[0] for c in ne.leaves())\n    print(entity_name)", "predict": "import spacy\n\nnlp = spacy.load('en_core_web_sm')\n\nsentence = 'The founder of Apple Steve Jobs passed away.'\ndoc = nlp(sentence)\n\nfor ent in doc.ents:\n print(ent.text, ent.label_)\n\n# Output:\n# The founder of Apple B-ORG\n# Steve Jobs B-PER\n# passed away I-VERB"}
{"prompt": "Write a Python program that can detect the language of a given piece of text.\nThe text is: \"Bonjour tout le monde\" ", "label": "import detect_language\n\ntext = \"Bonjour tout le monde\"\nlanguage = detect_language.detect(text)\nprint(language) # fr", "predict": "import detect_language\n\ntext = \"Bonjour tout le monde\"\nlanguage = detect_language.detect(text)\nprint(language)\n\n# Output: fr"}
{"prompt": "Write a blank Python program to convert celsius to fahrenheit. ", "label": "def celsius_to_fahrenheit(celsius):\n    \"\"\"\n    This function converts the given celsius value to its corresponding fahrenheit value\n    \"\"\"\n    fahrenheit = (celsius * (9/5)) + 32\n    return fahrenheit", "predict": "def celsius_to_fahrenheit(celsius):\n    fahrenheit = (celsius * 9/5) + 32\n    return fahrenheit"}
{"prompt": "Write a Python program to implement a simple HTTP server that can return the HTML page given below on a request.\n<html>\n<body>\n<h1>Hello, World!</h1>\n</body>\n</html> ", "label": "import http.server\nfrom http.server import SimpleHTTPRequestHandler\n\nclass MyHandler(SimpleHTTPRequestHandler):\n  def do_GET(self):\n    self.send_response(200)\n    self.send_header('Content-type', 'text/html')\n    self.end_headers()\n\n    html = b\"\"\"\n        <html>\n        <body>\n        <h1>Hello, World!</h1>\n        </body>\n        </html>\n    \"\"\"\n\n    self.wfile.write(html)\n \nserver = http.server.HTTPServer(('', 8080), MyHandler)\nserver.serve_forever()", "predict": "import http.server\n\nPORT = 8080\n\nclass SimpleHTTPRequestHandler(http.server.SimpleHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header('Content-type','text/html')\n        self.end_headers()\n        self.wfile.write(b'<html>\n        <body>\n        <h1>Hello, World!</h1>\n        </body>\n        </html>')\n\nserver = http.server.HTTPServer(('', PORT), SimpleHTTPRequestHandler)\nserver.serve_forever()"}
{"prompt": "Generate a code to send an email using Python. ", "label": "import smtplib\nfrom email.mime.text import MIMEText\nfrom email.mime.multipart import MIMEMultipart \n\nsubject = \"Your Subject\"\nbody = \"Your message here\"\nsender = \"from@fromdomain.com\"\nreceivers = [\"to@todomain.com\"]\n\nmsg = MIMEMultipart()\nmsg['from'] = sender\nmsg['To'] = \", \".join(receivers)\nmsg['Subject'] = subject\n\nmsg.attach(MIMEText(body, 'plain'))\n\nserver = smtplib.SMTP('smtp.gmail.com', 587)\nserver.starttls()\nserver.login(\"username\", \"password\")\ntext = msg.as_string()\nserver.sendmail(sender, receivers, text)\nserver.quit()", "predict": "import smtplib\n\n# create SMTP object\nserver = smtplib.SMTP('smtp.gmail.com', 587)\n\n# start TLS for security\nserver.starttls()\n\n# Authentication\nserver.login('sender_email_address','sender_email_password')\n\n# message to be sent\nmessage = 'This is a test email message'\n\n# sending the mail\nserver.sendmail('sender_email_address','receiver_email_address', message)\n\n# terminating the session\nserver.quit()"}
{"prompt": "Write a function in Python that takes an array of integers as an input and returns an array with only the distinct numbers from the input.\n[1, 2, 3, 4, 4, 5, 5] ", "label": "def distinct_numbers(arr):\n return list(set(arr))", "predict": "def distinct_numbers(arr):\n    distinct_arr = []\n    for num in arr:\n        if num not in distinct_arr:\n            distinct_arr.append(num)\n    return distinct_arr"}
{"prompt": "Design a data structure in Python that implements a Stack.\nNot applicable ", "label": "class Stack: \n def __init__(self): \n self.items = [] \n\n def push(self, item): \n self.items.append(item) \n\n def pop(self):\n if not self.is_empty(): \n return self.items.pop()\n\n def is_empty(self):\n return len(self.items) == 0\n\n def peek(self):\n if not self.is_empty(): \n return self.items[-1]\n\n def size(self):\n return len(self.items)", "predict": "class Stack:\n def __init__(self):\n self.items = []\n\n def push(self, item):\n self.items.append(item)\n\n def pop(self):\n return self.items.pop()\n\n def peek(self):\n return self.items[len(self.items)-1]\n\n def is_empty(self):\n return self.items == []\n\n def size(self):\n return len(self.items)"}
{"prompt": "Create a unit test for an existing Python function. The function should take a single argument and return the square of the argument.\nNot Applicable ", "label": "import unittest\n\ndef square(x):\n   return x * x\n\nclass TestSquareFunction(unittest.TestCase):\n   def test_square(self):\n       self.assertEqual(square(3), 9)\n       self.assertEqual(square(5), 25)\n       self.assertEqual(square(7), 49)\n\nif __name__ == '__main__':\n     unittest.main()", "predict": "import unittest\n\ndef square(x):\n return x * x\n\nclass TestSquare(unittest.TestCase):\n def test_square(self):\n self.assertEqual(square(2), 4)\n self.assertEqual(square(5), 25)\n self.assertEqual(square(10), 100)\n\nif __name__ == '__main__':\n unittest.main()"}
{"prompt": "Create a python program to reverse a string passed as input.\nHello World! ", "label": "def reverse_string(stringToReverse):\n    reversedString = \"\"\n    for i in reversed(stringToReverse):\n        reversedString += i\n    return reversedString\n    \nstringToReverse = input(\"Enter string to reverse: \")\nresult = reverse_string(stringToReverse)\nprint(result)", "predict": "def reverse_string(string):\n    return string[::-1]\n\nprint(reverse_string('Hello World!'))"}
{"prompt": "Create a class in Python to represent a Person which contains attributes like name, age, height and address. ", "label": "class Person:\n    def __init__(self, name, age, height, address):\n        self.name = name\n        self.age = age\n        self.height = height\n        self.address = address\n    \n    def describe(self):\n        print('Name:', self.name)\n        print('Age:', self.age)\n        print('Height:', self.height)\n        print('Address:', self.address)", "predict": "class Person:\n    def __init__(self, name, age, height, address):\n        self.name = name\n        self.age = age\n        self.height = height\n        self.address = address"}
{"prompt": "Create a function in Python that takes a string as input and prints out a list of all the words containing at least five letters.\n\"The quick brown fox jumps over the lazy dog\" ", "label": "def five_letter_words(string):\n    words = string.split()\n    output_list = []\n    for word in words:\n        if len(word) >= 5:\n            output_list.append(word)\n    print(output_list)\n\nfive_letter_words(\"The quick brown fox jumps over the lazy dog\")\n# Output [\"quick\", \"brown\", \"jumps\", \"over\", \"lazy\"]", "predict": "def five_letter_words(sentence):\n words = sentence.split()\n five_letter_words = []\n \n for word in words:\n if len(word) >= 5:\n five_letter_words.append(word)\n \n return five_letter_words\n \nsentence = \"The quick brown fox jumps over the lazy dog\"\nwords = five_letter_words(sentence)\nprint(words)"}
{"prompt": "Write a Python program for finding the longest subarray with a given sum.\narr: [1, 2, 3, 4, 5], sum: 9 ", "label": "def longest_subarray_with_sum(arr, given_sum):\n  max_len = 0\n  curr_sum = 0\n  start_index = 0\n  n = len(arr)\n  for end_index in range(n):\n    curr_sum += arr[end_index]\n    while curr_sum > given_sum:\n      curr_sum -= arr[start_index]\n      start_index += 1\n    if curr_sum == given_sum and (end_index-start_index+1) > max_len:\n      max_len = end_index-start_index+1\n  return max_len\n\narr = [1, 2, 3, 4, 5]\ngiven_sum = 9\nprint(longest_subarray_with_sum(arr, given_sum))", "predict": "def longest_subarray_with_sum(arr, sum):\n    start = 0\n    end = 0\n    max_len = 0\n    curr_sum = 0\n    for i in range(len(arr)):\n        curr_sum += arr[i]\n        while curr_sum > sum:\n            curr_sum -= arr[start]\n            start += 1\n        if curr_sum == sum:\n            max_len = max(max_len, i - start + 1)\n    return max_len\n\nresult = longest_subarray_with_sum([1, 2, 3, 4, 5], 9)\nprint(result)"}
{"prompt": "Write a Python class that will generate an output in JSON format from a provided input. ", "label": "class JSONGenerator:\n    def __init__(self, input):\n        self.input = input\n \n    def generate(self):\n        return json.dumps(self.input)", "predict": "class JsonGenerator:\n    def __init__(self, input):\n        self.input = input\n\n    def generate_json(self):\n        return json.dumps(self.input)"}
{"prompt": "Write a Python program to calculate the hypotenuse of a right-angled triangle.\na = 5, b = 12 ", "label": "import math\n\n# calculate the hypotenuse\ndef calc_hypotenuse(a, b):\n    hyp = math.sqrt(a**2 + b**2)\n    print(\"The length of the hypotenuse is\", hyp)\n\n# input lengths of triangle sides\na = 5\nb = 12\n\n# call the function\ncalc_hypotenuse(a, b)", "predict": "import math\n\ndef hypotenuse(a, b):\n    return math.sqrt(a**2 + b**2)\n\na = 5\nb = 12\n\nhypotenuse = hypotenuse(a, b)\nprint(\"The hypotenuse of the right-angled triangle is: {}\".format(hypotenuse))"}
{"prompt": "Generate random numbers between 1 and 2 using the random module in Python. ", "label": "import random\n\nrandom_number = random.uniform(1, 2)\nprint(random_number)", "predict": "import random\n\nrandom_num = random.uniform(1, 2)\nprint(random_num)"}
{"prompt": "Can you make a function in Pyhton that takes in two strings and returns a new string with all the letters from the second string which are not in the first string?\n“Python”, “Programming” ", "label": "def new_string(s1, s2):\n    new_str = \"\"\n    for char in s2:\n        if char not in s1:\n            new_str += char\n\n    return new_str\n\nprint(new_string(\"Python\", \"Programming\")) # Output: \"roammig\"", "predict": "def remove_common_chars(string1, string2):\n    result = \"\"\n    for char in string2:\n        if char not in string1:\n            result += char\n    return result\n\nprint(remove_common_chars(\"Python\", \"Programming\")) # prints \"rama\""}
{"prompt": "Generate a Python function to validate a credit card billing address.\nCredit card billing address example\n\nAnn Smith\n1234 Main St.\nAnytown, CA 99999 ", "label": "def validate_billing_address(address):\n    # Split address into individual elements\n    street, city_state_zip = address.split(\"\\n\")\n\n    # Check street element\n    if not street:\n        return False\n    \n    # Check city_state_zip element\n    elements = city_state_zip.split(\",\")\n    if len(elements) != 2:\n        return False\n    city, state_zip = elements\n    state, zip = state_zip.split(\" \")\n    if len(zip) != 5 or not zip.isdigit():\n        return False\n    \n    return True", "predict": "def validate_billing_address(address):\n    \"\"\"Validates a credit card billing address\"\"\"\n    # Split the address into its individual components\n    street, city, state, zip = address.split(',')\n\n    # Check that each component is present\n    if not all([street, city, state, zip]):\n        return False\n\n    # Check that the city and state are valid\n    if not city or not state:\n        return False\n\n    # Check that the zip code is valid\n    if not zip:\n        return False\n\n    return True"}
{"prompt": "Create a RESTful web service in Python which can add and subtract two numbers and return the result.\nNot applicable ", "label": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route(\"/\", methods=['GET', 'POST'])\ndef math():\n if request.method == 'POST':\n  num1 = int(request.form.get('num1'))\n  num2 = int(request.form.get('num2'))\n  operation = request.form.get('operation')\n\n  if operation == 'add':\n   result = num1 + num2\n  elif operation == 'subtract':\n   result = num1 - num2\n\n  return {'result': result}\n\nif __name__ == '__main__':\n app.run(debug=True)", "predict": "from flask import Flask, jsonify\n\napp = Flask(__name__)\n\n@app.route('/add', methods=['POST'])\ndef add():\n data = request.get_json()\n num1 = data['num1']\n num2 = data['num2']\n result = num1 + num2\n return jsonify({'result': result})\n\n@app.route('/subtract', methods=['POST'])\ndef subtract():\n data = request.get_json()\n num1 = data['num1']\n num2 = data['num2']\n result = num1 - num2\n return jsonify({'result': result})\n\nif __name__ == '__main__':\n app.run(debug=True)"}
{"prompt": "Design a Python script for merging two sorted lists.\nlist1 = [1, 5, 9]\nlist2 = [2, 6, 8] ", "label": "def merge_lists(list1, list2):\n merged_list = []\n\n # Iterate over both the lists \n # and compare their elements \n while len(list1) > 0 and len(list2) > 0:\n  if list1[0] < list2[0]:\n   merged_list.append(list1.pop(0))\n  else:\n   merged_list.append(list2.pop(0))\n\n# Check to see if any elements remain in one of the lists\n# and add them to the end of the merged list\n merged_list += list1\n merged_list += list2\n\n return merged_list\n\nlist1 = [1, 5, 9]\nlist2 = [2, 6, 8]\n\nmerged_list = merge_lists(list1, list2)\nprint(merged_list) # prints [1, 2, 5, 6, 8, 9]", "predict": "def merge_lists(list1, list2):\n    merged_list = []\n    i = 0\n    j = 0\n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            merged_list.append(list1[i])\n            i += 1\n        else:\n            merged_list.append(list2[j])\n            j += 1\n    merged_list += list1[i:]\n    merged_list += list2[j:]\n    return merged_list\n\nlist1 = [1, 5, 9]\nlist2 = [2, 6, 8]\n\nmerged_list = merge_lists(list1, list2)\nprint(merged_list)"}
{"prompt": "Create a Python program to loop through a given list and print each item on a new line.\nmy_list = [\"apples\", \"oranges\", \"bananas\"] ", "label": "for item in my_list:\n    print(item)", "predict": "my_list = [\"apples\", \"oranges\", \"bananas\"]\n\nfor item in my_list:\n    print(item)"}
{"prompt": "Implement a Genetic Algorithm in Python to find the maximum possible fitness score given a set of parameters.\nNumber of paramters = 3 \nRange of values for each parameter = [0, 1] \nFitness function = x1 * x2 + x3 ", "label": "import numpy as np\n\ndef fitness_function(X):\n return X[0] * X[1] + X[2]\n\ndef generate_genes(n, lower, upper):\n return np.random.uniform(lower, upper, n)\n\ndef GA(genes, fitness, lower, upper, mutation_rate, max_iterations):\n max_fitness = -float('inf')\n max_genes = None\n n = len(genes)\n for iteration in range(max_iterations):\n if max_fitness >= fitness_function(genes):\n break\n # Generate new population\n parent_generation = []\n for _ in range(int(n/2)):\n parent_generation.append((genes, fitness_function(genes)))\n parent_generation.sort(key=lambda x: x[1], reverse=True)  # Sort  parents \n # Select the best\n elite_genes, elite_fitness = parent_generation[0]\n # Crossover\n child_generation = []\n for _ in range(int(n/2)):  # Breed new population\n parent_1 = np.random.choice(parent_generation)\n parent_2 = np.random.choice(parent_generation)\n child_1, child_2 = crossover(parent_1, parent_2, n)\n child_generation.append(child_1)\n child_generation.append(child_2)\n # Mutate\n mutants = []\n for child in child_generation:\n if np.random.uniform(0, 1) < mutation_rate:\n mutants.append(mutation(child, lower, upper))\n else:\n mutants.append(child)\n # Update \n for gene in mutants:\n genes = gene\n fitness = fitness_function(genes)\n if fitness > max_fitness:\n max_fitness = fitness\n max_genes = gene\n return max_fitness, max_genes\n\ndef crossover(parent_1, parent_2, n):\n n_split = np.random.randint(1, n)  # Split \n child_1 = np.concatenate([parent_1[:n_split], parent_2[n_split:]])\n child_2 = np.concatenate([parent_2[:n_split], parent_1[n_split:]])\n return child_1, child_2\n\ndef mutation(gene, lower, upper):\n for i, gene_value in enumerate(gene):\n if np.random.uniform(0, 1) < mutation_rate:\n gene[i] = np.random.uniform(lower, upper)\n return gene\n\n# Run GA\nn = 3\nlower = 0\nupper = 1\ngenes = generate_genes(n, lower, upper)\nmutation_rate = 0.1\nmax_iterations = 1000\nmax_fitness, max_genes = GA(genes, fitness_function, lower, upper, mutation_rate, max_iterations)\n\n# Print results\nprint(\"Maximum fitness score:\", max_fitness)\nprint(\"Parameters:\", max_genes)", "predict": "import random\n\n# define parameters\nnum_params = 3\nparam_range = [0, 1]\n\n# define fitness function\ndef fitness(params):\n    return params[0] * params[1] + params[2]\n\n# define genetic algorithm\ndef genetic_algorithm(fitness_function):\n    population = []\n    for _ in range(num_params):\n        population.append(random.uniform(*param_range))\n    best_fitness = fitness_function(population)\n    best_params = population\n    while True:\n        new_params = []\n        for _ in range(num_params):\n            new_params.append(random.uniform(*param_range))\n        new_fitness = fitness_function(new_params)\n        if new_fitness > best_fitness:\n            best_fitness = new_fitness\n            best_params = new_params\n        if new_fitness == best_fitness:\n            break\n    return best_params\n\n# run genetic algorithm\nparams = genetic_algorithm(fitness)\nprint(\"Maximum fitness score:\", params)"}
{"prompt": "Write a Robotic Process Automation (RPA) script in Python to read data from an Excel spreadsheet and insert into a database table.\nA database table with columns item_id, item_name, price\nAn Excel spreadsheet with the same columns ", "label": "import pandas as pd\nimport pyodbc\n\n# Connect to database\nserver = '<yourserver>'\ndatabase = '<yourdatabase>'\nusername = '<yourusername>'\npassword = '<yourpassword>'\nconn = pyodbc.connect('DRIVER={ODBC Driver 17 for SQL Server};SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password)\ncursor = conn.cursor()\n\n# Read Excel file\ndf = pd.read_excel('<yourfilename>')\n\n# Insert values into database\nfor index, row in df.iterrows():\n item_id = row['item_id']\n item_name = row['item_name']\n price = row['price']\n cursor.execute(f\"INSERT INTO table (item_id, item_name, price) VALUES ({item_id}, '{item_name}', {price})\")\nconn.commit()", "predict": "import pandas as pd\nimport pyodbc\n\n# Read the Excel file\ndf = pd.read_excel('input.xlsx')\n\n# Connect to the database\nconn = pyodbc.connect('DRIVER={ODBC Driver 17 for SQL Server};SERVER=server;DATABASE=database;UID=user;PWD=password')\ncursor = conn.cursor()\n\n# Insert the data into the database\nfor i in range(len(df)):\n sql = 'INSERT INTO table (item_id, item_name, price) VALUES (' + str(df['item_id'][i]) + ', ''' + df['item_name'][i] + ''', ''' + str(df['price'][i]) + ')'\n cursor.execute(sql)\n\nconn.commit()\ncursor.close()\nconn.close()"}
{"prompt": "Calculate the correlation between artists using the Last.fm dataset. Intermediate datasets will be saved in an HDF5 file and", "label": "#!/usr/bin/env python\n\n''' Calculate the correlation between the artists. Intermediate datasets are\n    saved in the HDF5 file and the final dataset is saved in the database as\n    well. The artist correlation matrix is saved only for the single\n    selected artist, used in the final step for the similarity comparison.\n\n    #--------------------------------------------------------------------------#\n    Copyright (C) 2014, Zlatko Prpa <zprpa.ca@gmail.com>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n    #--------------------------------------------------------------------------#\n'''\n\n#-- standard libs\nimport os, sys, sqlite3, time, locale, itertools as it\n\n#-- add-on libs\nimport numpy, h5py\n\n#-- custom libs\nimport utils\n\n#==============================================================================#\n#--------------------------------- SETUP --------------------------------------#\n#==============================================================================#\n\nlog  = utils.ZpLog(   'logs/' + os.path.basename(__file__) + '.log')\nelog = utils.ZpErrLog('logs/' + os.path.basename(__file__) + '.ERROR-traceback.log')\nlog.write(''.ljust(150,'*'), skip_line=1, add_line=1)\n\n#-- setup number formatting\nlocale.setlocale( locale.LC_ALL, \"\" )\nfmt = locale.format\n\n#-- open the HDF5 file for the storage of the intermediate datasets\nh5f = h5py.File('data/artist-correlation-datasets.h5','w')\nvlen_dtype = h5py.special_dtype(vlen=str)\n\n#==============================================================================#\n#------------------------- Load and process data ------------------------------#\n#==============================================================================#\n\n#--------------------------------------#\n#-- load data and apply basic filter   #\n#--------------------------------------#\n''' Load the records from the artist/tag table.\n    There is no reason to apply any filter to this basic dataset, as opposite\n    to the tag correlation procedure. We do not need to generalize any\n    specific artist, as we had to do with tag data.\n    Otherwise, the whole processing logic is very much the same.\n'''\nlog.write('Load data.')\ndbs = sqlite3.connect('data/lastfm.sql3', detect_types=sqlite3.PARSE_DECLTYPES)\ncur = dbs.cursor()\ncur.execute(\"SELECT t.artist_name, t.tag, t.count FROM top_artist_tags t\")\nrecs = numpy.array([r for r in cur],dtype=[('art','O'),('tag','O'),('count','i4')])\ncur.close()\ndbs.close()\nlog.write('Loaded %s records.'%fmt('%12d',recs.shape[0],True).strip())\n\n#--------------------------------------#\n#-- prepare data for correlation calc  #\n#--------------------------------------#\n\nlog.write('Prepare data for the correlation calc.')\n\n#-- Get unique list of artists and tags.\nunique_art  = numpy.unique( recs['art'] )\nunique_tags = numpy.unique( recs['tag'] )\n\n''' Create 2d array to hold the vector for each artist. The vector size is 2x\n    the length of the list of the unique tags. First part will have the\n    value 0/1, depending if the given artist is associated with the given tag.\n    The second part will have the tag ranking (count) value, at the same\n    position for the given tag.\n\n    Assuming the following tuples in the basic dataset [recs", "predict": "will be used for future analyses.\n\nimport numpy as np\nimport pandas as pd\nfrom scipy.spatial.distance import cosine\nfrom h5py import File\n\n# Read the dataset\ndf = pd.read_csv(\"lastfm.csv\")\n\n# Calculate the correlation between artists\nartists = df.artist.unique()\ncorrelation_matrix = np.zeros((len(artists), len(artists)))\nfor i, artist_1 in enumerate(artists):\n    for j, artist_2 in enumerate(artists):\n        # Calculate the cosine distance between the two artists\n        if artist_1!= artist_2:\n            artist_1_df = df[df.artist == artist_1]\n            artist_2_df = df[df.artist == artist_2]\n            artist_1_df = artist_1_df.drop(columns=['artist'])\n            artist_2_df = artist_2_df.drop(columns=['artist'])\n            correlation_matrix[i, j] = cosine(artist_1_df, artist_2_df)\n\n# Save the intermediate datasets to an HDF5 file\nwith File('intermediate_datasets.hdf5', 'w') as f:\n    f.create_dataset('correlation_matrix', data=correlation_matrix)"}
{"prompt": "Create a Python dictionary structure that stores a warning message for each item in the following list.\n['apple', 'orange', 'banana'] ", "label": "{\n 'apple': 'This apple is not fresh.',\n 'orange': 'This orange has gone bad.',\n 'banana': 'This banana is too ripe.'\n}", "predict": "warnings = {\n    'apple': 'This apple is not fresh',\n    'orange': 'This orange is too sour',\n    'banana': 'This banana is too ripe'\n}"}
{"prompt": "Create a python program to find the maximum value of an array using divide and conquer technique.\narr = [1, 4, 9, 2, 6] ", "label": "def find_max_Using_Divide_and_Conquer(arr):\n    # Base case \n    if len(arr) == 1: \n        return arr[0] \n    if len(arr) == 2: \n        return max(arr[0], arr[1]) \n  \n    # Recursive case \n    mid = len(arr)//2 \n    max_left_sublist = find_max_Using_Divide_and_Conquer(arr[:mid]) \n    max_right_sublist = find_max_Using_Divide_and_Conquer(arr[mid:]) \n  \n    return max(max_left_sublist, max_right_sublist)", "predict": "def max_div_conq(arr):\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        mid = len(arr)//2\n        left_max = max_div_conq(arr[:mid])\n        right_max = max_div_conq(arr[mid:])\n        if left_max > right_max:\n            return left_max\n        else:\n            return right_max\n\narr = [1, 4, 9, 2, 6]\nprint(max_div_conq(arr))"}
{"prompt": "Develop an algorithm for calculating the sum of two numbers, in Python.\n2, 20 ", "label": "def add_numbers(a, b):\n    return a + b\n\nprint(\"The sum of 2 and 20 is: \", add_numbers(2, 20))", "predict": "def add(a, b):\n    return a + b\n\nprint(add(2, 20))"}
{"prompt": "Design a function to tell if a number is even or odd using Python.\nx = 5 ", "label": "def isEven(x):\n    if x % 2 == 0:\n        return True\n    else:\n        return False\n\nx = 5\n\nif isEven(x):\n    print(\"It is even\")\nelse:\n    print(\"It is odd\")", "predict": "def is_even(x):\n    if x % 2 == 0:\n        return True\n    else:\n        return False\n\nx = 5\nif is_even(x):\n    print('The number is even')\nelse:\n    print('The number is odd')"}
{"prompt": "Compose a Python Code to swap two numbers without using a temporary variable. ", "label": "# Input two numbers\na = 10\nb = 5\n\n# Swapping using bitwise operator\na = a ^ b \nb = a ^ b \na = a ^ b \n\n# Printing output\nprint(\"a =\", a) \nprint(\"b =\", b)", "predict": "def swap(a, b): \n    a = a + b \n    b = a - b \n    a = a - b \n    return a, b"}
{"prompt": "Construct a recursive Python program that computes the factorial of an integer. ", "label": "def factorial(n): \n    if n == 0: \n        return 1 \n    else: \n        return n * factorial(n-1)", "predict": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)"}
{"prompt": "Write a Python program to differentiate the following equation:\ny = 5*x^2 + 3*x + 1\nNot applicable ", "label": "def differentiate(x):\n  return 10*x + 3;\n\n# Test\nx = 2 \nprint(\"The derivative of y = 5*x^2 + 3*x + 1 at x = 2 is:\", differentiate(x)) # Output: 17", "predict": "def differentiate(equation):\n    x = 'x'\n    x_squared = x + '**2'\n    x_cubed = x_squared + '**2'\n    x_cubed_root = x_cubed + '**(1/3)'\n    x_cubed_root_cubed = x_cubed_root + '**3'\n    return str(5 * x_squared + 3 * x + 1 - 10 * x_cubed + 3 * x_cubed_root + 1/3 * x_cubed_root_cubed)"}
{"prompt": "Develop a basic cloud-based application using Google App Engine.\nNot applicable ", "label": "# main.py\n# The Google App Engine entry point with requests and responses\n\nfrom google.appengine.ext import ndb\nfrom flask import Flask\n\n# Define the Flask application\napp = Flask(__name__)\n\n@app.route('/api/v1/ persons/<id>', methods=['GET'])\ndef get_person_by_id(id):\n    person = ndb.Key(\"Person\", id).get()\n    if person is not None:\n        data = person.to_dict()\n        return json.dumps(data)\n    else:\n        # Return an error code if person with the provided ID was not found\n        return '{\"error\": \"Person not found\"}'\n\nif __name__ == '__main__':\n    # This is used when running locally only. When deploying to Google App\n    # Engine, a webserver process such as Gunicorn will serve the app.\n    app.run(host='127.0.0.1', port=8080, debug=True)\n\n# app.yaml\n\n# [START gae_python_app]\nruntime: python27\napi_version: 1\nthreadsafe: true\n\n# app.yaml\nenv_variables:\n  # Replace the placeholder below with your GCP project ID and make sure\n  # the variable is named `GCP_PROJECT`\n  GCP_PROJECT: <YOUR_PROJECT_ID>\n\n# app.yaml\nhandlers:\n- url: /.*\n  script: main.app\n\n# [END gae_python_app]", "predict": "# import the necessary packages\nimport webapp2\n\n# define the application\nclass MainHandler(webapp2.RequestHandler):\n    def get(self):\n        self.response.write(\"Hello, world!\")\n\n# define the application\napp = webapp2.WSGIApplication([\n    ('/', MainHandler)\n], debug=True)"}
{"prompt": "Create a Python function for computing the Fibonacci sequence up to the nth number.\nNumber n: 10 ", "label": "def fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\nprint(fibonacci(10)) # outputs 55", "predict": "def fibonacci(n):\n a, b = 0, 1\n for _ in range(n):\n a, b = b, a + b\n return a\n\nfibonacci(10) # 55"}
{"prompt": "Write a Python program that takes a list of numbers and creates a new list of even numbers only.\nlst = [2, 3, 5, 6, 7, 8, 10, 11] ", "label": "def get_even_numbers(lst):\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst", "predict": "def even_numbers(lst):\n    even_list = []\n    for num in lst:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"}
{"prompt": "In Python, debug the following program and explain what was the issue?\ndef greet(name):\n    if name == \"John\":\n        msg = \"Hello, John\"\n    else:\n        msg = \"Name not found\"\n\nprint(greet(\"John\")) ", "label": "The issue with the program is that it is not printing the message stored in the \"msg\" variable. To fix this, the program can be modified as follows:\n\ndef greet(name):\n    if name == \"John\":\n        msg = \"Hello, John\"\n    else:\n        msg = \"Name not found\"\n    print(msg)\n\ngreet(\"John\")", "predict": "The issue is that the message is not being returned from the greet() function. To fix this, the function should return the message like this:\n\ndef greet(name):\n    if name == \"John\":\n        msg = \"Hello, John\"\n    else:\n        msg = \"Name not found\"\n    return msg\n\nprint(greet(\"John\"))"}
{"prompt": "Suggest a method to improve the efficiency of the following Python program.\ns = 'abcdefghijklmnopqrstuvwxyz'\n\ndef func(s):\n    s_list = []\n    for c in s:\n        if c not in s_list:\n            s_list.append(c)\n    \n    return s_list ", "label": "s = 'abcdefghijklmnopqrstuvwxyz'\n\ndef func(s):\n    s_list = set()\n    for c in s:\n        s_list.add(c)\n    \n    return list(s_list)", "predict": "s = 'abcdefghijklmnopqrstuvwxyz'\n\ndef func(s):\n    s_list = set()\n    for c in s:\n        s_list.add(c)\n    \n    return list(s_list)"}
{"prompt": "Can you create a program in Python which reverses a number?\nNumber = 12345 ", "label": "# Using Python\n\ndef reverseNumber(number):\n    reversed = 0\n    while(number > 0):\n        digit = number%10\n        reversed = reversed*10 + digit\n        number = number//10\n    \n    return reversed\n\nnumber = 12345\nreverse = reverseNumber(number)\nprint(reverse) \n# Output: 54321", "predict": "def reverseNumber(num):\n    rev = 0\n    while(num > 0):\n        digit = num % 10\n        rev = rev * 10 + digit\n        num = num // 10\n    return rev\n\nprint(reverseNumber(12345))"}
{"prompt": "Create a function in Python that takes two numbers as arguments and returns their average.\n2, 3 ", "label": "def average(a, b): \n    return (a + b) / 2\n\nprint(average(2, 3))", "predict": "def avg(a, b):\n    return (a + b) / 2\n\nprint(avg(2, 3))"}
{"prompt": "In Python, create a method to generate a random string. ", "label": "import random\nimport string\n\ndef generateRandomString(length):\n    chars = string.ascii_letters + string.digits\n    randStr = \"\".join(random.choice(chars) for i in range(length))\n    return randStr\n\nprint(generateRandomString(8))", "predict": "import random\nimport string\n\ndef random_string(string_length):\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(string_length))"}
{"prompt": "Design an algorithm in Python to simulate a game of rock paper scissors. ", "label": "# We define the possible winning combination of the game\nWINNING_COMBINATION = {\n  \"rock\": \"scissors\",\n  \"paper\": \"rock\",\n  \"scissors\": \"paper\"\n}\n\ndef playRockPaperScissors():\n  # Player 1's turn\n  player1_choice = input(\"Player 1: Choose rock, paper or scissors: \")\n  # Player 2's turn\n  player2_choice = input(\"Player 2: Choose rock, paper or scissors: \")\n\n  # Find the winner\n  if WINNING_COMBINATION[player1_choice] == player2_choice:\n    print(\"Player 1 has won.\")\n  elif WINNING_COMBINATION[player2_choice] == player1_choice:\n    print(\"Player 2 has won.\")\n  else:\n    print(\"It's a tie!\")\n\nplayRockPaperScissors()", "predict": "def game_of_rock_paper_scissors():\n    # define possible moves\n    moves = ['rock', 'paper','scissors']\n    # get input from user\n    player_move = input('Enter your move (rock, paper, scissors): ')\n    # check if move is valid\n    if player_move not in moves:\n        print('Invalid move. Please enter one of the following: rock, paper, scissors')\n        return\n    # generate computer move\n    import random\n    computer_move = random.choice(moves)\n    # determine winner\n    if player_move == computer_move:\n        print('It is a tie!')\n    elif (player_move == 'rock' and computer_move =='scissors') or (player_move == 'paper' and computer_move == 'rock') or (player_move =='scissors' and computer_move == 'paper'):\n        print('You win!')\n    else:\n        print('You lose!')"}
{"prompt": "Generate a Python script for a query to fetch data from a given MySQL table.\nTable Name: Products\nColumns: product_id, name, price ", "label": "import mysql.connector\n\ndb = mysql.connector.connect(\n host=\"localhost\",\n user=\"root\",\n passwd=\"password\",\n database=\"dbname\"\n)\n\nmycursor = db.cursor()\n\nsql = \"SELECT product_id, name, price FROM Products\"\n\nmycursor.execute(sql)\n\nmyresult = mycursor.fetchall()\n\nfor row in myresult:\n  print(row)", "predict": "import mysql.connector\n\n# Connect to the database\nmydb = mysql.connector.connect(\n host=\"localhost\",\n user=\"yourusername\",\n passwd=\"yourpassword\"\n)\n\n# Create a cursor\nmycursor = mydb.cursor()\n\n# Execute the query\nsql = \"SELECT product_id, name, price FROM Products\"\nmycursor.execute(sql)\n\n# Fetch the result\nmyresult = mycursor.fetchall()\n\n# Print the result\nfor row in myresult:\n print(row)"}
{"prompt": "Create a Python script to send an email. ", "label": "import smtplib\n\n# Set up the SMTP server\ns = smtplib.SMTP(host='your_host_address_here', port=your_port_here)\ns.starttls()\ns.login(\"your_username_here\", \"your_password_here\")\n\n# Send the mail\nmessage = \"A message\"\ns.sendmail(\"from@example.com\", \"to@example.com\", message)\n\n# Terminate the SMTP session and close the connection\ns.quit()", "predict": "import smtplib\n\nsender ='sender@example.com'\nreceivers = ['receiver@example.com']\nmessage = 'Subject: Test\\n\\nThis is a test email message.'\n\ntry:\n    smtpObj = smtplib.SMTP('localhost')\n    smtpObj.sendmail(sender, receivers, message)\n    print(\"Successfully sent email\")\nexcept SMTPException:\n    print(\"Error: unable to send email\")"}
{"prompt": "Create an algorithm in Python to make a prediction given a list of features.\nfeatures = ['feature1', 'feature2', 'feature3'] ", "label": "def predict(features):\n    # Use the features to make a prediction\n    prediction = 0\n    \n    # Iterate through each feature to calculate the prediction\n    for feature in features:\n        prediction += calculate_feature(feature)\n    \n    return prediction\n\ndef calculate_feature(feature):\n    # Use a suitable algorithm to calculate the prediction\n    # Value of the feature\n    return value", "predict": "def predict(features):\n    # Initialize weights\n    weights = [0, 0, 0]\n    \n    # Calculate weighted sum\n    weighted_sum = 0\n    for i in range(len(features)):\n        weighted_sum += weights[i] * features[i]\n    \n    # Make prediction\n    prediction = 0 if weighted_sum < 0 else 1\n    \n    return prediction"}
{"prompt": "Rewrite the code from this Python2 code to be compatible with Python3 code.\n#This code prints the numbers from 0 to 5.\nfor i in range(6):\n    print i ", "label": "#This code prints the numbers from 0 to 5.\nfor i in range(6):\n    print(i)", "predict": "#This code prints the numbers from 0 to 5.\nfor i in range(6):\n    print(i)"}
{"prompt": "Create a class in Python that represents a vector in a 3-dimensional space. ", "label": "class Vec3:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __str__(self):\n        return \"({}, {}, {})\".format(self.x, self.y, self.z)", "predict": "class Vector3D:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __str__(self):\n        return 'Vector3D({}, {}, {})'.format(self.x, self.y, self.z)\n\n    def magnitude(self):\n        return (self.x**2 + self.y**2 + self.z**2)**0.5"}
{"prompt": "Using Python, create a program to filter out all non-prime numbers from a list.\nmyList = [2, 4, 5, 20, 44] ", "label": "def filterPrimes(myList):\n    result = []\n    for i in myList:\n        is_prime = True\n        for j in range(2,i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            result.append(i)\n    return result\n\nprint(filterPrimes(myList)) #[2, 5]", "predict": "def filter_primes(myList):\n    newList = []\n    for num in myList:\n        if is_prime(num):\n            newList.append(num)\n    return newList\n\ndef is_prime(num):\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n        return True\n    else:\n        return False"}
{"prompt": "Create a python program to calculate the compound interest for a given principal amount and a given interest rate.\nPrincipal amount = 1000\nInterest rate = 9% ", "label": "# Python program to calculate the compound interest  \n  \ndef compound_interest(principal, rate, time): \n  \n    # Calculates compound interest  \n    CI = principal * (pow((1 + rate / 100), time)) \n    print(\"Compound interest is\", CI) \n  \n# Driver Code  \ncompound_interest(1000, 9, 2)", "predict": "def compound_interest(principal, rate):\n return principal * (1 + rate/100)**2\n\n# Usage\nci = compound_interest(1000, 9)\nprint(ci) # 1101.70"}
{"prompt": "Write a Python script to generate all possible permutations of a set of input strings.\n['a', 'b', 'c'] ", "label": "def permute(input):\n res = []\n for i in range(len(input)):\n for result in permute(input[:i] + input[i + 1:]):\n res.append([input[i]] + result)    \n return res\n\ninputValues = ['a', 'b', 'c']\npermutations = permute(inputValues)\n\nfor perm in permutations:\n print(perm)", "predict": "import itertools\n\ninput_strings = ['a', 'b', 'c']\n\npermutations = itertools.permutations(input_strings)\n\nfor perm in permutations:\n    print(perm)"}
{"prompt": "Generate a python code that adds a delimiter string between every list item.\n[\"apple\", \"orange\", \"mango\"] ", "label": "def join_list_items(my_list, delimiter):\n    joined_list = delimiter.join(my_list)\n    return joined_list\n\nlist_string = join_list_items([\"apple\", \"orange\", \"mango\"], \", \")\nprint(list_string)\n# Output: apple, orange, mango", "predict": "def delimited_list(list_input, delimiter):\n    output = []\n    for item in list_input:\n        output.append(item)\n        output.append(delimiter)\n    return output\n\nlist_input = [\"apple\", \"orange\", \"mango\"]\ndelimiter = \" | \"\n\nprint(delimited_list(list_input, delimiter))"}
{"prompt": "Optimize a given Python script by running in parallel. ", "label": "import concurrent.futures\n\ndef thread_function(script):\n  // Code to run the given script in parallel\n\nwith concurrent.futures.ThreadPoolExecutor() as executor:\n  executor.map(thread_function, scripts)", "predict": "import concurrent.futures\n\ndef optimize_parallel(script):\n    with concurrent.futures.ThreadPoolExecutor() as executor:\n        executor.map(script)"}
{"prompt": "Create a Python function that converts an integer into a binary representation as a string.\n13 ", "label": "def to_binary(num):\n  result = \"\"\n  while num > 0:\n   remainder = num % 2\n   num = num // 2\n   result = str(remainder) + result\n  return result\n\nprint(to_binary(13)) # '1101'", "predict": "def int_to_binary(num):\n    binary = \"\"\n    while num > 0:\n        binary = str(num % 2) + binary\n        num //= 2\n    return binary\n\nprint(int_to_binary(13))"}
{"prompt": "Write an example of a class definition in Python. ", "label": "class Employee:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def get_name(self):\n        return self.name\n    \n    def get_age(self):\n        return self.age\n    \n    def set_age(self, age):\n        self.age = age", "predict": "class ExampleClass:\n    def __init__(self):\n        self.data = []\n    \n    def add_data(self, value):\n        self.data.append(value)\n    \n    def get_data(self):\n        return self.data"}
{"prompt": "Generate a Python function that takes in a list of numbers and returns the greatest common divisor (GCD) of the list elements.\n[25, 15, 20] ", "label": "def find_GCD(input_list): \n gcd = input_list[0] \n for num in input_list[1:]: \n gcd = find_GCD(gcd, num) \n return gcd\n\ndef find_GCD(a, b):\n while(b != 0): \n a, b = b, a%b \n return a", "predict": "def gcd(lst):\n gcd = lst[0]\n for num in lst[1:]:\n while num!= 0:\n temp = gcd\n gcd = num\n num = temp % num\n return gcd\n\nlst = [25, 15, 20]\ngcd = gcd(lst)\nprint(gcd)"}
{"prompt": "Design a Python program to find out the number of unique keywords used in documents.\nA list of documents: \n\n['The quick brown fox jumps over the lazy dog', 'The quick brown fox jumps over the lazy dog again', 'The quick brown fox jumps over the lazy dog again and again'] ", "label": "documents = ['The quick brown fox jumps over the lazy dog', 'The quick brown fox jumps over the lazy dog again', 'The quick brown fox jumps over the lazy dog again and again']\n\n# Get the words from the documents\nwords = []\nfor doc in documents:\n words += doc.split()\n\n# Get the unique words\nunique_words = set(words)\n\n# Print the number of unique words\nprint(f'The number of unique words is {len(unique_words)}')", "predict": "def count_unique_keywords(documents):\n    unique_keywords = set()\n    for document in documents:\n        words = document.split()\n        unique_keywords.update(words)\n    return len(unique_keywords)\n\ndocuments = [\n    'The quick brown fox jumps over the lazy dog',\n    'The quick brown fox jumps over the lazy dog again',\n    'The quick brown fox jumps over the lazy dog again and again'\n]\n\nprint(count_unique_keywords(documents))"}
{"prompt": "Design and implement an API in Python for an online store application. ", "label": "from flask import Flask, jsonify, request\n \napp = Flask(__name__)\n\n@app.route('/products', methods=['GET'])\ndef get_all_products():\n    # query database\n    products = []\n    # format result\n    return jsonify(products)\n\n@app.route('/products/<int:product_id>', methods=['GET'])\ndef get_product(product_id):\n    # query database\n    product = {}\n    # format result\n    return jsonify(product)\n\n@app.route('/products', methods=['POST'])\ndef create_product():\n    # get data from request\n    data = request.get_json()\n    # save to database\n    # format result\n    return jsonify({'message': 'Product added successfully.'}), 201\n\n@app.route('/products/<int:product_id>', methods=['PUT'])\ndef update_product(product_id):\n    # get data from the request\n    data = request.get_json()\n    # update data in the database\n    # format the result\n    return jsonify({'message': 'Product successfully updated.'})\n\n@app.route('/products/<int:product_id>', methods=['DELETE'])\ndef delete_product(product_id):\n    # delete data from the database\n    # format the result\n    return jsonify({'message': 'Product successfully deleted.'})", "predict": "# Define a class for the API\nclass API:\n    # Define the API endpoints\n    @staticmethod\n    def get_products():\n        # Return a list of products\n        pass\n\n    @staticmethod\n    def get_product(product_id):\n        # Return the product with the given id\n        pass\n\n    @staticmethod\n    def add_product(product):\n        # Add the given product to the store\n        pass\n\n    @staticmethod\n    def update_product(product_id, product):\n        # Update the product with the given id\n        pass\n\n    @staticmethod\n    def delete_product(product_id):\n        # Delete the product with the given id\n        pass"}
{"prompt": "Create a Python program that will generate random passwords consisting of any combination of uppercase, lowercase letters, and numbers.\nNot applicable ", "label": "import random\n\ndef generate_password(length):\n    password = \"\"\n    for i in range(length):\n        x = random.randint(1,3)\n        if x == 1:\n            password += chr(random.randint(48,57))\n        elif x == 2:\n            password += chr(random.randint(65,90))\n        else:\n            password += chr(random.randint(97,122))\n    return password", "predict": "import random\nimport string\n\ndef generate_password(length):\n chars = string.ascii_letters + string.digits\n return ''.join(random.choice(chars) for _ in range(length))\n\npassword = generate_password(10)\nprint(password)"}
{"prompt": "Generate the Python code for a pipelie of KMeans and GaussianMixture clustering models.\nn_clusters = 10 ", "label": "from sklearn.cluster import KMeans, GaussianMixture\ncluster = KMeans(n_clusters=n_clusters).fit(X)\npipeline = GaussianMixture(n_components=2).fit(cluster.cluster_centers_)", "predict": "from sklearn.cluster import KMeans, GaussianMixture\n\ndef pipeline_clustering(n_clusters):\n    \"\"\"Generate the Python code for a pipeline of KMeans and GaussianMixture clustering models.\n    \n    Parameters\n    ----------\n    n_clusters : int\n        Number of clusters\n    \n    Returns\n    -------\n    str\n        Python code\n    \"\"\"\n    pipeline_code = '''\n    from sklearn.pipeline import Pipeline\n    from sklearn.preprocessing import StandardScaler\n    \n    pipeline = Pipeline([\n        ('scaler', StandardScaler()),\n        ('kmeans', KMeans(n_clusters=n_clusters)),\n        ('gmm', GaussianMixture(n_components=n_clusters))\n    ])\n    '''\n    return pipeline_code"}
{"prompt": "Build a Naive Bayes classifier in Python. ", "label": "import numpy as np\n\nclass NaiveBayesClassifer():\n\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n        self.classes = np.unique(y)\n\n    def fit(self):\n        n_samples, n_features = self.x.shape\n        self.class_priors = np.zeros(len(self.classes))\n\n        self.means, self.stds = [], []\n\n        # calculate class prior probability\n        for i, c in enumerate(self.classes):\n            x_class = self.x[self.y == c]\n            self.class_priors[i] = x_class.shape[0]/float(n_samples)\n            # sample mean and std for each feature\n            self.means.append(x_class.mean(axis=0))\n            self.stds.append(x_class.std(axis=0))\n\n    def predict(self, X):\n        prediction = []\n        for x in X:\n            posteriors = []\n            for i, c in enumerate(self.classes):\n                # calculate prior probability\n                prior = np.log(self.class_priors[i])\n                # calculate conditional probability\n                posterior = np.sum(np.log(self.pdf(x, self.means[i], self.stds[i])))\n                posteriors.append(prior + posterior)\n\n            # print posteriors\n            prediction.append(self.classes[np.argmax(posteriors)])\n        return prediction\n\n    # calculate probability density function\n    def pdf(self, x, mean, std):\n        # probabilities\n        probabilities = (1/(np.sqrt(2*np.pi)*std))*(np.exp((-(x-mean)**2)/(2*std**2)))\n        return probabilities", "predict": "from sklearn.naive_bayes import GaussianNB\n\n# Create a Gaussian Naive Bayes classifier\ngnb = GaussianNB()\n\n# Train the model using the training sets \ngnb.fit(X_train, y_train)\n\n# Predict the response for test dataset\ny_pred = gnb.predict(X_test)"}
{"prompt": "The given code is a Python script that contains functions to deregister HiveServer2 in preparation for an upgrade and to complete an upgrade. To use these functions, import the necessary modules and call the functions with the required parameters. The pre", "label": "\"\"\"\nLicensed to the Apache Software Foundation (ASF) under one\nor more contributor license agreements.  See the NOTICE file\ndistributed with this work for additional information\nregarding copyright ownership.  The ASF licenses this file\nto you under the Apache License, Version 2.0 (the\n\"License\"); you may not use this file except in compliance\nwith the License.  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n\"\"\"\n\nimport os\nimport re\nfrom resource_management.core.logger import Logger\nfrom resource_management.core.exceptions import Fail\nfrom resource_management.core.resources.system import Execute\nfrom resource_management.core import shell\nfrom resource_management.libraries.functions import format\nfrom resource_management.libraries.functions import stack_select\nfrom resource_management.libraries.functions.version import format_stack_version\nfrom resource_management.libraries.functions.version import compare_versions\n\n\ndef pre_upgrade_deregister():\n  \"\"\"\n  Runs the \"hive --service hiveserver2 --deregister <version>\" command to\n  de-provision the server in preparation for an upgrade. This will contact\n  ZooKeeper to remove the server so that clients that attempt to connect\n  will be directed to other servers automatically. Once all\n  clients have drained, the server will shutdown automatically; this process\n  could take a very long time.\n  This function will obtain the Kerberos ticket if security is enabled.\n  :return:\n  \"\"\"\n  import params\n\n  Logger.info('HiveServer2 executing \"deregister\" command in preparation for upgrade...')\n\n  if params.security_enabled:\n    kinit_command=format(\"{kinit_path_local} -kt {smoke_user_keytab} {smokeuser_principal}; \")\n    Execute(kinit_command,user=params.smokeuser)\n\n  # calculate the current hive server version\n  current_hiveserver_version = _get_current_hiveserver_version()\n  if current_hiveserver_version is None:\n    raise Fail('Unable to determine the current HiveServer2 version to deregister.')\n\n  # fallback when upgrading because /usr/iop/current/hive-server2/conf/conf.server may not exist\n  hive_server_conf_dir = params.hive_server_conf_dir\n  if not os.path.exists(hive_server_conf_dir):\n    hive_server_conf_dir = \"/etc/hive/conf.server\"\n\n  # deregister\n  hive_execute_path = params.execute_path\n  # If upgrading, the upgrade-target hive binary should be used to call the --deregister command.\n  # If downgrading, the downgrade-source hive binary should be used to call the --deregister command.\n  if \"upgrade\" == params.upgrade_direction:\n    # hive_bin\n    upgrade_target_version = format_stack_version(params.version)\n    if upgrade_target_version and compare_versions(upgrade_target_version, \"4.1.0.0\") >= 0:\n      upgrade_target_hive_bin = format('/usr/iop/{version}/hive/bin')\n      if (os.pathsep + params.hive_bin) in hive_execute_path:\n        hive_execute_path = hive_execute_path.replace(os.pathsep + params.hive_bin, os.pathsep + upgrade_target_hive_bin)\n    # hadoop_bin_dir\n    upgrade_target_hadoop_bin = stack_select.get_hadoop_dir(\"bin\", upgrade_stack_only=True)\n    upgrade_source_hadoop_bin", "predict": "-upgrade deregistration function should be called first, followed by the post-upgrade completion function. # Copyright (c) 2012-2013 The Apache Software Foundation\n#\n#   Licensed under the Apache License, Version 2.0 (the \"License\");\n#   you may not use this file except in compliance with the License.\n#   You may obtain a copy of the License at\n#\n#       http://www.apache.org/licenses/LICENSE-2.0\n#\n#   Unless required by applicable law or agreed to in writing, software\n#   distributed under the License is distributed on an \"AS IS\" BASIS,\n#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#   See the License for the specific language governing permissions and\n#   limitations under the License.\n\nimport logging\n\nfrom hive.distributedcache import DistributedCache\nfrom hive.hiveserver2 import HiveServer2\nfrom hive.hiveserver2 import HiveServer2Exception\nfrom hive.hiveserver2 import HiveServer2Factory\nfrom hive.hiveserver2 import HiveServer2Protocol\nfrom hive.hiveserver2 import HiveServer2ServerFactory\nfrom hive.hiveserver2 import HiveServer2ServerFactoryFactory\nfrom hive.hiveserver2 import HiveServer2UpgradeException\nfrom hive.hiveserver2 import HiveServer2UpgradeTool\nfrom hive.hiveserver2 import HiveServer2UpgradeToolFactory\nfrom hive.hiveserver2 import HiveServer2UpgradeToolFactoryFactory\nfrom hive.hiveserver2 import HiveServer2UpgradeToolFactoryFactory\nfrom hive.hiveserver2 import HiveServer2UpgradeToolFactoryFactory\nfrom hive.hiveserver2 import HiveServer2UpgradeToolFactoryFactory\nfrom hive.hiveserver2 import HiveServer2UpgradeToolFactoryFactory\nfrom hive.hiveserver2 import HiveServer2UpgradeToolFactoryFactory\nfrom hive.hiveserver2 import HiveServer2UpgradeToolFactoryFactory\nfrom hive.hiveserver2 import HiveServer2UpgradeToolFactoryFactory\n"}
{"prompt": "Design a neural network in Python to identify the characters in a given alphanumeric string. ", "label": "# Imports \nimport numpy as np \nimport pandas as pd \nimport tensorflow as tf\n\n# Data \ndata = pd.DataFrame(columns=['string'])\ndata = data.append({'string':'3aF5yD'}, ignore_index=True)\n\n# Neural Network Architecture \nmodel = tf.keras.models.Sequential([\n tf.keras.layers.Embedding(input_dim=len(data.columns), output_dim=1, input_length=len(data.columns)),\n tf.keras.layers.LSTM(256, return_sequences=True),\n tf.keras.layers.Dense(32),\n tf.keras.layers.Dense(len(data), activation='softmax')\n])\n\n# Optimizer\nmodel.compile(optimizer='adam', loss='mse')\n\n# Train \nmodel.fit(data.values, epochs=10)\n\n# Prediction\npredictions = model.predict(data.values)\nprint(predictions)", "predict": "import numpy as np\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Flatten, Conv2D, MaxPooling2D\n\n# Create a Sequential model\nmodel = Sequential()\n\n# Add Conv2D and MaxPooling2D layers\nmodel.add(Conv2D(filters=32, kernel_size=(3, 3), activation='relu', input_shape=(28, 28, 1)))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\n# Add Dense and Flatten layers\nmodel.add(Flatten())\nmodel.add(Dense(units=128, activation='relu'))\nmodel.add(Dense(units=26, activation='softmax'))\n\n# Compile the model\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])"}
{"prompt": "Generate Python code to implement a binary search algorithm.\nNot applicable ", "label": "def binary_search(arr, target):\n left = 0\n right = len(arr)-1\n while left <= right:\n mid = (left + right) // 2\n if arr[mid] > target:\n right = mid - 1\n elif arr[mid] < target:\n left = mid + 1\n else:\n return mid\n return -1", "predict": "def binary_search(array, target):\n    start = 0\n    end = len(array) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if array[mid] == target:\n            return mid\n        elif array[mid] < target:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return -1"}
{"prompt": "Generate the following sequence using a while loop in Python.\n0, 1, 2, 4, 7, 11, ... ", "label": "a, b = 0, 1\nwhile b < 100:\n    print(a)\n    a, b = b, a + b", "predict": "a = 0\nb = 1\nwhile a < 100:\n    print(a)\n    temp = a\n    a = b\n    b = temp + b"}
{"prompt": "Write a Python code snippet that creates a dictionary with keys 1,2,3 and string \"One\",\"Two\" and \"Three\" as the corresponding values ", "label": "myDict = {1: \"One\", 2:\"Two\", 3:\"Three\"}", "predict": "my_dict = {1:\"One\", 2:\"Two\", 3:\"Three\"}"}
{"prompt": "Refactor the following code to be more pythonic\ndef print_all(sequences):\n    for sequence in sequences:\n        print(sequence) ", "label": "def print_all(sequences):\n    [print(sequence) for sequence in sequences]", "predict": "def print_all(sequences):\n    for sequence in sequences:\n        print(sequence, end='\\n')"}
{"prompt": "Create a simple game using Python and Pygame. ", "label": "import pygame\nimport random\n \n# Define some colors\nblack    = (   0,   0,   0)\nwhite    = ( 255, 255, 255)\ngreen    = (   0, 255,   0)\nred      = ( 255,   0,   0)\n \n# This sets the width and height of each grid location\nwidth=20\nheight=20\n \n# This sets the margin between each cell\nmargin=5\n \n# Create a 2 dimensional array. A two dimensional\n# array is simply a list of lists.\ngrid=[]\nfor row in range(10):\n    # Add an empty array that will hold each cell\n    # in this row\n    grid.append([])\n    for column in range(10):\n        grid[row].append(0) # Append a cell\n \n# Set row 1, cell 5 to one. (Remember rows and\n# column numbers start at zero.)\ngrid[1][5] = 1\n \n# Initialize pygame\npygame.init()\n  \n# Set the height and width of the screen\nsize=[255,255]\nscreen=pygame.display.set_mode(size)\n \n# Set title of screen\npygame.display.set_caption(\"Array Backed Grid\")\n \n# Loop until the user clicks the close button.\ndone=False\n  \n# Used to manage how fast the screen updates\nclock=pygame.time.Clock()\n \n# -------- Main Program Loop -----------\nwhile done==False:\n    for event in pygame.event.get(): # User did something\n        if event.type == pygame.QUIT: # If user clicked close\n            done=True # Flag that we are done so we exit this loop\n        if event.type == pygame.KEYDOWN:\n            if event.key == pygame.K_SPACE:\n                grid[1][5] = 0\n    # Set the screen background\n    screen.fill(white)\n \n    # Draw the grid\n    for row in range(10):\n        for column in range(10):\n            color = white\n            if grid[row][column] == 1:\n                color = green\n            pygame.draw.rect(screen,\n                             color,\n                             [(margin+width)*column+margin,\n                              (margin+height)*row+margin,\n                              width,\n                              height])\n                              \n    # Limit to 20 frames per second\n    clock.tick(20)\n \n    # Go ahead and update the screen with what we've drawn.\n    pygame.display.flip()\n      \n# Be IDLE friendly. If you forget this line, the program will 'hang'\n# on exit.\npygame.quit ()", "predict": "import pygame\nimport random\n\npygame.init()\n\n# Set up some constants\nWIDTH = 640\nHEIGHT = 480\n\n# Create the game window\nscreen = pygame.display.set_mode((WIDTH, HEIGHT))\n\n# Create a player\nplayer = pygame.Rect(WIDTH/2, HEIGHT/2, 50, 50)\n\n# Create a list of enemies\nenemies = []\n\n# Game loop\nrunning = True\nwhile running:\n    # Handle events\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n\n    # Update the enemies\n    for enemy in enemies:\n        enemy.x += enemy.speed\n        if enemy.x > WIDTH:\n            enemy.x = 0\n\n    # Draw the screen\n    screen.fill((0, 0, 0))\n    pygame.draw.rect(screen, (255, 0, 0), player)\n    for enemy in enemies:\n        pygame.draw.rect(screen, (0, 255, 0), enemy)\n\n    # Update the display\n    pygame.display.flip()\n\npygame.quit()"}
{"prompt": "Generate a program using Python to calculate the factorial of a positive number.\nNumber = 4 ", "label": "#Calculate the Factorial of a Positive Number\n\n#Get input\nfactNum = 4\n\n#Calculate and print result\nfactNum = factNum*(factNum - 1)\nfactNum = factNum*(factNum - 1)\nfactNum = factNum*(factNum - 1)\n\nprint(\"The factorial of 4 is:\", factNum)", "predict": "def factorial(number):\n    if number == 0:\n        return 1\n    else:\n        return number * factorial(number-1)\n\nnum = 4\nprint(\"Factorial of\", num, \"is\", factorial(num))"}
{"prompt": "Write a Python program to complete the implementing of a searching algorithm.\nList: [1, 2, 3, 4, 5, 6, 7, 8, 9]\nTarget item: 7 ", "label": "\"\"\"\nWrite a Python program to complete the implementing of a searching algorithm\n\"\"\"\n\n# Function to implement searching algorithm \ndef search(list, item): \n    # traverse through all list elements\n    for i in range(len(list)): \n        if list[i] == item: \n            return i \n      \n    # item not found\n    return -1\n  \n# main \nif __name__ == \"__main__\": \n    # Given list \n    list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    item = 7\n  \n    # Calling Function \n    index = search(list, item) \n  \n    if index != -1: \n        print(\"Item found at index\", index) \n    else:\n        print(\"Item is not found in list\")", "predict": "def linear_search(lst, item):\n    for i in range(len(lst)):\n        if lst[i] == item:\n            return i\n    return -1\n\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nitem = 7\n\nindex = linear_search(lst, item)\n\nif index!= -1:\n    print('Element found at index', index)\nelse:\n    print('Element not found')"}
{"prompt": "Write a Python script to extract data from a web page using Regular Expressions (RegEx).\n<div class=\"data\">\n<h1>Name: John Doe</h1>\n<h3>Age: 25</h3>\n<h3>Location: Los Angeles, CA</h3>\n</div> ", "label": "import re\n\nhtml = \"<div class=\\\"data\\\"> \\\n <h1>Name: John Doe</h1> \\\n <h3>Age: 25</h3> \\\n <h3>Location: Los Angeles, CA</h3> \\\n</div>\"\n\npattern = '<h1>Name: (.*)</h1>.*<h3>Age: (.*)</h3>.*<h3>Location: (.*)</h3>'\n\ndata = re.search(pattern, html)\n\nname = data.group(1)\nage = data.group(2)\nlocation = data.group(3)\n\nprint('Name: {}'.format(name))\nprint('Age: {}'.format(age))\nprint('Location: {}'.format(location))", "predict": "import re\n\nhtml = '<div class=\"data\">\n<h1>Name: John Doe</h1>\n<h3>Age: 25</h3>\n<h3>Location: Los Angeles, CA</h3>\n</div>'\n\ndata = re.findall('<h1>Name: (.*)</h1>.*<h3>Age: (.*)</h3>.*<h3>Location: (.*)</h3>', html)\n\nname = data[0][0]\nage = data[0][1]\nlocation = data[0][2]\n\nprint(name, age, location)\n\n# Output: John Doe 25 Los Angeles, CA"}
{"prompt": "Create a command-line tool for voting on git commands. The tool should have the following sub-commands: \"vote\", \"list\", \"tally\", and \"elect\". The \"vote\" sub-command should allow a user to vote for a specific commit. The \"list\" sub-command should list all votes. The \"tally\" sub-command should tally all votes. The \"elect\" sub-command should elect a commit based", "label": "import argparse\nimport collections\nimport re\nimport subprocess\n\n\nNOTES_REF = 'refs/notes/votes'\n\n\nVote = collections.namedtuple('Vote', ['commit', 'user'])\n\n\n\ndef vote(args):\n\tassert args.user, 'TODO: determine user automatically'\n\tvote = 'vote:%s' % args.user\n\tsubprocess.check_call([\n\t\t'git', 'notes', '--ref', NOTES_REF, 'append', '--allow-empty', '-m', vote, args.COMMIT],\n\t\tcwd=args.repo_dir)\n\t# TODO: prevent voting twice as same user\n\n\ndef get_all_votes(repo_dir):\n\toutput_bytes = subprocess.check_output([\n\t\t'git', 'notes', '--ref', NOTES_REF, 'list'],\n\t\tcwd=repo_dir)\n\toutput = output_bytes.decode('utf-8')\n\tfor line in output.splitlines():\n\t\tif not line:\n\t\t\tcontinue\n\t\tvotenote_ref, commit_id = line.split()\n\t\t# TODO use dulwich or something more efficient here\n\t\tvotenote_bytes = subprocess.check_output(\n\t\t\t['git', 'show', votenote_ref],\n\t\t\tcwd=repo_dir)\n\n\t\tvotenote_content = votenote_bytes.decode('utf-8') # TODO ignore invalid votes\n\t\tfor voteline in votenote_content.splitlines():\n\t\t\tif not voteline:\n\t\t\t\tcontinue\n\t\t\tm = re.match(r'^vote:(?P<user>[a-z0-9@._]+)$', voteline.strip()) # TODO check re for user spec\n\t\t\tif not m:\n\t\t\t\tprint('Skipping crap %r' % voteline)\n\t\t\t\tcontinue\n\t\t\tuser = m.group('user')\n\n\t\t\tyield Vote(commit=commit_id, user=user)\n\n\ndef print_list(args):\n\tall_votes = get_all_votes(args.repo_dir)\n\tall_votes_sorted = sorted(all_votes, key=lambda v: (v.commit, v.user))\n\tfor v in all_votes_sorted:\n\t\tprint('%s: +1 from %s' % (v.commit, v.user))\n\n\ndef tally(all_votes):\n\t\"\"\" Returns a dict commit id => set of users \"\"\"\n\tres = collections.defaultdict(set)\n\tfor v in all_votes:\n\t\tres[v.commit].add(v.user)\n\treturn res\n\n\ndef print_tally(args):\n\tall_votes = get_all_votes(args.repo_dir)\n\tfor commit, votes in sorted(tally(all_votes).items(), key=lambda kv: (kv[1], kv[0])):\n\t\tprint('%s: %d votes' % (commit, len(votes)))\n\n\ndef print_elect(args):\n\tall_votes = get_all_votes(args.repo_dir)\n\twinner_vcount, winner_commit = max((len(votes), commit) for commit, votes in tally(all_votes).items())\n\t# TODO more algorithms\n\tprint('%s won the election with %d votes' % (winner_commit, winner_vcount))\n\n\ndef main():\n\tparser = argparse.ArgumentParser('Vote on git commands')\n\tparser.add_argument('-r', '--repo-dir', metavar='DIR', help='root directory of the repository to modify')\n\tsubparsers = parser.add_subparsers(dest='cmd')\n\tvote_parser = subparsers.add_parser('vote',", "predict": "on the tally."}
{"prompt": "Write a Python function to calculate the product of elements in a list.\n[1, 2, 3, 4] ", "label": "def product(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product\n\nproduct([1, 2, 3, 4])", "predict": "def product_list(lst):\n    product = 1\n    for item in lst:\n        product *= item\n    return product\n\nprint(product_list([1, 2, 3, 4]))"}
{"prompt": "Design an interface for a Python program that parses HTML documents.\nNot applicable ", "label": "from bs4 import BeautifulSoup\n\n\nclass HTMLParser:\n    def __init__(self, html_doc):\n        self.html_doc = html_doc\n\n    def parse(self):\n        soup = BeautifulSoup(self.html_doc, 'html.parser')\n        return soup", "predict": "class HTMLParser:\n def __init__(self):\n self.data = []\n\n def parse(self, html_doc):\n # parse the html document\n # and store the data in self.data\n pass\n\n def get_data(self):\n return self.data"}
{"prompt": "Convert a given code snippet from Swift to Python.\nlet username = \"John\"\nlet score = 123 ", "label": "username = \"John\"\nscore = 123", "predict": "username = \"John\"\nscore = 123"}
{"prompt": "Create a Python script to optimize search engine queries. ", "label": "import requests\nfrom bs4 import BeautifulSoup\n\ndef get_keywords_from_page(url):\n    headers = {\n        'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36'\n    }\n\n    response = requests.get(url, headers = headers)\n    soup = BeautifulSoup(response.content, 'html.parser')\n    keywords = soup.find('meta', attrs={'name':'keywords'})\n    if keywords:\n        return keywords['content']\n    else:\n        return \"\"\n\n# Optimize search queries by finding keywords from a given website\ndef optimize_query(url):\n    keywords = get_keywords_from_page(url)\n    if keywords:\n        return keywords\n    else:\n        return url", "predict": "import re\n\ndef optimize_query(query):\n    query = query.lower()\n    query = re.sub(r'\\s+','', query)\n    query = query.strip()\n    return query"}
{"prompt": "Compile a function to calculate the difference of two date objects in Python. ", "label": "import datetime\n\ndef date_diff(date1, date2):\n    \"\"\"Returns the difference between two date objects in days\"\"\"\n    diff_date = date2 - date1\n    return diff_date.days", "predict": "def diff_dates(date1, date2):\n    return abs((date2 - date1).days)"}
{"prompt": "Design an algorithm in Python that takes in a list of numbers and prints out the first and last element in the list.\nlst=[5,3,1,7,9] ", "label": "def first_last(lst):\n    first_element = lst[0]\n    last_element = lst[-1]\n    return [first_element, last_element]\n\nprint(first_last([5,3,1,7,9]))", "predict": "def first_last(lst):\n    print(lst[0], lst[-1])\n\nlst = [5,3,1,7,9]\nfirst_last(lst)"}
{"prompt": "Design a Python class to store customer purchase histories. ", "label": "class CustomerHistory:\n  def __init__(self, customer_id):\n    self.customer_id = customer_id\n    self.purchase_history = []\n\n  def add_purchase(self, product):\n    self.purchase_history.append(product)\n\n  def get_purchase_history(self):\n    return self.purchase_history", "predict": "class PurchaseHistory:\n    def __init__(self):\n        self.purchase_history = []\n    \n    def add_purchase(self, purchase):\n        self.purchase_history.append(purchase)\n    \n    def get_purchase_history(self):\n        return self.purchase_history"}
{"prompt": "Create a python script that can find the longest common substring between two strings.\nFIRST STRING = “abcdaf”\nSECOND STRING = “zbcdf” ", "label": "def lcs(X , Y): \n    # find the length of the strings \n    m = len(X) \n    n = len(Y) \n  \n    # declaring the array for storing the dp values \n    L = [[None]*(n+1) for i in range(m+1)] \n  \n    \"\"\"Following steps build L[m+1][n+1] in bottom up fashion \n    Note: L[i][j] contains length of LCS of X[0..i-1] \n    and Y[0..j-1]\"\"\"\n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0 or j == 0 : \n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]: \n                L[i][j] = L[i-1][j-1]+1\n            else: \n                L[i][j] = max(L[i-1][j] , L[i][j-1]) \n  \n    # L[m][n] contains the length of LCS of X[0..n-1] & Y[0..m-1] \n    return L[m][n] \n  \n# Driver program to test the above function \nX = \"abcdaf\"\nY = \"zbcdf\"\n\nprint(\"The length of LCS is \", lcs(X, Y))", "predict": "def longest_common_substring(s1, s2):\n    max_len = 0\n    longest_substr = \"\"\n    for i in range(len(s1)):\n        for j in range(len(s2)):\n            k = 0\n            while i + k < len(s1) and j + k < len(s2) and s1[i + k] == s2[j + k]:\n                k += 1\n            if k > max_len:\n                max_len = k\n                longest_substr = s1[i:i + k]\n    return longest_substr\n\ns1 = \"abcdaf\"\ns2 = \"zbcdf\"\n\nresult = longest_common_substring(s1, s2)\nprint(result)"}
{"prompt": "Design a neural network model in Python for text classification. ", "label": "from keras.models import Sequential\nfrom keras.layers import Dense, Embedding, LSTM, SpatialDropout1D\n\nmodel = Sequential()\nmodel.add(Embedding(input_dim=1000, output_dim=64, input_length=50))\nmodel.add(SpatialDropout1D(0.2))\nmodel.add(LSTM(128, dropout=0.2, recurrent_dropout=0.2))\nmodel.add(Dense(2, activation=\"softmax\"))\n\nmodel.compile(loss=\"categorical_crossentropy\", optimizer=\"adam\", metrics=[\"accuracy\"])", "predict": "import numpy as np\nimport tensorflow as tf\n\n# define the model\nmodel = tf.keras.Sequential()\nmodel.add(tf.keras.layers.Embedding(vocab_size, embedding_dim, input_length=max_length))\nmodel.add(tf.keras.layers.Flatten())\nmodel.add(tf.keras.layers.Dense(128, activation='relu'))\nmodel.add(tf.keras.layers.Dense(num_classes, activation='softmax'))\n\n# compile the model\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])"}
{"prompt": "Create a function in Python to perform a binary search on a sorted array.\nA sorted array arr = [1, 3, 5, 7, 8, 9, 12] ", "label": "def binary_search(arr, target):\n  start = 0\n  end = len(arr) -1\n  while start <= end:\n    mid = (start + end) // 2\n    if arr[mid] == target:\n      return mid\n    elif arr[mid] > target:\n      end = mid - 1\n    else:\n      start = mid + 1\n  return -1", "predict": "def binary_search(arr, target):\n  start = 0\n  end = len(arr) - 1\n  while start <= end:\n    mid = (start + end) // 2\n    if arr[mid] == target:\n      return mid\n    elif arr[mid] < target:\n      start = mid + 1\n    else:\n      end = mid - 1\n  return -1"}
{"prompt": "Construct a Python function to insert a node at the head of a given linked list.\nNot applicable ", "label": "class Node:\n def __init__(self, data):\n  self.data = data\n  self.next = None\n\nclass LinkedList:\n def __init__(self):\n  self.head = None\n  \n # Recursive function to insert a node at the beginning of the linked list \n def insert_at_head(self, new_node): \n  current_head = self.head \n  new_node.next = current_head\n  self.head = new_node\n\nlist = LinkedList()\nlist.insert_at_head(Node(1))", "predict": "class Node: \n def __init__(self, data): \n  self.data = data \n  self.next = None\n\nclass LinkedList: \n def __init__(self): \n  self.head = None\n  \n def insertAtHead(self, data): \n  newNode = Node(data) \n  newNode.next = self.head \n  self.head = newNode \n  \n def printList(self): \n  node = self.head \n  while node: \n   print(node.data) \n   node = node.next\n\n# Create a linked list \nlist = LinkedList() \nlist.insertAtHead(1) \nlist.insertAtHead(2) \nlist.insertAtHead(3) \n\n# Print the linked list \nlist.printList()"}
{"prompt": "Write a Python program to find the minimum number of coins that sum up to a given amount. ", "label": "def find_min_coins(amount, denominations):\n    min_coins = [float(\"inf\")] * (amount + 1)\n    min_coins[0] = 0\n\n    for i in range(1, amount + 1):\n        for c in denominations:\n            if i - c >= 0:\n                min_coins[i] = min(min_coins[i - c] + 1, min_coins[i])\n\n    return min_coins[amount]", "predict": "def min_coins(amount, coins):\n    min_coins = [0] * (amount + 1)\n    min_coins[0] = 0\n\n    for i in range(1, amount + 1):\n        min_coins[i] = float('inf')\n        for coin in coins:\n            if i - coin >= 0:\n                min_coins[i] = min(min_coins[i], min_coins[i - coin] + 1)\n\n    return min_coins[amount]"}
{"prompt": "Create a program in Python for performing a linear search on a given list.\n[1, 2, 3, 4, 5, 6], 5 ", "label": "def linear_search(list, n): \n  \n    for i in range(len(list)): \n  \n        if list[i] == n: \n            return i \n\nlist = [1, 2, 3, 4, 5, 6] \nn = 5\n\nx = linear_search(list, n) \n\nif x == None: \n    print(\"Element is not present in the list\") \nelse: \n    print(\"Element is present at index\", x)", "predict": "def linear_search(arr, key):\n    for i in range(len(arr)):\n        if arr[i] == key:\n            return i\n    return -1\n\narr = [1, 2, 3, 4, 5, 6]\nkey = 5\n\nresult = linear_search(arr, key)\n\nif result == -1:\n    print(\"Element not found\")\nelse:\n    print(\"Element found at index\", result)"}
{"prompt": "Create an algorithm to replace all the vowels in a string with the character '$'.\nPython ", "label": "def replace_vowels(s): \n    # Initialize an empty string \n    new_s = '' \n  \n    # Iterate through each character\n    for ch in s: \n        # Check if the character is a vowel \n        if (ch == 'a' or ch == 'e' or ch == 'i' \n            or ch == 'o' or ch == 'u'): \n            # Replace it with '$'\n            new_s = new_s + '$' \n        else: \n            # Copy the same character \n            new_s = new_s + ch \n\n    return new_s \n\n\nstr = 'Python'\nresult = replace_vowels(str)\nprint(result)", "predict": "def replace_vowels(string):\n    vowels = ('a', 'e', 'i', 'o', 'u')\n    for x in string.lower():\n        if x in vowels:\n            string = string.replace(x, '$')\n    return string"}
{"prompt": "Write a Python program to calculate the sum of two numbers (input in separate lines) and print it.\n2\n3 ", "label": "num1 = int(input())\nnum2 = int(input())\nsum_of_nums\nprint(sum_of_nums)", "predict": "num1 = int(input())\nnum2 = int(input())\n\nsum = num1 + num2\n\nprint(sum)"}
{"prompt": "Using the given data, create a class in Python and add some methods to the class.\nclass File:\n    def __init__(self, name, size, type):\n        self.name = name\n        self.size = size\n        self.type = type ", "label": "class File:\n    \"\"\"A simple file class\"\"\"\n    def __init__(self, name, size, type):\n        self.name = name\n        self.size = size\n        self.type = type\n\n    def get_name(self):\n        return self.name\n\n    def get_size(self):\n        return self.size\n\n    def get_type(self):\n        return self.type", "predict": "class File:\n    def __init__(self, name, size, type):\n        self.name = name\n        self.size = size\n        self.type = type\n    \n    def get_name(self):\n        return self.name\n    \n    def get_size(self):\n        return self.size\n    \n    def get_type(self):\n        return self.type\n    \n    def set_name(self, name):\n        self.name = name\n    \n    def set_size(self, size):\n        self.size = size\n    \n    def set_type(self, type):\n        self.type = type"}
{"prompt": "Can you convert a given HTML page into PDF using Python? ", "label": "from xhtml2pdf import pisa\n \n# open the page\nwith open('input.html', 'r') as f:\n    html = f.read()\n \n# convert to PDF\npdf = pisa.CreatePDF(html, open('output.pdf', 'wb'))\n \n# print the result\nif not pdf.err:\n    print('PDF created successfully')\nelse:\n    print('Error creating PDF')", "predict": "import os\nfrom reportlab.pdfgen import canvas\nfrom reportlab.lib.pagesizes import letter\n\ndef convert_html_to_pdf(html_path):\n    \"\"\"\n    Function to convert a given HTML page into PDF using Python.\n    \n    Parameters:\n    html_path (str): The path of the HTML file to be converted\n    \n    Returns:\n    None\n    \"\"\"\n\n    # Create a PDF file\n    pdf_file = os.path.splitext(html_path)[0] + \".pdf\"\n    pdf = canvas.Canvas(pdf_file, pagesize=letter)\n\n    # Read HTML file\n    with open(html_path, 'r') as f:\n        html = f.read()\n\n    # Generate PDF\n    pdf.drawString(50, 750, html)\n    pdf.save()"}
{"prompt": "Generate a password strength checker in Python that follows the NIST guidelines. ", "label": "import re\n\ndef check_password_strength(password):\n    '''This function checks if the given password is strong according to NIST guidelines'''\n    # check if password is atleast 8 characters long\n    if len(password) < 8:\n        return False\n    \n    # check if password contains atleast one lowercase letter\n    if not re.search('[a-z]', password):\n        return False\n    \n    # check if password contains atleast one uppercase letter\n    if not re.search('[A-Z]', password):\n        return False\n    \n    # check if password contains atleast one number\n    if not re.search('[0-9]', password):\n        return False\n    \n    return True", "predict": "import string\n\ndef password_strength(password):\n    lowercase = 0\n    uppercase = 0\n    digits = 0\n    special_characters = 0\n    strength = 0\n\n    for character in password:\n        if character.islower():\n            lowercase += 1\n        elif character.isupper():\n            uppercase += 1\n        elif character.isdigit():\n            digits += 1\n        else:\n            special_characters += 1\n\n    strength = lowercase + uppercase + digits + special_characters\n\n    if strength < 3:\n        return \"Very weak\"\n    elif strength < 6:\n        return \"Weak\"\n    elif strength < 9:\n        return \"Moderate\"\n    elif strength < 12:\n        return \"Strong\"\n    else:\n        return \"Very strong\""}
{"prompt": "Create two functions in Python to capitalize and uncapitalize each character of a string.\nstring = 'hello world' ", "label": "def capitalize_each_character(string):\n  result = ''\n  for char in string:\n    result += char.capitalize()\n  return result\n\ndef uncapitalize_each_character(string):\n  result = ''\n  for char in string:\n    result += char.lower()\n  return result", "predict": "def capitalize_each_char(string):\n    result = \"\"\n    for char in string:\n        result += char.capitalize()\n    return result\n\ndef uncapitalize_each_char(string):\n    result = \"\"\n    for char in string:\n        result += char.lower()\n    return result"}
{"prompt": "Generate a script in Python that can make a given webpage mobile-friendly. ", "label": "import bs4\nfrom urllib.request import urlopen\n\ndef make_webpage_mobile_friendly(url):\n    html = urlopen(url)\n    soup = bs4.BeautifulSoup(html, 'html.parser')\n    head_html = soup.find('head')\n    meta_attribute = {'name': 'viewport', 'content': 'width=device-width, initial-scale=1'}\n    meta_tag = soup.new_tag('meta', attrs=meta_attribute)\n    head_html.append(meta_tag)\n    html_body = soup.find('body')\n    for element in html_body.find_all('div', {'class': 'large-wrapper'}):\n        element['style'] = 'max-width:100% !important'\n        element['width'] = '100% !important'\n    for element in html_body.find_all('img'):\n        element['style'] = 'max-width:100% !important'\n        element['width'] = '100% !important'\n\n    return soup.prettify()", "predict": "import lxml.html as lh\nfrom lxml import etree\n\ndef make_mobile_friendly(url):\n    page = requests.get(url)\n    root = lh.fromstring(page.content)\n    for element in root.cssselect(\"*\"):\n        if element.tag in [\"img\", \"video\", \"audio\"]:\n            element.attrib[\"width\"] = \"100%\"\n            element.attrib[\"height\"] = \"auto\"\n    return etree.tostring(root, pretty_print=True)"}
{"prompt": "Write a function to implement Bubble Sort in Python. ", "label": "def bubbleSort(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n-1): \n    # range(n) also work but outer loop will repeat one time more than needed. \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]", "predict": "def bubble_sort(arr): \n    n = len(arr) \n    for i in range(n): \n        for j in range(0, n-i-1): \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]"}
{"prompt": "Write a Python program to filter a list of strings so that strings containingthe substring \"bad\" are removed.\nlist_of_string = [\"good\",\"bad\",\"weird\",\"great\",\"amazing\"] ", "label": "list_of_string = [\"good\",\"weird\",\"great\",\"amazing\"]\n\nfiltered_list = [s for s in list_of_string if \"bad\" not in s]\n\nprint(filtered_list)", "predict": "def filter_bad(list_of_strings):\n    return [string for string in list_of_strings if \"bad\" not in string]"}
{"prompt": "Write a python program to add two matrices.\nX = [[1, 2, 3], \n    [3, 4, 5], \n    [6, 7, 8]]\nY = [[2, 3, 4],\n    [5, 6, 7],\n    [8, 9, 10]] ", "label": "def add_matrices(X, Y): \n  \n    result = [[0, 0, 0], \n            [0, 0, 0], \n            [0, 0, 0]] \n  \n    # iterate through rows \n    for i in range(len(X)): \n      \n        # iterate through columns \n        for j in range(len(X[0])): \n            result[i][j] = X[i][j] + Y[i][j] \n  \n    for r in result: \n        print(r)", "predict": "def add_matrices(X, Y):\n    result = [[0, 0, 0],\n    [0, 0, 0],\n    [0, 0, 0]]\n    for i in range(len(X)):\n        for j in range(len(X[0])):\n            result[i][j] = X[i][j] + Y[i][j]\n    return result"}
{"prompt": "Given a multi-dimensional array, write a python code snippet to find the sum of its elements.\narr = [[1, 4, 7], [2, 6, 3], [3, 5, 9]] ", "label": "# Use nested list comprehension to calculate the sum \ntotal_sum = sum([sum(row) for row in arr])", "predict": "def find_sum(arr):\n    total = 0\n    for sublist in arr:\n        for num in sublist:\n            total += num\n    return total\n\narr = [[1, 4, 7], [2, 6, 3], [3, 5, 9]]\n\ntotal = find_sum(arr)\nprint(total)"}
{"prompt": "Given the following Python code, determine how many lines of code are in the code.\ndef foo(x):\n    y = x/2\n    z = x/3\n    return x+y-z ", "label": "4", "predict": "4"}
{"prompt": "Create a program in Python that takes an integer n as input and prints out n lines of \"Hello World!\"\n5 ", "label": "def hello_world_lines(n):\n    for i in range(n):\n        print(\"Hello World!\")", "predict": "n = int(input())\n\nfor i in range(n):\n    print(\"Hello World!\")"}
{"prompt": "Write a code to define a class object in Python. ", "label": "class Object:\n  def __init__(self,attr1,attr2,attr3):\n    self.attr1 = attr1\n    self.attr2 = attr2\n    self.attr3 = attr3", "predict": "class Object:\n    def __init__(self, properties):\n        self.properties = properties"}
{"prompt": "Develop a Python program to remove all characters from an input string that are not a-z, A-Z, 0-9, or white space.\n\"Hello,@ $World.\" ", "label": "import re\n\ndef remove_non_alphanum(s):\n  return re.sub('[^a-zA-Z0-9 \\n\\.]', '', s)\n\nstring = \"Hello,@ $World.\"\nres = remove_non_alphanum(string) \n\nprint(res)", "predict": "import re\n\nstring = \"Hello,@ $World.\"\nnew_string = re.sub(r'[^a-zA-Z0-9\\s]', '', string)\n\nprint(new_string)"}
{"prompt": "Create a Python application for running a text-based adventure game. The application should support user input and provide a textual feedback for each action.\nNot applicable ", "label": "import random\nimport os\n\n# define the characters\nvillain = { \"name\": \"Evil Wizard\", \"hp\": 100 }\nhero = { \"name\": \"Hero\", \"hp\": 100 }\n\ndef fight_evil_wizard():\n    print(\"You attack the Evil Wizard!\")\n    # randomly choose to either hit or miss the target\n    is_hit = random.choice([True, False])\n    if is_hit:\n        print(\"You hit the Evil Wizard!\")\n        villain[\"hp\"] -= 10\n    else:\n        print(\"You missed!\")\n    # print out the hp of each character \n    print(\"Your HP: {}\".format(hero[\"hp\"]))\n    print(\"Evil Wizard HP: {}\".format(villain[\"hp\"]))\n\ndef manage_hp(target, value):\n    target[\"hp\"] += value\n    print(\"Your HP: {}\".format(hero[\"hp\"]))\n    print(\"Evil Wizard HP: {}\".format(villain[\"hp\"]))\n\nwhile True:\n    os.system(\"cls\")  # clear the terminal output\n    # check if either character is alive\n    if hero[\"hp\"] <= 0:\n        print(\"You have been defeated!\")\n        break\n    if villain[\"hp\"] <= 0:\n        print(\"You have slain the Evil Wizard!\")\n        # you won!\n        break\n\n    # show the user the options\n    print(\"What would you like to do?\")\n    print(\"1. Fight Evil Wizard\")\n    print(\"2. Heal (HP +10)\")\n    print(\"3. Run away\")\n    user_input = int(input(\">> \"))\n\n    if user_input == 1:\n        fight_evil_wizard()\n    elif user_input == 2:\n        manage_hp(hero, 10)\n    elif user_input == 3:\n        print(\"You run away from the Evil Wizard!\")\n        break\n    else:\n        print(\"Invalid input!\")", "predict": "import random\n\n# Function to generate a random room\ndef generate_room():\n    room = {\n        \"description\": \"A dimly lit room with a single door leading in.\",\n        \"exits\": [],\n        \"items\": []\n    }\n    for i in range(3):\n        room[\"exits\"].append({\n            \"direction\": random.choice([\"north\", \"south\", \"east\", \"west\"]),\n            \"description\": random.choice([\"A dark tunnel\", \"A narrow passage\", \"A winding path\"]),\n        })\n        room[\"items\"].append(random.choice([\"a rusty sword\", \"a shiny gold coin\", \"a dusty scroll\"]))\n    return room\n\n# Function to print out the current room\ndef print_room(room):\n    print(\"You are in \" + room[\"description\"])\n    for exit in room[\"exits\"]:\n        print(\"Exits: \" + exit[\"direction\"] + \": \" + exit[\"description\"])\n    for item in room[\"items\"]:\n        print(\"Items: \" + item)\n\n# Function to prompt the user for input\ndef get_input():\n    user_input = input(\"What would you like to do? \")\n    return user_input\n\n# Function to handle user input\ndef handle_input(user_input, room):\n    if user_input == \"go north\":\n        for exit in room[\"exits\"]:\n            if exit[\"direction\"] == \"north\":\n                print_room(exit[\"description\"])\n    elif user_input == \"go south\":\n        for exit in room[\"exits\"]:\n            if exit[\"direction\"] == \"south\":\n                print_room(exit[\"description\"])\n    elif user_input == \"go east\":\n        for exit in room[\"exits\"]:\n            if exit[\"direction\"] == \"east\":\n                print_room(exit[\"description\"])\n    elif user_input == \"go west\":\n        for exit in room[\"exits\"]:\n            if exit[\"direction\"] == \"west\":\n                print_room(exit[\"description\"])\n    else:\n        print(\"I don't understand. Please try again.\")\n\n# Main function\ndef main():\n    room ="}
{"prompt": "Create a Python program prompt the user for two numbers and compute the product of these two numbers using recursive and non-recursive algorithms. ", "label": "# Non-recursive algorithm\nnum_1 = int(input('Please enter the first number: '))\nnum_2 = int(input('Please enter the second number: '))\n\ndef prod_non_recursive(num_1, num_2):\n    product = 1\n    while num_2 > 0:\n        product = product * num_1\n        num_2 = num_2 - 1\n    return product\n\nproduct_non_recursive = prod_non_recursive(num_1, num_2)\nprint('The product of {} and {} is {}.'.format(num_1, num_2, product_non_recursive))\n\n\n# Recursive algorithm\ndef prod_recursive(num_1, num_2):\n    if num_2 == 0:\n        return 1\n    else:\n        return num_1 * prod_recursive(num_1, num_2 - 1)\n\nproduct_recursive = prod_recursive(num_1, num_2)\nprint('The product of {} and {} is {}.'.format(num_1, num_2, product_recursive))", "predict": "def recursive_product(a, b):\n    if b == 0:\n        return 0\n    else:\n        return a + recursive_product(a, b-1)\n\ndef non_recursive_product(a, b):\n    product = 0\n    while b > 0:\n        product += a\n        b -= 1\n    return product\n\na = int(input(\"Enter the first number: \"))\nb = int(input(\"Enter the second number: \"))\n\nprint(\"The product of the two numbers is {}\".format(recursive_product(a, b)))\nprint(\"The product of the two numbers is {}\".format(non_recursive_product(a, b)))"}
{"prompt": "Construct a SQL query to find all the authors whose book titles contain \"python\" in a given database. ", "label": "SELECT author \nFROM books \nWHERE title LIKE '%python%';", "predict": "SELECT author \nFROM books \nWHERE title LIKE '%python%';"}
{"prompt": "Build a function in Python to test whether a string is a palindrome.\n\"aba\" ", "label": "def is_palindrome(s): \n    # Reverse the string \n    rev = s[::-1] \n  \n    # Check if the string is equal to its reverse \n    if (s == rev): \n        return True\n    return False\n  \n# Driver code \ns = \"aba\"\nans = is_palindrome(s) \n  \nif ans == 1: \n    print(\"Yes\") \nelse: \n    print(\"No\")", "predict": "def is_palindrome(s):\n    return s == s[::-1]\n\nprint(is_palindrome(\"aba\"))"}
{"prompt": "Write a python program to search through a list of integers and find the smallest number.\nint_list = [25, 64, 11, 43, 7] ", "label": "def find_smallest(int_list):\n    # set the minimum value to the first item in the list initially\n    min_val = int_list[0]\n    # loop over the list and compare each item to the minimum value\n    for num in int_list:\n        if num < min_val:\n            min_val = num\n    # return the minimum value\n    return min_val", "predict": "def find_smallest_number(int_list):\n    smallest = int_list[0]\n    for num in int_list:\n        if num < smallest:\n            smallest = num\n    return smallest"}
{"prompt": "Create a Python function that takes two strings as input and returns the total of the lengths of the two strings.\nstring1 = \"example\"\nstring2 = \"string\" ", "label": "def string_length_sum(string1, string2):\n    return len(string1) + len(string2)\n\nresult = string_length_sum(string1, string2)", "predict": "def string_length_total(string1, string2):\n    return len(string1) + len(string2)"}
{"prompt": "Write a Python program to create a Tic T", "label": "\"\"\"\nWrite a Python program to create a Tic Tac Toe game\n\"\"\"\n\n# global variables \nboard = [\"-\", \"-\", \"-\", \n         \"-\", \"-\", \"-\", \n         \"-\", \"-\", \"-\"] \ngame_is_still_going = True \n  \n# who is the winner \nwinner = None\n  \n # whose turn is it \ncurrent_player = \"X\"\n\n\n# display board\ndef display_board(): \n    print(board[0] + \" | \" + board[1] + \" | \" + board[2])\n    print(board[3] + \" | \" + board[4] + \" | \" + board[5]) \n    print(board[6] + \" | \" + board[7] + \" | \" + board[8])\n  \n  \n# play a game of tic tac toe \ndef play_game(): \n    \n    # display initial board \n    display_board() \n  \n    # while game is still going \n    while game_is_still_going: \n  \n        # assign handle turn to a variable \n        handle_turn(current_player) \n  \n        # check if game is finished \n        check_if_game_over()\n  \n        # flip to another player \n        flip_player() \n          \n    # check if winner  \n    if winner == \"X\" or winner == \"O\": \n        print(\"Winner is: \" + winner) \n    elif winner == None: \n        print(\"Tie.\") \n\n# handle a single turn of a player \ndef handle_turn(player): \n  \n    position = input(\"Choose a position from 1-9: \") \n    position = int(position) - 1\n  \n    board[position] = player \n  \n    display_board() \n  \n  \n# check win\ndef check_if_game_over(): \n    check_if_win() \n    check_if_tie() \n  \n# check rows, columns and diagonals for a win \ndef check_if_win(): \n    # set global variables \n    global winner \n    # check rows \n    row_winner = check_rows() \n    # check columns \n    column_winner = check_columns() \n    # check diagonals \n    diagonal_winner = check_diagonals() \n    if row_winner: \n        # there is a win \n        winner = row_winner \n    elif column_winner: \n        # there is a win \n        winner = column_winner \n    elif diagonal_winner: \n        # there is a win \n        winner = diagonal_winner \n    else: \n        # there is no win \n        winner = None\n    return \n  \n# check rows for a win \ndef check_rows(): \n    # set global varibales \n    global game_is_still_going \n    # check if any of the rows have all the same values (and is not empty) \n    row_1 = board[0] == board[1] == board[2] != \"-\" \n    row_2 = board[3] == board[4] == board[5] != \"-\" \n    row_3 = board[6] == board[7] == board[8] != \"-\" \n    # if any row does have a match, flag that there is a win \n    if row_1 or row_2 or row_3: \n        game_is_still_going = False \n    # return the winner (X or O) \n    if row_1: \n        return board[0] \n    elif row_2: \n        return board[3] \n    elif row_3: \n        return board[6] \n    # or return None if there was no win \n    else: \n        return None\n  \n# check columns for a win \ndef check_columns(): \n    # set global variables \n    global game_is_still_going \n    # check if any of the columns have all the same values (and is not empty) \n    column_1 = board[0] == board[3] == board[6] != \"-\" \n    column", "predict": "ac Toe game.\n\n# This code is a simple implementation of the Tic Tac Toe game in Python.\n\n# A 2D list to represent the board\nboard = [['_', '_', '_'],\n         ['_', '_', '_'],\n         ['_', '_', '_']]\n\n# A function to draw the board\ndef draw_board():\n    for row in board:\n        print('|'.join(row))\n\n# A function to check if the game is over\ndef is_game_over():\n    # Check if any of the rows or columns are full\n    for row in board:\n        if row[0]!= '_' and row[0] == row[1] and row[1] == row[2]:\n            return True\n    for col in range(3):\n        if board[0][col]!= '_' and board[0][col] == board[1][col] and board[1][col] == board[2][col]:\n            return True\n    # Check the diagonals\n    if board[0][0]!= '_' and board[0][0] == board[1][1] and board[1][1] == board[2][2]:\n        return True\n    if board[0][2]!= '_' and board[0][2] == board[1][1] and board[1][1] == board[2][0]:\n        return True\n    # If the board is full and no one has won\n    if 'X' in board[0] and 'O' in board[1] and 'X' in board[2]:\n        return True\n    return False\n\n# A function to make a move\ndef make_move(player, row, col):\n    if board[row][col] == '_':\n        board[row][col] = player\n        return True\n    return False\n\n# A function to check if the player has won\ndef check_win(player):\n    # Check the rows\n    for row in board:\n        if row[0] == player and row[1] == player and row[2] == player:\n            return True\n    # Check the columns\n    for col in range(3):\n        if board[0][col] == player and"}
{"prompt": "Write a Python program to remove all duplicate items from a list.\n[1, 2, 2, 4, 5] ", "label": "def remove_duplicates(lst): \n\treturn list(dict.fromkeys(lst)) \n\nresult = remove_duplicates([1, 2, 2, 4, 5]) \nprint(result)", "predict": "def remove_duplicates(list):\n  return list(dict.fromkeys(list))\n\nresult = remove_duplicates([1, 2, 2, 4, 5])\nprint(result)"}
{"prompt": "Given a string as an argument, write a Python function to find the longest palindrome in the string. ", "label": "def longest_palindrome(s):  \n    longest_p = 0\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            if s[i:j] == s[j-1::-1] and len(s[i:j]) > longest_p:\n                longest_p = len(s[i:j])\n    return longest_p", "predict": "def longest_palindrome(s):\n    max_length = 0\n    start = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if s[i:j+1] == s[j:i:-1]:\n                if len(s[i:j+1]) > max_length:\n                    max_length = len(s[i:j+1])\n                    start = i\n    return s[start:start + max_length]"}
{"prompt": "Optimize a given Python code to find all prime numbers up to a given limit.\nn = 10\nfor num in range(2, n+1): \n\tfor i in range(2, num): \n\t\tif num % i == 0: \n\t\t\tbreak\n\telse: \n\t\tprint(num, end = ' ') ", "label": "# Optimized Python code to find prime numbers in a range\n# using primality tests\n\ndef is_prime(num):\n    if num <= 1:\n        return False\n\n    for i in range(2, num):\n        if (num % i) == 0:\n            return False\n\n    return True\n\n\n# Generate a range of consecutive numbers \n# and check for each if it is prime\ndef prime_numbers(n):\n    for num in range(2, n+1):\n        if is_prime(num):\n            print(num, end=' ')\n\n\n# Driver code\nif __name__ == '__main__':\n    n = 10\n    prime_numbers(n)", "predict": "n = 10\n\nfor num in range(2, n+1):\n\tif all(num % i!= 0 for i in range(2, num)):\n\t\tprint(num, end ='')"}
{"prompt": "Write a Python code to find the second most frequent value in the given array.\n[1, 2, 3, 3, 3, 2, 4, 4, 1, 5] ", "label": "def second_most_frequent(arr):\n counts = {}\n # Count the frequency of the elements\n for item in arr:\n if item in counts:\n counts[item] += 1\n else:\n counts[item] = 1\n # Sort the list by frequency\n sorted_count = sorted(counts.items(), key=lambda x: x[1], reverse=True)\n # Return the second most frequent element\n return sorted_count[1][0]\n \nprint(second_most_frequent([1, 2, 3, 3, 3, 2, 4, 4, 1, 5]))", "predict": "from collections import Counter\n\ndef second_most_frequent(arr):\n    arr_count = Counter(arr)\n    max_count = max(arr_count.values())\n    second_max_count = 0\n    second_most_frequent = None\n    for item in arr_count:\n        if arr_count[item] == max_count:\n            if second_max_count < arr_count[item]:\n                second_most_frequent = item\n                second_max_count = arr_count[item]\n    return second_most_frequent\n\narr = [1, 2, 3, 3, 3, 2, 4, 4, 1, 5]\nresult = second_most_frequent(arr)\nprint(result)"}
{"prompt": "Optimize the following python code array to get the maximum value from it in one pass.\n[-5, 2, 3, 4, 6, -8] ", "label": "def find_max(arr):\n  max_so_far = arr[0]\n  current_max = arr[0]\n  \n  for i in range(1, len(arr)):\n    current_max = max(arr[i], current_max + arr[i])\n    max_so_far = max(max_so_far, current_max)\n  \n  return max_so_far\n\narr = [-5, 2, 3, 4, 6, -8]\nmax_val = find_max(arr)\n\nprint(max_val) # 10", "predict": "def max_val(arr):\n    max_val = arr[0]\n    for num in arr[1:]:\n        if num > max_val:\n            max_val = num\n    return max_val\n\nprint(max_val([-5, 2, 3, 4, 6, -8]))"}
{"prompt": "Write a python program to print the least common multiple of two integers\n6, 8 ", "label": "def lcm(x, y):\n  if x > y:\n    greater = x\n  else:\n    greater = y\n  while(True):\n    if((greater % x == 0) and (greater % y == 0)):\n      lcm = greater\n      break\n    greater += 1\n  return lcm", "predict": "def lcm(a, b):\n    if a > b:\n        greater = a\n    else:\n        greater = b\n\n    while(True):\n        if((greater % a == 0) and (greater % b == 0)):\n            lcm = greater\n            break\n        greater += 1\n\n    return lcm\n\nprint(lcm(6, 8))"}
{"prompt": "Create a Python program to edit a string and remove the vowels from it.\nHello world ", "label": "def remove_vowels(string):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for character in string: \n        if character not in vowels: \n            result += character\n    return result\n  \nprint (remove_vowels(\"Hello world\"))", "predict": "def remove_vowels(string):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    new_string = \"\"\n    for char in string:\n        if char.lower() not in vowels:\n            new_string += char\n    return new_string\n\nresult = remove_vowels(\"Hello world\")\nprint(result)"}
{"prompt": "Create a Python class for a rectangle with properties for the length and width and methods for finding the area and perimeter.\nNo Input ", "label": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n    def area(self):\n        return self.length * self.width\n    def perimeter(self):\n        return (2 * self.length) + (2 * self.width)", "predict": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n    \n    def area(self):\n        return self.length * self.width\n    \n    def perimeter(self):\n        return 2 * (self.length + self.width)"}
{"prompt": "Optimize a given code in Python to run faster.\ndef factorial(n):\n    fact = 1\n    while n > 0:\n        fact *= n\n        n -= 1\n    return fact ", "label": "def factorial(n):\n    fact = 1\n    while n > 1:\n        fact *= n\n        n -= 1\n    return fact\n\n# Eliminated unnecessary check for n > 0, as n will always be greater than 0 before the loop begins. This makes the function run faster.", "predict": "def factorial(n):\n    fact = 1\n    while n > 1:\n        fact *= n\n        n -= 1\n    return fact"}
{"prompt": "Convert the given JSON object to a Python list.\n{\"name\": \"John\", \"age\": 25, \"hobby\": \"programming\"} ", "label": "data = {\"name\": \"John\", \"age\": 25, \"hobby\": \"programming\"}\n\nlist = list(data.values())\n \nprint(list)\n# Output: [\"John\", 25, \"programming\"]", "predict": "import json\n\ndata = {\"name\": \"John\", \"age\": 25, \"hobby\": \"programming\"}\nlist_data = list(data.values())\n\nprint(list_data)"}
{"prompt": "Train a linear regression model using Python to predict the prices of houses. ", "label": "import pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\n#load dataset\ndf = pd.read_csv(\"housing_data.csv\")\n\n#split dataset\nX = df.drop(\"price\", axis=1)\ny = df[\"price\"]\n\n#train model\nmodel = LinearRegression()\nmodel.fit(X, y)", "predict": "import numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Create training data\nX = np.array([[1000], [2000], [3000], [4000], [5000]])\ny = np.array([15000, 20000, 25000, 30000, 35000])\n\n# Train the model\nmodel = LinearRegression()\nmodel.fit(X, y)\n\n# Make predictions\npredictions = model.predict(X)\n\n# Print predictions\nprint(predictions)"}
{"prompt": "Write a Python program to perform sentiment analysis using a pre-trained model.\nNot applicable ", "label": "import torch\n\n# Load the pre-trained model\nmodel = torch.load('model.pt')\n\n# Get the input data\ninput_data = \"This movie was amazing!\"\n\n# Convert the input data into a tensor\ninput_tensor = torch.tensor([input_data])\n\n# Make a prediction with the pre-trained model\nprediction = model(input_tensor)\n\n# Get the results\nif prediction[0][0].item() > 0.5:\n  print('Positive sentiment')\nelse:\n  print('Negative sentiment')", "predict": "import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\nsid = SentimentIntensityAnalyzer()\n\ntext = 'This is a great movie!'\n\nscores = sid.polarity_scores(text)\n\nprint('Positive:', scores['pos'])\nprint('Negative:', scores['neg'])\nprint('Neutral:', scores['neu'])\nprint('Compound:', scores['compound'])"}
{"prompt": "Design a function in Python that takes two lists as input and returns the elements in common.\nlist1 = [2, 3, 4, 5]\nlist2 = [1, 2, 4, 5] ", "label": "list1 = [2, 3, 4, 5]\nlist2 = [1, 2, 4, 5]\n\ndef common_elements(list1, list2):\n    result = []\n    for item in list1:\n        if item in list2:\n            result.append(item)\n    return result\n\nprint(common_elements(list1, list2))", "predict": "def common_elements(list1, list2):\n    return [element for element in list1 if element in list2]"}
{"prompt": "Write a short Python script to compute the average temperature of a given set of temperatures.\ntemperatures = [71,77,82,81,75,72,78] ", "label": "def average(temperatures):\n    total = 0\n    for temp in temperatures:\n        total += temp\n    return total/len(temperatures)\n\nprint(average(temperatures))", "predict": "def compute_average(temperatures):\n    total = 0\n    for temp in temperatures:\n        total += temp\n    return total / len(temperatures)\n\naverage = compute_average(temperatures)\nprint(average)"}
{"prompt": "This code is a Python script that renders a stereo scene using OpenGL. To use it, follow these steps:\n\n1. Install Python and OpenGL.\n2. Run the script in a Python environment", "label": "#!/usr/bin/python\n'''Test for an openGL based stereo renderer - test binocular rendering to a single window\n\nDavid Dunn\nFeb 2017 - created\n\nwww.qenops.com\n\n'''\n__author__ = ('David Dunn')\n__version__ = '1.0'\n\nimport OpenGL\nOpenGL.ERROR_CHECKING = False      # Uncomment for 2x speed up\nOpenGL.ERROR_LOGGING = False       # Uncomment for speed up\n#OpenGL.FULL_LOGGING = True         # Uncomment for verbose logging\n#OpenGL.ERROR_ON_COPY = True        # Comment for release\nimport OpenGL.GL as GL\nimport math, os\nimport numpy as np\nimport dGraph as dg\nimport dGraph.ui as ui\nimport dGraph.cameras as dgc\nimport dGraph.shapes as dgs\nimport dGraph.materials as dgm\nimport dGraph.shaders as dgshdr\nimport dGraph.config as config\nimport dGraph.util.imageManip as im\nimport time\n\nMODELDIR = '%s/data'%os.path.dirname(__file__)\nWINDOWS = [{\n    \"name\": 'Test 5',\n    \"location\": (0, 0),\n    #\"location\": (2436, 1936), # px coordinates of the startup screen for window location\n    #\"size\": (1920, 1080),\n    \"size\": (1600,800), # px size of the startup screen for centering\n    \"center\": (400,400), # center of the display\n    \"refresh_rate\": 60, # refreshrate of the display for precise time measuring\n    \"px_size_mm\": 0.09766, # px size of the display in mm\n    \"distance_cm\": 20, # distance from the viewer in cm,\n    #\"is_hmd\": False,\n    #\"warp_path\": 'data/calibration/newRight/',\n    },\n]\n\ndef loadScene(renderStack, file=None, cross=False):                \n    '''Load or create our sceneGraph'''\n    scene = dg.SceneGraph(file)\n    stereoCam = dgc.StereoCamera('front', scene)\n    stereoCam.setResolution((renderStack.width/2, renderStack.height))\n    stereoCam.setTranslate(0.,-.06,0.)\n    stereoCam.setRotate(20.,0.,0.)\n    stereoCam.setFOV(50.)\n    stereoCam.IPD = .062\n    crosses = [\n        #np.array((.031,.0,-10.)),\n        #np.array((-.031,.0,-10.)),\n        np.array((-.2,-.2,-10.)),\n        np.array((-.2,.0,-10.)),\n        np.array((-.2,.2,-10.)),\n        np.array((.0,-.2,-10.)),\n        np.array((.0,.0,-10.)),\n        np.array((.0,.2,-10.)),\n        np.array((.2,-.2,-10.)),\n        np.array((.2,.0,-10.)),\n        np.array((.2,.2,-10.)),\n    ]\n    for idx, position in enumerate(crosses):\n        cross = dgs.PolySurface('cross%s'%idx, scene, file = '%s/cross.obj'%MODELDIR)\n        cross.setScale(.01,.01,.01)\n        cross.translate = position\n        renderStack.objects[cross.name] = cross\n        print(1,(idx/3.)/3.+1/3.,(idx%3)/3.+1/3.)\n        material = dgm.Material('material%s'%idx,ambient=(1,(idx/3.)/3.+1/3.,(idx%3)/3.+1/3", "predict": ".\n3. Press 'Enter' to render the scene.\n\nimport pygame\nimport pygame.freetype\nfrom pygame.locals import *\nimport OpenGL.GL as GL\nimport OpenGL.GLU as GLU\n\n# Window dimensions\nWIDTH = 800\nHEIGHT = 600\n\n# OpenGL settings\nGL.glClearColor(0.2, 0.2, 0.2, 1.0)\nGL.glEnable(GL.GL_DEPTH_TEST)\nGL.glEnable(GL.GL_LIGHTING)\nGL.glEnable(GL.GL_LIGHT0)\nGL.glEnable(GL.GL_COLOR_MATERIAL)\nGL.glLightfv(GL.GL_LIGHT0, GL.GL_AMBIENT, [0.5, 0.5, 0.5, 1.0])\nGL.glLightfv(GL.GL_LIGHT0, GL.GL_DIFFUSE, [1.0, 1.0, 1.0, 1.0])\nGL.glLightfv(GL.GL_LIGHT0, GL.GL_POSITION, [1.0, 1.0, 1.0, 0.0])\n\n# Material settings\nGL.glMaterialfv(GL.GL_FRONT_AND_BACK, GL.GL_SPECULAR, [1.0, 1.0, 1.0, 1.0])\nGL.glMaterialfv(GL.GL_FRONT_AND_BACK, GL.GL_SHININESS, [100.0])\n\n# Objects\ncube = [[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0]]\nsphere = [[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0]]\n\n# Camera\ncamera = [[0.0, 0.0, 10.0], [0."}
{"prompt": "Update the existing code in the following Python program to generate a list of prime numbers in a given range. ", "label": "def generate_prime_numbers(start, end):\n    for i in range(start, end + 1):\n        is_prime = True\n        # check for all numbers from 2 to (i - 1)\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            print(i, end=\" \")", "predict": "def generate_prime_numbers(start, end):\n    prime_numbers = []\n    for num in range(start, end + 1):\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                prime_numbers.append(num)\n    return prime_numbers"}
{"prompt": "Create a class in Python that describes a student. This class should have public attributes for their name, age, grade level and major. ", "label": "class Student:\n def __init__(self, name, age, grade, major):\n  self.name = name\n  self.age = age\n  self.grade = grade\n  self.major = major", "predict": "class Student:\n    def __init__(self, name, age, grade_level, major):\n        self.name = name\n        self.age = age\n        self.grade_level = grade_level\n        self.major = major"}
{"prompt": "Write a Python program to compute the readability score of a given text.\ntext = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\" ", "label": "def compute_readability(text):\n    \"\"\"Compute the readability score of a given text\"\"\"\n    words = 0\n    sentences = 0\n    syllables = 0\n    for word in text.split():\n        words += 1\n        syllables += count_syllables(word)\n\n    for sentence in text.split(\".\"):\n        sentences += 1\n\n    score = 206.835 - (1.015 * (words / sentences)) - (84.6 * (syllables / words))\n    return score\n\ndef count_syllables(word):\n    \"\"\"Count the number of syllables in a given word\"\"\"\n    vowels = \"aeiouAEIOU\"\n    syllables = 0\n    for letter in word:\n        if letter in vowels:\n            syllables += 1\n    if len(word) >= 3 and word[-3:] == \"ely\" or word[-2:] == \"es\":\n        syllables -= 1\n    return syllables", "predict": "import re\n\ndef compute_readability_score(text):\n words = re.findall(r'\\w+', text)\n sentences = re.findall(r'[.!?]', text)\n \n readability_score = 206.835 - 1.015 * (len(words) / len(sentences)) - 15.5\n \n return readability_score\n\nprint(compute_readability_score(text))\n\n# Output: 12.496587178484677"}
{"prompt": "This code checks if files changed in git match the .clang-format specification. To use it, run the `cli()` function with the following arguments:\n- `--file-extensions`: a comma-separated list of file extensions to check (default is `.cpp,.h,.cxx,.hxx,.hpp,.cc,.ipp`)\n- `--exclude`: a list of files or directories to exclude from", "label": "#!/usr/bin/env python\n\nimport argparse\nimport os\nimport sys\nimport subprocess\n\n\ndef check_file(filename, excludes, extensions):\n    \"\"\"\n    Check if a file should be included in our check\n    \"\"\"\n    name, ext = os.path.splitext(filename)\n\n    if len(ext) > 0 and ext in extensions:\n        if len(excludes) == 0:\n            return True\n\n        for exclude in excludes:\n            if exclude in filename:\n                return False\n\n        return True\n\n    return False\n\n\ndef check_directory(directory, excludes, extensions):\n    output = []\n\n    if len(excludes) > 0:\n        for exclude in excludes:\n            if exclude in directory:\n                directory_excluded = False\n                return output\n\n    for root, _, files in os.walk(directory):\n        for file in files:\n            filename = os.path.join(root, file)\n            if check_file(filename, excludes, extensions):\n                print(\"Will check file [{}]\".format(filename))\n                output.append(filename)\n    return output\n\ndef get_git_root(git_bin):\n    cmd = [git_bin, \"rev-parse\", \"--show-toplevel\"]\n    try:\n        return subprocess.check_output(cmd).strip()\n    except subprocess.CalledProcessError, e:\n        print(\"Error calling git [{}]\".format(e))\n        raise\n\ndef clean_git_filename(line):\n    \"\"\"\n    Takes a line from git status --porcelain and returns the filename\n    \"\"\"\n    file = None\n    git_status = line[:2]\n    # Not an exhaustive list of git status output but should\n    # be enough for this case\n    # check if this is a delete\n    if 'D' in git_status:\n        return None\n    # ignored file\n    if '!' in git_status:\n        return None\n    # Covers renamed files\n    if '->' in line:\n        file = line[3:].split('->')[-1].strip()\n    else:\n        file = line[3:].strip()\n\n    return file\n\n\ndef get_changed_files(git_bin, excludes, file_extensions):\n    \"\"\"\n    Run git status and return the list of changed files\n    \"\"\"\n    extensions = file_extensions.split(\",\")\n    # arguments coming from cmake will be *.xx. We want to remove the *\n    for i, extension in enumerate(extensions):\n        if extension[0] == '*':\n            extensions[i] = extension[1:]\n\n    git_root = get_git_root(git_bin)\n\n    cmd = [git_bin, \"status\", \"--porcelain\", \"--ignore-submodules\"]\n    print(\"git cmd = {}\".format(cmd))\n    output = []\n    returncode = 0\n    try:\n        cmd_output = subprocess.check_output(cmd)\n        for line in cmd_output.split('\\n'):\n            if len(line) > 0:\n                file = clean_git_filename(line)\n                if not file:\n                    continue\n                file = os.path.join(git_root, file)\n\n                if file[-1] == \"/\":\n                    directory_files = check_directory(\n                        file, excludes, file_extensions)\n                    output = output + directory_files\n                else:\n                    if check_file(file, excludes, file_extensions):\n                        print(\"Will check file [{}]\".format(file))\n                        output.append(file)\n\n    except subprocess.CalledProcessError, e:\n        print(\"Error calling git [{}]\".format(e))\n        returncode = e.returncode\n\n    return output, returncode\n\n\ndef run_clang_", "predict": "checking (default is empty)\n- `--include`: a list of files or directories to include when checking (default is empty)\n- `--clang-format`: the path to the clang-format executable\n- `--verbose`: verbose output\n- `--version`: print version information\n\n# Copyright (c) 2013 Google Inc. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport argparse\nimport logging\nimport os\nimport subprocess\nimport sys\n\nfrom clang.format import clang_format\n\n\ndef _format_check(file_name, clang_format_path,\n                  format_options):\n  try:\n    cmd = [clang_format_path,\n           '--style=file',\n           '--assume-filename=%s' % file_name]\n    cmd.extend(format_options)\n    p = subprocess.Popen(cmd, stdout=subprocess.PIPE,\n                         stderr=subprocess.PIPE)\n    output, err = p.communicate()\n    if p.returncode!= 0:\n      logging.error(err)\n      raise RuntimeError('clang-format failed to format file: %s' %\n                         file_name)\n  except OSError:\n    logging.error('clang-format not found, cannot format file: %s' %\n                   file_name)\n    raise\n  return output\n\n\ndef cli():\n  parser = argparse.ArgumentParser()\n  parser.add_argument('--file-extensions',\n                      help='comma-separated list of file extensions to check '\n                           '(default"}
{"prompt": "Write a function in Python to generate random numbers within a desired range. ", "label": "import random\n\n# define a function to generate random numbers\ndef generate_random(start, end):\n\treturn random.randint(start, end)\n\n# generate a random number in the given range\nstart = 10\nend = 15\nprint(generate_random(start, end))", "predict": "import random\n\ndef generate_random_numbers(start, end):\n    return random.randint(start, end)"}
{"prompt": "Can you produce a program that demonstrates the basics of how to use object oriented programming in Python?\n\"<noinput>\" ", "label": "# Python program to display introduction of \n# Object Oriented Programming\n\n# Creating a class\nclass Person:\n\n    # Constructor \n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    # Method\n    def introduce_self(self):\n        print(\"I'm {0} aged {1}.\".format(self.name, self.age))\n\n# Instantiating an object\np1 = Person(\"John\", 25)\n\n# Calling a method\np1.introduce_self()", "predict": "# Create a class\nclass MyClass:\n    # Initialize the class\n    def __init__(self):\n        self.data = []\n\n    # Add an element to the data list\n    def add_element(self, element):\n        self.data.append(element)\n\n    # Return the length of the data list\n    def get_length(self):\n        return len(self.data)\n\n# Create an instance of the class\nmy_instance = MyClass()\n\n# Add elements to the data list\nmy_instance.add_element(1)\nmy_instance.add_element(2)\nmy_instance.add_element(3)\n\n# Get the length of the data list\nprint(my_instance.get_length())"}
{"prompt": "Create an algorithm in Python to calculate the maximum sum of a sub-array of an int array.\nGiven an array arr = [2, -1, 3, 5, -7, 3]. ", "label": "def max_sum_subarray(arr): \n    n = len(arr) \n    max_sum = 0\n  \n    for i in range(n): \n        sum = arr[i] \n        for j in range(i + 1, n): \n            sum += arr[j] \n            if sum > max_sum: \n                max_sum = sum \n\n    return max_sum \n\n# Test array \narr = [2, -1, 3, 5, -7, 3] \n\n# Function Call \nmax_sum = max_sum_subarray(arr) \n  \n# Printing maximum sum \nprint(\"Maximum sum of the sub-array is\", max_sum) \n\n# Output: Maximum sum of the sub-array is 8", "predict": "def max_sub_array_sum(arr):\n    max_so_far = 0\n    max_ending_here = 0\n\n    for i in range(len(arr)):\n        max_ending_here += arr[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n\n    return max_so_far\n\nmax_sub_array_sum([2, -1, 3, 5, -7, 3])"}
{"prompt": "Create a Python program that produces the output shown in this example.\n3\n3\n3\n3\n3\n3 ", "label": "def print_grid(grid_size):\n    for x in range(grid_size):\n        for y in range(grid_size):\n            print(grid_size, end=\" \")\n        print()\n\ngrid_size = 3\nprint_grid(grid_size)", "predict": "for i in range(5):\n    print(\"3\")"}
{"prompt": "How can you create a Python function that prints the number of characters in a string? ", "label": "def char_count(string): \n    count = 0\n    for char in string: \n        count += 1\n    print(\"Number of characters:\", count)", "predict": "def count_characters(string):\n    char_count = 0\n    for char in string:\n        char_count += 1\n    return char_count"}
{"prompt": "Create a Python program to generate and print out a calendar for a given month. ", "label": "import calendar\n\n# Input the year and month\nyear = int(input('Enter year: '))\nmonth = int(input('Enter month: '))\n\n# Generate the calendar\ncal = calendar.month(year, month)\n\n# Print the calendar\nprint(cal)", "predict": "import calendar\n\ndef print_calendar(month, year):\n    print(calendar.month(year, month))"}
{"prompt": "Write a Python program to print a given number in words\n123 ", "label": "def number_to_words(num):\n    units_list = {\"0\": \"Zero\", \"1\": \"One\", \"2\": \"Two\", \"3\": \"Three\", \"4\":\n                  \"Four\", \"5\": \"Five\", \"6\": \"Six\", \"7\": \"Seven\", \"8\": \"Eight\",\n                  \"9\": \"Nine\"}\n    tens_list = { \"10\": \"Ten\", \"11\": \"Eleven\", \"12\": \"Twelve\", \"13\": \"Thirteen\",\n                  \"14\": \"Fourteen\", \"15\": \"Fifteen\", \"16\": \"Sixteen\", \"17\":\n                  \"Seventeen\", \"18\": \"Eighteen\", \"19\": \"Nineteen\", \"20\":\n                  \"Twenty\", \"30\": \"Thirty\", \"40\": \"Forty\", \"50\": \"Fifty\",\n                  \"60\": \"Sixty\", \"70\": \"Seventy\", \"80\": \"Eighty\", \"90\":\n                  \"Ninety\"}\n    \n    output = \"\"\n    if num in units_list:\n        output += units_list[str(num)]\n    elif num in tens_list:\n        output += tens_list[str(num)]\n    else:\n        if len(str(num)) >= 3:\n            output += units_list[str(num)[0]] + \" Hundred \"\n            output += number_to_words(int(str(num)[1:]))\n        else:\n            output += tens_list[str(num)[0]+\"0\"] + \" \" \n            output += units_list[str(num)[1]]\n    return output\n\nresult = number_to_words(123)\nprint(result)", "predict": "def num_to_words(num):\n    num_words = {\n        0: 'zero',\n        1: 'one',\n        2: 'two',\n        3: 'three',\n        4: 'four',\n        5: 'five',\n        6:'six',\n        7:'seven',\n        8: 'eight',\n        9: 'nine',\n        10: 'ten',\n        11: 'eleven',\n        12: 'twelve',\n        13: 'thirteen',\n        14: 'fourteen',\n        15: 'fifteen',\n        16:'sixteen',\n        17:'seventeen',\n        18: 'eighteen',\n        19: 'nineteen',\n        20: 'twenty',\n        30: 'thirty',\n        40: 'forty',\n        50: 'fifty',\n        60:'sixty',\n        70:'seventy',\n        80: 'eighty',\n        90: 'ninety'\n    }\n\n    if num < 20:\n        return num_words[num]\n    elif num < 100:\n        return num_words[100] +'' + num_words[num % 100]\n    elif num < 1000:\n        return num_words[1000] +'' + num_to_words(num // 100) +'hundred'\n    else:\n        return num_to_words(num // 1000) +'thousand'+ num_to_words(num % 1000)"}
{"prompt": "Given a list of words, write a Python program to group the anagrams (words which have the same letters in a different order) together.\n[\"tea\", \"eat\", \"ate\", \"apple\", \"plea\", \"rat\", \"tar\"] ", "label": "def anagram_grouping(words):\n   anagrams = dict()\n   #loop through the list and sort each word\n   for word in words: \n      sorted_word = ''.join(sorted(word))\n      # check if sorted word exists as a key in dictionary\n      if sorted_word not in anagrams: \n         anagrams[sorted_word] = [word] #add key and word to dict\n      else: \n         anagrams[sorted_word].append(word) #add word to existing anagrams\n\n   #create a list of anagrams\n   result = []\n   for values in anagrams.values():\n      result.append(values)\n\n   return result\n\n\nwords = [\"tea\", \"eat\", \"ate\", \"apple\", \"plea\", \"rat\", \"tar\"]\nans = anagram_grouping(words)\nprint(ans)", "predict": "def group_anagrams(words):\n anagram_groups = []\n \n for word in words:\n anagram_group = [word]\n \n for other_word in words:\n if is_anagram(word, other_word):\n anagram_group.append(other_word)\n \n anagram_groups.append(anagram_group)\n \n return anagram_groups\n \ndef is_anagram(word1, word2):\n if sorted(word1) == sorted(word2):\n return True\n return False\n \nwords = [\"tea\", \"eat\", \"ate\", \"apple\", \"plea\", \"rat\", \"tar\"]\n \nanagram_groups = group_anagrams(words)\n \nprint(anagram_groups)\n# Output: [['tea', 'eat', 'ate'], ['apple', 'plea'], ['rat', 'tar']]"}
{"prompt": "Write an efficient algorithm to optimize the given code in Python.\ndef my_process(data):\n    result = [] \n    for item in data: \n        processed_data = do_process(item) \n        result.append(processed_data) \n    return result ", "label": "def my_process(data):\n    result = [] \n    for item in data: \n        processed_data = do_process(item) \n        result.append(processed_data) \n    return result\n\ndef my_optimized_process(data):\n    return [do_process(item) for item in data]", "predict": "def my_process(data):\n    result = [] \n    for item in data: \n        result.append(do_process(item)) \n    return result"}
{"prompt": "Generate a Python code snippet to rearrange an array of integers into an alternate order of even and odd elements. ", "label": "def rearrange(arr):\n    even, odd = [], [] \n    for n in arr:\n        if n % 2 == 0:\n            even.append(n)\n        else:\n            odd.append(n)\n    return [item for pair in zip(even, odd) for item in pair]", "predict": "def rearrange(arr):\n    even = []\n    odd = []\n    for i in arr:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return even + odd"}
{"prompt": "Create a class in Python named \"Employee\" with 3 instance variables \"name\", \"salary\", and \"age\". ", "label": "class Employee():\n    def __init__(self, name, salary, age):\n        self.name = name\n        self.salary = salary\n        self.age = age", "predict": "class Employee:\n    def __init__(self, name, salary, age):\n        self.name = name\n        self.salary = salary\n        self.age = age"}
{"prompt": "Convert the given algorithm written in pseudo code to Python.\nInput: Array A\n1. from i=1 to i=length[A]\n2.  j=i \n3.  min = A[i]\n4.  for j = i+1 to length[A]\n5.    if min > A[j]\n6.      min = A[j] \n7.  swap A[i] with A[j] ", "label": "def selection_sort(A): \n    for i in range(len(A)): \n        minimum = i \n        for j in range(i+1, len(A)): \n            if A[minimum] > A[j]: \n                minimum = j \n        A[i], A[minimum] = A[minimum], A[i]", "predict": "def selection_sort(A):\n    for i in range(len(A)):\n        min_idx = i\n        for j in range(i+1, len(A)):\n            if A[min_idx] > A[j]:\n                min_idx = j\n        A[i], A[min_idx] = A[min_idx], A[i]"}
{"prompt": "Build a classifier model in Python to classify text into two categories.\nDataset:\ntext1: I love cats\nlabel1: 1\n\ntext2: I am scared of dogs\nlabel2: 0\n\nModel Instructions:\n1. Bring the dataset into the model.\n2. Preprocess it.\n3. Split the dataset into training and testing set.\n4. Build a classification model using an appropriate algorithm. ", "label": "#import necessary libraries\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n#load and allocate dataset\ndataset = pd.read_csv(\"dataset.csv\")\nX = dataset.Text\ny = dataset.Label\n\n#Preprocessing\ncv = CountVectorizer()\nX = cv.fit_transform(X)\n\n#Split the data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42, stratify=y)\n\n#Model training\nclf = MultinomialNB()\nclf.fit(X_train,y_train)\n\n\n#Evaluate the model\nscore = clf.score(X_test,y_test)\nprint(\"Accuracy of model: \",score)", "predict": "import pandas as pd\nimport numpy as np\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Bring the dataset into the model\ndf = pd.DataFrame({'text': ['I love cats', 'I am scared of dogs'], 'label': [1, 0]})\n\n# Preprocess it\ncv = CountVectorizer()\nX = cv.fit_transform(df['text'])\ny = df['label']\n\n# Split the dataset into training and testing set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Build a classification model using an appropriate algorithm\nclf = MultinomialNB()\nclf.fit(X_train, y_train)"}
{"prompt": "Edit this code snippet in Python to remove any errors and improve readability.\ndef remove_arr(arr):\nresult =[];\nfor a in arr:\n  if a != 'b'\n    result.append(a)\nreturn result ", "label": "def remove_arr(arr):\n    result = []\n    for a in arr:\n        if a != 'b':\n            result.append(a)\n    return result", "predict": "def remove_arr(arr):\n result = []\n for a in arr:\n if a!= 'b':\n result.append(a)\n return result"}
{"prompt": "Generate a function which implements a backwards for loop in Python. ", "label": "def backwards_for_loop(n):\n  for i in range(n, 0, -1):\n    # Do something with i\n    print(i)", "predict": "def backwards_for_loop(start, end):\n    for i in range(start, end, -1):\n        # Do something with i\n        print(i)"}
{"prompt": "Create a python program to carry out the following tasks:\nGiven an array of integers, find the two elements whose sum is closest to 0. ", "label": "def find_closest_sum_of_two(arr):\n    if len(arr) < 2:\n        return None\n    \n    # initialize the closest sum and indicies\n    closest_sum = arr[0] + arr[1]\n    first_index = 0\n    second_index = 1\n    \n    # loop through the array and check for closer sums\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] + arr[j]) < abs(closest_sum):\n                closest_sum = arr[i] + arr[j]\n                first_index = i\n                second_index = j\n    \n    return arr[first_index], arr[second_index], closest_sum", "predict": "def closest_sum_to_zero(arr):\n    min_diff = float('inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] + arr[j])\n            if diff < min_diff:\n                min_diff = diff\n                closest_sum = arr[i] + arr[j]\n    return closest_sum"}
{"prompt": "Write a Python script to simulate a coin toss experiment. ", "label": "import random\n\ndef coin_toss():\n    coin_side = random.choice(['Heads', 'Tails'])\n    print('The coin landed on', coin_side)\n\ncoin_toss()", "predict": "import random\n\ndef coin_toss():\n    coin_side = random.choice(['Heads', 'Tails'])\n    print('The coin landed on', coin_side)\n\ncoin_toss()"}
{"prompt": "Create a python class that implements a stack. ", "label": "class Stack:\n    \n    def __init__(self):\n        self.items = []\n    def push(self, item):\n        self.items.append(item)\n    def pop(self):\n        return self.items.pop()\n    def isEmpty(self):\n        return self.items == []\n    def peek(self):\n        return self.items[len(self.items)-1]\n    def size(self):\n        return len(self.items)", "predict": "class Stack:\n    def __init__(self):\n        self.items = []\n\n    def is_empty(self):\n        return self.items == []\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        return self.items.pop()\n\n    def peek(self):\n        return self.items[len(self.items)-1]\n\n    def size(self):\n        return len(self.items)"}
{"prompt": "Write a python function to parse a list of strings and extract the date that appears at the end of the strings?\nlist_of_strings = [\"April 11th, 2019\", \"July 2nd, 2018\", \"October 16th, 2012\"] ", "label": "def parse_list_of_strings(list_of_strings):\n    date_list = []\n    for string in list_of_strings:\n        date_to_add = datetime.strptime(string, '%B %dth, %Y')\n        date_list.append(date_to_add)\n    return date_list", "predict": "def extract_date(list_of_strings):\n dates = []\n for string in list_of_strings:\n date_string = string.split(\",\")[-1]\n date_tuple = tuple(map(int, date_string.split(\"/\")))\n dates.append(date_tuple)\n return dates"}
{"prompt": "Design a class in Python for storing employee information. The employee information should include name, age, salary and department.\nNot applicable ", "label": "class Employee:\n def __init__(self, name, age, salary, department):\n self.name = name\n self.age = age\n self.salary = salary\n self.department = department\n\n def get_name(self):\n return self.name\n\n def get_age(self):\n return self.age\n\n def get_salary(self):\n return self.salary\n\n def get_department(self):\n return self.department", "predict": "class Employee:\n def __init__(self, name, age, salary, department):\n  self.name = name\n  self.age = age\n  self.salary = salary\n  self.department = department\n\ndef get_name(self):\n return self.name\n\ndef get_age(self):\n return self.age\n\ndef get_salary(self):\n return self.salary\n\ndef get_department(self):\n return self.department"}
{"prompt": "Create a Flask API endpoint in Python that accepts an array of numbers and returns the average of the numbers\nNot applicable ", "label": "from flask import Flask, request, jsonify\n\napp = Flask(name)\n\n@app.route('/calculate_average', methods=['POST'])\ndef calculate_average():\n numbers = request.json['numbers']\n\n # calculate the sum\n total = 0\n for number in numbers:\n total += number\n\n # calculate the average\n average = total / len(numbers)\n\n return jsonify({'average': average})\n\nif name == 'main':\n app.run(debug=True)", "predict": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/average', methods=['POST'])\ndef get_average():\n numbers = request.json\n return {'average': sum(numbers) / len(numbers)}\n\nif __name__ == '__main__':\n app.run()"}
{"prompt": "Design a Python program to convert all the lowercase letters to their corresponding uppercase letters in a given string. ", "label": "def upper_string(str): \n    res = \"\" \n    for i in range(len(str)): \n        if str[i].isupper(): \n            res += str[i] \n        else: \n            res += chr(ord(str[i])-32) \n    return res", "predict": "def to_uppercase(string):\n    return string.upper()"}
{"prompt": "Construct a Python script to find the average of three numbers.\n10, 20, 30 ", "label": "def find_average(a, b, c):\n  return (a + b + c) / 3\n\nresult = find_average(10, 20, 30)\nprint(result) # 20", "predict": "# Find the average of three numbers\n\nnum1 = 10\nnum2 = 20\nnum3 = 30\n\n# Calculate the average\naverage = (num1 + num2 + num3) / 3\n\n# Print the result\nprint(\"The average of the three numbers is:\", average)"}
{"prompt": "Write an algorithm in Python that calculates the maximum subarray of a given array.\n[-2,1,-3,4,-1,2,1,-5,4] ", "label": "def max_subarray(arr):\n max_so_far = arr[0] \n max_ending_here = arr[0] \n   \n for i in range(1, len(arr)): \n  max_ending_here = max(arr[i], max_ending_here + arr[i]) \n  max_so_far = max(max_so_far, max_ending_here)  \n   \n return max_so_far", "predict": "def max_subarray(arr):\n    max_so_far = 0\n    max_ending_here = 0\n    for i in range(0, len(arr)):\n        max_ending_here += arr[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if (max_so_far < max_ending_here):\n            max_so_far = max_ending_here\n    return max_so_far\n\narr = [-2,1,-3,4,-1,2,1,-5,4]\nmax_so_far = max_subarray(arr)\nprint(max_so_far)"}
{"prompt": "Create a list of ten random numbers in Python. ", "label": "import random\n\nrandom_numbers = [random.randint(1,50) for _ in range(10)]", "predict": "import random\n\nrandom_numbers = [random.randint(1,100) for _ in range(10)]\nprint(random_numbers)"}
{"prompt": "Generate a Python program to implement the following feature: Search a phrase in a given string.\nSearch the phrase \"to be or not to be\" in the string \"Whether 'tis nobler in the mind to suffer\". ", "label": "def search(phrase, string):\n  if phrase in string:\n     return True \n  else:\n     return False \n\nresult = search(\"to be or not to be\", \"Whether 'tis nobler in the mind to suffer\")\nprint(result)", "predict": "def search_phrase(phrase, string):\n    if phrase in string:\n        return \"Phrase found!\"\n    else:\n        return \"Phrase not found!\"\n\nresult = search_phrase(\"to be or not to be\", \"Whether 'tis nobler in the mind to suffer\")\nprint(result)"}
{"prompt": "Develop an algorithm in Python to sort an array of integers using the Merge Sort algorithm\n[6, 2, 5, 1, 8, 9, 0] ", "label": "# Merge Sort Algorithm\n\ndef merge(left, right):\n  sortedList = []\n  i, j = 0, 0\n  while i < len(left) and j < len(right):\n    if left[i] < right[j]:\n      sortedList.append(left[i])\n      i += 1\n    else:\n      sortedList.append(right[j])\n      j += 1\n  # Check if anything remains\n  sortedList += left[i:]\n  sortedList += right[j:]\n  return sortedList\n\ndef mergeSort(arr):\n  # Base case, already sorted\n  if len(arr) <= 1:\n    return arr\n\n  # Split in half\n  mid  = len(arr)/2\n  left = arr[:mid]\n  right = arr[mid:]\n  \n  # Sort each half and merge\n  left  = mergeSort(left)\n  right = mergeSort(right)\n  return merge(left, right)\n\n# Driver Code\narr = [6,2,5,1,8,9,0]\n\nsortedArr = mergeSort(arr)\nprint(sortedArr)\n\n# Output: [0, 1, 2, 5, 6, 8, 9]", "predict": "def mergeSort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        L = arr[:mid]\n        R = arr[mid:]\n\n        mergeSort(L)\n        mergeSort(R)\n\n        i = j = k = 0\n\n        while i < len(L) and j < len(R):\n            if L[i] < R[j]:\n                arr[k] = L[i]\n                i+=1\n            else:\n                arr[k] = R[j]\n                j+=1\n            k+=1\n\n        while i < len(L):\n            arr[k] = L[i]\n            i+=1\n            k+=1\n\n        while j < len(R):\n            arr[k] = R[j]\n            j+=1\n            k+=1\n\n\narr = [6, 2, 5, 1, 8, 9, 0]\nmergeSort(arr)\nprint(arr)"}
{"prompt": "Create a version of the game 'Tic-tac-toe' using Python. ", "label": "# create Tic-tac-toe game\nboard = [None] * 9\n\ndef draw_board(): \n  row1 = \"|{}|{}|{}|\".format(board[0], board[1], board[2])\n  row2 = \"|{}|{}|{}|\".format(board[3], board[4], board[5])\n  row3 = \"|{}|{}|{}|\".format(board[6], board[7], board[8])\n  \n  print()\n  print(row1)\n  print(row2)\n  print(row3)\n  print()\n\ndef get_row_col():\n  row = int(input(\"Enter row: \"))\n  col = int(input(\"Enter col: \"))\n  index = (row * 3) + col\n  return index \n\ndef update_board(icon, index): \n  board[index] = icon\n\ndef is_victory(icon): \n  # check victory across row\n  across1 = (board[0] == icon) and (board[1] == icon) and (board[2] == icon)\n  across2 = (board[3] == icon) and (board[4] == icon) and (board[5] == icon)\n  across3 = (board[6] == icon) and (board[7] == icon) and (board[8] == icon)\n\n  # check victory across column\n  column1 = (board[0] == icon) and (board[3] == icon) and (board[6] == icon)\n  column2 = (board[1] == icon) and (board[4] == icon) and (board[7] == icon)\n  column3 = (board[2] == icon) and (board[5] == icon) and (board[8] == icon)\n\n  # check victory across diagonal\n  diagonal1 = (board[0] == icon) and (board[4] == icon) and (board[8] == icon)\n  diagonal2 = (board[2] == icon) and (board[4] == icon) and (board[6] == icon)\n\n  if (across1 or across2 or across3 or column1 or column2 or column3 or diagonal1 or diagonal2):\n    return True\n  else:\n    return False\n\nwhile True:\n  # player 1 \n  index = get_row_col()\n  update_board(\"X\", index)\n  draw_board()\n\n  if(is_victory(\"X\")):\n    print(\"Player 1 wins\")\n    break\n\n  # player 2\n  index = get_row_col()\n  update_board(\"O\", index)\n  draw_board()\n\n  if(is_victory(\"O\")):\n    print(\"Player 2 wins\")\n    break", "predict": "# Create the game board\nboard = [''for x in range(9)]\n\n# Function to draw the board\ndef draw_board(board):\n    print('-' * 13)\n    print('|', board[0], '|', board[1], '|', board[2], '|')\n    print('-' * 13)\n    print('|', board[3], '|', board[4], '|', board[5], '|')\n    print('-' * 13)\n    print('|', board[6], '|', board[7], '|', board[8], '|')\n    print('-' * 13)\n\n# Function to check if a player has won\ndef check_win(board, player):\n    if (board[0] == board[1] == board[2] == player) or (board[3] == board[4] == board[5] == player) or (board[6] == board[7] == board[8] == player) or (board[0] == board[3] == board[6] == player) or (board[1] == board[4] == board[7] == player) or (board[2] == board[5] == board[8] == player) or (board[0] == board[4] == board[8] == player) or (board[2] == board[4] == board[6] == player):\n        return True\n    else:\n        return False\n\n# Function to check if the game is a draw\ndef check_draw(board):\n    if'' not in board:\n        return True\n    else:\n        return False\n\n# Function to make a move\ndef make_move(board, player, position):\n    if board[position] =='':\n        board[position] = player\n        return True\n    else:\n        return False\n\n# Function to play the game\ndef play_game():\n    board = [''for x in range(9)]\n    player = 'X'\n    position = 0\n\n    while True:\n        draw_board(board)\n        if make_move(board, player, position):\n            if check_win(board"}
{"prompt": "Create a Flask Python service that serves an array of strings as JSON using a GET request.\nNot applicable ", "label": "import json\nfrom flask import Flask, request, jsonify \n\napp = Flask(__name__)\n\ndata = ['Apple', 'Banana', 'Carrot']\n\n@app.route('/data', methods=['GET'])\ndef serve_data():\n return jsonify(data)\n\nif __name__ == '__main__':\n app.run()", "predict": "from flask import Flask, jsonify\n\napp = Flask(__name__)\n\n@app.route('/array', methods=['GET'])\ndef get_array():\n my_array = ['string1','string2','string3']\n return jsonify(my_array)\n\nif __name__ == '__main__':\n app.run()"}
{"prompt": "Create a web api in Python, using Flask, that takes a search string and returns a collection of books that match that search.\nsearchTerm: \"cat\" ", "label": "from flask import Flask, jsonify \nimport requests \n\napp = Flask(__name__) \n\n@app.route('/books/<string:search_term>') \ndef search_books(search_term): \n\turl = 'https://www.googleapis.com/books/v1/volumes?q={}'.format(search_term)\n\tr = requests.get(url).json() \n\tbooks = r['items'] \n\treturn jsonify(books) \n\nif __name__ == '__main__': \n\tapp.run(debug=True)", "predict": "from flask import Flask, jsonify, request\nimport requests\n\napp = Flask(__name__)\n\n@app.route('/books', methods=['GET'])\ndef get_books():\n searchTerm = request.args.get('searchTerm')\n \n url = 'https://www.googleapis.com/books/v1/volumes?q={}'.format(searchTerm)\n \n response = requests.get(url)\n \n books = response.json()\n \n return jsonify(books)\n\nif __name__ == '__main__':\n app.run(debug=True)"}
{"prompt": "Generate a program in Python for sorting the elements of an array in descending order.\n[2, 4, 1, 6, 5] ", "label": "def sort_descending(arr):\n    # Sort array from largest to smallest\n    arr.sort(reverse=True)\n\n    # Print result\n    print(arr)\n\n# Test\narr = [2, 4, 1, 6, 5]\nsort_descending(arr)\n# Output: [6, 5, 4, 2, 1]", "predict": "def sort_descending(arr):\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] < arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n    return arr\n\narr = [2, 4, 1, 6, 5]\nsorted_arr = sort_descending(arr)\nprint(sorted_arr)"}
{"prompt": "Normalize the following text using Python.\nthe     Cat    in  the  hat ", "label": "text = \"the Cat in the hat\"\ntext = text.replace('  ', ' ').strip()\nprint(text)", "predict": "text = \"the Cat in the hat\"\n\ntext =''.join(text.split())\n\nprint(text)\n\n# Output: the Cat in the hat"}
{"prompt": "Write a service in Python that can be used to find the closest point to an input in a given set of coordinates.\nInput coordinates: (2, 3)\n\nSet of coordinates: [(2.1, 3.1), (1, 1), (0.5, 2.5)] ", "label": "import math\n\ndef find_closest_point(input_coordinates, coordinates_set):\n    # Calculate the euclidean distance for each point in the set\n    distances = []\n    for c in coordinates_set:\n        dist = math.sqrt((input_coordinates[0] - c[0]) **2 + (input_coordinates[1] - c[1]) **2)\n        distances.append(dist)\n        \n    # Find the index of the point with the smallest distance\n    idx = distances.index(min(distances))\n    \n    # Return the closest point\n    return coordinates_set[idx]\n    \n# Input coordinates\ninput_coordinates = (2, 3)\n\n# Set of coordinates\ncoordinates_set = [(2.1, 3.1), (1, 1), (0.5, 2.5)]\n\n# Find and print the closest point\nclosest_point = find_closest_point(input_coordinates, coordinates_set)\nprint('Closest point: ', closest_point)", "predict": "import math\n\ndef find_closest_point(input_coordinates, coordinates_set):\n    min_distance = float('inf')\n    closest_point = None\n    for point in coordinates_set:\n        distance = math.sqrt((input_coordinates[0] - point[0])**2 + (input_coordinates[1] - point[1])**2)\n        if distance < min_distance:\n            min_distance = distance\n            closest_point = point\n    return closest_point"}
{"prompt": "Develop a Python program to calculate the area of a triangle using the side lengths.\na=5, b=9, c=11 ", "label": "# Calculates the area of a triangle given the three side lengths\ndef area_triangle(a, b, c): \n    # Calculate the semi-perimeter \n    s = (a + b + c) / 2  \n  \n    # calculate the area \n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5 \n    return area \n  \n# Driver Code \na = 5\nb = 9\nc = 11\nprint(\"Area of triangle is : \", area_triangle(a, b, c))", "predict": "def triangle_area(a, b, c):\n    s = (a + b + c) / 2\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    return area"}
{"prompt": "Write a Python script that takes a given string and finds the longest palindromic substring in it. ", "label": "def longest_palindromic_substring(s): \n\tn = len(s) \n\tL = [[0 for x in range(n)] \n\t\t\tfor y in range(n)] \n\t# All substrings of length 1 are palindromes \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\n\t# check all substring of length 2\n\tfor cl in range(2, n + 1): \n\t\tfor i in range(n - cl + 1): \n\t\t\tj = i + cl - 1\n\t\t\tif s[i] == s[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif s[i] == s[j]: \n\t\t\t\tL[i][j] = L[i + 1][j - 1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j - 1],L[i + 1][j]); \n\n\t# start position of the longest palindromic substring \n\tstart = 0\n\tlength = 1\n\tfor i in range(n): \n\t\tif (length < L[i][n - 1]): \n\t\t\tlength = L[i][n - 1] \n\t\t\tstart = i \n\treturn s[start - length + 1:start + length] \n\nprint(longest_palindromic_substring(\"abracadabra\"))", "predict": "def longest_palindrome_substring(s):\n    longest = ''\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            if substring == substring[::-1] and len(substring) > len(longest):\n                longest = substring\n    return longest"}
{"prompt": "Write a function in Python to generate n numbers of Fibonacci series. ", "label": "def fibonacci_series(n): \n    # First two terms \n    a = 0\n    b = 1\n    c = 0\n    print(\"Fibonacci Series:\", end = \" \")\n    print(a , b , end = \" \")\n    for i in range(2,n): \n        c = a + b \n        a = b \n        b = c \n        print(c , end = \" \") \n\n# Output should come like\n# 0 1 1 2 3 5 8 13 21 34", "predict": "def generateFibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b"}
{"prompt": "Write a valid python statement to convert a dict to a list ", "label": "mylist = list(mydict.items())", "predict": "list(my_dict.items())"}
{"prompt": "Create a python script to calculate the moving average of the given data\nData: [2, 3, 5, 10, 11] ", "label": "def moving_average(data, num_points):\n    moving_average_list = []\n    for i in range(0, len(data)-num_points+1):\n        window_sum = 0\n        for j in range(i, i+num_points):\n            window_sum += data[j]\n        moving_average_list.append(window_sum/num_points)\n    return moving_average_list", "predict": "def moving_average(data, window_size):\n    window = window_size\n    window_sum = 0\n\n    for i in range(len(data)):\n        window_sum = window_sum + data[i]\n        if i >= window - 1:\n            moving_avg = window_sum / window\n            print(moving_avg)\n        window_sum = window_sum - data[i - window + 1]\n\n\nmoving_average([2, 3, 5, 10, 11], 3)"}
{"prompt": "Implement a Python program to check if a number is divisible by another number.\n7, 2 ", "label": "def is_divisible(n, m):\n    if (n % m == 0):\n        return True\n    else:\n        return False\n    \nprint(is_divisible(7, 2))  # Outputs False", "predict": "def is_divisible(num1, num2):\n    return num1 % num2 == 0\n\nnum1 = 7\nnum2 = 2\n\nif is_divisible(num1, num2):\n    print('The number {} is divisible by {}'.format(num1, num2))\nelse:\n    print('The number {} is not divisible by {}'.format(num1, num2))"}
{"prompt": "Write a python code to identify outliers in data using Standard Deviation methods.\nData = [2, 3, 1, 4, 5, 6, 5, 8, 9, 10, 11, 12] ", "label": "import numpy as np \n\n# Create data\ndata = np.array([2, 3, 1, 4, 5, 6, 5, 8, 9, 10, 11, 12])\n\n# Calculate mean and standard deviation\nmean = np.mean(data)\nstd = np.std(data)\n\n# Set the boundaries\nlower_bound = mean - 3*std\nupper_bound = mean + 3*std\n\n# Find outliers\noutliers = [] \nfor i in data: \n    if i < lower_bound or i > upper_bound: \n        outliers.append(i)\n\n# Print the outliers\nprint(\"Outliers:\", outliers) \n\n\"\"\"\nOutliers: [1, 11, 12]\n\"\"\"", "predict": "import numpy as np\n\ndef identify_outliers(data):\n    # calculate the mean\n    mean = np.mean(data)\n    # calculate the standard deviation\n    std_dev = np.std(data)\n    # calculate the upper and lower limits\n    lower_limit = mean - (std_dev * 3)\n    upper_limit = mean + (std_dev * 3)\n    # identify the outliers\n    outliers = [x for x in data if x < lower_limit or x > upper_limit]\n    return outliers"}
{"prompt": "Create a neural network in Python which can classify a given set of food posters as either Italian or Mexican.\nTrain Data:\nItalian:\n- Pizza poster\n- Lasagna poster\n- Spaghetti poster\nMexican:\n- Burrito poster\n- Enchilada poster\n- Taco poster ", "label": "import tensorflow as tf\n\n# Set up the input and output data\nX = tf.placeholder(tf.float32, shape=[None, 3])\ny = tf.placeholder(tf.float32, shape=[None, 2])\n\n# Define the model\nmodel = tf.keras.Sequential()\nmodel.add(tf.keras.layers.Dense(6, activation=tf.nn.relu))\nmodel.add(tf.keras.layers.Dense(2, activation=tf.nn.softmax))\n\n# Train the model\nmodel.compile(optimizer='adam',\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])\n\nmodel.fit(X, y, epochs=10)", "predict": "import numpy as np\nimport tensorflow as tf\n\n# Create the model\nmodel = tf.keras.Sequential()\nmodel.add(tf.keras.layers.InputLayer(input_shape=(3,)))\nmodel.add(tf.keras.layers.Dense(32, activation='relu'))\nmodel.add(tf.keras.layers.Dense(1, activation='sigmoid'))\n\n# Compile the model\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n\n# Train the model\ntrain_data = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])\ntrain_labels = np.array([1, 0, 0])\nmodel.fit(train_data, train_labels, epochs=100)"}
{"prompt": "Write a Python function to take a text string as an input, and generate a table of the frequencies of each letter in the string.\nsample_string = \"HelloWorld\" ", "label": "def find_frequencies(sample_string):\n   frequency_table = dict()\n   for char in sample_string:\n      if char in frequency_table:\n         frequency_table[char] += 1\n      else:\n         frequency_table[char] = 1\n   return frequency_table\n\nresult = find_frequencies(\"HelloWorld\")\nprint(result)", "predict": "def letter_frequencies(sample_string):\n    freq = {}\n    for letter in sample_string:\n        if letter in freq:\n            freq[letter] += 1\n        else:\n            freq[letter] = 1\n    return freq\n\nfreq = letter_frequencies(sample_string)\nprint(freq)"}
{"prompt": "Generate a Python program to filter a list of strings to only return words that have 7 or more characters.\nwords = ['Apple', 'Banana', 'Cabbage', 'Cucumber'] ", "label": "words = ['Apple', 'Banana', 'Cabbage', 'Cucumber']\n\ndef filter_list(words):\n  filtered_list = []\n\n  for word in words:\n    if len(word) >= 7:\n      filtered_list.append(word)\n\n  return filtered_list", "predict": "def filter_words(words):\n    filtered_words = []\n    for word in words:\n        if len(word) >= 7:\n            filtered_words.append(word)\n    return filtered_words\n\nwords = ['Apple', 'Banana', 'Cabbage', 'Cucumber']\nfiltered_words = filter_words(words)\nprint(filtered_words)"}
{"prompt": "Write a for loop in Python to print out the squared value of the numbers from 0 to 10. ", "label": "for i in range(0,11):\n    print(i**2)", "predict": "for i in range(11):\n    print(i**2)"}
{"prompt": "Convert a given python data structure into a json string using json package\ndata = {\n    \"name\": \"John\",\n    \"age\": 30,\n    \"location\": \"Greece\"\n} ", "label": "import json\n\n# convert python data structure to json\ndata = {\n    \"name\": \"John\",\n    \"age\": 30,\n    \"location\": \"Greece\"\n}\n\ndata_string = json.dumps(data)\n\nprint(data_string) # '{\"name\": \"John\", \"age\": 30, \"location\": \"Greece\"}'", "predict": "import json\n\ndata = {\n    \"name\": \"John\",\n    \"age\": 30,\n    \"location\": \"Greece\"\n}\n\njson_string = json.dumps(data)\nprint(json_string)"}
{"prompt": "Develop a Twitter bot in Python. The bot should search for a given hashtag, like the posts it finds, and follow their authors.\nHashtag: #news ", "label": "import tweepy\n\n# authentication for twitter api\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_secret)\n\n# create an API instance\napi = tweepy.API(auth)\n\n# search for posts with the hashtag\nfor tweet in tweepy.Cursor(api.search, q='#news').items(10):\n # like post\n api.create_favorite(tweet.id)\n # follow the author\n api.create_friendship(tweet.user.id)", "predict": "import tweepy\n\nconsumer_key = '<your_consumer_key>'\nconsumer_secret = '<your_consumer_secret>'\naccess_token = '<your_access_token>'\naccess_token_secret = '<your_access_token_secret>'\n\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n\nhashtag = '#news'\n\nfor tweet in tweepy.Cursor(api.search, q=hashtag, rpp=100).items(100):\n api.create_friendship(tweet.user.id)\n api.update_status(status=tweet.text, is_retweet=True)"}
{"prompt": "Write a Python program to parse a JSON object. The program should take as input a JSON object and print the parsed values.\nSample JSON:\n\n{\n \"name\": \"John\",\n \"age\": 24,\n \"hobbies\": [\"Soccer\", \"Dance\"]\n} ", "label": "import json\n\n# sample json object \ndata = {\n \"name\": \"John\",\n \"age\": 24,\n \"hobbies\": [\"Soccer\", \"Dance\"]\n}\n\n# parse the json object \nparsed_data = json.loads(data)\n\n# print the parsed values \nprint(\"Name: \", parsed_data[\"name\"])\nprint(\"Age: \", parsed_data[\"age\"])\nprint(\"Hobbies: \", parsed_data[\"hobbies\"])", "predict": "import json\n\ndata = {\n \"name\": \"John\",\n \"age\": 24,\n \"hobbies\": [\"Soccer\", \"Dance\"]\n}\n\nparsed_data = json.loads(data)\n\nprint(\"Name:\", parsed_data[\"name\"])\nprint(\"Age:\", parsed_data[\"age\"])\nprint(\"Hobbies:\", parsed_data[\"hobbies\"])"}
{"prompt": "Create a Python script to help streamline the process of scraping data from a web page.\nNot applicable ", "label": "import requests\nfrom bs4 import BeautifulSoup\n\n# Get HTML content from target website\nr = requests.get('URL')\nhtml_doc = r.text\n\n# Create a beautiful soup object\nsoup = BeautifulSoup(html_doc)\n\n# Find and extract desired data\ndata = soup.select('SELECTOR') \n\n# Print extracted data\nfor x in data: \n print(x.text)", "predict": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.example.com'\n\n# Send a request to the URL\nr = requests.get(url)\n\n# Parse the HTML content\nsoup = BeautifulSoup(r.content, 'html.parser')\n\n# Find all the elements with a class of 'data'\ndata_elements = soup.find_all(class_='data')\n\n# Iterate over the elements and extract the data\nfor element in data_elements:\n data = element.text\n # Do something with the data\n\n# Output the data\nprint(data)"}
{"prompt": "Write a python class to represent a Person. The Person class will have name and age properties as well as a method that prints the name and age. ", "label": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def print_person(self):\n        print('Name:', self.name, ', Age:', self.age)", "predict": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def print_info(self):\n        print(\"Name:\", self.name, \"Age:\", self.age)"}
{"prompt": "Make an algorithm in Python for printing the maximum frequency of an element in an array.\nData = [1, 4, 2, 6, 2, 1, 2, 9] ", "label": "#Using Python\n\ndef max_frequency_element(data):\n    # Create an empty dictionary to store the frequency of each element\n    frequency = {}\n    \n    # Iterate over the list and fill in the frequency dictionary\n    for x in data:\n        if x in frequency:\n            frequency[x] += 1\n        else:\n            frequency[x] = 1\n            \n    # Now find the key with the maximum frequency\n    maximum_frequency = 0\n    max_frequency_element = None\n    \n    for key, value in frequency.items():\n        if value > maximum_frequency:\n            maximum_frequency = value\n            max_frequency_element = key\n            \n    return max_frequency_element\n\ndata = [1, 4, 2, 6, 2, 1, 2, 9]\nmax_frequency_element = max_frequency_element(data)\nprint(max_frequency_element)\n# Output: 2", "predict": "def findMaxFrequency(Data):\n    max_freq = 0\n    for i in range(len(Data)):\n        curr_freq = 1\n        for j in range(i+1, len(Data)):\n            if Data[i] == Data[j]:\n                curr_freq += 1\n                if curr_freq > max_freq:\n                    max_freq = curr_freq\n    return max_freq\n\nData = [1, 4, 2, 6, 2, 1, 2, 9]\nmax_freq = findMaxFrequency(Data)\nprint(\"The maximum frequency of an element in the array is: \" + str(max_freq))"}
{"prompt": "Design an algorithm in Python that checks whether a given number is a perfect square. ", "label": "def is_perfect_square(n):\n  if n < 0: \n    return False\n  x = n\n  while x*x > n:\n      x = (x + n/x) // 2\n  return x*x == n", "predict": "def is_perfect_square(num):\n    if num < 0:\n        return False\n    x = num\n    while x * x > num:\n        x = (x + num / x) // 2\n    return x * x == num"}
{"prompt": "Write a Python program which prints all perfect numbers between 1 and a given number N (inclusive).\n25 ", "label": "def print_perfect_numbers(N):\n for val in range(1, N + 1):\n   sum = 0\n   for testval in range(1, val):\n       if (val % testval) == 0:\n           sum += testval\n   if (sum == val):\n       print(val)", "predict": "def perfect_numbers(n):\n    for i in range(1, n+1):\n        sum = 0\n        for j in range(1, i):\n            if i % j == 0:\n                sum += j\n        if sum == i:\n            print(i)\n\nperfect_numbers(25)\n\n# Output\n4\n6\n9\n16\n20\n24"}
{"prompt": "To start pyHegel, import the module and call the function start_pyHegel(). If starting on Windows with the Console program, call start_console() instead. ", "label": "# -*- coding: utf-8 -*-\n\n########################## Copyrights and license ############################\n#                                                                            #\n# Copyright 2011-2015  Christian Lupien <christian.lupien@usherbrooke.ca>    #\n#                                                                            #\n# This file is part of pyHegel.  http://github.com/lupien/pyHegel            #\n#                                                                            #\n# pyHegel is free software: you can redistribute it and/or modify it under   #\n# the terms of the GNU Lesser General Public License as published by the     #\n# Free Software Foundation, either version 3 of the License, or (at your     #\n# option) any later version.                                                 #\n#                                                                            #\n# pyHegel is distributed in the hope that it will be useful, but WITHOUT     #\n# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or      #\n# FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public        #\n# License for more details.                                                  #\n#                                                                            #\n# You should have received a copy of the GNU Lesser General Public License   #\n# along with pyHegel.  If not, see <http://www.gnu.org/licenses/>.           #\n#                                                                            #\n##############################################################################\n\nfrom __future__ import absolute_import\n\n# Use version according to option 5 in https://packaging.python.org/en/latest/single_source_version.html\n\n# make sure that new versions numbers compare properly when using\n# pkg_resources.parse_version\n__version__ = '1.0.0rc2'\n__copyright__ = '2011-2015  Christian Lupien'\n\ndef start_pyHegel():\n    \"\"\" This is the recommanded way to start pyHegel.\n        It starts ipython in a standard way (pylab, autocall enabled,...)\n        and then loads and initializes the pyHegel commands.\n\n        If the python session was started with command line arguments\n        --console, it will try to start pyHegel in the Console program\n        that comes with pythonxy. This is windows only.\n\n        If you later need access to the commands in a module:\n            import pyHegel.commands as cmds\n            cmds.get(somedevice)\n        or\n            from pyHegel.commands import *\n            get(somedevice)\n        or any other variants you want.\n    \"\"\"\n    import sys\n    import os\n    if os.name == 'nt' and len(sys.argv) == 2 and sys.argv[1] == '--console':\n        start_console()\n    else:\n        from . import main\n        main.main_start()\n\ndef start_console():\n    from . import win_console_helper\n    win_console_helper.start_console()\n", "predict": "#!/usr/bin/env python\n\nimport sys, os, re, shutil\nfrom pyHegel.hegel_interface import hegel_interface\n\nif __name__ == '__main__':\n    if sys.platform == 'win32':\n        try:\n            import console\n            start_console()\n        except ImportError:\n            print 'Unable to start console.  Please start the Console program before starting pyHegel.'\n            print 'http://code.google.com/p/console-program/'\n            sys.exit()\n    else:\n        try:\n            from pexpect import spawn\n            start_pyHegel()\n        except ImportError:\n            print 'Unable to start pyHegel.  Please install the pexpect package.'\n            print 'http://www.expect.com/pexpect/'\n            sys.exit()\n\n\ndef start_pyHegel():\n    \"\"\"\n    To start pyHegel, import the module and call the function start_pyHegel().\n    If starting on Windows with the Console program, call start_console() instead.\n    \"\"\"\n    try:\n        import pyHegel.hegel_interface as hegel\n    except ImportError:\n        print 'Unable to import pyHegel.  Please make sure you have installed pyHegel.'\n        print 'http://code.google.com/p/pyhegel/'\n        sys.exit()\n\n    if not os.path.exists('pyHegel'):\n        print 'pyHegel directory not found.  Please make sure you have downloaded the source code.'\n        print 'http://code.google.com/p/pyhegel/'\n        sys.exit()\n\n    if os.path.exists('pyHegel/__init__.py'):\n        print 'pyHegel is already initialized.  Exiting.'\n        sys.exit()\n\n    if os.path.exists('pyHegel/hegel_interface.py'):\n        print 'pyHegel is already initialized.  Exiting.'\n        sys.exit()\n\n    print 'Initializing pyHegel...'\n    shutil.copy('pyHegel/hegel_interface.py', 'pyHegel"}
{"prompt": "Design a Python program that predicts a movie's popularity given its genre, rating, and release date.\nThe input includes three parameters: genre (action), rating (8.5), and release date (2020-02-10). ", "label": "import pandas as pd\n\n# read the data file\ndf = pd.read_csv('movie_data.csv')\n\n# feature engineering\ndf['action'] = (df['genres'].str.contains('Action')) * 1\n\n# define which features to be used\nfeatures_df = df[['action','rating']]\n\n# define the target variable\ntarget = df.popularity\n\n# split data into train and test sets\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(features_df, target, test_size=0.2, random_state=42)\n\n# train a RandomForestRegressor model\nfrom sklearn.ensemble import RandomForestRegressor\nrf = RandomForestRegressor()\nrf.fit(X_train, y_train)\n\n# make prediction\ninput_data = {\n 'action': 1,\n 'rating': 8.5,\n 'release_date': '2020-02-10'\n}\nprediction = rf.predict([input_data])\n\nprint(prediction) // Outputs the predicted movie popularity", "predict": "import pandas as pd\n\n# Load the data\ndata = pd.read_csv('movie_data.csv')\n\n# Prepare the input data\ninput_data = [['action', 8.5, '2020-02-10']]\n\n# Create a model to predict the popularity\nmodel = Model()\npredictions = model.predict(input_data)\n\n# Print the predictions\nfor prediction in predictions:\n print(prediction)\n\n# Output\n# 8.2"}
{"prompt": "Design a program that takes a date as input and calculates the day of the week that date falls on.\n31/05/2020 ", "label": "#!/usr/bin/env python3\n\nimport datetime\n\ndef dayOfWeek(date):\n   year,month,day = map(int,date.split('/'))\n   dayNumber = datetime.date(year, month, day).weekday()\n \n   return [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"][dayNumber]", "predict": "# Python program to find the day of the week \n# from a given date \nfrom datetime import date\n\n# get the date from the user \nd = date(2020, 5, 31) \n\n# calculate the day of the week \nday = d.strftime(\"%A\") \n\n# print the result \nprint(\"The day of the week is:\", day)"}
{"prompt": "Create a Python program which takes a list of integers and prints a list containing only those integers which have more than 2 occurrences in the input list.\nlist = [1, 2, 3, 4, 5, 2, 3, 1, 6, 3] ", "label": "list = [1, 2, 3, 4, 5, 2, 3, 1, 6, 3]\n\ndef findDuplicates(list):\n result = []\n seen = set()\n \n for num in list:\n if num not in seen:\n seen.add(num)\n else:\n result.append(num)\n \n return result\n\nprint(findDuplicates(list))", "predict": "def find_duplicates(list):\n    result = []\n    for num in list:\n        if list.count(num) > 2:\n            result.append(num)\n    return result\n\nlist = [1, 2, 3, 4, 5, 2, 3, 1, 6, 3]\nprint(find_duplicates(list))\n# Output: [1, 3]"}
{"prompt": "Create a Python program that will count and print the number of vowels and consonants in a user-provided string.\nDeclare a variable \"text\" that contains a sample string ", "label": "text = 'This is a sample string'\n\n# Get the total number of characters \ntotal = len(text) \n\n# Count the number of vowels \nvowels = 0 \nfor character in text: \n if character in 'aeiou': \n  vowels += 1\n\n# Count the number of consonants \nconsonants = 0 \nfor character in text: \n if character in 'bcdfghjklmnpqrstvwxyz': \n  consonants += 1\n\n# Print the result \nprint(f\"Vowels: {vowels}\")\nprint(f\"Consonants: {consonants}\")\nprint(f\"Total: {total}\")", "predict": "text = \"This is a sample string\"\n\nvowels = 0\nconsonants = 0\n\nfor char in text:\n    if char.lower() in \"aeiou\":\n        vowels += 1\n    elif char.isalpha():\n        consonants += 1\n\nprint(\"Number of vowels:\", vowels)\nprint(\"Number of consonants:\", consonants)"}
{"prompt": "Create a Python program that takes in a 2D array and returns the sum of all the elements.\n[[1, 2, 3],\n [4, 5, 6],\n [7, 8, 9]] ", "label": "def sum_2D_array(arr):\n    \"\"\"Return the sum of all the elements in a 2D array.\"\"\"\n    sum_arr = 0\n    for row in arr:\n        for elem in row:\n            sum_arr += elem\n    return sum_arr", "predict": "def sum_2d_array(arr):\n  sum = 0\n  for row in arr:\n    for num in row:\n      sum += num\n  return sum\n\nprint(sum_2d_array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])) # 45"}
{"prompt": "Implement a logistic regression algorithm in Python to solve a classification task.\nNot applicable ", "label": "import numpy as np\n\nclass LogisticRegression:\n    def __init__(self, learning_rate=0.001, max_iter=1000):\n        self.learning_rate = learning_rate\n        self.max_iter = max_iter\n        self.weights = None\n\n    def sigmoid(self, z):\n        return 1 / (1 + np.exp(-z))\n\n\n    def fit(self, X, y):\n        # add bias term to X\n        X = np.hstack([np.ones([X.shape[0], 1]), X])\n        num_features = X.shape[1]\n        self.weights = np.zeros(num_features)\n\n        for _ in range(self.max_iter):\n            # compute the linear combination of the input and weights (z)\n            z = np.dot(X, self.weights)\n            # compute the model output (a)\n            a = self.sigmoid(z)\n            # compute the cost of the model output\n            cost = (-y * np.log(a) - (1 - y) * np.log(1 - a)).mean()\n            # compute the derivatives of the cost for each weights\n            dCost_dw = np.dot(X.T, (a - y)) / len(y)\n            # update weights\n            self.weights -= self.learning_rate * dCost_dw\n\n    def predict(self, X):\n        # add bias term to X\n        X = np.hstack([np.ones([X.shape[0], 1]), X])\n        z = np.dot(X, self.weights)\n        a = self.sigmoid(z) \n        return np.round(a)", "predict": "import numpy as np\n\ndef logistic_regression(X, y):\n    # Get the number of training examples\n    m = X.shape[0]\n    \n    # Calculate the mean and variance of the features\n    mean = np.mean(X, axis=0)\n    var = np.var(X, axis=0)\n    \n    # Calculate the logistic function\n    logistic_prob = 1 / (1 + np.exp(-(np.dot(X, weights) + b)))\n    \n    # Calculate the cost function\n    cost = -(1/m)*(np.dot(y.T, np.log(logistic_prob)) + np.dot((1-y).T, np.log(1-logistic_prob)))\n    \n    # Calculate the gradients\n    grad_weights = (1/m)*np.dot(X.T, (logistic_prob - y))\n    grad_b = (1/m)*np.sum(logistic_prob - y, axis=0)\n    \n    # Update weights and bias\n    weights = weights - learning_rate*grad_weights\n    b = b - learning_rate*grad_b\n    \n    return weights, b"}
{"prompt": "Develop a Python program to convert the following Fahrenheit value to Celsius.\n212 ", "label": "def convert_to_celsius(fahrenheit):\n    celsius = (fahrenheit - 32) / 1.8\n\n    return celsius\n\nfahrenheit = 212\ncelsius = convert_to_celsius(fahrenheit)\nprint(celsius)", "predict": "def fahrenheit_to_celsius(fahrenheit):\n    celsius = (fahrenheit - 32) * 5/9\n    return celsius\n\ncelsius = fahrenheit_to_celsius(212)\nprint(celsius)"}
{"prompt": "Create a program in Python to remove duplicates from a list and return the new list.\narr = [1, 2, 3, 1, 4] ", "label": "def remove_duplicates(arr):\n    new_list = []\n    for item in arr:\n        if item not in new_list:\n            new_list.append(item)\n    return new_list", "predict": "def remove_duplicates(arr):\n    new_list = []\n    for item in arr:\n        if item not in new_list:\n            new_list.append(item)\n    return new_list"}
{"prompt": "Create a class in Python to manage the expiry dates of products. ", "label": "class ProductExpiry:\n    def __init__(self, product_id, expiry_date):\n        self.product_id = product_id\n        self.expiry_date = expiry_date\n\n    def is_expired(self):\n        \"\"\"Returns True if the product has passed its expiry date, False otherwise\"\"\"\n        return datetime.now() > self.expiry_date\n    \n    def get_time_left(self):\n        \"\"\"Returns the number of days left before the product expires\"\"\"\n        time_left = (self.expiry_date - datetime.now())\n        days_left = time_left.days\n        return days_left", "predict": "class ProductExpiry:\n    def __init__(self, product_name, expiry_date):\n        self.product_name = product_name\n        self.expiry_date = expiry_date\n\n    def is_expired(self):\n        current_date = datetime.now()\n        return current_date > self.expiry_date"}
{"prompt": "Create a Python script that includes a function that returns the sum of the first n prime numbers.\nn = 5 ", "label": "import math\n \ndef is_prime(num):\n    # Check if the number is 1 or less than 1\n    if num <= 1:\n        return False\n    # Check if the number is divisible by any number between 2 and the square root of the number\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n \ndef sum_primes(n):\n    prime_sum = 0\n    count = 0\n \n    i = 2\n    while count < n:\n        if is_prime(i):\n            prime_sum += i\n            count += 1\n        i += 1\n \n    return prime_sum\n\nsum_primes(n)", "predict": "def sum_primes(n):\n    # Initialize a list to store the prime numbers\n    primes = []\n    # Initialize a counter to store the sum of the primes\n    prime_sum = 0\n\n    # Loop through each number from 2 to n\n    for num in range(2, n + 1):\n        # Check if the number is prime\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        # If the number is prime, add it to the list\n        if is_prime:\n            primes.append(num)\n            prime_sum += num\n\n    # Return the sum of the primes\n    return prime_sum\n\nprint(sum_primes(5))"}
{"prompt": "Design and generate a valid Java program that uses Stack Overflow's API to print all of the most recent questions and answers on a specific topic.\nTopic - Python ", "label": "import java.net.URL;\nimport java.util.Scanner;\n \npublic class QueryOverflow {\n    public static void main(String[] args) throws Exception {\n        URL url = new URL(\"https://api.stackexchange.com/2.2/search?order=desc&sort=activity&tags=python&site=stackoverflow\");\n        Scanner scan = new Scanner(url.openStream());\n        String str = new String();\n        while (scan.hasNext())\n            str += scan.nextLine();\n        scan.close();\n \n        JSONObject obj = new JSONObject(str);\n        JSONArray items = obj.getJSONArray(\"items\");\n        for (int i = 0; i < items.length(); i++)\n        {\n            // print title\n            System.out.println(items.getJSONObject(i).getString(\"title\"));\n            // print answer\n            System.out.println(items.getJSONObject(i).getJSONObject(\"accepted_answer\").getString(\"body\"));\n        }\n    }\n}", "predict": "import java.net.URL;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        URL url = new URL(\"https://api.stackexchange.com/2.2/search?order=desc&sort=activity&site=stackoverflow&q=python\");\n        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n        String line;\n        while ((line = reader.readLine())!= null) {\n            System.out.println(line);\n        }\n        reader.close();\n    }\n}"}
{"prompt": "Write a Python function to check whether a number is in a given range.\nnum = 10\nlower = 10\nupper = 20 ", "label": "def check_range(num, lower, upper):\n        return (num >= lower and num <= upper)\n \nprint(check_range(10, 10, 20)) # prints True", "predict": "def is_in_range(num, lower, upper):\n    if num >= lower and num <= upper:\n        return True\n    else:\n        return False"}
{"prompt": "Connect to a database, retrieve data, and write it to a", "label": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n# TESTING FILE made.by.a.fox. 12.2.15\n# Updated by acrule 01.21.16\n\n#FEATURE LIST\n#   Y   connect to db\n#   Y   write to file\n#   Y   Write JSON format\n#       Accept input date parameter\n#KNOWN ISSUES\n#   2. no formatting or conversion of datetime stamps\n\nimport re\nimport os\nimport sys\n\nimport json\nimport sqlite3 as lite\n\nimport collections\n\nimport time\nimport datetime\n\n\ndb_file = os.path.expanduser('~/.traces/traces.sqlite')  #looks for db under ~/.traces\ncon = lite.connect(db_file)\n\nwith con:\n\n    data = []  #master data container\n    apps = []  #list of apps\n    windows = [] # list of windows\n    urls = []\n    appevents = []  #list of application events\n    windowevents = [] #list of window events\n    urlevents = []\n    exps = []  #list of experiences\n    images = [] #list of screenshots\n    words = [] #list of keywords\n\n    cur = con.cursor()\n\n    #SQL query strings\n    appsSQL = \"SELECT * FROM app\"\n    windowsSQL = \"SELECT * FROM window\"\n    urlSQL = \"SELECT * FROM url\"\n    activeappSQL = \"SELECT a.id, a.app_id, a.event, a.time as startt, min(b.time) AS endt FROM appevent a, appevent b WHERE a.app_id = b.app_id AND a.event = 'Active' AND b.event in ('Inactive', 'Close') AND a.time < b.time AND a.time IS NOT NULL AND b.time IS NOT NULL GROUP BY startt\"\n    activewindowSQL = \"SELECT a.id, a.window_id, a.event, a.time as startt, min(b.time) AS endt FROM windowevent a, windowevent b WHERE a.window_id = b.window_id AND a.event = 'Active' AND b.event in ('Inactive', 'Close') AND a.time < b.time AND a.time IS NOT NULL AND b.time IS NOT NULL GROUP BY startt\"\n    activeurlSQL = \"SELECT a.id, a.url_id, a.app_id, a.window_id, a.event, a.time as startt, min(b.time) AS endt FROM urlevent a, urlevent b WHERE a.url_id = b.url_id AND a.window_id = b.window_id AND a.app_id = b.app_id AND a.event = 'Active' AND b.event in ('Inactive', 'Close') AND a.time < b.time AND a.time IS NOT NULL AND b.time IS NOT NULL GROUP BY startt\"\n    experienceSQL = \"SELECT * FROM experience\"\n    wordsSQL = \"SELECT * FROM keys\"\n\n    #GET list of applications\n    cur.execute(appsSQL)\n    rows = cur.fetchall()\n    for row in rows:\n        a = collections.OrderedDict()\n        a['id'] = row[0]\n        a['time'] = row[1]\n        a['name'] = row[2]\n        apps.append(a)\n\n    #GET list of windows\n    cur.execute(windowsSQL)\n    rows = cur.fetchall()\n    for row in rows:\n        w = collections.OrderedDict()\n        w['id'] = row[0]\n        w['time'] = row[1]\n        w['name'] = row[2]\n        w['app'] = row[3]\n        windows.append(w)\n\n    #GET list of urls\n    cur.execute(urlSQL)\n    rows = cur.fetchall()\n    for row in rows:\n        u = collections.OrderedDict()\n        u['id'] = row[0]\n        u['time'] = row[1]\n        u['title'] = row[2]\n        u['url'] = row[3]\n        u['host'] = row[4]\n        urls.append(u", "predict": "file.\n\nimport mysql.connector\n\n# Connect to database\nmydb = mysql.connector.connect(\n host=\"localhost\",\n user=\"root\",\n passwd=\"password\",\n database=\"mydatabase\"\n)\n\n# Retrieve data\nmycursor = mydb.cursor()\nmycursor.execute(\"SELECT * FROM mytable\")\n\n# Write data to file\nf = open('data.txt', 'w')\nfor row in mycursor.fetchall():\n f.write(str(row))\n f.close()"}
{"prompt": "Compose a python program to search an element in an array\n[2, 3, 4, 5] ", "label": "def linear_search(arr, x): \n    for i in range(len(arr)): \n  \n        if arr[i] == x: \n            return i+1\n  \n    return -1\n\narr = [2, 3, 4, 5] \nx = 4\n\nprint(linear_search(arr, x))", "predict": "def search(arr, x): \n    for i in range(len(arr)): \n        if arr[i] == x: \n            return i \n    return -1"}
{"prompt": "Create a class in Python using object-oriented programming that creates instance of a book. ", "label": "class Book(object):\n    def __init__(self, title, author, year_published):\n        self.title = title\n        self.author = author\n        self.year_published = year_published\n\n    def __str__(self):\n        return '{0} by {1} published in {2}.'.format(\n            self.title, self.author, self.year_published)", "predict": "class Book:\n    def __init__(self, title, author, pages):\n        self.title = title\n        self.author = author\n        self.pages = pages\n    \n    def get_title(self):\n        return self.title\n    \n    def get_author(self):\n        return self.author\n    \n    def get_pages(self):\n        return self.pages"}
{"prompt": "Write a Python script to implement an iterator that iterates over a given array.\n[2, 5, 6, 8, 9] ", "label": "def iterator(array):\n  index = 0\n  while (index < len(array)):\n    yield array[index]\n    index += 1\n\ngiven_array = [2, 5, 6, 8, 9]\niterating = iterator(given_array)\n\nfor value in iterating:\n  print(value)", "predict": "class ArrayIterator:\n    def __init__(self, array):\n        self.array = array\n        self.index = 0\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if self.index < len(self.array):\n            value = self.array[self.index]\n            self.index += 1\n            return value\n        else:\n            raise StopIteration\n\narray = [2, 5, 6, 8, 9]\n\niterator = ArrayIterator(array)\nfor value in iterator:\n    print(value)"}
{"prompt": "Suggest a data structure in Python to store the following information about a list of students: Name, Age, Grade. ", "label": "students = [ \n  { \n    'name': 'John Doe', \n    'age': 18, \n    'grade': 'A'\n  }, \n  { \n    'name': 'Jane Smith', \n    'age': 16, \n    'grade': 'B'\n  } \n]", "predict": "student_data = [\n    {\n        'name': 'John',\n        'age': 18,\n        'grade': 'A'\n    },\n    {\n        'name': 'Jane',\n        'age': 16,\n        'grade': 'B'\n    },\n    {\n        'name': 'Mary',\n        'age': 17,\n        'grade': 'C'\n    }\n]"}
{"prompt": "Write a python code to find the longest contiguous increasing subsequence in the following array.\n[3,6,9,1,2,3,4,5] ", "label": "\"\"\"\nFind the longest contiguous increasing subsequence \n\"\"\"\n\ndef long_increasing_subsequence(arr): \n    n = len(arr) \n    dp = [1 for x in range(n)] \n   \n    for i in range (1 , n): \n        for j in range(0 , i): \n            print (i,j) \n            if (arr[i] > arr[j]) and (dp[i]< dp[j] + 1): \n                dp[i] = dp[j]+1\n   \n    maximum = 0\n    for i in range(n): \n        maximum = max(maximum, dp[i])  \n\n    return maximum \n\narr =[3,6,9,1,2,3,4,5] \nlongest_subsequence_length = long_increasing_subsequence(arr)\nprint(longest_subsequence_length) # prints 5", "predict": "def longest_increasing_subsequence(arr):\n    n = len(arr)\n    lis = [1]*n\n    for i in range (1, n):\n        for j in range(0, i):\n            if arr[i] > arr[j] and lis[i]< lis[j] + 1 :\n                lis[i] = lis[j]+1\n    maximum = 0\n    for i in range(n):\n        maximum = max(maximum, lis[i])\n    return maximum\n\narr = [3,6,9,1,2,3,4,5]\nprint(\"Length of Longest Increasing Subsequence is\", longest_increasing_subsequence(arr))"}
{"prompt": "Create a Python for loop that prints out each element in a given list.\n[10, 20, 30, 40] ", "label": "for element in [10,20,30,40]:\n    print(element)", "predict": "for item in [10, 20, 30, 40]:\n    print(item)"}
{"prompt": "Create a Python program to calculate the number of possible combinations of a given set of elements.\nrange = [1, 2, 3] ", "label": "def calculate_combinations(range):\n    count = 0\n\n    # base case\n    if len(range) == 0:\n        return 0\n    if len(range) == 1:\n        return 1\n\n    # recursive case\n    for i in range:\n        sub_set = range[:]\n        sub_set.remove(i)\n        count += calculate_combinations(sub_set) + 1\n\n    return count\n\nrange = [1, 2, 3]\nprint(calculate_combinations(range))\n# Output: 6", "predict": "def combinations(range):\n    return len(range) ** len(set(range))\n\nprint(combinations([1, 2, 3])) # Output: 27"}
{"prompt": "Can you write a program in Python to remove the duplicate elements in a list?\n[5, 9, 2, 4, 5, 9, 2] ", "label": "def remove_duplicates(arr):\n    new_arr = []\n    for item in arr:\n        if item not in new_arr:\n            new_arr.append(item)\n    return new_arr\n\nmy_list = [5, 9, 2, 4, 5, 9, 2]\nprint(remove_duplicates(my_list))\n# Output: [5, 9, 2, 4]", "predict": "def remove_duplicates(list):\n    new_list = []\n    for element in list:\n        if element not in new_list:\n            new_list.append(element)\n    return new_list\n\nlist = [5, 9, 2, 4, 5, 9, 2]\nprint(remove_duplicates(list))"}
{"prompt": "Write a Python function to remove elements from a given list of integers, if the integer is a multiple of 3\nlist = [3, 6, 9, 11, 12, 15] ", "label": "def remove_multiple_of_three(list):\n  new_list = []\n  for item in list:\n    if item % 3 != 0:\n      new_list.append(item)\n  return new_list", "predict": "def remove_multiples_of_3(list):\n    return [i for i in list if i % 3!= 0]\n\nprint(remove_multiples_of_3(list))"}
{"prompt": "Create an algorithm in Python that uses a greedy approach to scheduling tasks. The algorithm should take in a list of tasks and the corresponding deadlines, and output a list of tasks that can be completed without exceeding any deadlines.\n[(\"Task A\", 2), (\"Task B\", 1), (\"Task C\", 3)] ", "label": "def schedule_tasks(tasks):\n  scheduled_tasks = []\n  tasks.sort(key=lambda x: x[1]) # sort tasks by deadline\n  current_time = 0\n  \n  while len(tasks) > 0:\n    for task in tasks:\n      if current_time + task[1] <= task[2]: # check if the task can be completed before its deadline\n        scheduled_tasks.append(task) # add the task to the list of scheduled tasks\n        current_time += task[1] # update the current time\n        tasks.remove(task) # remove the task from the list of tasks\n        break # move on to the next task\n  \n  return scheduled_tasks\n\nschedule_tasks([(\"Task A\", 2), (\"Task B\", 1), (\"Task C\", 3)]); # returns [(\"Task B\", 1), (\"Task A\", 2)]", "predict": "def schedule_tasks(tasks):\n    # Sort tasks by deadline in ascending order\n    tasks.sort(key=lambda x: x[1])\n\n    # Create a result list\n    result = []\n\n    # Iterate through the tasks\n    for task in tasks:\n        # Check if any of the tasks in the result list have a deadline later than the current task\n        for t in result:\n            if t[1] >= task[1]:\n                # If so, append the current task to the result list\n                result.append(task)\n                break\n\n    # Return the result list\n    return result\n\n# Example\ntasks = [(\"Task A\", 2), (\"Task B\", 1), (\"Task C\", 3)]\nprint(schedule_tasks(tasks))\n# Output: [(\"Task A\", 2), (\"Task B\", 1)]"}
{"prompt": "You need to create a python module to explain the Canny Edge Detection algorithm. ", "label": "import numpy as np\n \ndef cannyEdgeDetector(img, sigma):\n    \n    # Step 1: Filter the image with a Gaussian filter to remove noise\n    blurred = gaussianFilter(img, sigma)\n    \n    # Step 2: Obtain the gradients (Gx, Gy) of the blurred image\n    Gx, Gy = sobelFilter(blurred)\n    \n    # Step 3: Calculate the magnitude and angle of the gradient\n    magnitude, angle = calculateGradient(Gx, Gy)\n    \n    # Step 4: Non-maximum suppression to thin the edges while retaining \n    # strong edge points\n    thin_image = nonMaximumSuppression(magnitude, angle)\n    \n    # Step 5: Double threshold to classify pixels as weak or strong edge\n    strong_px, weak_px = doubleThreshold(thin_image)\n    \n    # Step 6: Trace through the edge map and obtain the final edges\n    edges = followEdge(strong_px, weak_px)\n    \n    return edges", "predict": "# Python module to explain the Canny Edge Detection algorithm\n\ndef canny_edge_detection(image):\n    # Convert the image to grayscale\n    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n\n    # Apply Gaussian blur to the image\n    blurred_image = cv2.GaussianBlur(gray_image, (5, 5), 0)\n\n    # Compute the edges using the Sobel operator\n    sobel_x = cv2.Sobel(blurred_image, cv2.CV_64F, 1, 0, ksize=5)\n    sobel_y = cv2.Sobel(blurred_image, cv2.CV_64F, 0, 1, ksize=5)\n\n    # Calculate the magnitude and direction of the gradient\n    magnitude, direction = cv2.cartToPolar(sobel_x, sobel_y, angleInDegrees=True)\n\n    # Set the threshold for edge detection\n    threshold = 0.03 * magnitude.max()\n\n    # Non-maximum suppression\n    magnitude[magnitude < threshold] = 0\n\n    # Double thresholding\n    non_max_suppressed = cv2.threshold(magnitude, 0.1 * magnitude.max(), 255, cv2.THRESH_BINARY)[1]\n    non_max_suppressed = cv2.bitwise_and(non_max_suppressed, direction)\n\n    # Hysteresis thresholding\n    low_threshold = 0.2 * magnitude.max()\n    high_threshold = 0.8 * magnitude.max()\n    edges = cv2.threshold(non_max_suppressed, low_threshold, high_threshold, cv2.THRESH_BINARY)[1]\n\n    # Follow the edges\n    lines = cv2.HoughLinesP(edges, 1, np.pi / 180, 100, minLineLength=100, maxLineGap=10)\n\n    return edges"}
{"prompt": "Write a Python program for predicting stock prices.\nA sample dataset with historic prices for Apple Inc. (AAPL) ", "label": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Read the dataset\ndataset = pd.read_csv('AAPL.csv')\n\n# Separate the dataset into features and labels\n#labels = dataset['Label']\ny = np.array(dataset['Close'])\ndataset.drop(\"Close\", axis=1, inplace=True)\nx = np.array(dataset)\n\n# Split the data into training and testing sets\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25)\n\n# Create the model\nfrom sklearn.ensemble import RandomForestRegressor\nregressor = RandomForestRegressor(n_estimators=100)\n\n# Train the model\nregressor.fit(x_train, y_train)\n\n# Make predictions\ny_pred = regressor.predict(x_test)\n\n# Check the accuracy\nfrom sklearn.metrics import mean_squared_error\nmse = mean_squared_error(y_test, y_pred)\nprint(\"Mean squared error:\", mse)", "predict": "import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Read the dataset\ndata = pd.read_csv('AAPL.csv')\n\n# Extract the data\nx = data['Date'].values.reshape(-1,1)\ny = data['Close'].values\n\n# Create the linear regression model\nmodel = LinearRegression()\nmodel.fit(x, y)\n\n# Make predictions\npredictions = model.predict(x)"}
{"prompt": "Create a machine learning model in Python that will classify each sentence as Positive, Neutral or Negative sentiment.\nNot applicable ", "label": "import spacy\nimport nltk\nfrom nltk.corpus import opinion_lexicon\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.svm import LinearSVC\n\n# Download and create a spaCy model\nnlp = spacy.load('en_core_web_sm')\n\n# Create a list of positive, negative and neutral words\npositive_words = opinion_lexicon.positive()\nnegative_words = opinion_lexicon.negative()\nneutral_words = list(set(nlp.vocab.words) - set(positive_words) - set(negative_words))\n\n# Create a Bag of Words Vectorizer\nvectorizer = CountVectorizer(vocabulary=list(positive_words + neutral_words + negative_words))\n\ndef create_examples(words, sentiment):\n    examples = []\n    # Create BOW for each example\n    for w in words:\n        bow = vectorizer.transform([w])\n        examples.append((bow, sentiment))\n    return examples\n\n# Create training examples\npositive_examples = create_examples(positive_words, 'POSITIVE')\nnegative_examples = create_examples(negative_words, 'NEGATIVE')\nneutral_examples = create_examples(neutral_words, 'NEUTRAL')\n\n# Create training data\ntrain_data = positive_examples + negative_examples + neutral_examples\n\n# Train a classifier\nclassifier = LinearSVC()\nclassifier.fit([x[0] for x in train_data], [x[1] for x in train_data])\n\ndef predict_sentiment(sentence):\n    # Create BOW of sentence\n    bow = vectorizer.transform([sentence])\n    # Get sentiment\n    sentiment = classifier.predict(bow)[0]\n    return sentiment\n\nsentence = 'I had a great time today!'\nsentiment = predict_sentiment(sentence)\nprint('The sentiment of the sentence is:', sentiment)", "predict": "import pandas as pd\nimport numpy as np\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\n# Load the data\ndata = pd.read_csv('sentiment.csv')\n\n# Extract the features and labels\nX = data['text']\ny = data['sentiment']\n\n# Vectorize the features\nvectorizer = CountVectorizer()\nX = vectorizer.fit_transform(X)\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train the model\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\n# Evaluate the model\nscore = model.score(X_test, y_test)\nprint(score)"}
{"prompt": "Optimize a Python program for space efficiency. The program should take input from the command line, and should determine whether a given three-digit number is an Armstrong number or not.\nArmstrongNumber(371) ", "label": "import math  \n  \ndef ArmstrongNumber(num): \n  sum = 0 \n  temp_num = num \n  digits_count = 0 \n  \n  while temp_num>0: \n    digits_count += 1  \n    temp_num = math.floor(temp_num/10)  \n  \n  digits_sum = 0 \n    \n  while num > 0:  \n    r = num % 10  \n    sum += math.pow(r, digits_count)  \n    num = math.floor(num/10)  \n      \n  if sum == temp_num: \n    print (f'{temp_num} is an Armstrong number') \n  else: \n    print (f'{temp_num} is not an Armstrong number ')  \n  \nnum = int(input(\"Enter a number: \"))\nArmstrongNumber(num)", "predict": "#!/usr/bin/env python\n\n# importing the sys module\nimport sys\n\n# taking the input from the command line\nnum = int(sys.argv[1])\n\n# calculating the sum of the cube of each digit\nsum = 0\ntemp = num\n\nwhile temp > 0:\n digit = temp % 10\n sum += digit ** 3\n temp //= 10\n\n# checking if the sum is equal to the number\nif num == sum:\n print(num, \"is an Armstrong number\")\nelse:\n print(num, \"is not an Armstrong number\")"}
{"prompt": "Modify a Python program to encrypt a string using the XOR Cipher.\ncurrent program:\ndef xor_strings(xs, ys):\n    return \"\".join(chr(ord(x) ^ ord(y)) for x, y in zip(xs, ys))\n\npassword = \"TestPassword\"\nstring = \"TopSecret\"\n\nprint(xor_strings(password, string)) ", "label": "def xor_strings(xs, ys):\n    output = \"\"\n    for i in range(0, len(xs)):\n        output += format(ord(xs[i]) ^ ord(ys[i]), '02x').upper()\n\n    return output\n\npassword = \"TestPassword\"\nstring = \"TopSecret\"\n\nprint(xor_strings(password, string))", "predict": "def xor_strings(xs, ys):\n    return \"\".join(format(ord(x) ^ ord(y), 'x').upper() for x, y in zip(xs, ys))\n\npassword = \"TestPassword\"\nstring = \"TopSecret\"\n\nprint(xor_strings(password, string))"}
{"prompt": "Write a Python program to extract the first letter of each word in a sentence and print it as an acronym.\nThis is a sample sentence. ", "label": "SIS", "predict": "TIAS"}
{"prompt": "Design a class to convert Fahrenheit to Celsius in Python. ", "label": "class TempConverter:\n\n    def __init__(self, temp_in_fahrenheit):\n        self.temp_in_fahrenheit = temp_in_fahrenheit\n\n    def convert_f_to_c(self):\n        temp_in_celsius = (self.temp_in_fahrenheit - 32) * 5/9\n        return temp_in_celsius", "predict": "class FahrenheitToCelsiusConverter:\n    def __init__(self, fahrenheit):\n        self.fahrenheit = fahrenheit\n    \n    def convert(self):\n        celsius = (self.fahrenheit - 32) * 5/9\n        return celsius"}
{"prompt": "Generate Python code that uses a list comprehension to take a given list of numbers and multiple each by 10.\n[1,2,3,4] ", "label": "[x * 10 for x in [1,2,3,4]]", "predict": "nums = [1,2,3,4]\n\nnew_list = [x * 10 for x in nums]\nprint(new_list)"}
{"prompt": "Create a function in Python that takes two matrices and prints the result of their subtraction.\nA = [[2, 5, 3],\n     [1, 4, 7],\n     [5, 2, 9]]\n\nB = [[4, 7, 0],\n     [3, 2, 8],\n     [1, 3, 6]] ", "label": "def subtractMatrix(A, B): \n  \n    rowsA = len(A) \n    colsA = len(A[0]) \n    rowsB = len(B) \n    colsB = len(B[0]) \n  \n    # Checking if the given two matrix are of same size \n    if rowsB != rowsA or colsA != colsB: \n        print(\"ERROR\") \n     \n    # Subtracting corresponding elements \n    C = [[0 for j in range(colsA)] for i in range(rowsB)] \n    for i in range(rowsA): \n        for j in range(colsB): \n            C[i][j] = A[i][j] - B[i][j] \n    return C", "predict": "def matrix_subtraction(A, B):\n    result = [[0, 0, 0],\n              [0, 0, 0],\n              [0, 0, 0]]\n\n    for i in range(len(A)):\n        for j in range(len(A[0])):\n            result[i][j] = A[i][j] - B[i][j]\n\n    for row in result:\n        print(row)\n\nmatrix_subtraction(A, B)"}
{"prompt": "Optimize a Python function that returns the value at the index of an array (list) of size n.\n[20, 30, 50, 70, 90] ", "label": "def getValueAtIndex(arr, index):\n    return arr[index] if index >= 0 and index < len(arr) else 0\n\nprint(getValueAtIndex([20, 30, 50, 70, 90], 3)) # 70", "predict": "def getValueAtIndex(arr, index): \n    return arr[index] \n\n# Driver code \narr = [20, 30, 50, 70, 90] \nindex = 3\nprint(getValueAtIndex(arr, index))"}
{"prompt": "Create a data structure in Python to represent a classical play. ", "label": "class Play(object):\n    def __init__(self):\n        self.characters = []\n        self.scenes = []\n        self.title = \"\"\n    \n    def add_character(self, character):\n        self.characters.append(character)\n    \n    def add_scene(self, scene):\n        self.scenes.append(scene)\n    \n    def set_title(self, title):\n        self.title = title", "predict": "class Play:\n    def __init__(self, title, author, year, acts):\n        self.title = title\n        self.author = author\n        self.year = year\n        self.acts = acts\n\n    def get_title(self):\n        return self.title\n\n    def get_author(self):\n        return self.author\n\n    def get_year(self):\n        return self.year\n\n    def get_acts(self):\n        return self.acts"}
{"prompt": "Write a python program for searching for a specific product within a given list of products.\nproducts = [\"Apple\", \"Banana\", \"Cherry\", \"Grape\"]\n\nsearch_query = \"Grape\" ", "label": "# Define a search function\ndef search (products, query):\n  # Loop through list\n  for product in products:\n    if product == query: \n      # Return the product index if it matches the query\n      return products.index(product)\n\n# Get the index of the item\nresult = search(products, search_query)\n\n# Print the result\nprint(result)", "predict": "def search_product(products, search_query):\n for product in products:\n if product == search_query:\n return product\n\nprint(search_product(products, search_query))"}
{"prompt": "Create a Machine Learning model in Python that predicts the direction of the stock market using historical data.\nSample of 1000 days of State Street Corporation's stock prices. ", "label": "import pandas as pd \nimport numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\n\ndf = pd.read_csv('stock_prices.csv')\ny = df['direction'].values\nX = df.drop(['date', 'direction'], axis=1).values\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)\n\nknn = KNeighborsClassifier(n_neighbors=3)\nknn.fit(X_train, y_train)\n\naccuracy = knn.score(X_test, y_test)\nprint(\"Model accuracy: {}%\".format(round(accuracy*100, 2)))", "predict": "import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\n\n# Read the data\ndata = pd.read_csv('stock_data.csv')\n\n# Extract the features and labels\nX = data.iloc[:, 0:-1]\ny = data.iloc[:, -1]\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train the model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Make predictions\ny_pred = model.predict(X_test)\n\n# Calculate the error\nerror = mean_squared_error(y_test, y_pred)\n\n# Print the results\nprint('Error:', error)"}
{"prompt": "In Python print out the first 10 numbers of the Fibonacci sequence. ", "label": "a, b = 0, 1\nfor i in range(10):\n  print(a)\n  a, b = b, a + b\n\n# Output:\n0\n1\n1\n2\n3\n5\n8\n13\n21\n34", "predict": "a, b = 0, 1\nfor i in range(10):\n    print(a)\n    a, b = b, a + b"}
{"prompt": "Create a Python program to generate a random list of numbers between 1 to 20 and print out the largest and second largest ones.\nNot applicable ", "label": "import random\n\nmyList = []\nfor i in range(20):\n myList.append(random.randint(1,20))\n\nprint(\"List of random numbers:\", myList)\n\nmyList.sort()\n\nlargest_num = myList[len(myList)-1]\nsecond_largest_num = myList[len(myList)-2]\n\nprint('Largest number:', largest_num)\nprint('Second-largest number:', second_largest_num)", "predict": "import random\n\n# Generate a random list of 20 numbers between 1 and 20\nlist_of_nums = random.sample(range(1, 21), 20)\n\n# Print out the largest and second largest numbers\nlargest_num = max(list_of_nums)\nsecond_largest_num = sorted(list_of_nums)[-2]\n\nprint(\"The largest number is\", largest_num)\nprint(\"The second largest number is\", second_largest_num)"}